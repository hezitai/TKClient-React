'use strict';
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.LC = f()};if(window && (!window.LC || (window.LC && !window.LC.shapeToJSON))){window.LC=f();}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var INFINITE, JSONToShape, LiterallyCanvas, Pencil, actions, bindEvents, createShape, math, ref, renderShapeToContext, renderShapeToSVG, renderSnapshotToImage, renderSnapshotToSVG, shapeToJSON, util,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

actions = require('./actions');

bindEvents = require('./bindEvents');

math = require('./math');

ref = require('./shapes'), createShape = ref.createShape, shapeToJSON = ref.shapeToJSON, JSONToShape = ref.JSONToShape;

renderShapeToContext = require('./canvasRenderer').renderShapeToContext;

renderShapeToSVG = require('./svgRenderer').renderShapeToSVG;

renderSnapshotToImage = require('./renderSnapshotToImage');

renderSnapshotToSVG = require('./renderSnapshotToSVG');

Pencil = require('../tools/Pencil');

util = require('./util');


INFINITE = 'infinite';

module.exports = LiterallyCanvas = (function() {
  function LiterallyCanvas(arg1, arg2) {
    this.setImageSize = bind(this.setImageSize, this);
    var containerEl, opts;
    opts = null;
    containerEl = null;
    if (arg1 instanceof HTMLElement) {
      containerEl = arg1;
      opts = arg2;
    } else {
      opts = arg1;
    }
    this.opts = opts || {};
    this.config = {
      zoomMin: opts.zoomMin || 0.2,
      zoomMax: opts.zoomMax || 4.0,
      zoomStep: opts.zoomStep || 0.2
    };
    this.colors = {
      primary: opts.primaryColor || '#000',
      secondary: opts.secondaryColor || '#fff',
      background: opts.backgroundColor || 'transparent'
    };

    this.watermarkImage = opts.watermarkImage;
    this.watermarkScale = opts.watermarkScale || 1;
    this.backgroundCanvas = document.createElement('canvas');
    this.backgroundCanvas.className = "background-canvas" ;
    this.backgroundCtx = this.backgroundCanvas.getContext('2d');
    this.canvas = document.createElement('canvas');
    this.canvas.style['background-color'] = 'transparent';
    this.buffer = document.createElement('canvas');
    this.buffer.style['background-color'] = 'transparent';
    this.ctx = this.canvas.getContext('2d');
    this.bufferCtx = this.buffer.getContext('2d');
    this.backingScale = util.getBackingScale(this.ctx);
    this.backgroundShapes = opts.backgroundShapes || [];
    this._shapesInProgress = [];
    this.shapes = [];
    this.undoStack = [];
    this.redoStack = [];
    this.isDragging = false;
    /*qiushao: 添加是否可以在白板上画*/
    this.isDrawAble = true ; //默认可以画
    this.isTmpDrawAble = true ; //临时权限，默认可以画
	this.rotateDeg = 0 ;  //旋转角度
    this.position = {
      x: 0 ,
      y: 0
    };
    this.scale = 1.0;
    this.setTool(new this.opts.tools[0](this));
    this.width = opts.imageSize.width || INFINITE;
    this.height = opts.imageSize.height || INFINITE;
    this.setZoom(this.scale);
    if (opts.snapshot) {
      this.loadSnapshot(opts.snapshot);
    }
    this.isBound = false;
    if (containerEl) {
      this.bindToElement(containerEl);
    }

  }

  LiterallyCanvas.prototype.setWatermarkImageToLcBackground = function(watermarkImageToLcBackground){
      this.watermarkImageToLcBackground = watermarkImageToLcBackground ;
      this.containerEl.setAttribute('watermarkImageToLcBackground' , this.watermarkImageToLcBackground) ;
  };

  LiterallyCanvas.prototype.bindToElement = function(containerEl) {
    var ref1, repaintAll;
    if (this.containerEl) {
      console.warn("Trying to bind Literally Canvas to a DOM element more than once is unsupported.");
      return;
    }
    this.containerEl = containerEl;
    this._unsubscribeEvents = bindEvents(this, this.containerEl, this.opts.keyboardShortcuts);
    this.containerEl.style['background-color'] = this.colors.background;
    this.containerEl.appendChild(this.backgroundCanvas);
    this.containerEl.appendChild(this.canvas);
    this.isBound = true;
    repaintAll = (function(_this) {
      return function() {
        _this.keepPanInImageBounds();
        return _this.repaintAllLayers();
      };
    })(this);
    this.respondToSizeChange = util.matchElementSize(this.containerEl, [this.backgroundCanvas, this.canvas], this.backingScale, repaintAll);
    if (this.watermarkImage) {
      this.watermarkImage.onload = (function(_this) {
        return function() {
          return _this.repaintLayer('background');
        };
      })(this);
    }
    if ((ref1 = this.tool) != null) {
      ref1.didBecomeActive(this);
    }
    return repaintAll();
  };

  LiterallyCanvas.prototype._teardown = function() {
    var ref1;
    if ((ref1 = this.tool) != null) {
      ref1.willBecomeInactive(this);
    }
    if (typeof this._unsubscribeEvents === "function") {
      this._unsubscribeEvents();
    }
    this.tool = null;
    this.containerEl = null;
    return this.isBound = false;
  };

  LiterallyCanvas.prototype.trigger = function(name, data) {
    this.canvas.dispatchEvent(new CustomEvent(name, {
      detail: data
    }));
    return null;
  };

  LiterallyCanvas.prototype.on = function(name, fn) {
    var wrapper;
    wrapper = function(e) {
      return fn(e.detail);
    };
    this.canvas.addEventListener(name, wrapper);
    return (function(_this) {
      return function() {
        return _this.canvas.removeEventListener(name, wrapper);
      };
    })(this);
  };

  LiterallyCanvas.prototype.getRenderScale = function() {
    return this.scale * this.backingScale;
  };

  LiterallyCanvas.prototype.clientCoordsToDrawingCoords = function(x, y) {
    var x1 , y1 ;
    var canvasWidth  = this.canvas.width ;
    var canvasHeight  = this.canvas.height ;
    switch (this.rotateDeg){
        case 0:
          x1 = x ;
          y1 = y ;
          break;
        case 90:
          x1 = y ;
          y1 = canvasHeight - x ;
          break;
        case 180:
            x1 = canvasWidth - x ;
            y1 = canvasHeight - y ;
          break;
        case 270:
            x1 = canvasWidth - y ;
            y1 = x;
          break;
        default:
            x1 = x ;
            y1 = y ;
            break
    }
    return {
      x: (x1 * this.backingScale - this.position.x) / this.getRenderScale(),
      y: (y1 * this.backingScale - this.position.y) / this.getRenderScale()
    };
  };

  LiterallyCanvas.prototype.drawingCoordsToClientCoords = function(x, y) {
    return {
      x: x * this.getRenderScale() + this.position.x,
      y: y * this.getRenderScale() + this.position.y
    };
  };

  LiterallyCanvas.prototype.setImageSize = function(width, height) {
    this.width = width || INFINITE;
    this.height = height || INFINITE;
    this.keepPanInImageBounds();
    this.repaintAllLayers();
    return this.trigger('imageSizeChange', {
      width: this.width,
      height: this.height
    });
  };

  LiterallyCanvas.prototype.setTool = function(tool) {
    var ref1;
    if (this.isBound) {
      if ((ref1 = this.tool) != null) {
        ref1.willBecomeInactive(this);
      }
    }
    this.tool = tool;
    this.trigger('toolChange', {
      tool: tool
    });
    if (this.isBound) {
      return this.tool.didBecomeActive(this);
    }
  };

  LiterallyCanvas.prototype.setShapesInProgress = function(newVal) {
    return this._shapesInProgress = newVal;
  };

  LiterallyCanvas.prototype.pointerDown = function(x, y) {
    var p;
    p = this.clientCoordsToDrawingCoords(x, y);
    if (this.tool.usesSimpleAPI) {
      this.tool.begin(p.x, p.y, this);
      this.isDragging = true;
      return this.trigger("drawStart", {
        tool: this.tool
      });
    } else {
      this.isDragging = true;
      return this.trigger("lc-pointerdown", {
        tool: this.tool,
        x: p.x,
        y: p.y,
        rawX: x,
        rawY: y
      });
    }
  };

  LiterallyCanvas.prototype.pointerMove = function(x, y) {
    return util.requestAnimationFrame((function(_this) {
      return function() {
        var p, ref1;
        p = _this.clientCoordsToDrawingCoords(x, y);
        if ((ref1 = _this.tool) != null ? ref1.usesSimpleAPI : void 0) {
          if (_this.isDragging) {
            _this.tool["continue"](p.x, p.y, _this);
            return _this.trigger("drawContinue", {
              tool: _this.tool
            });
          }
        } else {
          if (_this.isDragging) {
            return _this.trigger("lc-pointerdrag", {
              tool: _this.tool,
              x: p.x,
              y: p.y,
              rawX: x,
              rawY: y
            });
          } else {
            return _this.trigger("lc-pointermove", {
              tool: _this.tool,
              x: p.x,
              y: p.y,
              rawX: x,
              rawY: y
            });
          }
        }
      };
    })(this));
  };

  LiterallyCanvas.prototype.pointerUp = function(x, y) {
    var p;
    p = this.clientCoordsToDrawingCoords(x, y);
    if (this.tool.usesSimpleAPI) {
      if (this.isDragging) {
        this.tool.end(p.x, p.y, this);
        this.isDragging = false;
        return this.trigger("drawEnd", {
          tool: this.tool
        });
      }
    } else {
      this.isDragging = false;
      return this.trigger("lc-pointerup", {
        tool: this.tool,
        x: p.x,
        y: p.y,
        rawX: x,
        rawY: y
      });
    }
  };

  LiterallyCanvas.prototype.setColor = function(name, color) {
    this.colors[name] = color;
    if (!this.isBound) {
      return;
    }
    switch (name) {
      case 'background':
        this.containerEl.style.backgroundColor = this.colors.background;
        this.repaintLayer('background');
        break;
      case 'primary':
        this.repaintLayer('main');
        break;
      case 'secondary':
        this.repaintLayer('main');
    }
    this.trigger(name + "ColorChange", this.colors[name]);
    if (name === 'background') {
      return this.trigger("drawingChange");
    }
  };

  LiterallyCanvas.prototype.getColor = function(name) {
    return this.colors[name];
  };

	/*qiushao: 这里传入doNotPaint 来决定添加shape时是否重画*/
  LiterallyCanvas.prototype.saveShape = function(shape, triggerShapeSaveEvent, previousShapeId, doNotPaint  , authorUserId , seq ) {
  		doNotPaint = (doNotPaint!=undefined && doNotPaint!=null ? doNotPaint : false) ;
	    if (triggerShapeSaveEvent == null) {
	      triggerShapeSaveEvent = true;
	    }
	    if (previousShapeId == null) {
	      previousShapeId = null;
	    }
	    if (!previousShapeId) {
	      previousShapeId = this.shapes.length ? this.shapes[this.shapes.length - 1].id : null;
	    }
        shape.authorUserId = authorUserId ;
	    var executeId = "saveShape_"+new Date().getTime()+parseInt(Math.random()*10000) ;
	    var addShapeAction = new actions.AddShapeAction(this, shape, previousShapeId, executeId ,  doNotPaint , authorUserId , seq) ;
	    this.execute( addShapeAction );
	    if(this.isDrawAble){
	    	if (triggerShapeSaveEvent) {
		      this.trigger('shapeSave', {
		          shape: shape,
		          previousShapeId: previousShapeId ,
		          /*qiushao: 添加执行ID --- executeId*/
		          executeId:executeId ,
		          shapeId:shape.id ,
                  action:{
                      actionName:addShapeAction.actionName
                  }
		      });
	    	}
	    }
	    return this.trigger('drawingChange');
  };

  LiterallyCanvas.prototype.pan = function(x, y) {
    return this.setPan(this.position.x - x, this.position.y - y);
  };

  LiterallyCanvas.prototype.keepPanInImageBounds = function() {
    var ref1, renderScale, x, y;
    renderScale = this.getRenderScale();
    ref1 = this.position, x = ref1.x, y = ref1.y;
    if (this.width !== INFINITE) {
      if (this.canvas.width > this.width * renderScale) {
        x = (this.canvas.width - this.width * renderScale) / 2;
      } else {
        x = Math.max(Math.min(0, x), this.canvas.width - this.width * renderScale);
      }
    }
    if (this.height !== INFINITE) {
      if (this.canvas.height > this.height * renderScale) {
        y = (this.canvas.height - this.height * renderScale) / 2;
      } else {
        y = Math.max(Math.min(0, y), this.canvas.height - this.height * renderScale);
      }
    }
    return this.position = {
      x: x,
      y: y
    };
  };

  LiterallyCanvas.prototype.setPan = function(x, y) {
    this.position = {
      x: x,
      y: y
    };
    this.keepPanInImageBounds();
    this.repaintAllLayers();
    return this.trigger('pan', {
      x: this.position.x,
      y: this.position.y
    });
  };

  LiterallyCanvas.prototype.zoom = function(factor) {
    var newScale;
    newScale = this.scale + factor;
    newScale = Math.max(newScale, this.config.zoomMin);
    newScale = Math.min(newScale, this.config.zoomMax);
    newScale = Math.round(newScale * 100) / 100;
    return this.setZoom(newScale);
  };

  LiterallyCanvas.prototype.setZoom = function(scale) {
    var oldScale;
    oldScale = this.scale;
    this.scale = scale;
    this.position.x = math.scalePositionScalar(this.position.x, this.canvas.width, oldScale, this.scale);
    this.position.y = math.scalePositionScalar(this.position.y, this.canvas.height, oldScale, this.scale);
    this.keepPanInImageBounds();
    this.repaintAllLayers();
    return this.trigger('zoom', {
      oldScale: oldScale,
      newScale: this.scale
    });
  };

  LiterallyCanvas.prototype.setPdf = function(newPdf, callback) {
    var options = {
      pdfOpenParams: {
        pagemode: "bookmarks",
        navpanes: 0,
        statusbar:0,
        toolbar: 0,
        view: "FitV"
      },
      forcePDFJS: true,
      PDFJS_URL: newPdf
    };
    var id = '#' + this.customCanvasBackgroundElement.id;
    window.PDFObject.embed(
      newPdf,
      id,
      options
    );
    if(callback&&typeof callback === 'function'){
      callback()
    }
  }

  LiterallyCanvas.prototype.setWatermarkImage = function(newImage) {
    this.watermarkImage = newImage;
    if(this.watermarkImageToLcBackground){
        util.addImageOnload(newImage, (function(_this) {
            return function() {
                return _this.repaintLayer('background');
            };
        })(this));
        if (newImage.width) {
            return this.repaintLayer('background');
        }
    }else{
        this.customCanvasBackgroundElement.style.backgroundImage = 'url('+JSON.stringify(newImage.src)+')';
    }
  };

  LiterallyCanvas.prototype.repaintAllLayers = function() {
    var i, key, len, ref1;
    ref1 = ['background', 'main'];
    for (i = 0, len = ref1.length; i < len; i++) {
      key = ref1[i];
      this.repaintLayer(key);
    }
    return null;
  };

  LiterallyCanvas.prototype.repaintLayer = function(repaintLayerKey, dirty) {
    var retryCallback;
    if (dirty == null) {
      dirty = repaintLayerKey === 'main';
    }
    if (!this.isBound) {
      return;
    }
    switch (repaintLayerKey) {
      case 'background':
        if(!this.watermarkImageToLcBackground){
            return ;
        }
        this.backgroundCtx.clearRect(0, 0, this.backgroundCanvas.width, this.backgroundCanvas.height);
        retryCallback = (function(_this) {
          return function() {
            return _this.repaintLayer('background');
          };
        })(this);
        if (this.watermarkImage) {
          this._renderWatermark(this.backgroundCtx, true, retryCallback);
        }
        this.draw(this.backgroundShapes, this.backgroundCtx, retryCallback);
        break;
      case 'main':
        retryCallback = (function(_this) {
          return function() {
            return _this.repaintLayer('main', true);
          };
        })(this);
        if (dirty) {
          this.buffer.width = this.canvas.width;
          this.buffer.height = this.canvas.height;
          this.bufferCtx.clearRect(0, 0, this.buffer.width, this.buffer.height);
          this.draw(this.shapes, this.bufferCtx, retryCallback);
        }
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        if (this.canvas.width > 0 && this.canvas.height > 0) {
          this.ctx.fillStyle = '#ccc';
          this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
          this.clipped(((function(_this) {
            return function() {
              _this.ctx.clearRect(0, 0, _this.canvas.width, _this.canvas.height);
              return _this.ctx.drawImage(_this.buffer, 0, 0);
            };
          })(this)), this.ctx);
          this.clipped(((function(_this) {
            return function() {
              return _this.transformed((function() {
                var i, len, ref1, results, shape;
                ref1 = _this._shapesInProgress;
                results = [];
                for (i = 0, len = ref1.length; i < len; i++) {
                  shape = ref1[i];
                  results.push(renderShapeToContext(_this.ctx, shape, {
                    bufferCtx: _this.bufferCtx,
                    shouldOnlyDrawLatest: true
                  }));
                }
                return results;
              }), _this.ctx, _this.bufferCtx);
            };
          })(this)), this.ctx, this.bufferCtx);
        }
    }
    return this.trigger('repaint', {
      layerKey: repaintLayerKey
    });
  };

  LiterallyCanvas.prototype._renderWatermark = function(ctx, worryAboutRetina, retryCallback) {
    if (worryAboutRetina == null) {
      worryAboutRetina = true;
    }
    if (!this.watermarkImage.width) {
      this.watermarkImage.onload = retryCallback;
      return;
    }
    ctx.save();
    ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2);
    ctx.scale(this.watermarkScale, this.watermarkScale);
    if (worryAboutRetina) {
      ctx.scale(this.backingScale, this.backingScale);
    }
    ctx.drawImage(this.watermarkImage, -this.watermarkImage.width / 2, -this.watermarkImage.height / 2);
    return ctx.restore();
  };

  LiterallyCanvas.prototype.drawShapeInProgress = function(shape) {
    this.repaintLayer('main', false);
    return this.clipped(((function(_this) {
      return function() {
        return _this.transformed((function() {
          return renderShapeToContext(_this.ctx, shape, {
            bufferCtx: _this.bufferCtx,
            shouldOnlyDrawLatest: true
          });
        }), _this.ctx, _this.bufferCtx);
      };
    })(this)), this.ctx, this.bufferCtx);
  };

  LiterallyCanvas.prototype.draw = function(shapes, ctx, retryCallback) {
  		var drawShapes;
	    if (!shapes.length) {
	      return;
	    }
	    drawShapes = (function(_this) {
	      return function() {
	        var i, len, results, shape;
	        results = [];
	        for (i = 0, len = shapes.length; i < len; i++) {
	          shape = shapes[i];
	          results.push(renderShapeToContext(ctx, shape, {
	            retryCallback: retryCallback
	          }));
	        }
	        return results;
	      };
	    })(this);
	    return this.clipped(((function(_this) {
	      return function() {
	        return _this.transformed(drawShapes, ctx);
	      };
	    })(this)), ctx);
  };

  LiterallyCanvas.prototype.clipped = function() {
		var contexts, ctx, fn, height, i, j, len, len1, results, width, x, y;
    fn = arguments[0], contexts = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    x = this.width === INFINITE ? 0 : this.position.x;
    y = this.height === INFINITE ? 0 : this.position.y;
    width = (function() {
      switch (this.width) {
        case INFINITE:
          return this.canvas.width;
        default:
          return this.width * this.getRenderScale();
      }
    }).call(this);
    height = (function() {
      switch (this.height) {
        case INFINITE:
          return this.canvas.height;
        default:
          return this.height * this.getRenderScale();
      }
    }).call(this);
    for (i = 0, len = contexts.length; i < len; i++) {
      ctx = contexts[i];
      ctx.save();
      ctx.beginPath();
      ctx.rect(x, y, width, height);
      ctx.clip();
    }
    fn();
    results = [];
    for (j = 0, len1 = contexts.length; j < len1; j++) {
      ctx = contexts[j];
      results.push(ctx.restore());
    }
    return results;
  };

  LiterallyCanvas.prototype.transformed = function() {
    var contexts, ctx, fn, i, j, len, len1, results, scale;
    fn = arguments[0], contexts = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    for (i = 0, len = contexts.length; i < len; i++) {
      ctx = contexts[i];
      ctx.save();
      ctx.translate(Math.floor(this.position.x), Math.floor(this.position.y));
      scale = this.getRenderScale();
      ctx.scale(scale, scale);
    }
    fn();
    results = [];
    for (j = 0, len1 = contexts.length; j < len1; j++) {
      ctx = contexts[j];
      results.push(ctx.restore());
    }
    return results;
  };

  LiterallyCanvas.prototype.sendClear = function (toAuthorUserId) {
      var flag = false ;
      if(toAuthorUserId){
          for(var i = 0 ; i < this.shapes.length ; i++){
            if(this.shapes[i].authorUserId === toAuthorUserId){
                flag = true ;
                break ;
            }
          }
      }else{
          flag = true ;
      }
      if(flag){
          var executeId =  "clear_"+new Date().getTime()+parseInt(Math.random()*10000) ;
          this.trigger('sendClear', {
              clearActionId:executeId ,
              action:{
                  actionName:'ClearAction'
              }
          });
      }
  };

  LiterallyCanvas.prototype.clear = function(triggerClearEvent , Id , authorUserId , toAuthorUserId , seq ) {
    var newShapes  , oldShapes  ;
    if (triggerClearEvent == null) {
      triggerClearEvent = true;
    }
    oldShapes = this.shapes;
    newShapes = [];
    if(this.shapes.length === 0){
        return ;
    }
    if(toAuthorUserId && this.shapes.length > 0){
      var isHasShapeToAuthorUserId = false ;
       for(var i= 0 ; i < this.shapes.length  ; i++ ){
          if(this.shapes[i].authorUserId !== toAuthorUserId){
              newShapes.push( this.shapes[i] );
          }else{
              isHasShapeToAuthorUserId = true ;
          }
       }
       if(!isHasShapeToAuthorUserId){
          return ;
       }
    }
    this.setShapesInProgress([]);
    /*qiushao: 添加执行该命令时的执行id --executeId*/
    var executeId = Id ? Id : "clear_"+new Date().getTime()+parseInt(Math.random()*10000) ;
    var clearAction = new actions.ClearAction(this, oldShapes, newShapes , executeId ,authorUserId  , toAuthorUserId , seq ) ;
    this.execute(clearAction);
    this.repaintLayer('main');
    if (triggerClearEvent) {
      this.trigger('clear', {
      	  clearActionId:executeId ,
      	  oldShapes:oldShapes ,
          action:{
      	    actionName:clearAction.actionName
          }
      });
    }
    return this.trigger('drawingChange', {});
  };

  LiterallyCanvas.prototype.execute = function(action) {
    this.undoStack.push(action);
    action["do"]();
    /*qiushao: 添加清空redoStack时执行的事件*/
   	if( this.redoStack.length>0 ){
   		this.trigger('doClearRedoStack', {
	    	doClearRedoStack:this.redoStack
	    });
   	}
    return this.redoStack = [];
  };


	/*qiushao:  扩展功能---取指定数据栈位置的白板数据 , 暂时不需要扩展*/
	LiterallyCanvas.prototype.goToStackPosition  = function(position){
		 /* var undoLength =  this.undoStack.length ;
		  var redoLength =  this.redoStack.length ;
		  if(undoLength == 0 && redoLength == 0){
		  	//白板shape为空
		  	return ;
		  }
		  if(position < undoLength-1){
		  	var delSize = undoLength - (position+1) ;
		  	var delArr = this.undoStack.splice(position , delSize ) ;
		  	for (var i=delArr.length-1 ; i>=0 ; i--) {
		  		 	this.redoStack.push(delArr[i]);
		  	}
		  }*/
	}

  LiterallyCanvas.prototype.sendUndo = function (toAuthorUserId) {
        if (!this.undoStack.length) {
            return;
        }
        var action ;
        if(toAuthorUserId){
            for(var i= this.undoStack.length - 1 ; i>=0 ; i--){
               if(toAuthorUserId === this.undoStack[i].authorUserId){
                   action =  this.undoStack[i] ;
                   break ;
               }
            }
        }else{
            action = this.undoStack[this.undoStack.length - 1];
        }
        if(action){
            action.executeId = "undo_"+new Date().getTime()+parseInt(Math.random()*10000) ;
            this.trigger('sendUndo', {
                action: action  ,
                executeId:action.executeId
            });
        }
    };

  LiterallyCanvas.prototype.undo = function(triggerUndoEvent  , Id ) {
    if (triggerUndoEvent == null) {
	      triggerUndoEvent = true;
    }
    var action;
    if (!this.undoStack.length) {
      return;
    }
	  /*qiushao: 添加Id来决定撤销那一条*/
    if( Id ){
    	for (var i= this.undoStack.length-1 ; i>=0 ; i-- ) {
	    		if(this.undoStack[i] && this.undoStack[i].id === Id){
	    		 	  action = this.undoStack[i];
	    		 	  this.undoStack.splice(i,1);
	    		 	  break ;
	    		}
    	}
    	/*if(!action){
    		action = this.undoStack.pop();
    	}*/
    }else{
    	action = this.undoStack.pop();
    }
    if(action){
        action.undo();
      /*qiushao: 更改执行ID*/
        action.executeId = "undo_"+new Date().getTime()+parseInt(Math.random()*10000) ;
        this.redoStack.push(action);
        this.undoStack.sort(function(obj1, obj2){
            if ( obj1 === undefined || !obj1.hasOwnProperty('seq') || obj2 === undefined || !obj2.hasOwnProperty('seq') || obj1.seq === undefined || obj2.seq === undefined ){
                return 0;
            }else{
                return obj1.seq - obj2.seq;
            }
        });
        this.redoStack.sort(function(obj1, obj2){
            if ( obj1 === undefined || !obj1.hasOwnProperty('seq') || obj2 === undefined || !obj2.hasOwnProperty('seq') || obj1.seq === undefined || obj2.seq === undefined ){
                return 0;
            }else {
                return obj2.seq - obj1.seq;
            }
        });
        if (triggerUndoEvent) {
            this.trigger('undo', {
                action: action  ,
                executeId:action.executeId
            });
        }
        return this.trigger('drawingChange', {});
    }

  };

  LiterallyCanvas.prototype.sendRedo = function (toAuthorUserId) {
      if (!this.redoStack.length) {
          return;
      }
      var action ;
      if(toAuthorUserId){
          for(var i= this.redoStack.length - 1 ; i>=0 ; i--){
              if(toAuthorUserId === this.redoStack[i].authorUserId){
                  action =  this.redoStack[i] ;
                  break ;
              }
          }
      }else{
          action = this.redoStack[this.redoStack.length - 1];
      }
      if(action){
          action.executeId = "redo_"+new Date().getTime()+parseInt(Math.random()*10000) ;
          this.trigger('sendRedo', {
              action: action  ,
              executeId:action.executeId
          });
      }
  };

  LiterallyCanvas.prototype.redo = function(triggerRedoEvent , Id) {
    if (triggerRedoEvent == null) {
	      triggerRedoEvent = true;
	    }
		var action;
	    if (!this.redoStack.length) {
	      return;
	    }
	    /*qiushao: 添加shapeId来决定恢复那一条*/
	    if( Id ){
	    	for (var i= this.redoStack.length-1 ; i>=0 ; i-- ) {
	    		if(this.redoStack[i] && this.redoStack[i].id === Id){
	    		 	  action = this.redoStack[i];
	    		 	  this.redoStack.splice(i,1);
	    		 	  break ;
	    		}
	    	}
	      /*if(!action){
    		  action = this.redoStack.pop();
    		}*/
	    }else{
	    	action = this.redoStack.pop();
	    }
	    if(action){
            this.undoStack.push(action);
          /*qiushao: 这里添加恢复忽略doNotPaint设置*/
            var isIgnoreDoNotPaint = true ;
            action["do"](isIgnoreDoNotPaint);
            this.undoStack.sort(function(obj1, obj2){
                if ( obj1 === undefined || !obj1.hasOwnProperty('seq') || obj2 === undefined || !obj2.hasOwnProperty('seq') || obj1.seq === undefined || obj2.seq === undefined ){
                    return 0;
                }else{
                    return obj1.seq - obj2.seq;
                }
            });
            this.redoStack.sort(function(obj1, obj2){
                if ( obj1 === undefined || !obj1.hasOwnProperty('seq') || obj2 === undefined || !obj2.hasOwnProperty('seq') || obj1.seq === undefined || obj2.seq === undefined ){
                    return 0;
                }else {
                    return obj2.seq - obj1.seq;
                }
            });
          /*qiushao: 更改执行ID*/
            action.executeId = "redo_"+new Date().getTime()+parseInt(Math.random()*10000) ;
            if (triggerRedoEvent) {
                this.trigger('redo', {
                    action: action ,
                    executeId:action.executeId
                });
            }
            return this.trigger('drawingChange', {});
        }
  };

  LiterallyCanvas.prototype.canUndo = function() {
    if(this.isOnlyUndoRedoClearMyselfShape && this.myselfId){
        var isCanUndo = false ;
        for(var i = this.undoStack.length  - 1 ; i >= 0 ; i-- ){
            if(this.undoStack[i].authorUserId == this.myselfId){
                isCanUndo = true ;
                break;
            }
        }
        return isCanUndo ;
    }else{
        return !!this.undoStack.length;
    }
  };

  LiterallyCanvas.prototype.canRedo = function() {
      if(this.isOnlyUndoRedoClearMyselfShape && this.myselfId){
          var isCanRedo = false ;
          for(var i = 0 ; i< this.redoStack.length ; i++){
              if(this.redoStack[i].authorUserId == this.myselfId){
                  isCanRedo = true ;
              }
          }
          return isCanRedo ;
      }else{
          return !!this.redoStack.length;
      }
  };

  LiterallyCanvas.prototype.getPixel = function(x, y) {
    var p, pixel;
    p = this.drawingCoordsToClientCoords(x, y);
    pixel = this.ctx.getImageData(p.x, p.y, 1, 1).data;
    if (pixel[3]) {
      return "rgb(" + pixel[0] + ", " + pixel[1] + ", " + pixel[2] + ")";
    } else {
      return null;
    }
  };

  LiterallyCanvas.prototype.getContentBounds = function() {
    return util.getBoundingRect((this.shapes.concat(this.backgroundShapes)).map(function(s) {
      return s.getBoundingRect();
    }), this.width === INFINITE ? 0 : this.width, this.height === INFINITE ? 0 : this.height);
  };

  LiterallyCanvas.prototype.getDefaultImageRect = function(explicitSize, margin) {
    var s;
    if (explicitSize == null) {
      explicitSize = {
        width: 0,
        height: 0
      };
    }
    if (margin == null) {
      margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
    return util.getDefaultImageRect((function() {
      var i, len, ref1, results;
      ref1 = this.shapes.concat(this.backgroundShapes);
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        s = ref1[i];
        results.push(s.getBoundingRect(this.ctx));
      }
      return results;
    }).call(this), explicitSize, margin);
  };

  LiterallyCanvas.prototype.getImage = function(opts) {
    if (opts == null) {
      opts = {};
    }
    if (opts.includeWatermark == null) {
      opts.includeWatermark = true;
    }
    if (opts.scaleDownRetina == null) {
      opts.scaleDownRetina = true;
    }
    if (opts.scale == null) {
      opts.scale = 1;
    }
    if (!opts.scaleDownRetina) {
      opts.scale *= this.backingScale;
    }
    if (opts.includeWatermark) {
      opts.watermarkImage = this.watermarkImage;
      opts.watermarkScale = this.watermarkScale;
      if (!opts.scaleDownRetina) {
        opts.watermarkScale *= this.backingScale;
      }
    }
    return renderSnapshotToImage(this.getSnapshot(), opts);
  };

  LiterallyCanvas.prototype.canvasForExport = function() {
    this.repaintAllLayers();
    return util.combineCanvases(this.backgroundCanvas, this.canvas);
  };

  LiterallyCanvas.prototype.canvasWithBackground = function(backgroundImageOrCanvas) {
    return util.combineCanvases(backgroundImageOrCanvas, this.canvasForExport());
  };

  LiterallyCanvas.prototype.getSnapshot = function(keys) {
    var i, k, len, ref1, shape, snapshot;
    if (keys == null) {
      keys = null;
    }
    if (keys == null) {
      keys = ['shapes', 'imageSize', 'colors', 'position', 'scale', 'backgroundShapes'];
    }
    snapshot = {};
    ref1 = ['colors', 'position', 'scale'];
    for (i = 0, len = ref1.length; i < len; i++) {
      k = ref1[i];
      if (indexOf.call(keys, k) >= 0) {
        snapshot[k] = this[k];
      }
    }
    if (indexOf.call(keys, 'shapes') >= 0) {
      snapshot.shapes = (function() {
        var j, len1, ref2, results;
        ref2 = this.shapes;
        results = [];
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          shape = ref2[j];
          results.push(shapeToJSON(shape));
        }
        return results;
      }).call(this);
    }
    if (indexOf.call(keys, 'backgroundShapes') >= 0) {
      snapshot.backgroundShapes = (function() {
        var j, len1, ref2, results;
        ref2 = this.backgroundShapes;
        results = [];
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          shape = ref2[j];
          results.push(shapeToJSON(shape));
        }
        return results;
      }).call(this);
    }
    if (indexOf.call(keys, 'imageSize') >= 0) {
      snapshot.imageSize = {
        width: this.width,
        height: this.height
      };
    }
    return snapshot;
  };

  LiterallyCanvas.prototype.getSnapshotJSON = function() {
    console.warn("lc.getSnapshotJSON() is deprecated. use JSON.stringify(lc.getSnapshot()) instead.");
    return JSON.stringify(this.getSnapshot());
  };

  LiterallyCanvas.prototype.getSVGString = function(opts) {
    if (opts == null) {
      opts = {};
    }
    return renderSnapshotToSVG(this.getSnapshot(), opts);
  };

  LiterallyCanvas.prototype.loadSnapshot = function(snapshot) {
    var i, j, k, len, len1, ref1, ref2, s, shape, shapeRepr;
    if (!snapshot) {
      return;
    }
    if (snapshot.colors) {
      ref1 = ['primary', 'secondary', 'background'];
      for (i = 0, len = ref1.length; i < len; i++) {
        k = ref1[i];
        this.setColor(k, snapshot.colors[k]);
      }
    }
    if (snapshot.shapes) {
      this.shapes = [];
      ref2 = snapshot.shapes;
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        shapeRepr = ref2[j];
        shape = JSONToShape(shapeRepr);
        if (shape) {
          this.execute(new actions.AddShapeAction(this, shape));
        }
      }
    }
    if (snapshot.backgroundShapes) {
      this.backgroundShapes = (function() {
        var l, len2, ref3, results;
        ref3 = snapshot.backgroundShapes;
        results = [];
        for (l = 0, len2 = ref3.length; l < len2; l++) {
          s = ref3[l];
          results.push(JSONToShape(s));
        }
        return results;
      })();
    }
    if (snapshot.imageSize) {
      this.width = snapshot.imageSize.width;
      this.height = snapshot.imageSize.height;
    }
    if (snapshot.position) {
      this.position = snapshot.position;
    }
    if (snapshot.scale) {
      this.scale = snapshot.scale;
    }
    this.repaintAllLayers();
    this.trigger('snapshotLoad');
    return this.trigger('drawingChange', {});
  };

  LiterallyCanvas.prototype.loadSnapshotJSON = function(str) {
    console.warn("lc.loadSnapshotJSON() is deprecated. use lc.loadSnapshot(JSON.parse(snapshot)) instead.");
    return this.loadSnapshot(JSON.parse(str));
  };

  return LiterallyCanvas;

})();


},{"../tools/Pencil":24,"./actions":3,"./bindEvents":4,"./canvasRenderer":5,"./math":10,"./renderSnapshotToImage":11,"./renderSnapshotToSVG":12,"./shapes":13,"./svgRenderer":14,"./util":15}],2:[function(require,module,exports){
var TextRenderer, getLinesToRender, getNextLine, parseFontString;

require('./fontmetrics.js');

parseFontString = function(font) {
  var fontFamily, fontItems, fontSize, item, j, len, maybeSize, remainingFontString;
  fontItems = font.split(' ');
  fontSize = 0;
  for (j = 0, len = fontItems.length; j < len; j++) {
    item = fontItems[j];
    maybeSize = parseInt(item.replace("px", ""), 10);
    if (!isNaN(maybeSize)) {
      fontSize = maybeSize;
    }
  }
  if (!fontSize) {
    throw "Font size not found";
  }
  remainingFontString = font.substring(fontItems[0].length + 1).replace('bold ', '').replace('italic ', '').replace('underline ', '');
  fontFamily = remainingFontString;
  return {
    fontSize: fontSize,
    fontFamily: fontFamily
  };
};

getNextLine = function(ctx, text, forcedWidth) {
  var doesSubstringFit, endIndex, isEndOfString, isNonWord, isWhitespace, lastGoodIndex, lastOkayIndex, nextWordStartIndex, textToHere, wasInWord;
  if (!text.length) {
    return ['', ''];
  }
  endIndex = 0;
  lastGoodIndex = 0;
  lastOkayIndex = 0;
  wasInWord = false;
  while (true) {
    endIndex += 1;
    isEndOfString = endIndex >= text.length;
    isWhitespace = (!isEndOfString) && text[endIndex].match(/\s/);
    isNonWord = isWhitespace || isEndOfString;
    textToHere = text.substring(0, endIndex);
    doesSubstringFit = forcedWidth ? ctx.measureTextWidth(textToHere).width <= forcedWidth : true;
    if (doesSubstringFit) {
      lastOkayIndex = endIndex;
    }
    if (isNonWord && wasInWord) {
      wasInWord = false;
      if (doesSubstringFit) {
        lastGoodIndex = endIndex;
      }
    }
    wasInWord = !isWhitespace;
    if (isEndOfString || !doesSubstringFit) {
      if (doesSubstringFit) {
        return [text, ''];
      } else if (lastGoodIndex > 0) {
        nextWordStartIndex = lastGoodIndex + 1;
        while (nextWordStartIndex < text.length && text[nextWordStartIndex].match('/\s/')) {
          nextWordStartIndex += 1;
        }
        return [text.substring(0, lastGoodIndex), text.substring(nextWordStartIndex)];
      } else {
        return [text.substring(0, lastOkayIndex), text.substring(lastOkayIndex)];
      }
    }
  }
};

getLinesToRender = function(ctx, text, forcedWidth) {
  var j, len, lines, nextLine, ref, ref1, remainingText, textLine, textSplitOnLines;
  textSplitOnLines = text.split(/\r\n|\r|\n/g);
  lines = [];
  for (j = 0, len = textSplitOnLines.length; j < len; j++) {
    textLine = textSplitOnLines[j];
    ref = getNextLine(ctx, textLine, forcedWidth), nextLine = ref[0], remainingText = ref[1];
    if (nextLine) {
      while (nextLine) {
        lines.push(nextLine);
        ref1 = getNextLine(ctx, remainingText, forcedWidth), nextLine = ref1[0], remainingText = ref1[1];
      }
    } else {
      lines.push(textLine);
    }
  }
  return lines;
};

TextRenderer = (function() {
  function TextRenderer(ctx, text1, font1, forcedWidth1, forcedHeight) {
    var fontFamily, fontSize, ref;
    this.text = text1;
    this.font = font1;
    this.forcedWidth = forcedWidth1;
    this.forcedHeight = forcedHeight;
    ref = parseFontString(this.font), fontFamily = ref.fontFamily, fontSize = ref.fontSize;
    ctx.font = this.font;
    ctx.textBaseline = 'baseline';
    this.emDashWidth = ctx.measureTextWidth('—', fontSize, fontFamily).width;
    this.caratWidth = ctx.measureTextWidth('|', fontSize, fontFamily).width;
    this.lines = getLinesToRender(ctx, this.text, this.forcedWidth);
    this.metricses = this.lines.map((function(_this) {
      return function(line) {
        return ctx.measureText2(line || 'X', fontSize, _this.font);
      };
    })(this));
    this.metrics = {
      ascent: Math.max.apply(Math, this.metricses.map(function(arg) {
        var ascent;
        ascent = arg.ascent;
        return ascent;
      })),
      descent: Math.max.apply(Math, this.metricses.map(function(arg) {
        var descent;
        descent = arg.descent;
        return descent;
      })),
      fontsize: Math.max.apply(Math, this.metricses.map(function(arg) {
        var fontsize;
        fontsize = arg.fontsize;
        return fontsize;
      })),
      leading: Math.max.apply(Math, this.metricses.map(function(arg) {
        var leading;
        leading = arg.leading;
        return leading;
      })),
      width: Math.max.apply(Math, this.metricses.map(function(arg) {
        var width;
        width = arg.width;
        return width;
      })),
      height: Math.max.apply(Math, this.metricses.map(function(arg) {
        var height;
        height = arg.height;
        return height;
      })),
      bounds: {
        minx: Math.min.apply(Math, this.metricses.map(function(arg) {
          var bounds;
          bounds = arg.bounds;
          return bounds.minx;
        })),
        miny: Math.min.apply(Math, this.metricses.map(function(arg) {
          var bounds;
          bounds = arg.bounds;
          return bounds.miny;
        })),
        maxx: Math.max.apply(Math, this.metricses.map(function(arg) {
          var bounds;
          bounds = arg.bounds;
          return bounds.maxx;
        })),
        maxy: Math.max.apply(Math, this.metricses.map(function(arg) {
          var bounds;
          bounds = arg.bounds;
          return bounds.maxy;
        }))
      }
    };
    this.boundingBoxWidth = Math.ceil(this.metrics.width);
  }

  TextRenderer.prototype.draw = function(ctx, x, y) {
    var i, j, len, line, ref, results;
    ctx.textBaseline = 'top';
    ctx.font = this.font;
    i = 0;
    ref = this.lines;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      line = ref[j];
      ctx.fillText(line, x, y + i * this.metrics.leading);
      results.push(i += 1);
    }
    return results;
  };

  TextRenderer.prototype.getWidth = function(isEditing) {
    if (isEditing == null) {
      isEditing = false;
    }
    if (this.forcedWidth) {
      return this.forcedWidth;
    } else {
      if (isEditing) {
        return this.metrics.bounds.maxx + this.caratWidth;
      } else {
        return this.metrics.bounds.maxx;
      }
    }
  };

  TextRenderer.prototype.getHeight = function() {
    return this.forcedHeight || (this.metrics.leading * this.lines.length);
  };

  return TextRenderer;

})();

module.exports = TextRenderer;


},{"./fontmetrics.js":7}],3:[function(require,module,exports){
var AddShapeAction, ClearAction;

ClearAction = (function() {
  function ClearAction(lc1, oldShapes, newShapes1  , executeId1 , authorUserId1  , toAuthorUserId1 , seq1 ) {
    this.lc = lc1;
    this.oldShapes = oldShapes;
    this.newShapes = newShapes1;
    /*qiushao:添加ClearAction 的执行ID*/
    this.executeId = executeId1 ;
    this.id = executeId1 ;
    this.clearActionId = executeId1 ;
    this.authorUserId = authorUserId1 ;
    this.toAuthorUserId = toAuthorUserId1 ;
    this.seq = seq1 ;
    this.actions = [] ;
    this.actionName = 'ClearAction';
  }

  ClearAction.prototype["do"] = function() {
      var tempShapes = [] ;
      this.actions = [] ;
      for(var i= this.lc.undoStack.length  - 1 ; i >= 0 ; i--){
          var action = this.lc.undoStack[i] ;
          if( action.actionName === "AddShapeAction" ){
              if(this.toAuthorUserId){
                  if(this.lc.undoStack[i].authorUserId === this.toAuthorUserId ){
                      this.actions.push(action);
                      this.lc.undoStack.splice(i , 1) ;
                  }else{
                      tempShapes.push ( this.lc.undoStack[i].shape );
                  }
              }else{
                  this.actions.push(action);
                  this.lc.undoStack.splice(i , 1) ;
              }
          }
      }
      this.lc.shapes = tempShapes.reverse() ;
      // this.lc.shapes = this.newShapes;
      return this.lc.repaintLayer('main');
  };

  ClearAction.prototype.undo = function() {
      var tempShapes = [] ;
      this.lc.undoStack = this.lc.undoStack.concat(this.actions) ;
      this.actions = [] ;
      this.lc.undoStack.sort(function(obj1, obj2){
          if ( obj1 === undefined || !obj1.hasOwnProperty('seq') || obj2 === undefined || !obj2.hasOwnProperty('seq') || obj1.seq === undefined || obj2.seq === undefined ){
              return 0;
          }else{
              return obj1.seq - obj2.seq;
          }
      });
      for(var i= 0 ; i< this.lc.undoStack.length ; i++){
          var action = this.lc.undoStack[i] ;
          if( action.actionName === "AddShapeAction" ){
              tempShapes.push ( this.lc.undoStack[i].shape );
          }
      }
      this.lc.shapes = tempShapes ;

      // this.lc.shapes = this.oldShapes;
      return this.lc.repaintLayer('main');
  };

  return ClearAction;

})();

AddShapeAction = (function() {
  function AddShapeAction(lc1, shape1, previousShapeId, executeId , doNotPaint1 , authorUserId , seq ) {
    this.lc = lc1;
    this.shape = shape1;
    this.previousShapeId = previousShapeId != null ? previousShapeId : null;
    this.doNotPaint = doNotPaint1;
    /*qiushao: 添加AddShapeAction 的执行id*/
    this.executeId = executeId;
    this.shapeId = shape1.id ;
    this.id = shape1.id  ;
    this.authorUserId = authorUserId ;
    this.seq = seq ;
    this.actionName = 'AddShapeAction';
  }

	/*qiushao: 这里添加忽略doNotPaint设置以及根据doNotPaint来决定是否重画*/
  AddShapeAction.prototype["do"] = function(isIgnoreDoNotPaint , notRepaintLayerMain) {
  	isIgnoreDoNotPaint = isIgnoreDoNotPaint !== undefined && isIgnoreDoNotPaint !== null ? isIgnoreDoNotPaint : false ;
    var found, i, len, newShapes, ref, shape;
    if (!this.lc.shapes.length || this.lc.shapes[this.lc.shapes.length - 1].id === this.previousShapeId || this.previousShapeId === null) {
      this.lc.shapes.push(this.shape);
    } else {
      newShapes = [];
      found = false;
      ref = this.lc.shapes;
      for (i = 0, len = ref.length; i < len; i++) {
        shape = ref[i];
        newShapes.push(shape);
        if (shape.id === this.previousShapeId) {
          newShapes.push(this.shape);
          found = true;
        }
      }
      if (!found) {
        newShapes.push(this.shape);
      }
      this.lc.shapes = newShapes;
    }
    if(!isIgnoreDoNotPaint){ //不忽略doNotPaint
    	if (this.doNotPaint){
	    	return;
	    }
    }
    if(notRepaintLayerMain){
        return;
    }
    return this.lc.repaintLayer('main');
  };

  AddShapeAction.prototype.undo = function() {
    var i, len, newShapes, ref, shape;
    if (this.lc.shapes[this.lc.shapes.length - 1].id === this.shape.id) {
      this.lc.shapes.pop();
    } else {
      newShapes = [];
      ref = this.lc.shapes;
      for (i = 0, len = ref.length; i < len; i++) {
        shape = ref[i];
        if (shape.id !== this.shape.id) {
          newShapes.push(shape);
        }
      }
      this.lc.shapes = newShapes;
    }
    return this.lc.repaintLayer('main');
  };

  return AddShapeAction;

})();

module.exports = {
  ClearAction: ClearAction,
  AddShapeAction: AddShapeAction
};


},{}],4:[function(require,module,exports){
var bindEvents, buttonIsDown, coordsForTouchEvent, position;

coordsForTouchEvent = function(el, e) {
  var p, tx, ty;
  tx = e.changedTouches[0].clientX;
  ty = e.changedTouches[0].clientY;
  p = el.getBoundingClientRect();
  return [tx - p.left, ty - p.top];
};

position = function(el, e) {
  var p;
  p = el.getBoundingClientRect();
  return {
    left: e.clientX - p.left,
    top: e.clientY - p.top
  };
};

buttonIsDown = function(e) {
  if (e.buttons != null) {
    return e.buttons === 1;
  } else {
    return e.which > 0;
  }
};

module.exports = bindEvents = function(lc, canvas, panWithKeyboard) {
  var listener, mouseMoveListener, mouseUpListener, touchEndListener, touchMoveListener, unsubs;
  if (panWithKeyboard == null) {
    panWithKeyboard = false;
  }
  unsubs = [];
  mouseMoveListener = (function(_this) {
    return function(e) {
      var p;
      e.preventDefault();
      p = position(canvas, e);
      return lc.pointerMove(p.left, p.top);
    };
  })(this);
  mouseUpListener = (function(_this) {
    return function(e) {
      var p;
      e.preventDefault();
      canvas.onselectstart = function() {
        return true;
      };
      p = position(canvas, e);
      lc.pointerUp(p.left, p.top);
      try{
          var iframes =  document.getElementsByTagName('iframe');
          if(iframes && iframes.length>0){
              for(var i =0 ; i<iframes.length ; i++){
                  var iframe = iframes[i];
                  var iframeParent = iframe.parentNode ;
                  if(iframeParent){
                      var ifreamTempLayers = iframeParent.getElementsByClassName('ifreamTempLayer') ;
                      if(ifreamTempLayers && ifreamTempLayers.length>0){
                          for(var j=ifreamTempLayers.length-1 ; j>=0 ; j--){
                              iframeParent.removeChild(ifreamTempLayers[j]);
                          }
                      }
                  }
              }
          }
      }catch (e){
          console.error('tklc error:' , e);
      }
      document.removeEventListener('mousemove', mouseMoveListener);
      document.removeEventListener('mouseup', mouseUpListener);
      return canvas.addEventListener('mousemove', mouseMoveListener);
    };
  })(this);
  canvas.addEventListener('mousedown', (function(_this) {
    return function(e) {
      var down, p;
      if (e.target.tagName.toLowerCase() !== 'canvas') {
        return;
      }
      down = true;
      e.preventDefault();
      canvas.onselectstart = function() {
        return false;
      };
      p = position(canvas, e);
      lc.pointerDown(p.left, p.top);
      try{
         var iframes =  document.getElementsByTagName('iframe');
        if(iframes && iframes.length>0){
            for(var i =0 ; i<iframes.length ; i++){
                var iframe = iframes[i];
                var iframeParent = iframe.parentNode ;
                if(iframeParent){
                    var ifreamTempLayers = iframeParent.getElementsByClassName('ifreamTempLayer') ;
                    if(ifreamTempLayers && ifreamTempLayers.length>0){
                        for(var j=ifreamTempLayers.length -1 ; j>=0; j--){
                            iframeParent.removeChild(ifreamTempLayers[j]);
                        }
                    }
                    var ifreamTempLayerElementDiv = document.createElement('div');
                    ifreamTempLayerElementDiv.className = 'ifreamTempLayer' ;
                    iframeParent.appendChild(ifreamTempLayerElementDiv);
                }
            }
        }
      }catch (e){
          console.error('tklc error:' , e);
      }
      canvas.removeEventListener('mousemove', mouseMoveListener);
      document.addEventListener('mousemove', mouseMoveListener);
      return document.addEventListener('mouseup', mouseUpListener);
    };
  })(this));
  touchMoveListener = function(e) {
    e.preventDefault();
    return lc.pointerMove.apply(lc, coordsForTouchEvent(canvas, e));
  };
  touchEndListener = function(e) {
    e.preventDefault();
    try{
      var iframes =  document.getElementsByTagName('iframe');
      if(iframes && iframes.length>0){
          for(var i =0 ; i<iframes.length ; i++){
              var iframe = iframes[i];
              var iframeParent = iframe.parentNode ;
              if(iframeParent){
                  var ifreamTempLayers = iframeParent.getElementsByClassName('ifreamTempLayer') ;
                  if(ifreamTempLayers && ifreamTempLayers.length>0){
                      for(var j=ifreamTempLayers.length-1 ; j>=0 ; j--){
                          iframeParent.removeChild(ifreamTempLayers[j]);
                      }
                  }
              }
          }
      }
    }catch (e){
        console.error('tklc error:' , e);
    }
    lc.pointerUp.apply(lc, coordsForTouchEvent(canvas, e));
    document.removeEventListener('touchmove', touchMoveListener);
    document.removeEventListener('touchend', touchEndListener);
    return document.removeEventListener('touchcancel', touchEndListener);
  };
  canvas.addEventListener('touchstart', function(e) {
    if (e.target.tagName.toLowerCase() !== 'canvas') {
      return;
    }
    e.preventDefault();
    try{
      var iframes =  document.getElementsByTagName('iframe');
      if(iframes && iframes.length>0){
          for(var i =0 ; i<iframes.length ; i++){
              var iframe = iframes[i];
              var iframeParent = iframe.parentNode ;
              if(iframeParent){
                  var ifreamTempLayers = iframeParent.getElementsByClassName('ifreamTempLayer') ;
                  if(ifreamTempLayers && ifreamTempLayers.length>0){
                      for(var j=ifreamTempLayers.length-1 ; j>=0 ; j--){
                          iframeParent.removeChild(ifreamTempLayers[j]);
                      }
                  }
                  var ifreamTempLayerElementDiv = document.createElement('div');
                  ifreamTempLayerElementDiv.className = 'ifreamTempLayer' ;
                  iframeParent.appendChild(ifreamTempLayerElementDiv);
              }
          }
      }
    }catch (e){
        console.error('tklc error:' , e);
    }
    if (e.touches.length === 1) {
      lc.pointerDown.apply(lc, coordsForTouchEvent(canvas, e));
      document.addEventListener('touchmove', touchMoveListener);
      document.addEventListener('touchend', touchEndListener);
      return document.addEventListener('touchcancel', touchEndListener);
    } else {
      return lc.pointerMove.apply(lc, coordsForTouchEvent(canvas, e));
    }
  });
  if (panWithKeyboard) {
    console.warn("Keyboard panning is deprecated.");
    listener = function(e) {
      switch (e.keyCode) {
        case 37:
          lc.pan(-10, 0);
          break;
        case 38:
          lc.pan(0, -10);
          break;
        case 39:
          lc.pan(10, 0);
          break;
        case 40:
          lc.pan(0, 10);
      }
      return lc.repaintAllLayers();
    };
    //qiushao: 这里取消了画板键盘监听
//  document.addEventListener('keydown', listener);
    unsubs.push(function() {
      return document.removeEventListener(listener);
    });
  }
  return function() {
    var f, i, len, results;
    results = [];
    for (i = 0, len = unsubs.length; i < len; i++) {
      f = unsubs[i];
      results.push(f());
    }
    return results;
  };
};


},{}],5:[function(require,module,exports){
var _drawRawLinePath, defineCanvasRenderer, drawErasedLinePath, drawErasedLinePathLatest, drawLinePath, drawLinePathLatest, lineEndCapShapes, noop, renderShapeToCanvas, renderShapeToContext, renderers;

lineEndCapShapes = require('./lineEndCapShapes');

renderers = {};

defineCanvasRenderer = function(shapeName, drawFunc, drawLatestFunc) {
  return renderers[shapeName] = {
    drawFunc: drawFunc,
    drawLatestFunc: drawLatestFunc
  };
};

noop = function() {};

renderShapeToContext = function(ctx, shape, opts) {
  var bufferCtx;
  if (opts == null) {
    opts = {};
  }
  if (opts.shouldIgnoreUnsupportedShapes == null) {
    opts.shouldIgnoreUnsupportedShapes = false;
  }
  if (opts.retryCallback == null) {
    opts.retryCallback = noop;
  }
  if (opts.shouldOnlyDrawLatest == null) {
    opts.shouldOnlyDrawLatest = false;
  }
  if (opts.bufferCtx == null) {
    opts.bufferCtx = null;
  }
  bufferCtx = opts.bufferCtx;
  if (renderers[shape.className]) {
    if (opts.shouldOnlyDrawLatest && renderers[shape.className].drawLatestFunc) {
      return renderers[shape.className].drawLatestFunc(ctx, bufferCtx, shape, opts.retryCallback);
    } else {
      return renderers[shape.className].drawFunc(ctx, shape, opts.retryCallback);
    }
  } else if (opts.shouldIgnoreUnsupportedShapes) {
    return console.warn("Can't render shape of type " + shape.className + " to canvas");
  } else {
    throw "Can't render shape of type " + shape.className + " to canvas";
  }
};

renderShapeToCanvas = function(canvas, shape, opts) {
  return renderShapeToContext(canvas.getContext('2d'), shape, opts);
};

defineCanvasRenderer('Rectangle', function(ctx, shape) {
  var x, y;
  x = shape.x;
  y = shape.y;
  if (shape.strokeWidth % 2 !== 0) {
    x += 0.5;
    y += 0.5;
  }
  ctx.fillStyle = shape.fillColor;
  ctx.fillRect(x, y, shape.width, shape.height);
  ctx.lineWidth = shape.strokeWidth;
  ctx.strokeStyle = shape.strokeColor;
  return ctx.strokeRect(x, y, shape.width, shape.height);
});

defineCanvasRenderer('Ellipse', function(ctx, shape) {
  var centerX, centerY, halfHeight, halfWidth;
  ctx.save();
  halfWidth = Math.floor(shape.width / 2);
  halfHeight = Math.floor(shape.height / 2);
  centerX = shape.x + halfWidth;
	centerY = shape.y + halfHeight;
	ctx.translate(centerX, centerY);
  ctx.scale(1, Math.abs(shape.height / shape.width));
  ctx.beginPath();
  ctx.arc(0, 0, Math.abs(halfWidth), 0, Math.PI * 2);
  ctx.closePath();
  ctx.restore();
  ctx.fillStyle = shape.fillColor;
  ctx.fill();
  ctx.lineWidth = shape.strokeWidth;
  ctx.strokeStyle = shape.strokeColor;
  return ctx.stroke();
});

defineCanvasRenderer('SelectionBox', (function() {
  var _drawHandle;
  _drawHandle = function(ctx, arg, handleSize) {
    var x, y;
    x = arg.x, y = arg.y;
    if (handleSize === 0) {
      return;
    }
    ctx.fillStyle = '#fff';
    ctx.fillRect(x, y, handleSize, handleSize);
    ctx.strokeStyle = '#000';
    return ctx.strokeRect(x, y, handleSize, handleSize);
  };
  return function(ctx, shape) {
    _drawHandle(ctx, shape.getTopLeftHandleRect(), shape.handleSize);
    _drawHandle(ctx, shape.getTopRightHandleRect(), shape.handleSize);
    _drawHandle(ctx, shape.getBottomLeftHandleRect(), shape.handleSize);
    _drawHandle(ctx, shape.getBottomRightHandleRect(), shape.handleSize);
    if (shape.backgroundColor) {
      ctx.fillStyle = shape.backgroundColor;
      ctx.fillRect(shape._br.x - shape.margin, shape._br.y - shape.margin, shape._br.width + shape.margin * 2, shape._br.height + shape.margin * 2);
    }
    ctx.lineWidth = 1;
    ctx.strokeStyle = '#000';
    ctx.setLineDash([2, 4]);
    ctx.strokeRect(shape._br.x - shape.margin, shape._br.y - shape.margin, shape._br.width + shape.margin * 2, shape._br.height + shape.margin * 2);
    return ctx.setLineDash([]);
  };
})());

defineCanvasRenderer('Image', function(ctx, shape, retryCallback) {
  if (shape.image.width) {
    if (shape.scale === 1) {
      return ctx.drawImage(shape.image, shape.x, shape.y);
    } else {
      return ctx.drawImage(shape.image, shape.x, shape.y, shape.image.width * shape.scale, shape.image.height * shape.scale);
    }
  } else if (retryCallback) {
    return shape.image.onload = retryCallback;
  }
});

defineCanvasRenderer('Line', function(ctx, shape) {
  var arrowWidth, x1, x2, y1, y2;
  if (shape.x1 === shape.x2 && shape.y1 === shape.y2) {
    return;
  }
  x1 = shape.x1;
  x2 = shape.x2;
  y1 = shape.y1;
  y2 = shape.y2;
  if (shape.strokeWidth % 2 !== 0) {
    x1 += 0.5;
    x2 += 0.5;
    y1 += 0.5;
    y2 += 0.5;
  }
  ctx.lineWidth = shape.strokeWidth;
  ctx.strokeStyle = shape.color;
  ctx.lineCap = shape.capStyle;
  if (shape.dash) {
    ctx.setLineDash(shape.dash);
  }
  ctx.beginPath();
  ctx.moveTo(x1, y1);
  ctx.lineTo(x2, y2);
  ctx.stroke();
  if (shape.dash) {
    ctx.setLineDash([]);
  }
  arrowWidth = Math.max(shape.strokeWidth * 2.2, 5);
  if (shape.endCapShapes[0]) {
    lineEndCapShapes[shape.endCapShapes[0]].drawToCanvas(ctx, x1, y1, Math.atan2(y1 - y2, x1 - x2), arrowWidth, shape.color);
  }
  if (shape.endCapShapes[1]) {
    return lineEndCapShapes[shape.endCapShapes[1]].drawToCanvas(ctx, x2, y2, Math.atan2(y2 - y1, x2 - x1), arrowWidth, shape.color);
  }
});

_drawRawLinePath = function(ctx, points, close, lineCap) {
  var i, len, point, ref;
  if (close == null) {
    close = false;
  }
  if (lineCap == null) {
    lineCap = 'round';
  }
  if (!points.length) {
    return;
  }
  ctx.lineCap = lineCap;
  ctx.strokeStyle = points[0].color;
  ctx.lineWidth = points[0].size;
  ctx.beginPath();
  if (points[0].size % 2 === 0) {
    ctx.moveTo(points[0].x, points[0].y);
  } else {
    ctx.moveTo(points[0].x + 0.5, points[0].y + 0.5);
  }
  ref = points.slice(1);
  for (i = 0, len = ref.length; i < len; i++) {
    point = ref[i];
    if (points[0].size % 2 === 0) {
      ctx.lineTo(point.x, point.y);
    } else {
      ctx.lineTo(point.x + 0.5, point.y + 0.5);
    }
  }
  if (close) {
    return ctx.closePath();
  }
};

drawLinePath = function(ctx, shape) {
  _drawRawLinePath(ctx, shape.smoothedPoints);
  return ctx.stroke();
};

drawLinePathLatest = function(ctx, bufferCtx, shape) {
  var drawEnd, drawStart, segmentStart;
  if (shape.tail) {
    segmentStart = shape.smoothedPoints.length - shape.segmentSize * shape.tailSize;
    drawStart = segmentStart < shape.segmentSize * 2 ? 0 : segmentStart;
    drawEnd = segmentStart + shape.segmentSize + 1;
    _drawRawLinePath(bufferCtx, shape.smoothedPoints.slice(drawStart, drawEnd));
    return bufferCtx.stroke();
  } else {
    _drawRawLinePath(bufferCtx, shape.smoothedPoints);
    return bufferCtx.stroke();
  }
};

defineCanvasRenderer('LinePath', drawLinePath, drawLinePathLatest);

drawErasedLinePath = function(ctx, shape) {
  ctx.save();
  ctx.globalCompositeOperation = "destination-out";
  drawLinePath(ctx, shape);
  return ctx.restore();
};

drawErasedLinePathLatest = function(ctx, bufferCtx, shape) {
  ctx.save();
  ctx.globalCompositeOperation = "destination-out";
  bufferCtx.save();
  bufferCtx.globalCompositeOperation = "destination-out";
  drawLinePathLatest(ctx, bufferCtx, shape);
  ctx.restore();
  return bufferCtx.restore();
};

defineCanvasRenderer('ErasedLinePath', drawErasedLinePath, drawErasedLinePathLatest);

defineCanvasRenderer('Text', function(ctx, shape) {
  if (!shape.renderer) {
    shape._makeRenderer(ctx);
  }
  ctx.fillStyle = shape.color;
  return shape.renderer.draw(ctx, shape.x, shape.y);
});

defineCanvasRenderer('Polygon', function(ctx, shape) {
  ctx.fillStyle = shape.fillColor;
  _drawRawLinePath(ctx, shape.points, shape.isClosed, 'butt');
  ctx.fill();
  return ctx.stroke();
});

module.exports = {
  defineCanvasRenderer: defineCanvasRenderer,
  renderShapeToCanvas: renderShapeToCanvas,
  renderShapeToContext: renderShapeToContext
};


},{"./lineEndCapShapes":8}],6:[function(require,module,exports){
'use strict';

module.exports = {
  imageURLPrefix: 'lib/img',
  primaryColor: 'hsla(0, 0%, 0%, 1)',
  secondaryColor: 'hsla(0, 0%, 100%, 1)',
  backgroundColor: 'transparent',
  strokeWidths: [1, 2, 5, 10, 20, 30],
  defaultStrokeWidth: 5,
  toolbarPosition: 'top',
  keyboardShortcuts: false,
  imageSize: { width: 'infinite', height: 'infinite' },
  backgroundShapes: [],
  watermarkImage: null,
  watermarkScale: 1,
  zoomMin: 0.2,
  zoomMax: 4.0,
  zoomStep: 0.2,
  snapshot: null,
  onInit: function onInit() {},
  tools: [require('../tools/Pencil'), require('../tools/Eraser'), require('../tools/Line'), require('../tools/Rectangle'), require('../tools/Ellipse'), require('../tools/Text'), require('../tools/Polygon'), require('../tools/Pan'), require('../tools/Eyedropper')]
};

},{"../tools/Ellipse":19,"../tools/Eraser":20,"../tools/Eyedropper":21,"../tools/Line":22,"../tools/Pan":23,"../tools/Pencil":24,"../tools/Polygon":25,"../tools/Rectangle":26,"../tools/Text":28}],7:[function(require,module,exports){
"use strict";

/**
  This library rewrites the Canvas2D "measureText" function
  so that it returns a more complete metrics object.
  This library is licensed under the MIT (Expat) license,
  the text for which is included below.

** -----------------------------------------------------------------------------

  CHANGELOG:

    2012-01-21 - Whitespace handling added by Joe Turner
                 (https://github.com/oampo)

    2015-06-08 - Various hacks added by Steve Johnson

** -----------------------------------------------------------------------------

  Copyright (C) 2011 by Mike "Pomax" Kamermans

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
**/
(function () {
  var NAME = "FontMetrics Library";
  var VERSION = "1-2012.0121.1300";

  // if there is no getComputedStyle, this library won't work.
  if (!document.defaultView.getComputedStyle) {
    throw "ERROR: 'document.defaultView.getComputedStyle' not found. This library only works in browsers that can report computed CSS values.";
  }

  // store the old text metrics function on the Canvas2D prototype
  CanvasRenderingContext2D.prototype.measureTextWidth = CanvasRenderingContext2D.prototype.measureText;

  /**
   *  shortcut function for getting computed CSS values
   */
  var getCSSValue = function getCSSValue(element, property) {
    return document.defaultView.getComputedStyle(element, null).getPropertyValue(property);
  };

  // debug function
  var show = function show(canvas, ctx, xstart, w, h, metrics) {
    document.body.appendChild(canvas);
    ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)';

    ctx.beginPath();
    ctx.moveTo(xstart, 0);
    ctx.lineTo(xstart, h);
    ctx.closePath();
    ctx.stroke();

    ctx.beginPath();
    ctx.moveTo(xstart + metrics.bounds.maxx, 0);
    ctx.lineTo(xstart + metrics.bounds.maxx, h);
    ctx.closePath();
    ctx.stroke();

    ctx.beginPath();
    ctx.moveTo(0, h / 2 - metrics.ascent);
    ctx.lineTo(w, h / 2 - metrics.ascent);
    ctx.closePath();
    ctx.stroke();

    ctx.beginPath();
    ctx.moveTo(0, h / 2 + metrics.descent);
    ctx.lineTo(w, h / 2 + metrics.descent);
    ctx.closePath();
    ctx.stroke();
  };

  /**
   * The new text metrics function
   */
  CanvasRenderingContext2D.prototype.measureText2 = function (textstring, fontSize, fontString) {
    var metrics = this.measureTextWidth(textstring),
        isSpace = !/\S/.test(textstring);
    metrics.fontsize = fontSize;

    // for text lead values, we meaure a multiline text container.
    var leadDiv = document.createElement("div");
    leadDiv.style.position = "absolute";
    leadDiv.style.opacity = 0;
    leadDiv.style.font = fontString;
    leadDiv.innerHTML = textstring + "<br/>" + textstring;
    document.body.appendChild(leadDiv);

    // make some initial guess at the text leading (using the standard TeX ratio)
    metrics.leading = 1.2 * fontSize;

    // then we try to get the real value from the browser
    var leadDivHeight = getCSSValue(leadDiv, "height");
    leadDivHeight = leadDivHeight.replace("px", "");
    if (leadDivHeight >= fontSize * 2) {
      metrics.leading = leadDivHeight / 2 | 0;
    }
    document.body.removeChild(leadDiv);

    // if we're not dealing with white space, we can compute metrics
    if (!isSpace) {
      // Have characters, so measure the text
      var canvas = document.createElement("canvas");
      var padding = 100;
      canvas.width = metrics.width + padding;
      canvas.height = 3 * fontSize;
      canvas.style.opacity = 1;
      canvas.style.font = fontString;
      var ctx = canvas.getContext("2d");
      ctx.font = fontString;

      var w = canvas.width,
          h = canvas.height,
          baseline = h / 2;

      // Set all canvas pixeldata values to 255, with all the content
      // data being 0. This lets us scan for data[i] != 255.
      ctx.fillStyle = "white";
      ctx.fillRect(-1, -1, w + 2, h + 2);
      ctx.fillStyle = "black";
      ctx.fillText(textstring, padding / 2, baseline);
      var pixelData = ctx.getImageData(0, 0, w, h).data;

      // canvas pixel data is w*4 by h*4, because R, G, B and A are separate,
      // consecutive values in the array, rather than stored as 32 bit ints.
      var i = 0,
          w4 = w * 4,
          len = pixelData.length;

      // Finding the ascent uses a normal, forward scanline
      while (++i < len && pixelData[i] === 255) {}
      var ascent = i / w4 | 0;

      // Finding the descent uses a reverse scanline
      i = len - 1;
      while (--i > 0 && pixelData[i] === 255) {}
      var descent = i / w4 | 0;

      // find the min-x coordinate
      for (i = 0; i < len && pixelData[i] === 255;) {
        i += w4;
        if (i >= len) {
          i = i - len + 4;
        }
      }
      var minx = i % w4 / 4 | 0;

      // find the max-x coordinate
      var step = 1;
      for (i = len - 3; i >= 0 && pixelData[i] === 255;) {
        i -= w4;
        if (i < 0) {
          i = len - 3 - step++ * 4;
        }
      }
      var maxx = i % w4 / 4 + 1 | 0;

      // set font metrics
      metrics.ascent = baseline - ascent;
      metrics.descent = descent - baseline;
      metrics.bounds = { minx: minx - padding / 2,
        maxx: maxx - padding / 2,
        miny: 0,
        maxy: descent - ascent };
      metrics.height = 1 + (descent - ascent);
    }

    // if we ARE dealing with whitespace, most values will just be zero.
    else {
        // Only whitespace, so we can't measure the text
        metrics.ascent = 0;
        metrics.descent = 0;
        metrics.bounds = { minx: 0,
          maxx: metrics.width, // Best guess
          miny: 0,
          maxy: 0 };
        metrics.height = 0;
      }
    return metrics;
  };
})();

},{}],8:[function(require,module,exports){
module.exports = {
  arrow: (function() {
    var getPoints;
    getPoints = function(x, y, angle, width, length) {
      return [
        {
          x: x + Math.cos(angle + Math.PI / 2) * width / 2,
          y: y + Math.sin(angle + Math.PI / 2) * width / 2
        }, {
          x: x + Math.cos(angle) * length,
          y: y + Math.sin(angle) * length
        }, {
          x: x + Math.cos(angle - Math.PI / 2) * width / 2,
          y: y + Math.sin(angle - Math.PI / 2) * width / 2
        }
      ];
    };
    return {
      drawToCanvas: function(ctx, x, y, angle, width, color, length) {
        var points;
        if (length == null) {
          length = 0;
        }
        length = length || width;
        ctx.fillStyle = color;
        ctx.lineWidth = 0;
        ctx.strokeStyle = 'transparent';
        ctx.beginPath();
        points = getPoints(x, y, angle, width, length);
        ctx.moveTo(points[0].x, points[0].y);
        ctx.lineTo(points[1].x, points[1].y);
        ctx.lineTo(points[2].x, points[2].y);
        return ctx.fill();
      },
      svg: function(x, y, angle, width, color, length) {
        var points;
        if (length == null) {
          length = 0;
        }
        length = length || width;
        points = getPoints(x, y, angle, width, length);
        return "<polygon fill='" + color + "' stroke='none' points='" + (points.map(function(p) {
          return p.x + "," + p.y;
        })) + "' />";
      }
    };
  })()
};


},{}],9:[function(require,module,exports){
var _, localize, strings;

strings = {};

localize = function(localStrings) {
  return strings = localStrings;
};

_ = function(string) {
  var translation;
  translation = strings[string];
  return translation || string;
};

module.exports = {
  localize: localize,
  _: _
};


},{}],10:[function(require,module,exports){
var Point, _slope, math, normals, unit, util;

Point = require('./shapes').Point;

util = require('./util');

math = {};

math.toPoly = function(line) {
  var i, index, len, n, point, polyLeft, polyRight;
  polyLeft = [];
  polyRight = [];
  index = 0;
  for (i = 0, len = line.length; i < len; i++) {
    point = line[i];
    n = normals(point, _slope(line, index));
    polyLeft = polyLeft.concat([n[0]]);
    polyRight = [n[1]].concat(polyRight);
    index += 1;
  }
  return polyLeft.concat(polyRight);
};

_slope = function(line, index) {
  var point;
  if (line.length < 3) {
    point = {
      x: 0,
      y: 0
    };
  }
  if (index === 0) {
    point = _slope(line, index + 1);
  } else if (index === line.length - 1) {
    point = _slope(line, index - 1);
  } else {
    point = math.diff(line[index - 1], line[index + 1]);
  }
  return point;
};

math.diff = function(a, b) {
  return {
    x: b.x - a.x,
    y: b.y - a.y
  };
};

unit = function(vector) {
  var length;
  length = math.len(vector);
  return {
    x: vector.x / length,
    y: vector.y / length
  };
};

normals = function(p, slope) {
  slope = unit(slope);
  slope.x = slope.x * p.size / 2;
  slope.y = slope.y * p.size / 2;
  return [
    {
      x: p.x - slope.y,
      y: p.y + slope.x,
      color: p.color
    }, {
      x: p.x + slope.y,
      y: p.y - slope.x,
      color: p.color
    }
  ];
};

math.len = function(vector) {
  return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
};

math.scalePositionScalar = function(val, viewportSize, oldScale, newScale) {
  var newSize, oldSize;
  oldSize = viewportSize * oldScale;
  newSize = viewportSize * newScale;
  return val + (oldSize - newSize) / 2;
};

module.exports = math;


},{"./shapes":13,"./util":15}],11:[function(require,module,exports){
var INFINITE, JSONToShape, renderWatermark, util;

util = require('./util');

JSONToShape = require('./shapes').JSONToShape;

INFINITE = 'infinite';

renderWatermark = function(ctx, image, scale) {
  if (!image.width) {
    return;
  }
  ctx.save();
  ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2);
  ctx.scale(scale, scale);
  ctx.drawImage(image, -image.width / 2, -image.height / 2);
  return ctx.restore();
};

module.exports = function(snapshot, opts) {
  var allShapes, backgroundShapes, colors, imageSize, s, shapes, watermarkCanvas, watermarkCtx;
  if (opts == null) {
    opts = {};
  }
  if (opts.scale == null) {
    opts.scale = 1;
  }
  shapes = (function() {
    var i, len, ref, results;
    ref = snapshot.shapes;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      s = ref[i];
      results.push(JSONToShape(s));
    }
    return results;
  })();
  backgroundShapes = [];
  if (snapshot.backgroundShapes) {
    backgroundShapes = (function() {
      var i, len, ref, results;
      ref = snapshot.backgroundShapes;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        s = ref[i];
        results.push(JSONToShape(s));
      }
      return results;
    })();
  }
  if (opts.margin == null) {
    opts.margin = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }
  imageSize = snapshot.imageSize || {
    width: INFINITE,
    height: INFINITE
  };
  colors = snapshot.colors || {
    background: 'transparent'
  };
  allShapes = shapes.concat(backgroundShapes);
  watermarkCanvas = document.createElement('canvas');
  watermarkCtx = watermarkCanvas.getContext('2d');
  if (opts.rect) {
    opts.rect.x -= opts.margin.left;
    opts.rect.y -= opts.margin.top;
    opts.rect.width += opts.margin.left + opts.margin.right;
    opts.rect.height += opts.margin.top + opts.margin.bottom;
  } else {
    opts.rect = util.getDefaultImageRect((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = allShapes.length; i < len; i++) {
        s = allShapes[i];
        results.push(s.getBoundingRect(watermarkCtx));
      }
      return results;
    })(), imageSize, opts.margin);
  }
  watermarkCanvas.width = opts.rect.width * opts.scale;
  watermarkCanvas.height = opts.rect.height * opts.scale;
  watermarkCtx.fillStyle = colors.background;
  watermarkCtx.fillRect(0, 0, watermarkCanvas.width, watermarkCanvas.height);
  if (!(opts.rect.width && opts.rect.height)) {
    return null;
  }
  if (opts.watermarkImage) {
    renderWatermark(watermarkCtx, opts.watermarkImage, opts.watermarkScale);
  }
  return util.combineCanvases(watermarkCanvas, util.renderShapes(backgroundShapes, opts.rect, opts.scale), util.renderShapes(shapes, opts.rect, opts.scale));
};


},{"./shapes":13,"./util":15}],12:[function(require,module,exports){
var INFINITE, JSONToShape, util;

util = require('./util');

JSONToShape = require('./shapes').JSONToShape;

INFINITE = 'infinite';

module.exports = function(snapshot, opts) {
  var allShapes, backgroundShapes, colors, ctx, dummyCanvas, imageSize, s, shapes;
  if (opts == null) {
    opts = {};
  }
  shapes = (function() {
    var i, len, ref, results;
    ref = snapshot.shapes;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      s = ref[i];
      results.push(JSONToShape(s));
    }
    return results;
  })();
  backgroundShapes = [];
  if (snapshot.backgroundShapes) {
    backgroundShapes = (function() {
      var i, len, ref, results;
      ref = snapshot.backgroundShapes;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        s = ref[i];
        results.push(JSONToShape(s));
      }
      return results;
    })();
  }
  if (opts.margin == null) {
    opts.margin = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }
  imageSize = snapshot.imageSize || {
    width: INFINITE,
    height: INFINITE
  };
  colors = snapshot.colors || {
    background: 'transparent'
  };
  allShapes = shapes.concat(backgroundShapes);
  dummyCanvas = document.createElement('canvas');
  ctx = dummyCanvas.getContext('2d');
  if (opts.rect) {
    opts.rect.x -= opts.margin.left;
    opts.rect.y -= opts.margin.top;
    opts.rect.width += opts.margin.left + opts.margin.right;
    opts.rect.height += opts.margin.top + opts.margin.bottom;
  } else {
    opts.rect = util.getDefaultImageRect((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = allShapes.length; i < len; i++) {
        s = allShapes[i];
        results.push(s.getBoundingRect(ctx));
      }
      return results;
    })(), imageSize, opts.margin);
  }
  return LC.renderShapesToSVG(backgroundShapes.concat(shapes), opts.rect, colors.background);
};


},{"./shapes":13,"./util":15}],13:[function(require,module,exports){
var JSONToShape, LinePath, TextRenderer, _createLinePathFromData, _doAllPointsShareStyle, _dual, _mid, _refine, bspline, createShape, defineCanvasRenderer, defineSVGRenderer, defineShape, lineEndCapShapes, linePathFuncs, ref, ref1, renderShapeToContext, renderShapeToSVG, shapeToJSON, shapes, util;

util = require('./util');

TextRenderer = require('./TextRenderer');

lineEndCapShapes = require('./lineEndCapShapes');

ref = require('./canvasRenderer'), defineCanvasRenderer = ref.defineCanvasRenderer, renderShapeToContext = ref.renderShapeToContext;

ref1 = require('./svgRenderer'), defineSVGRenderer = ref1.defineSVGRenderer, renderShapeToSVG = ref1.renderShapeToSVG;

shapes = {};

defineShape = function(name, props) {
  var Shape, drawFunc, drawLatestFunc, k, legacyDrawFunc, legacyDrawLatestFunc, legacySVGFunc, svgFunc;
  Shape = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    props.constructor.call(this, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    return this;
  };
  Shape.prototype.className = name;
  Shape.fromJSON = props.fromJSON;
  if (props.draw) {
    legacyDrawFunc = props.draw;
    legacyDrawLatestFunc = props.draw || function(ctx, bufferCtx, retryCallback) {
      return this.draw(ctx, bufferCtx, retryCallback);
    };
    drawFunc = function(ctx, shape, retryCallback) {
      return legacyDrawFunc.call(shape, ctx, retryCallback);
    };
    drawLatestFunc = function(ctx, bufferCtx, shape, retryCallback) {
      return legacyDrawLatestFunc.call(shape, ctx, bufferCtx, retryCallback);
    };
    delete props.draw;
    if (props.drawLatest) {
      delete props.drawLatest;
    }
    defineCanvasRenderer(name, drawFunc, drawLatestFunc);
  }
  if (props.toSVG) {
    legacySVGFunc = props.toSVG;
    svgFunc = function(shape) {
      return legacySVGFunc.call(shape);
    };
    delete props.toSVG;
    defineSVGRenderer(name, svgFunc);
  }
  Shape.prototype.draw = function(ctx, retryCallback) {
    return renderShapeToContext(ctx, this, {
      retryCallback: retryCallback
    });
  };
  Shape.prototype.drawLatest = function(ctx, bufferCtx, retryCallback) {
    return renderShapeToContext(ctx, this, {
      retryCallback: retryCallback,
      bufferCtx: bufferCtx,
      shouldOnlyDrawLatest: true
    });
  };
  Shape.prototype.toSVG = function() {
    return renderShapeToSVG(this);
  };
  for (k in props) {
    if (k !== 'fromJSON') {
      Shape.prototype[k] = props[k];
    }
  }
  shapes[name] = Shape;
  return Shape;
};

createShape = function(name, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var s;
  s = new shapes[name](a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  s.id = util.getGUID();
  return s;
};

JSONToShape = function(arg) {
  var className, data, id, shape;
  className = arg.className, data = arg.data, id = arg.id;
  if (className in shapes) {
    shape = shapes[className].fromJSON(data);
    if (shape) {
      if (id) {
        shape.id = id;
      }
      return shape;
    } else {
      console.log('Unreadable shape:', className, data);
      return null;
    }
  } else {
    console.log("Unknown shape:", className, data);
    return null;
  }
};

shapeToJSON = function(shape) {
  return {
    className: shape.className,
    data: shape.toJSON(),
    id: shape.id
  };
};

bspline = function(points, order) {
  if (!order) {
    return points;
  }
  return bspline(_dual(_dual(_refine(points))), order - 1);
};

_refine = function(points) {
  var index, len, point, q, refined;
  points = [points[0]].concat(points).concat(util.last(points));
  refined = [];
  index = 0;
  for (q = 0, len = points.length; q < len; q++) {
    point = points[q];
    refined[index * 2] = point;
    if (points[index + 1]) {
      refined[index * 2 + 1] = _mid(point, points[index + 1]);
    }
    index += 1;
  }
  return refined;
};

_dual = function(points) {
  var dualed, index, len, point, q;
  dualed = [];
  index = 0;
  for (q = 0, len = points.length; q < len; q++) {
    point = points[q];
    if (points[index + 1]) {
      dualed[index] = _mid(point, points[index + 1]);
    }
    index += 1;
  }
  return dualed;
};

_mid = function(a, b) {
  return createShape('Point', {
    x: a.x + ((b.x - a.x) / 2),
    y: a.y + ((b.y - a.y) / 2),
    size: a.size + ((b.size - a.size) / 2),
    color: a.color
  });
};

defineShape('Image', {
  constructor: function(args) {
    if (args == null) {
      args = {};
    }
    this.x = args.x || 0;
    this.y = args.y || 0;
    this.scale = args.scale || 1;
    return this.image = args.image || null;
  },
  getBoundingRect: function() {
    return {
      x: this.x,
      y: this.y,
      width: this.image.width * this.scale,
      height: this.image.height * this.scale
    };
  },
  toJSON: function() {
    return {
      x: this.x,
      y: this.y,
      imageSrc: this.image.src,
      imageObject: this.image,
      scale: this.scale
    };
  },
  fromJSON: function(data) {
    var img, ref2;
    img = null;
    if ((ref2 = data.imageObject) != null ? ref2.width : void 0) {
      img = data.imageObject;
    } else {
      img = new Image();
      img.src = data.imageSrc;
    }
    return createShape('Image', {
      x: data.x,
      y: data.y,
      image: img,
      scale: data.scale
    });
  },
  move: function(moveInfo) {
    if (moveInfo == null) {
      moveInfo = {};
    }
    this.x = this.x - moveInfo.xDiff;
    return this.y = this.y - moveInfo.yDiff;
  },
  setUpperLeft: function(upperLeft) {
    if (upperLeft == null) {
      upperLeft = {};
    }
    this.x = upperLeft.x;
    return this.y = upperLeft.y;
  }
});

defineShape('Rectangle', {
  constructor: function(args) {
    if (args == null) {
      args = {};
    }
    this.x = args.x || 0;
    this.y = args.y || 0;
    this.width = args.width || 0;
    this.height = args.height || 0;
    this.strokeWidth = args.strokeWidth || 1;
    this.strokeColor = args.strokeColor || 'black';
    return this.fillColor = args.fillColor || 'transparent';
  },
  getBoundingRect: function() {
    return {
      x: this.x - this.strokeWidth / 2,
      y: this.y - this.strokeWidth / 2,
      width: this.width + this.strokeWidth,
      height: this.height + this.strokeWidth
    };
  },
  toJSON: function() {
    return {
      x: this.x,
      y: this.y,
      width: this.width,
      height: this.height,
      strokeWidth: this.strokeWidth,
      strokeColor: this.strokeColor,
      fillColor: this.fillColor
    };
  },
  fromJSON: function(data) {
    return createShape('Rectangle', data);
  },
  move: function(moveInfo) {
    if (moveInfo == null) {
      moveInfo = {};
    }
    this.x = this.x - moveInfo.xDiff;
    return this.y = this.y - moveInfo.yDiff;
  },
  setUpperLeft: function(upperLeft) {
    if (upperLeft == null) {
      upperLeft = {};
    }
    this.x = upperLeft.x;
    return this.y = upperLeft.y;
  }
});

defineShape('Ellipse', {
  constructor: function(args) {
    if (args == null) {
      args = {};
    }
    this.x = args.x || 0;
    this.y = args.y || 0;
    this.width = args.width || 0;
    this.height = args.height || 0;
    this.strokeWidth = args.strokeWidth || 1;
    this.strokeColor = args.strokeColor || 'black';
    return this.fillColor = args.fillColor || 'transparent';
  },
  getBoundingRect: function() {
    return {
      x: this.x - this.strokeWidth / 2,
      y: this.y - this.strokeWidth / 2,
      width: this.width + this.strokeWidth,
      height: this.height + this.strokeWidth
    };
  },
  toJSON: function() {
    return {
      x: this.x,
      y: this.y,
      width: this.width,
      height: this.height,
      strokeWidth: this.strokeWidth,
      strokeColor: this.strokeColor,
      fillColor: this.fillColor
    };
  },
  fromJSON: function(data) {
    return createShape('Ellipse', data);
  },
  move: function(moveInfo) {
    if (moveInfo == null) {
      moveInfo = {};
    }
    this.x = this.x - moveInfo.xDiff;
    return this.y = this.y - moveInfo.yDiff;
  },
  setUpperLeft: function(upperLeft) {
    if (upperLeft == null) {
      upperLeft = {};
    }
    this.x = upperLeft.x;
    return this.y = upperLeft.y;
  }
});

defineShape('Line', {
  constructor: function(args) {
    if (args == null) {
      args = {};
    }
    this.x1 = args.x1 || 0;
    this.y1 = args.y1 || 0;
    this.x2 = args.x2 || 0;
    this.y2 = args.y2 || 0;
    this.strokeWidth = args.strokeWidth || 1;
    this.color = args.color || 'black';
    this.capStyle = args.capStyle || 'round';
    this.endCapShapes = args.endCapShapes || [null, null];
    return this.dash = args.dash || null;
  },
  getBoundingRect: function() {
    return {
      x: Math.min(this.x1, this.x2) - this.strokeWidth / 2,
      y: Math.min(this.y1, this.y2) - this.strokeWidth / 2,
      width: Math.abs(this.x2 - this.x1) + this.strokeWidth / 2,
      height: Math.abs(this.y2 - this.y1) + this.strokeWidth / 2
    };
  },
  toJSON: function() {
    return {
      x1: this.x1,
      y1: this.y1,
      x2: this.x2,
      y2: this.y2,
      strokeWidth: this.strokeWidth,
      color: this.color,
      capStyle: this.capStyle,
      dash: this.dash,
      endCapShapes: this.endCapShapes
    };
  },
  fromJSON: function(data) {
    return createShape('Line', data);
  },
  move: function(moveInfo) {
    if (moveInfo == null) {
      moveInfo = {};
    }
    this.x1 = this.x1 - moveInfo.xDiff;
    this.y1 = this.y1 - moveInfo.yDiff;
    this.x2 = this.x2 - moveInfo.xDiff;
    return this.y2 = this.y2 - moveInfo.yDiff;
  },
  setUpperLeft: function(upperLeft) {
    var br, xDiff, yDiff;
    if (upperLeft == null) {
      upperLeft = {};
    }
    br = this.getBoundingRect();
    xDiff = br.x - upperLeft.x;
    yDiff = br.y - upperLeft.y;
    return this.move({
      xDiff: xDiff,
      yDiff: yDiff
    });
  }
});

_doAllPointsShareStyle = function(points) {
  var color, len, point, q, size;
  if (!points.length) {
    return false;
  }
  size = points[0].size;
  color = points[0].color;
  for (q = 0, len = points.length; q < len; q++) {
    point = points[q];
    if (!(point.size === size && point.color === color)) {
      console.log(size, color, point.size, point.color);
    }
    if (!(point.size === size && point.color === color)) {
      return false;
    }
  }
  return true;
};

_createLinePathFromData = function(shapeName, data) {
  var pointData, points, smoothedPoints, x, y;
  points = null;
  if (data.points) {
    points = (function() {
      var len, q, ref2, results;
      ref2 = data.points;
      results = [];
      for (q = 0, len = ref2.length; q < len; q++) {
        pointData = ref2[q];
        results.push(JSONToShape(pointData));
      }
      return results;
    })();
  } else if (data.pointCoordinatePairs) {
    points = (function() {
      var len, q, ref2, ref3, results;
      ref2 = data.pointCoordinatePairs;
      results = [];
      for (q = 0, len = ref2.length; q < len; q++) {
        ref3 = ref2[q], x = ref3[0], y = ref3[1];
        results.push(JSONToShape({
          className: 'Point',
          data: {
            x: x,
            y: y,
            size: data.pointSize,
            color: data.pointColor,
            smooth: data.smooth
          }
        }));
      }
      return results;
    })();
  }
  smoothedPoints = null;
  if (data.smoothedPointCoordinatePairs) {
    smoothedPoints = (function() {
      var len, q, ref2, ref3, results;
      ref2 = data.smoothedPointCoordinatePairs;
      results = [];
      for (q = 0, len = ref2.length; q < len; q++) {
        ref3 = ref2[q], x = ref3[0], y = ref3[1];
        results.push(JSONToShape({
          className: 'Point',
          data: {
            x: x,
            y: y,
            size: data.pointSize,
            color: data.pointColor,
            smooth: data.smooth
          }
        }));
      }
      return results;
    })();
  }
  if (!points[0]) {
    return null;
  }
  return createShape(shapeName, {
    points: points,
    smoothedPoints: smoothedPoints,
    order: data.order,
    tailSize: data.tailSize,
    smooth: data.smooth
  });
};

linePathFuncs = {
  constructor: function(args) {
    var len, point, points, q, results;
    if (args == null) {
      args = {};
    }
    points = args.points || [];
    this.order = args.order || 3;
    this.tailSize = args.tailSize || 3;
    this.smooth = 'smooth' in args ? args.smooth : true;
    this.segmentSize = Math.pow(2, this.order);
    this.sampleSize = this.tailSize + 1;
    if (args.smoothedPoints) {
      this.points = args.points;
      return this.smoothedPoints = args.smoothedPoints;
    } else {
      this.points = [];
      results = [];
      for (q = 0, len = points.length; q < len; q++) {
        point = points[q];
        results.push(this.addPoint(point));
      }
      return results;
    }
  },
  getBoundingRect: function() {
    return util.getBoundingRect(this.points.map(function(p) {
      return {
        x: p.x - p.size / 2,
        y: p.y - p.size / 2,
        width: p.size,
        height: p.size
      };
    }));
  },
  toJSON: function() {
    var p, point;
    if (_doAllPointsShareStyle(this.points)) {
      return {
        order: this.order,
        tailSize: this.tailSize,
        smooth: this.smooth,
        pointCoordinatePairs: (function() {
          var len, q, ref2, results;
          ref2 = this.points;
          results = [];
          for (q = 0, len = ref2.length; q < len; q++) {
            point = ref2[q];
            results.push([point.x, point.y]);
          }
          return results;
        }).call(this),
        smoothedPointCoordinatePairs: (function() {
          var len, q, ref2, results;
          ref2 = this.smoothedPoints;
          results = [];
          for (q = 0, len = ref2.length; q < len; q++) {
            point = ref2[q];
            results.push([point.x, point.y]);
          }
          return results;
        }).call(this),
        pointSize: this.points[0].size,
        pointColor: this.points[0].color
      };
    } else {
      return {
        order: this.order,
        tailSize: this.tailSize,
        smooth: this.smooth,
        points: (function() {
          var len, q, ref2, results;
          ref2 = this.points;
          results = [];
          for (q = 0, len = ref2.length; q < len; q++) {
            p = ref2[q];
            results.push(shapeToJSON(p));
          }
          return results;
        }).call(this)
      };
    }
  },
  fromJSON: function(data) {
    return _createLinePathFromData('LinePath', data);
  },
  addPoint: function(point) {
    this.points.push(point);
    if (!this.smooth) {
      this.smoothedPoints = this.points;
      return;
    }
    if (!this.smoothedPoints || this.points.length < this.sampleSize) {
      return this.smoothedPoints = bspline(this.points, this.order);
    } else {
      this.tail = util.last(bspline(util.last(this.points, this.sampleSize), this.order), this.segmentSize * this.tailSize);
      return this.smoothedPoints = this.smoothedPoints.slice(0, this.smoothedPoints.length - this.segmentSize * (this.tailSize - 1)).concat(this.tail);
    }
  },
  move: function(moveInfo) {
    var len, pt, pts, q;
    if (moveInfo == null) {
      moveInfo = {};
    }
    if (!this.smooth) {
      pts = this.points;
    } else {
      pts = this.smoothedPoints;
    }
    for (q = 0, len = pts.length; q < len; q++) {
      pt = pts[q];
      pt.move(moveInfo);
    }
    return this.points = this.smoothedPoints;
  },
  setUpperLeft: function(upperLeft) {
    var br, xDiff, yDiff;
    if (upperLeft == null) {
      upperLeft = {};
    }
    br = this.getBoundingRect();
    xDiff = br.x - upperLeft.x;
    yDiff = br.y - upperLeft.y;
    return this.move({
      xDiff: xDiff,
      yDiff: yDiff
    });
  }
};

LinePath = defineShape('LinePath', linePathFuncs);

defineShape('ErasedLinePath', {
  constructor: linePathFuncs.constructor,
  toJSON: linePathFuncs.toJSON,
  addPoint: linePathFuncs.addPoint,
  getBoundingRect: linePathFuncs.getBoundingRect,
  fromJSON: function(data) {
    return _createLinePathFromData('ErasedLinePath', data);
  }
});

defineShape('Point', {
  constructor: function(args) {
    if (args == null) {
      args = {};
    }
    this.x = args.x || 0;
    this.y = args.y || 0;
    this.size = args.size || 0;
    return this.color = args.color || '';
  },
  getBoundingRect: function() {
    return {
      x: this.x - this.size / 2,
      y: this.y - this.size / 2,
      width: this.size,
      height: this.size
    };
  },
  toJSON: function() {
    return {
      x: this.x,
      y: this.y,
      size: this.size,
      color: this.color
    };
  },
  fromJSON: function(data) {
    return createShape('Point', data);
  },
  move: function(moveInfo) {
    if (moveInfo == null) {
      moveInfo = {};
    }
    this.x = this.x - moveInfo.xDiff;
    return this.y = this.y - moveInfo.yDiff;
  },
  setUpperLeft: function(upperLeft) {
    if (upperLeft == null) {
      upperLeft = {};
    }
    this.x = upperLeft.x;
    return this.y = upperLeft.y;
  }
});

defineShape('Polygon', {
  constructor: function(args) {
    var len, point, q, ref2, results;
    if (args == null) {
      args = {};
    }
    this.points = args.points;
    this.fillColor = args.fillColor || 'white';
    this.strokeColor = args.strokeColor || 'black';
    this.strokeWidth = args.strokeWidth;
    this.dash = args.dash || null;
    if (args.isClosed == null) {
      args.isClosed = true;
    }
    this.isClosed = args.isClosed;
    ref2 = this.points;
    results = [];
    for (q = 0, len = ref2.length; q < len; q++) {
      point = ref2[q];
      point.color = this.strokeColor;
      results.push(point.size = this.strokeWidth);
    }
    return results;
  },
  addPoint: function(x, y) {
    return this.points.push(LC.createShape('Point', {
      x: x,
      y: y
    }));
  },
  getBoundingRect: function() {
    return util.getBoundingRect(this.points.map(function(p) {
      return p.getBoundingRect();
    }));
  },
  toJSON: function() {
    return {
      strokeWidth: this.strokeWidth,
      fillColor: this.fillColor,
      strokeColor: this.strokeColor,
      dash: this.dash,
      isClosed: this.isClosed,
      pointCoordinatePairs: this.points.map(function(p) {
        return [p.x, p.y];
      })
    };
  },
  fromJSON: function(data) {
    data.points = data.pointCoordinatePairs.map(function(arg) {
      var x, y;
      x = arg[0], y = arg[1];
      return createShape('Point', {
        x: x,
        y: y,
        size: data.strokeWidth,
        color: data.strokeColor
      });
    });
    return createShape('Polygon', data);
  },
  move: function(moveInfo) {
    var len, pt, q, ref2, results;
    if (moveInfo == null) {
      moveInfo = {};
    }
    ref2 = this.points;
    results = [];
    for (q = 0, len = ref2.length; q < len; q++) {
      pt = ref2[q];
      results.push(pt.move(moveInfo));
    }
    return results;
  },
  setUpperLeft: function(upperLeft) {
    var br, xDiff, yDiff;
    if (upperLeft == null) {
      upperLeft = {};
    }
    br = this.getBoundingRect();
    xDiff = br.x - upperLeft.x;
    yDiff = br.y - upperLeft.y;
    return this.move({
      xDiff: xDiff,
      yDiff: yDiff
    });
  }
});

defineShape('Text', {
  constructor: function(args) {
    if (args == null) {
      args = {};
    }
    this.x = args.x || 0;
    this.y = args.y || 0;
    this.v = args.v || 0;
    this.text = args.text || '';
    this.color = args.color || 'black';
    this.font = args.font || '18px sans-serif';
    this.forcedWidth = args.forcedWidth || null;
    return this.forcedHeight = args.forcedHeight || null;
  },
  _makeRenderer: function(ctx) {
    ctx.lineHeight = 1.2;
    this.renderer = new TextRenderer(ctx, this.text, this.font, this.forcedWidth, this.forcedHeight);
    if (this.v < 1) {
      console.log('repairing baseline');
      this.v = 1;
      this.x -= this.renderer.metrics.bounds.minx;
      return this.y -= this.renderer.metrics.leading - this.renderer.metrics.descent;
    }
  },
  setText: function(text) {
    this.text = text;
    return this.renderer = null;
  },
  setFont: function(font) {
    this.font = font;
    return this.renderer = null;
  },
  setPosition: function(x, y) {
    this.x = x;
    return this.y = y;
  },
  setSize: function(forcedWidth, forcedHeight) {
    this.forcedWidth = Math.max(forcedWidth, 0);
    this.forcedHeight = Math.max(forcedHeight, 0);
    return this.renderer = null;
  },
  enforceMaxBoundingRect: function(lc) {
    var br, dx, lcBoundingRect;
    br = this.getBoundingRect(lc.ctx);
    lcBoundingRect = {
      x: -lc.position.x / lc.scale,
      y: -lc.position.y / lc.scale,
      width: lc.canvas.width / lc.scale,
      height: lc.canvas.height / lc.scale
    };
    if (br.x + br.width > lcBoundingRect.x + lcBoundingRect.width) {
      dx = br.x - lcBoundingRect.x;
      this.forcedWidth = lcBoundingRect.width - dx - 10;
      return this.renderer = null;
    }
  },
  getBoundingRect: function(ctx, isEditing) {
    if (isEditing == null) {
      isEditing = false;
    }
    if (!this.renderer) {
      if (ctx) {
        this._makeRenderer(ctx);
      } else {
        throw "Must pass ctx if text hasn't been rendered yet";
      }
    }
    return {
      x: Math.floor(this.x),
      y: Math.floor(this.y),
      width: Math.ceil(this.renderer.getWidth(true)),
      height: Math.ceil(this.renderer.getHeight())
    };
  },
  toJSON: function() {
    return {
      x: this.x,
      y: this.y,
      text: this.text,
      color: this.color,
      font: this.font,
      forcedWidth: this.forcedWidth,
      forcedHeight: this.forcedHeight,
      v: this.v
    };
  },
  fromJSON: function(data) {
    return createShape('Text', data);
  },
  move: function(moveInfo) {
    if (moveInfo == null) {
      moveInfo = {};
    }
    this.x = this.x - moveInfo.xDiff;
    return this.y = this.y - moveInfo.yDiff;
  },
  setUpperLeft: function(upperLeft) {
    if (upperLeft == null) {
      upperLeft = {};
    }
    this.x = upperLeft.x;
    return this.y = upperLeft.y;
  }
});

defineShape('SelectionBox', {
  constructor: function(args) {
    if (args == null) {
      args = {};
    }
    this.shape = args.shape;
    if (args.handleSize != null) {
      this.handleSize = args.handleSize;
    } else {
      this.handleSize = 10;
    }
    this.margin = 4;
    this.backgroundColor = args.backgroundColor || null;
    return this._br = this.shape.getBoundingRect(args.ctx);
  },
  toJSON: function() {
    return {
      shape: shapeToJSON(this.shape),
      backgroundColor: this.backgroundColor
    };
  },
  fromJSON: function(arg) {
    var backgroundColor, handleSize, margin, shape;
    shape = arg.shape, handleSize = arg.handleSize, margin = arg.margin, backgroundColor = arg.backgroundColor;
    return createShape('SelectionBox', {
      shape: JSONToShape(shape),
      backgroundColor: backgroundColor
    });
  },
  getTopLeftHandleRect: function() {
    return {
      x: this._br.x - this.handleSize - this.margin,
      y: this._br.y - this.handleSize - this.margin,
      width: this.handleSize,
      height: this.handleSize
    };
  },
  getBottomLeftHandleRect: function() {
    return {
      x: this._br.x - this.handleSize - this.margin,
      y: this._br.y + this._br.height + this.margin,
      width: this.handleSize,
      height: this.handleSize
    };
  },
  getTopRightHandleRect: function() {
    return {
      x: this._br.x + this._br.width + this.margin,
      y: this._br.y - this.handleSize - this.margin,
      width: this.handleSize,
      height: this.handleSize
    };
  },
  getBottomRightHandleRect: function() {
    return {
      x: this._br.x + this._br.width + this.margin,
      y: this._br.y + this._br.height + this.margin,
      width: this.handleSize,
      height: this.handleSize
    };
  },
  getBoundingRect: function() {
    return {
      x: this._br.x - this.margin,
      y: this._br.y - this.margin,
      width: this._br.width + this.margin * 2,
      height: this._br.height + this.margin * 2
    };
  }
});

module.exports = {
  defineShape: defineShape,
  createShape: createShape,
  JSONToShape: JSONToShape,
  shapeToJSON: shapeToJSON
};


},{"./TextRenderer":2,"./canvasRenderer":5,"./lineEndCapShapes":8,"./svgRenderer":14,"./util":15}],14:[function(require,module,exports){
var defineSVGRenderer, lineEndCapShapes, renderShapeToSVG, renderers;

lineEndCapShapes = require('./lineEndCapShapes');

renderers = {};

defineSVGRenderer = function(shapeName, shapeToSVGFunc) {
  return renderers[shapeName] = shapeToSVGFunc;
};

renderShapeToSVG = function(shape, opts) {
  if (opts == null) {
    opts = {};
  }
  if (opts.shouldIgnoreUnsupportedShapes == null) {
    opts.shouldIgnoreUnsupportedShapes = false;
  }
  if (renderers[shape.className]) {
    return renderers[shape.className](shape);
  } else if (opts.shouldIgnoreUnsupportedShapes) {
    console.warn("Can't render shape of type " + shape.className + " to SVG");
    return "";
  } else {
    throw "Can't render shape of type " + shape.className + " to SVG";
  }
};

defineSVGRenderer('Rectangle', function(shape) {
  var height, width, x, x1, x2, y, y1, y2;
  x1 = shape.x;
  y1 = shape.y;
  x2 = shape.x + shape.width;
  y2 = shape.y + shape.height;
  x = Math.min(x1, x2);
  y = Math.min(y1, y2);
  width = Math.max(x1, x2) - x;
  height = Math.max(y1, y2) - y;
  if (shape.strokeWidth % 2 !== 0) {
    x += 0.5;
    y += 0.5;
  }
  return "<rect x='" + x + "' y='" + y + "' width='" + width + "' height='" + height + "' stroke='" + shape.strokeColor + "' fill='" + shape.fillColor + "' stroke-width='" + shape.strokeWidth + "' />";
});

defineSVGRenderer('SelectionBox', function(shape) {
  return "";
});

defineSVGRenderer('Ellipse', function(shape) {
  var centerX, centerY, halfHeight, halfWidth;
  halfWidth = Math.floor(shape.width / 2);
  halfHeight = Math.floor(shape.height / 2);
  centerX = shape.x + halfWidth;
  centerY = shape.y + halfHeight;
  return "<ellipse cx='" + centerX + "' cy='" + centerY + "' rx='" + (Math.abs(halfWidth)) + "' ry='" + (Math.abs(halfHeight)) + "' stroke='" + shape.strokeColor + "' fill='" + shape.fillColor + "' stroke-width='" + shape.strokeWidth + "' />";
});

defineSVGRenderer('Image', function(shape) {
  return "<image x='" + shape.x + "' y='" + shape.y + "' width='" + (shape.image.naturalWidth * shape.scale) + "' height='" + (shape.image.naturalHeight * shape.scale) + "' xlink:href='" + shape.image.src + "' />";
});

defineSVGRenderer('Line', function(shape) {
  var arrowWidth, capString, dashString, x1, x2, y1, y2;
  dashString = shape.dash ? "stroke-dasharray='" + (shape.dash.join(', ')) + "'" : '';
  capString = '';
  arrowWidth = Math.max(shape.strokeWidth * 2.2, 5);
  x1 = shape.x1;
  x2 = shape.x2;
  y1 = shape.y1;
  y2 = shape.y2;
  if (shape.strokeWidth % 2 !== 0) {
    x1 += 0.5;
    x2 += 0.5;
    y1 += 0.5;
    y2 += 0.5;
  }
  if (shape.endCapShapes[0]) {
    capString += lineEndCapShapes[shape.endCapShapes[0]].svg(x1, y1, Math.atan2(y1 - y2, x1 - x2), arrowWidth, shape.color);
  }
  if (shape.endCapShapes[1]) {
    capString += lineEndCapShapes[shape.endCapShapes[1]].svg(x2, y2, Math.atan2(y2 - y1, x2 - x1), arrowWidth, shape.color);
  }
  return "<g> <line x1='" + x1 + "' y1='" + y1 + "' x2='" + x2 + "' y2='" + y2 + "' " + dashString + " stroke-linecap='" + shape.capStyle + "' stroke='" + shape.color + " 'stroke-width='" + shape.strokeWidth + "' /> " + capString + " </g>";
});

defineSVGRenderer('LinePath', function(shape) {
  return "<polyline fill='none' points='" + (shape.smoothedPoints.map(function(p) {
    var offset;
    offset = p.strokeWidth % 2 === 0 ? 0.0 : 0.5;
    return (p.x + offset) + "," + (p.y + offset);
  }).join(' ')) + "' stroke='" + shape.points[0].color + "' stroke-linecap='round' stroke-width='" + shape.points[0].size + "' />";
});

defineSVGRenderer('ErasedLinePath', function(shape) {
  return "";
});

defineSVGRenderer('Polygon', function(shape) {
  if (shape.isClosed) {
    return "<polygon fill='" + shape.fillColor + "' points='" + (shape.points.map(function(p) {
      var offset;
      offset = p.strokeWidth % 2 === 0 ? 0.0 : 0.5;
      return (p.x + offset) + "," + (p.y + offset);
    }).join(' ')) + "' stroke='" + shape.strokeColor + "' stroke-width='" + shape.strokeWidth + "' />";
  } else {
    return "<polyline fill='" + shape.fillColor + "' points='" + (shape.points.map(function(p) {
      var offset;
      offset = p.strokeWidth % 2 === 0 ? 0.0 : 0.5;
      return (p.x + offset) + "," + (p.y + offset);
    }).join(' ')) + "' stroke='none' /> <polyline fill='none' points='" + (shape.points.map(function(p) {
      var offset;
      offset = p.strokeWidth % 2 === 0 ? 0.0 : 0.5;
      return (p.x + offset) + "," + (p.y + offset);
    }).join(' ')) + "' stroke='" + shape.strokeColor + "' stroke-width='" + shape.strokeWidth + "' />";
  }
});

defineSVGRenderer('Text', function(shape) {
  var heightString, textSplitOnLines, widthString;
  widthString = shape.forcedWidth ? "width='" + shape.forcedWidth + "px'" : "";
  heightString = shape.forcedHeight ? "height='" + shape.forcedHeight + "px'" : "";
  textSplitOnLines = shape.text.split(/\r\n|\r|\n/g);
  if (shape.renderer) {
    textSplitOnLines = shape.renderer.lines;
  }
  return "<text x='" + shape.x + "' y='" + shape.y + "' " + widthString + " " + heightString + " fill='" + shape.color + "' style='font: " + shape.font + ";'> " + (textSplitOnLines.map((function(_this) {
    return function(line, i) {
      var dy;
      dy = i === 0 ? 0 : '1.2em';
      return "<tspan x='" + shape.x + "' dy='" + dy + "' alignment-baseline='text-before-edge'> " + line + " </tspan>";
    };
  })(this)).join('')) + " </text>";
});

module.exports = {
  defineSVGRenderer: defineSVGRenderer,
  renderShapeToSVG: renderShapeToSVG
};


},{"./lineEndCapShapes":8}],15:[function(require,module,exports){
var renderShapeToContext, renderShapeToSVG, slice, util,
  slice1 = [].slice;

slice = Array.prototype.slice;

renderShapeToContext = require('./canvasRenderer').renderShapeToContext;

renderShapeToSVG = require('./svgRenderer').renderShapeToSVG;

util = {
  addImageOnload: function(img, fn) {
    var oldOnload;
    oldOnload = img.onload;
    img.onload = function() {
      if (typeof oldOnload === "function") {
        oldOnload();
      }
      return fn();
    };
    return img;
  },
  last: function(array, n) {
    if (n == null) {
      n = null;
    }
    if (n) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  },
  classSet: function(classNameToIsPresent) {
    var classNames, key;
    classNames = [];
    for (key in classNameToIsPresent) {
      if (classNameToIsPresent[key]) {
        classNames.push(key);
      }
    }
    return classNames.join(' ');
  },
  matchElementSize: function(elementToMatch, elementsToResize, scale, callback) {
    var resize;
    if (callback == null) {
      callback = function() {};
    }
    resize = (function(_this) {
      return function() {
        var el, i, len;
        for (i = 0, len = elementsToResize.length; i < len; i++) {
          el = elementsToResize[i];

         	el.style.width = elementToMatch.offsetWidth + "px";
          el.style.height = elementToMatch.offsetHeight + "px";
          if (el.width != null) {
            el.setAttribute('width', elementToMatch.offsetWidth);
            el.setAttribute('height', elementToMatch.offsetHeight);
          }
        }
        return callback();
      };
    })(this);
    elementToMatch.addEventListener('resize', resize);
    window.addEventListener('resize', resize);
    window.addEventListener('orientationchange', resize);
    resize();
    return resize;
  },
  combineCanvases: function() {
    var c, canvas, canvases, ctx, i, j, len, len1;
    canvases = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    c = document.createElement('canvas');
    c.width = canvases[0].width;
    c.height = canvases[0].height;
    for (i = 0, len = canvases.length; i < len; i++) {
      canvas = canvases[i];
      c.width = Math.max(canvas.width, c.width);
      c.height = Math.max(canvas.height, c.height);
    }
    ctx = c.getContext('2d');
    for (j = 0, len1 = canvases.length; j < len1; j++) {
      canvas = canvases[j];
      ctx.drawImage(canvas, 0, 0);
    }
    return c;
  },
  renderShapes: function(shapes, bounds, scale, canvas) {
    var ctx, i, len, shape;
    if (scale == null) {
      scale = 1;
    }
    if (canvas == null) {
      canvas = null;
    }
    canvas = canvas || document.createElement('canvas');
    canvas.width = bounds.width * scale;
    canvas.height = bounds.height * scale;
    ctx = canvas.getContext('2d');
    ctx.translate(-bounds.x * scale, -bounds.y * scale);
    ctx.scale(scale, scale);
    for (i = 0, len = shapes.length; i < len; i++) {
      shape = shapes[i];
      renderShapeToContext(ctx, shape);
    }
    return canvas;
  },
  renderShapesToSVG: function(shapes, arg, backgroundColor) {
    var height, width, x, y;
    x = arg.x, y = arg.y, width = arg.width, height = arg.height;
    return ("<svg xmlns='http://www.w3.org/2000/svg' width='" + width + "' height='" + height + "' viewBox='0 0 " + width + " " + height + "'> <rect width='" + width + "' height='" + height + "' x='0' y='0' fill='" + backgroundColor + "' /> <g transform='translate(" + (-x) + ", " + (-y) + ")'> " + (shapes.map(renderShapeToSVG).join('')) + " </g> </svg>").replace(/(\r\n|\n|\r)/gm, "");
  },
  getBoundingRect: function(rects, width, height) {
    var i, len, maxX, maxY, minX, minY, rect;
    if (!rects.length) {
      return {
        x: 0,
        y: 0,
        width: 0 || width,
        height: 0 || height
      };
    }
    minX = rects[0].x;
    minY = rects[0].y;
    maxX = rects[0].x + rects[0].width;
    maxY = rects[0].y + rects[0].height;
    for (i = 0, len = rects.length; i < len; i++) {
      rect = rects[i];
      minX = Math.floor(Math.min(rect.x, minX));
      minY = Math.floor(Math.min(rect.y, minY));
      maxX = Math.ceil(Math.max(maxX, rect.x + rect.width));
      maxY = Math.ceil(Math.max(maxY, rect.y + rect.height));
    }
    minX = width ? 0 : minX;
    minY = height ? 0 : minY;
    maxX = width || maxX;
    maxY = height || maxY;
    return {
      x: minX,
      y: minY,
      width: maxX - minX,
      height: maxY - minY
    };
  },
  getDefaultImageRect: function(shapeBoundingRects, explicitSize, margin) {
    var height, rect, width;
    if (explicitSize == null) {
      explicitSize = {
        width: 0,
        height: 0
      };
    }
    if (margin == null) {
      margin = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
    width = explicitSize.width, height = explicitSize.height;
    rect = util.getBoundingRect(shapeBoundingRects, width === 'infinite' ? 0 : width, height === 'infinite' ? 0 : height);
    rect.x -= margin.left;
    rect.y -= margin.top;
    rect.width += margin.left + margin.right;
    rect.height += margin.top + margin.bottom;
    return rect;
  },
  getBackingScale: function(context) {
    if (window.devicePixelRatio == null) {
      return 1;
    }
    if (!(window.devicePixelRatio > 1)) {
      return 1;
    }
    return window.devicePixelRatio;
  },
    //requestAnimationFrame: (window.requestAnimationFrame || window.setTimeout).bind(window),
  getGUID: (function() {
    var s4;
    s4 = function() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };
    return function() {
      return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    };
  })(),
  requestAnimationFrame: function(f) {
    if (window.requestAnimationFrame) {
      return window.requestAnimationFrame(f);
    }
    if (window.webkitRequestAnimationFrame) {
      return window.webkitRequestAnimationFrame(f);
    }
    if (window.mozRequestAnimationFrame) {
      return window.mozRequestAnimationFrame(f);
    }
    return setTimeout(f, 0);
  },
  cancelAnimationFrame: function(f) {
    if (window.cancelAnimationFrame) {
      return window.cancelAnimationFrame(f);
    }
    if (window.webkitCancelRequestAnimationFrame) {
      return window.webkitCancelRequestAnimationFrame(f);
    }
    if (window.webkitCancelAnimationFrame) {
      return window.webkitCancelAnimationFrame(f);
    }
    if (window.mozCancelAnimationFrame) {
      return window.mozCancelAnimationFrame(f);
    }
    return clearTimeout(f);
  }
};

module.exports = util;


},{"./canvasRenderer":5,"./svgRenderer":14}],16:[function(require,module,exports){
'use strict';

(function () {
  function CustomEvent(event, params) {
    params = params || { bubbles: false, cancelable: false, detail: undefined };
    var evt = document.createEvent('CustomEvent');
    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
    return evt;
  };

  CustomEvent.prototype = window.CustomEvent.prototype;

  window.CustomEvent = CustomEvent;
})();

},{}],17:[function(require,module,exports){
"use strict";

var hasWarned = false;
if (!CanvasRenderingContext2D.prototype.setLineDash) {
  CanvasRenderingContext2D.prototype.setLineDash = function () {
    // no-op
    if (!hasWarned) {
      console.warn("context2D.setLineDash is a no-op in this browser.");
      hasWarned = true;
    }
  };
}
module.exports = null;

},{}],18:[function(require,module,exports){
var LiterallyCanvasModel, baseTools, canvasRenderer, conversion, defaultImageURLPrefix, defaultOptions, defaultTools, init, initWithoutGUI, localize, registerJQueryPlugin, renderSnapshotToImage, renderSnapshotToSVG, setDefaultImageURLPrefix, shapes, svgRenderer, tools, util;

require('./ie_customevent');

require('./ie_setLineDash');

LiterallyCanvasModel = require('./core/LiterallyCanvas');

defaultOptions = require('./core/defaultOptions');

canvasRenderer = require('./core/canvasRenderer');

svgRenderer = require('./core/svgRenderer');

shapes = require('./core/shapes');

util = require('./core/util');

renderSnapshotToImage = require('./core/renderSnapshotToImage');

renderSnapshotToSVG = require('./core/renderSnapshotToSVG');

localize = require('./core/localization').localize;

conversion = {
  snapshotToShapes: function(snapshot) {
    var i, len, ref, results, shape;
    ref = snapshot.shapes;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      shape = ref[i];
      results.push(shapes.JSONToShape(shape));
    }
    return results;
  },
  snapshotJSONToShapes: function(json) {
    return conversion.snapshotToShapes(JSON.parse(json));
  }
};

baseTools = require('./tools/base');

tools = {
  Pencil: require('./tools/Pencil'),
  Eraser: require('./tools/Eraser'),
  Line: require('./tools/Line'),
  Rectangle: require('./tools/Rectangle'),
  Ellipse: require('./tools/Ellipse'),
  Text: require('./tools/Text'),
  Polygon: require('./tools/Polygon'),
  Pan: require('./tools/Pan'),
  Eyedropper: require('./tools/Eyedropper'),
  SelectShape: require('./tools/SelectShape'),
  Tool: baseTools.Tool,
  ToolWithStroke: baseTools.ToolWithStroke
};

defaultTools = defaultOptions.tools;

defaultImageURLPrefix = defaultOptions.imageURLPrefix;

setDefaultImageURLPrefix = function(newDefault) {
  defaultImageURLPrefix = newDefault;
  return defaultOptions.imageURLPrefix = newDefault;
};

init = function(el, opts) {
  var child, i, len, opt, ref;
  if (opts == null) {
    opts = {};
  }
  for (opt in defaultOptions) {
    if (!(opt in opts)) {
      opts[opt] = defaultOptions[opt];
    }
  }
  ref = el.children;
  for (i = 0, len = ref.length; i < len; i++) {
    child = ref[i];
    el.removeChild(child);
  }
  return initWithoutGUI(el, opts);
};

initWithoutGUI = function(el, opts) {
  var drawingViewElement, lc, originalClassName;
  originalClassName = el.className;
  if ([' ', ' '].join(el.className).indexOf(' literally ') === -1) {
    el.className = el.className + ' literally';
  }
  el.className = el.className + ' toolbar-hidden';
  drawingViewElement = document.createElement('div');
  drawingViewElement.className = 'lc-drawing';
  el.appendChild(drawingViewElement);

    var customCanvasBackgroundElement =  document.createElement('div');
    customCanvasBackgroundElement.className = "custom-canvas-background" ;
    customCanvasBackgroundElement.id = 'customCanvasView';
    drawingViewElement.appendChild(customCanvasBackgroundElement);

  var drawPermission =  document.createElement('div');
  drawPermission.className = "draw-permission" ;
  el.appendChild(drawPermission);

  var temporaryDrawPermission =  document.createElement('div');
  temporaryDrawPermission.className = "temporary-draw-permission" ;
  el.appendChild(temporaryDrawPermission);

  var laserSpan =  document.createElement('span');
  laserSpan.className = "laser-mark" ;
  el.appendChild (laserSpan) ;

    var literallyDataLoadingWrap =  document.createElement('div');
    literallyDataLoadingWrap.className = "literally-data-loading-wrap" ;
    literallyDataLoadingWrap.style.zIndex = 100 ;
    literallyDataLoadingWrap.style.display = 'none' ;
    //literallyDataLoadingWrap.id = "literally_data_loading_wrap" ;
    el.appendChild(literallyDataLoadingWrap);

  lc = new LiterallyCanvasModel(drawingViewElement, opts);
  lc.customCanvasBackgroundElement = customCanvasBackgroundElement ;
  lc.loadingElement = literallyDataLoadingWrap ;
  lc.watermarkImageToLcBackground = opts.watermarkImageToLcBackground !== undefined? opts.watermarkImageToLcBackground : true ;
  drawingViewElement.setAttribute('watermarkImageToLcBackground' , lc.watermarkImageToLcBackground) ;
  if( lc.isDrawAble ){
		drawPermission.className = drawPermission.className.replace(/( yes| no)/g,"");
		drawPermission.className += " yes" ;
	}else{
		drawPermission.className = drawPermission.className.replace(/( yes| no)/g,"");
		drawPermission.className += " no" ;
	}

	if( lc.isTmpDrawAble ){
		temporaryDrawPermission.className = temporaryDrawPermission.className.replace(/( yes| no)/g,"");
		temporaryDrawPermission.className += " yes" ;
	}else{
		temporaryDrawPermission.className = temporaryDrawPermission.className.replace(/( yes| no)/g,"");
		temporaryDrawPermission.className += " no" ;
	}

  lc.teardown = function() {
    var child, i, ref;
    try{
        lc._teardown();
        ref = el.children;
        for (i = ref.length - 1; i >= 0; i--) {
            child = ref[i];
            if(child){
                el.removeChild(child);
            }
        }
        return el.className = originalClassName;
     }catch (e){
        console.error('tk_lc error:' , e) ;
        return  ;
     }
  };

  if ('onInit' in opts) {
    opts.onInit(lc);
  }
  return lc;
};

registerJQueryPlugin = function(_$) {
  return _$.fn.literallycanvas = function(opts) {
    if (opts == null) {
      opts = {};
    }
    this.each((function(_this) {
      return function(ix, el) {
        return el.literallycanvas = init(el, opts);
      };
    })(this));
    return this;
  };
};

if (typeof window !== 'undefined') {
  window.LC = {
    init: init
  };
  if (window.$) {
    registerJQueryPlugin(window.$);
  }
}

module.exports = {
  init: init,
  registerJQueryPlugin: registerJQueryPlugin,
  util: util,
  tools: tools,
  setDefaultImageURLPrefix: setDefaultImageURLPrefix,
  defaultTools: defaultTools,
  defineShape: shapes.defineShape,
  createShape: shapes.createShape,
  JSONToShape: shapes.JSONToShape,
  shapeToJSON: shapes.shapeToJSON,
  defineCanvasRenderer: canvasRenderer.defineCanvasRenderer,
  renderShapeToContext: canvasRenderer.renderShapeToContext,
  renderShapeToCanvas: canvasRenderer.renderShapeToCanvas,
  renderShapesToCanvas: util.renderShapes,
  defineSVGRenderer: svgRenderer.defineSVGRenderer,
  renderShapeToSVG: svgRenderer.renderShapeToSVG,
  renderShapesToSVG: util.renderShapesToSVG,
  snapshotToShapes: conversion.snapshotToShapes,
  snapshotJSONToShapes: conversion.snapshotJSONToShapes,
  renderSnapshotToImage: renderSnapshotToImage,
  renderSnapshotToSVG: renderSnapshotToSVG,
  localize: localize
};


},{"./core/LiterallyCanvas":1,"./core/canvasRenderer":5,"./core/defaultOptions":6,"./core/localization":9,"./core/renderSnapshotToImage":11,"./core/renderSnapshotToSVG":12,"./core/shapes":13,"./core/svgRenderer":14,"./core/util":15,"./ie_customevent":16,"./ie_setLineDash":17,"./tools/Ellipse":19,"./tools/Eraser":20,"./tools/Eyedropper":21,"./tools/Line":22,"./tools/Pan":23,"./tools/Pencil":24,"./tools/Polygon":25,"./tools/Rectangle":26,"./tools/SelectShape":27,"./tools/Text":28,"./tools/base":29}],19:[function(require,module,exports){
var Ellipse, ToolWithStroke, createShape,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ToolWithStroke = require('./base').ToolWithStroke;

createShape = require('../core/shapes').createShape;

module.exports = Ellipse = (function(superClass) {
  extend(Ellipse, superClass);

  function Ellipse() {
    return Ellipse.__super__.constructor.apply(this, arguments);
  }

  Ellipse.prototype.name = 'Ellipse';

  Ellipse.prototype.iconName = 'ellipse';

  Ellipse.prototype.begin = function(x, y, lc) {
    return this.currentShape = createShape('Ellipse', {
      x: x,
      y: y,
      strokeWidth: this.strokeWidth,
      strokeColor: lc.getColor('primary'),
      fillColor: lc.getColor('secondary')
    });
  };

  Ellipse.prototype["continue"] = function(x, y, lc) {
    this.currentShape.width = x - this.currentShape.x;
    this.currentShape.height = y - this.currentShape.y;
    return lc.drawShapeInProgress(this.currentShape);
  };

  Ellipse.prototype.end = function(x, y, lc) {
    return lc.saveShape(this.currentShape);
  };

  return Ellipse;

})(ToolWithStroke);


},{"../core/shapes":13,"./base":29}],20:[function(require,module,exports){
var Eraser, Pencil, createShape,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Pencil = require('./Pencil');

createShape = require('../core/shapes').createShape;

module.exports = Eraser = (function(superClass) {
  extend(Eraser, superClass);

  function Eraser() {
    return Eraser.__super__.constructor.apply(this, arguments);
  }

  Eraser.prototype.name = 'Eraser';

  Eraser.prototype.iconName = 'eraser';

  Eraser.prototype.makePoint = function(x, y, lc) {
    return createShape('Point', {
      x: x,
      y: y,
      size: this.strokeWidth,
      color: '#000'
    });
  };

  Eraser.prototype.makeShape = function() {
    return createShape('ErasedLinePath');
  };

  return Eraser;

})(Pencil);


},{"../core/shapes":13,"./Pencil":24}],21:[function(require,module,exports){
var Eyedropper, Tool, getPixel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Tool = require('./base').Tool;

getPixel = function(ctx, arg) {
  var pixel, x, y;
  x = arg.x, y = arg.y;
  pixel = ctx.getImageData(x, y, 1, 1).data;
  if (pixel[3]) {
    return "rgb(" + pixel[0] + ", " + pixel[1] + ", " + pixel[2] + ")";
  } else {
    return null;
  }
};

module.exports = Eyedropper = (function(superClass) {
  extend(Eyedropper, superClass);

  Eyedropper.prototype.name = 'Eyedropper';

  Eyedropper.prototype.iconName = 'eyedropper';

  Eyedropper.prototype.optionsStyle = 'stroke-or-fill';

  function Eyedropper(lc) {
    Eyedropper.__super__.constructor.call(this, lc);
    this.strokeOrFill = 'stroke';
  }

  Eyedropper.prototype.readColor = function(x, y, lc) {
    var canvas, color, newColor, offset;
    offset = lc.getDefaultImageRect();
    canvas = lc.getImage();
    newColor = getPixel(canvas.getContext('2d'), {
      x: x - offset.x,
      y: y - offset.y
    });
    color = newColor || lc.getColor('background');
    if (this.strokeOrFill === 'stroke') {
      return lc.setColor('primary', newColor);
    } else {
      return lc.setColor('secondary', newColor);
    }
  };

  Eyedropper.prototype.begin = function(x, y, lc) {
    return this.readColor(x, y, lc);
  };

  Eyedropper.prototype["continue"] = function(x, y, lc) {
    return this.readColor(x, y, lc);
  };

  return Eyedropper;

})(Tool);


},{"./base":29}],22:[function(require,module,exports){
var Line, ToolWithStroke, createShape,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ToolWithStroke = require('./base').ToolWithStroke;

createShape = require('../core/shapes').createShape;

module.exports = Line = (function(superClass) {
  extend(Line, superClass);

  function Line() {
    return Line.__super__.constructor.apply(this, arguments);
  }

  Line.prototype.name = 'Line';

  Line.prototype.iconName = 'line';

  Line.prototype.optionsStyle = 'line-options-and-stroke-width';

  Line.prototype.begin = function(x, y, lc) {
    return this.currentShape = createShape('Line', {
      x1: x,
      y1: y,
      x2: x,
      y2: y,
      strokeWidth: this.strokeWidth,
      dash: (function() {
        switch (false) {
          case !this.isDashed:
            return [this.strokeWidth * 2, this.strokeWidth * 4];
          default:
            return null;
        }
      }).call(this),
      endCapShapes: this.hasEndArrow ? [null, 'arrow'] : null,
      color: lc.getColor('primary')
    });
  };

  Line.prototype["continue"] = function(x, y, lc) {
    this.currentShape.x2 = x;
    this.currentShape.y2 = y;
    return lc.drawShapeInProgress(this.currentShape);
  };

  Line.prototype.end = function(x, y, lc) {
    return lc.saveShape(this.currentShape);
  };

  return Line;

})(ToolWithStroke);


},{"../core/shapes":13,"./base":29}],23:[function(require,module,exports){
var Pan, Tool, createShape,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Tool = require('./base').Tool;

createShape = require('../core/shapes').createShape;

module.exports = Pan = (function(superClass) {
  extend(Pan, superClass);

  function Pan() {
    return Pan.__super__.constructor.apply(this, arguments);
  }

  Pan.prototype.name = 'Pan';

  Pan.prototype.iconName = 'pan';

  Pan.prototype.usesSimpleAPI = false;

  Pan.prototype.didBecomeActive = function(lc) {
    var unsubscribeFuncs;
    unsubscribeFuncs = [];
    this.unsubscribe = (function(_this) {
      return function() {
        var func, i, len, results;
        results = [];
        for (i = 0, len = unsubscribeFuncs.length; i < len; i++) {
          func = unsubscribeFuncs[i];
          results.push(func());
        }
        return results;
      };
    })(this);
    unsubscribeFuncs.push(lc.on('lc-pointerdown', (function(_this) {
      return function(arg) {
        var rawX, rawY;
        rawX = arg.rawX, rawY = arg.rawY;
        _this.oldPosition = lc.position;
        return _this.pointerStart = {
          x: rawX,
          y: rawY
        };
      };
    })(this)));
    return unsubscribeFuncs.push(lc.on('lc-pointerdrag', (function(_this) {
      return function(arg) {
        var dp, rawX, rawY;
        rawX = arg.rawX, rawY = arg.rawY;
        dp = {
          x: (rawX - _this.pointerStart.x) * lc.backingScale,
          y: (rawY - _this.pointerStart.y) * lc.backingScale
        };
        return lc.setPan(_this.oldPosition.x + dp.x, _this.oldPosition.y + dp.y);
      };
    })(this)));
  };

  Pan.prototype.willBecomeInactive = function(lc) {
    return this.unsubscribe();
  };

  return Pan;

})(Tool);


},{"../core/shapes":13,"./base":29}],24:[function(require,module,exports){
var Pencil, ToolWithStroke, createShape,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ToolWithStroke = require('./base').ToolWithStroke;

createShape = require('../core/shapes').createShape;

module.exports = Pencil = (function(superClass) {
  extend(Pencil, superClass);

  function Pencil() {
    return Pencil.__super__.constructor.apply(this, arguments);
  }

  Pencil.prototype.name = 'Pencil';

  Pencil.prototype.iconName = 'pencil';

  Pencil.prototype.eventTimeThreshold = 10;

  Pencil.prototype.begin = function(x, y, lc) {
    this.color = lc.getColor('primary');
    this.currentShape = this.makeShape();
    this.currentShape.addPoint(this.makePoint(x, y, lc));
    return this.lastEventTime = Date.now();
  };

  Pencil.prototype["continue"] = function(x, y, lc) {
    var timeDiff;
    timeDiff = Date.now() - this.lastEventTime;
    if (timeDiff > this.eventTimeThreshold) {
      this.lastEventTime += timeDiff;
      this.currentShape.addPoint(this.makePoint(x, y, lc));
      return lc.drawShapeInProgress(this.currentShape);
    }
  };

  Pencil.prototype.end = function(x, y, lc) {
    lc.saveShape(this.currentShape);
    return this.currentShape = void 0;
  };

  Pencil.prototype.makePoint = function(x, y, lc) {
    return createShape('Point', {
      x: x,
      y: y,
      size: this.strokeWidth,
      color: this.color
    });
  };

  Pencil.prototype.makeShape = function() {
    return createShape('LinePath');
  };

  return Pencil;

})(ToolWithStroke);


},{"../core/shapes":13,"./base":29}],25:[function(require,module,exports){
var Polygon, ToolWithStroke, createShape,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ToolWithStroke = require('./base').ToolWithStroke;

createShape = require('../core/shapes').createShape;

module.exports = Polygon = (function(superClass) {
  extend(Polygon, superClass);

  function Polygon() {
    return Polygon.__super__.constructor.apply(this, arguments);
  }

  Polygon.prototype.name = 'Polygon';

  Polygon.prototype.iconName = 'polygon';

  Polygon.prototype.usesSimpleAPI = false;

  Polygon.prototype.didBecomeActive = function(lc) {
    var onDown, onMove, onUp, polygonCancel, polygonFinishClosed, polygonFinishOpen, polygonUnsubscribeFuncs;
    Polygon.__super__.didBecomeActive.call(this, lc);
    polygonUnsubscribeFuncs = [];
    this.polygonUnsubscribe = (function(_this) {
      return function() {
        var func, i, len, results;
        results = [];
        for (i = 0, len = polygonUnsubscribeFuncs.length; i < len; i++) {
          func = polygonUnsubscribeFuncs[i];
          results.push(func());
        }
        return results;
      };
    })(this);
    this.points = null;
    this.maybePoint = null;
    onUp = (function(_this) {
      return function() {
        if (_this._getWillFinish()) {
          return _this._close(lc);
        }
        lc.trigger('lc-polygon-started');
        if (_this.points) {
          _this.points.push(_this.maybePoint);
        } else {
          _this.points = [_this.maybePoint];
        }
        _this.maybePoint = {
          x: _this.maybePoint.x,
          y: _this.maybePoint.y
        };
        lc.setShapesInProgress(_this._getShapes(lc));
        return lc.repaintLayer('main');
      };
    })(this);
    onMove = (function(_this) {
      return function(arg) {
        var x, y;
        x = arg.x, y = arg.y;
        if (_this.maybePoint) {
          _this.maybePoint.x = x;
          _this.maybePoint.y = y;
          lc.setShapesInProgress(_this._getShapes(lc));
          return lc.repaintLayer('main');
        }
      };
    })(this);
    onDown = (function(_this) {
      return function(arg) {
        var x, y;
        x = arg.x, y = arg.y;
        _this.maybePoint = {
          x: x,
          y: y
        };
        lc.setShapesInProgress(_this._getShapes(lc));
        return lc.repaintLayer('main');
      };
    })(this);
    polygonFinishOpen = (function(_this) {
      return function() {
        _this.maybePoint = {
          x: Infinity,
          y: Infinity
        };
        return _this._close(lc);
      };
    })(this);
    polygonFinishClosed = (function(_this) {
      return function() {
        _this.maybePoint = _this.points[0];
        return _this._close(lc);
      };
    })(this);
    polygonCancel = (function(_this) {
      return function() {
        return _this._cancel(lc);
      };
    })(this);
    polygonUnsubscribeFuncs.push(lc.on('drawingChange', (function(_this) {
      return function() {
        return _this._cancel(lc);
      };
    })(this)));
    polygonUnsubscribeFuncs.push(lc.on('lc-pointerdown', onDown));
    polygonUnsubscribeFuncs.push(lc.on('lc-pointerdrag', onMove));
    polygonUnsubscribeFuncs.push(lc.on('lc-pointermove', onMove));
    polygonUnsubscribeFuncs.push(lc.on('lc-pointerup', onUp));
    polygonUnsubscribeFuncs.push(lc.on('lc-polygon-finishopen', polygonFinishOpen));
    polygonUnsubscribeFuncs.push(lc.on('lc-polygon-finishclosed', polygonFinishClosed));
    return polygonUnsubscribeFuncs.push(lc.on('lc-polygon-cancel', polygonCancel));
  };

  Polygon.prototype.willBecomeInactive = function(lc) {
    Polygon.__super__.willBecomeInactive.call(this, lc);
    if (this.points || this.maybePoint) {
      this._cancel(lc);
    }
    return this.polygonUnsubscribe();
  };

  Polygon.prototype._getArePointsClose = function(a, b) {
    return (Math.abs(a.x - b.x) + Math.abs(a.y - b.y)) < 10;
  };

  Polygon.prototype._getWillClose = function() {
    if (!(this.points && this.points.length > 1)) {
      return false;
    }
    if (!this.maybePoint) {
      return false;
    }
    return this._getArePointsClose(this.points[0], this.maybePoint);
  };

  Polygon.prototype._getWillFinish = function() {
    if (!(this.points && this.points.length > 1)) {
      return false;
    }
    if (!this.maybePoint) {
      return false;
    }
    return this._getArePointsClose(this.points[0], this.maybePoint) || this._getArePointsClose(this.points[this.points.length - 1], this.maybePoint);
  };

  Polygon.prototype._cancel = function(lc) {
    lc.trigger('lc-polygon-stopped');
    this.maybePoint = null;
    this.points = null;
    lc.setShapesInProgress([]);
    return lc.repaintLayer('main');
  };

  Polygon.prototype._close = function(lc) {
    lc.trigger('lc-polygon-stopped');
    lc.setShapesInProgress([]);
    if (this.points.length > 2) {
      lc.saveShape(this._getShape(lc, false));
    }
    this.maybePoint = null;
    return this.points = null;
  };

  Polygon.prototype._getShapes = function(lc, isInProgress) {
    var shape;
    if (isInProgress == null) {
      isInProgress = true;
    }
    shape = this._getShape(lc, isInProgress);
    if (shape) {
      return [shape];
    } else {
      return [];
    }
  };

  Polygon.prototype._getShape = function(lc, isInProgress) {
    var points;
    if (isInProgress == null) {
      isInProgress = true;
    }
    points = [];
    if (this.points) {
      points = points.concat(this.points);
    }
    if ((!isInProgress) && points.length < 3) {
      return null;
    }
    if (isInProgress && this.maybePoint) {
      points.push(this.maybePoint);
    }
    if (points.length > 1) {
      return createShape('Polygon', {
        isClosed: this._getWillClose(),
        strokeColor: lc.getColor('primary'),
        fillColor: lc.getColor('secondary'),
        strokeWidth: this.strokeWidth,
        points: points.map(function(xy) {
          return createShape('Point', xy);
        })
      });
    } else {
      return null;
    }
  };

  Polygon.prototype.optionsStyle = 'polygon-and-stroke-width';

  return Polygon;

})(ToolWithStroke);


},{"../core/shapes":13,"./base":29}],26:[function(require,module,exports){
var Rectangle, ToolWithStroke, createShape,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ToolWithStroke = require('./base').ToolWithStroke;

createShape = require('../core/shapes').createShape;

module.exports = Rectangle = (function(superClass) {
  extend(Rectangle, superClass);

  function Rectangle() {
    return Rectangle.__super__.constructor.apply(this, arguments);
  }

  Rectangle.prototype.name = 'Rectangle';

  Rectangle.prototype.iconName = 'rectangle';

  Rectangle.prototype.begin = function(x, y, lc) {
    return this.currentShape = createShape('Rectangle', {
      x: x,
      y: y,
      strokeWidth: this.strokeWidth,
      strokeColor: lc.getColor('primary'),
      fillColor: lc.getColor('secondary')
    });
  };

  Rectangle.prototype["continue"] = function(x, y, lc) {
    this.currentShape.width = x - this.currentShape.x;
    this.currentShape.height = y - this.currentShape.y;
    return lc.drawShapeInProgress(this.currentShape);
  };

  Rectangle.prototype.end = function(x, y, lc) {
    return lc.saveShape(this.currentShape);
  };

  return Rectangle;

})(ToolWithStroke);


},{"../core/shapes":13,"./base":29}],27:[function(require,module,exports){
var SelectShape, Tool, createShape,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Tool = require('./base').Tool;

createShape = require('../core/shapes').createShape;

module.exports = SelectShape = (function(superClass) {
  extend(SelectShape, superClass);

  SelectShape.prototype.name = 'SelectShape';

  SelectShape.prototype.usesSimpleAPI = false;

  function SelectShape(lc) {
    this.selectCanvas = document.createElement('canvas');
    this.selectCanvas.style['background-color'] = 'transparent';
    this.selectCtx = this.selectCanvas.getContext('2d');
  }

  SelectShape.prototype.didBecomeActive = function(lc) {
    var onDown, onDrag, onUp, selectShapeUnsubscribeFuncs;
    selectShapeUnsubscribeFuncs = [];
    this._selectShapeUnsubscribe = (function(_this) {
      return function() {
        var func, j, len, results;
        results = [];
        for (j = 0, len = selectShapeUnsubscribeFuncs.length; j < len; j++) {
          func = selectShapeUnsubscribeFuncs[j];
          results.push(func());
        }
        return results;
      };
    })(this);
    onDown = (function(_this) {
      return function(arg) {
        var br, shapeIndex, x, y;
        x = arg.x, y = arg.y;
        _this.didDrag = false;
        shapeIndex = _this._getPixel(x, y, lc, _this.selectCtx);
        _this.selectedShape = lc.shapes[shapeIndex];
        if (_this.selectedShape != null) {
          lc.trigger('shapeSelected', {
            selectedShape: _this.selectedShape
          });
          lc.setShapesInProgress([
            _this.selectedShape, createShape('SelectionBox', {
              shape: _this.selectedShape,
              handleSize: 0
            })
          ]);
          lc.repaintLayer('main');
          br = _this.selectedShape.getBoundingRect();
          return _this.dragOffset = {
            x: x - br.x,
            y: y - br.y
          };
        }
      };
    })(this);
    onDrag = (function(_this) {
      return function(arg) {
        var x, y;
        x = arg.x, y = arg.y;
        if (_this.selectedShape != null) {
          _this.didDrag = true;
          _this.selectedShape.setUpperLeft({
            x: x - _this.dragOffset.x,
            y: y - _this.dragOffset.y
          });
          lc.setShapesInProgress([
            _this.selectedShape, createShape('SelectionBox', {
              shape: _this.selectedShape,
              handleSize: 0
            })
          ]);
          return lc.repaintLayer('main');
        }
      };
    })(this);
    onUp = (function(_this) {
      return function(arg) {
        var x, y;
        x = arg.x, y = arg.y;
        if (_this.didDrag) {
          _this.didDrag = false;
          lc.trigger('shapeMoved', {
            shape: _this.selectedShape
          });
          lc.trigger('drawingChange', {});
          lc.repaintLayer('main');
          return _this._drawSelectCanvas(lc);
        }
      };
    })(this);
    selectShapeUnsubscribeFuncs.push(lc.on('lc-pointerdown', onDown));
    selectShapeUnsubscribeFuncs.push(lc.on('lc-pointerdrag', onDrag));
    selectShapeUnsubscribeFuncs.push(lc.on('lc-pointerup', onUp));
    return this._drawSelectCanvas(lc);
  };

  SelectShape.prototype.willBecomeInactive = function(lc) {
    this._selectShapeUnsubscribe();
    return lc.setShapesInProgress([]);
  };

  SelectShape.prototype._drawSelectCanvas = function(lc) {
    var shapes;
    this.selectCanvas.width = lc.canvas.width;
    this.selectCanvas.height = lc.canvas.height;
    this.selectCtx.clearRect(0, 0, this.selectCanvas.width, this.selectCanvas.height);
    shapes = lc.shapes.map((function(_this) {
      return function(shape, index) {
        return createShape('SelectionBox', {
          shape: shape,
          handleSize: 0,
          backgroundColor: "#" + (_this._intToHex(index))
        });
      };
    })(this));
    return lc.draw(shapes, this.selectCtx);
  };

  SelectShape.prototype._intToHex = function(i) {
    return ("000000" + (i.toString(16))).slice(-6);
  };

  SelectShape.prototype._getPixel = function(x, y, lc, ctx) {
    var p, pixel;
    p = lc.drawingCoordsToClientCoords(x, y);
    pixel = ctx.getImageData(p.x, p.y, 1, 1).data;
    if (pixel[3]) {
      return parseInt(this._rgbToHex(pixel[0], pixel[1], pixel[2]), 16);
    } else {
      return null;
    }
  };

  SelectShape.prototype._componentToHex = function(c) {
    var hex;
    hex = c.toString(16);
    return ("0" + hex).slice(-2);
  };

  SelectShape.prototype._rgbToHex = function(r, g, b) {
    return "" + (this._componentToHex(r)) + (this._componentToHex(g)) + (this._componentToHex(b));
  };

  return SelectShape;

})(Tool);


},{"../core/shapes":13,"./base":29}],28:[function(require,module,exports){
var Text, Tool, createShape, getIsPointInBox,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Tool = require('./base').Tool;

createShape = require('../core/shapes').createShape;

getIsPointInBox = function(point, box) {
  if (point.x < box.x) {
    return false;
  }
  if (point.y < box.y) {
    return false;
  }
  if (point.x > box.x + box.width) {
    return false;
  }
  if (point.y > box.y + box.height) {
    return false;
  }
  return true;
};

module.exports = Text = (function(superClass) {
  extend(Text, superClass);

  Text.prototype.name = 'Text';

  Text.prototype.iconName = 'text';

  function Text() {
    this.text = '';
    this.font = 'bold 18px sans-serif';
    this.currentShape = null;
    this.currentShapeState = null;
    this.initialShapeBoundingRect = null;
    this.dragAction = null;
    this.didDrag = false;
  }

  Text.prototype.didBecomeActive = function(lc) {
    var switchAway, unsubscribeFuncs, updateInputEl;
    unsubscribeFuncs = [];
    this.unsubscribe = (function(_this) {
      return function() {
        var func, i, len, results;
        results = [];
        for (i = 0, len = unsubscribeFuncs.length; i < len; i++) {
          func = unsubscribeFuncs[i];
          results.push(func());
        }
        return results;
      };
    })(this);
    switchAway = (function(_this) {
      return function() {
        _this._ensureNotEditing(lc);
        _this._clearCurrentShape(lc);
        return lc.repaintLayer('main');
      };
    })(this);
    updateInputEl = (function(_this) {
      return function() {
        return _this._updateInputEl(lc);
      };
    })(this);
    // unsubscribeFuncs.push(lc.on('drawingChange', switchAway)); //解决如果老师在白板上打字,这时有个学生在白板上涂鸦,老师打的字就不显示了 ,  qgs , 20180307
    unsubscribeFuncs.push(lc.on('zoom', updateInputEl));
    unsubscribeFuncs.push(lc.on('imageSizeChange', updateInputEl));
    unsubscribeFuncs.push(lc.on('snapshotLoad', (function(_this) {
      return function() {
        _this._clearCurrentShape(lc);
        return lc.repaintLayer('main');
      };
    })(this)));
    unsubscribeFuncs.push(lc.on('primaryColorChange', (function(_this) {
      return function(newColor) {
        if (!_this.currentShape) {
          return;
        }
        _this.currentShape.color = newColor;
        _this._updateInputEl(lc);
        return lc.repaintLayer('main');
      };
    })(this)));
    return unsubscribeFuncs.push(lc.on('setFont', (function(_this) {
      return function(font) {
        if (!_this.currentShape) {
          return;
        }
        _this.font = font;
        _this.currentShape.setFont(font);
        _this._setShapesInProgress(lc);
        _this._updateInputEl(lc);
        return lc.repaintLayer('main');
      };
    })(this)));
  };

  Text.prototype.willBecomeInactive = function(lc) {
    if (this.currentShape) {
      this._ensureNotEditing(lc);
      this.commit(lc);
    }
    return this.unsubscribe();
  };

  Text.prototype.setText = function(text) {
    return this.text = text;
  };

  Text.prototype._ensureNotEditing = function(lc) {
    if (this.currentShapeState === 'editing') {
      return this._exitEditingState(lc);
    }
  };

  Text.prototype._clearCurrentShape = function(lc) {
    this.currentShape = null;
    this.initialShapeBoundingRect = null;
    this.currentShapeState = null;
    return lc.setShapesInProgress([]);
  };

  Text.prototype.commit = function(lc) {
    if (this.currentShape.text) {
      lc.saveShape(this.currentShape);
    }
    this._clearCurrentShape(lc);
    return lc.repaintLayer('main');
  };

  Text.prototype._getSelectionShape = function(ctx, backgroundColor) {
    if (backgroundColor == null) {
      backgroundColor = null;
    }
    return createShape('SelectionBox', {
      shape: this.currentShape,
      ctx: ctx,
      backgroundColor: backgroundColor
    });
  };

  Text.prototype._setShapesInProgress = function(lc) {
    switch (this.currentShapeState) {
      case 'selected':
        return lc.setShapesInProgress([this._getSelectionShape(lc.ctx), this.currentShape]);
      case 'editing':
        return lc.setShapesInProgress([this._getSelectionShape(lc.ctx, '#fff')]);
      default:
        return lc.setShapesInProgress([this.currentShape]);
    }
  };

  Text.prototype.begin = function(x, y, lc) {
    var br, point, selectionBox, selectionShape;
    this.dragAction = 'none';
    this.didDrag = false;
    if (this.currentShapeState === 'selected' || this.currentShapeState === 'editing') {
      br = this.currentShape.getBoundingRect(lc.ctx);
      selectionShape = this._getSelectionShape(lc.ctx);
      selectionBox = selectionShape.getBoundingRect();
      point = {
        x: x,
        y: y
      };
      if (getIsPointInBox(point, br)) {
        this.dragAction = 'move';
      }
      if (getIsPointInBox(point, selectionShape.getBottomRightHandleRect())) {
        this.dragAction = 'resizeBottomRight';
      }
      if (getIsPointInBox(point, selectionShape.getTopLeftHandleRect())) {
        this.dragAction = 'resizeTopLeft';
      }
      if (getIsPointInBox(point, selectionShape.getBottomLeftHandleRect())) {
        this.dragAction = 'resizeBottomLeft';
      }
      if (getIsPointInBox(point, selectionShape.getTopRightHandleRect())) {
        this.dragAction = 'resizeTopRight';
      }
      if (this.dragAction === 'none' && this.currentShapeState === 'editing') {
        this.dragAction = 'stop-editing';
        this._exitEditingState(lc);
      }
    } else {
      this.color = lc.getColor('primary');
      this.currentShape = createShape('Text', {
        x: x,
        y: y,
        text: this.text,
        color: this.color,
        font: this.font,
        v: 1
      });
      this.dragAction = 'place';
      this.currentShapeState = 'selected';
    }
    if (this.dragAction === 'none') {
      this.commit(lc);
      return;
    }
    this.initialShapeBoundingRect = this.currentShape.getBoundingRect(lc.ctx);
    this.dragOffset = {
      x: x - this.initialShapeBoundingRect.x,
      y: y - this.initialShapeBoundingRect.y
    };
    this._setShapesInProgress(lc);
    return lc.repaintLayer('main');
  };

  Text.prototype["continue"] = function(x, y, lc) {
    var br, brBottom, brRight;
    if (this.dragAction === 'none') {
      return;
    }
    br = this.initialShapeBoundingRect;
    brRight = br.x + br.width;
    brBottom = br.y + br.height;
    switch (this.dragAction) {
      case 'place':
        this.currentShape.x = x;
        this.currentShape.y = y;
        this.didDrag = true;
        break;
      case 'move':
        this.currentShape.x = x - this.dragOffset.x;
        this.currentShape.y = y - this.dragOffset.y;
        this.didDrag = true;
        break;
      case 'resizeBottomRight':
        this.currentShape.setSize(x - (this.dragOffset.x - this.initialShapeBoundingRect.width) - br.x, y - (this.dragOffset.y - this.initialShapeBoundingRect.height) - br.y);
        break;
      case 'resizeTopLeft':
        this.currentShape.setSize(brRight - x + this.dragOffset.x, brBottom - y + this.dragOffset.y);
        this.currentShape.setPosition(x - this.dragOffset.x, y - this.dragOffset.y);
        break;
      case 'resizeBottomLeft':
        this.currentShape.setSize(brRight - x + this.dragOffset.x, y - (this.dragOffset.y - this.initialShapeBoundingRect.height) - br.y);
        this.currentShape.setPosition(x - this.dragOffset.x, this.currentShape.y);
        break;
      case 'resizeTopRight':
        this.currentShape.setSize(x - (this.dragOffset.x - this.initialShapeBoundingRect.width) - br.x, brBottom - y + this.dragOffset.y);
        this.currentShape.setPosition(this.currentShape.x, y - this.dragOffset.y);
    }
    this._setShapesInProgress(lc);
    lc.repaintLayer('main');
    return this._updateInputEl(lc);
  };

  Text.prototype.end = function(x, y, lc) {
    if (!this.currentShape) {
      return;
    }
    this.currentShape.setSize(this.currentShape.forcedWidth, 0);
    if (this.currentShapeState === 'selected') {
      if (this.dragAction === 'place' || (this.dragAction === 'move' && !this.didDrag)) {
        this._enterEditingState(lc);
      }
    }
    this._setShapesInProgress(lc);
    lc.repaintLayer('main');
    return this._updateInputEl(lc);
  };

  Text.prototype._enterEditingState = function(lc) {
    var onChange;
    this.currentShapeState = 'editing';
    if (this.inputEl) {
        throw "State error";
    }
    /*qiushao: 这里修改文本输入框样式,暂时没有解决*/
    this.inputEl = document.createElement('textarea');
    this.inputEl.className = 'text-tool-input';
    this.inputEl.style.position = 'absolute';
    this.inputEl.style.transformOrigin = '0px 0px';
    this.inputEl.style.backgroundColor = 'transparent';
    this.inputEl.style.border = 'none';
    this.inputEl.style.outline = 'none';
    this.inputEl.style.margin = '0';
    this.inputEl.style.padding = '4px';
    this.inputEl.style.zIndex = '1000';
    this.inputEl.style.overflow = 'hidden';
    this.inputEl.style.resize = 'none';
    this.inputEl.value = this.currentShape.text;
    this.inputEl.addEventListener('mousedown', function(e) {
        return e.stopPropagation();
    });
    this.inputEl.addEventListener('touchstart', function(e) {
      return e.stopPropagation();
    });
    onChange = (function(_this) {
      return function(e) {
        _this.currentShape.setText(e.target.value);
        _this.currentShape.enforceMaxBoundingRect(lc);
        _this._setShapesInProgress(lc);
        lc.repaintLayer('main');
        _this._updateInputEl(lc);
        return e.stopPropagation();
      };
    })(this);
    this.inputEl.addEventListener('keydown', (function(_this) {
      return function() {
        return _this._updateInputEl(lc, true);
      };
    })(this));
    this.inputEl.addEventListener('keyup', onChange);
    this.inputEl.addEventListener('change', onChange);
    this._updateInputEl(lc);
    lc.containerEl.appendChild(this.inputEl);
    this.inputEl.focus();
    return this._setShapesInProgress(lc);
  };

  Text.prototype._exitEditingState = function(lc) {
    this.currentShapeState = 'selected';
    lc.containerEl.removeChild(this.inputEl);
    this.inputEl = null;
    this._setShapesInProgress(lc);
    return lc.repaintLayer('main');
  };

  Text.prototype._updateInputEl = function(lc, withMargin) {
    var br, transformString;
    if (withMargin == null) {
      withMargin = false;
    }
    if (!this.inputEl) {
      return;
    }
    br = this.currentShape.getBoundingRect(lc.ctx, true);
    this.inputEl.style.font = this.currentShape.font;
    this.inputEl.style.color = this.currentShape.color;
    this.inputEl.style.left = (lc.position.x / lc.backingScale + br.x * lc.scale - 4) + "px";
    this.inputEl.style.top = (lc.position.y / lc.backingScale + br.y * lc.scale - 4) + "px";
    if (withMargin && !this.currentShape.forcedWidth) {
      this.inputEl.style.width = (br.width + 10 + this.currentShape.renderer.emDashWidth) + "px";
    } else {
      this.inputEl.style.width = (br.width + 12) + "px";
    }
    if (withMargin) {
      this.inputEl.style.height = (br.height + 10 + this.currentShape.renderer.metrics.leading) + "px";
    } else {
      this.inputEl.style.height = (br.height + 10) + "px";
    }
    transformString = "scale(" + lc.scale + ")";
    this.inputEl.style.transform = transformString;
    this.inputEl.style.webkitTransform = transformString;
    this.inputEl.style.MozTransform = transformString;
    this.inputEl.style.msTransform = transformString;
    return this.inputEl.style.OTransform = transformString;
  };

  Text.prototype.optionsStyle = 'font';

  return Text;

})(Tool);


},{"../core/shapes":13,"./base":29}],29:[function(require,module,exports){
var Tool, ToolWithStroke, tools,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

tools = {};

tools.Tool = Tool = (function() {
  function Tool() {}

  Tool.prototype.name = null;

  Tool.prototype.iconName = null;

  Tool.prototype.usesSimpleAPI = true;

  Tool.prototype.begin = function(x, y, lc) {};

  Tool.prototype["continue"] = function(x, y, lc) {};

  Tool.prototype.end = function(x, y, lc) {};

  Tool.prototype.optionsStyle = null;

  Tool.prototype.didBecomeActive = function(lc) {};

  Tool.prototype.willBecomeInactive = function(lc) {};

  return Tool;

})();

tools.ToolWithStroke = ToolWithStroke = (function(superClass) {
  extend(ToolWithStroke, superClass);

  function ToolWithStroke(lc) {
    this.strokeWidth = lc.opts.defaultStrokeWidth;
  }

  ToolWithStroke.prototype.optionsStyle = 'stroke-width';

  ToolWithStroke.prototype.didBecomeActive = function(lc) {
    var unsubscribeFuncs;
    unsubscribeFuncs = [];
    this.unsubscribe = (function(_this) {
      return function() {
        var func, i, len, results;
        results = [];
        for (i = 0, len = unsubscribeFuncs.length; i < len; i++) {
          func = unsubscribeFuncs[i];
          results.push(func());
        }
        return results;
      };
    })(this);
    return unsubscribeFuncs.push(lc.on('setStrokeWidth', (function(_this) {
      return function(strokeWidth) {
        _this.strokeWidth = strokeWidth;
        return lc.trigger('toolDidUpdateOptions');
      };
    })(this)));
  };

  ToolWithStroke.prototype.willBecomeInactive = function(lc) {
    return this.unsubscribe();
  };

  return ToolWithStroke;

})(Tool);

module.exports = tools;


},{}]},{},[18])(18)
});

/*Slider工具
 * @module TalkSlider
 * @description  Slider工具
 * @author 李珂
 * @date 2018-05-05
 */
'use strict';
window.TalkSlider = function (data){
    var that = {} ;
    var btn='',bar='',track='',txtValue='';
    var step='',mark='',rail='',can=false;
    var round=100,discrepancy=100;
    var sliderContainer=document.getElementById(data.sliderContainer.id);
    sliderContainer.classList.add('custom-tk-volume-slider-container');
    if(data.sliderContainer){
        if(data.sliderContainer.direction==='vertikal'){
            sliderContainer.classList.add('vertikal');
        }
    }
    bar=document.createElement('div');
    bar.classList.add('custom-tk-rc-slider','custom-tk-slider','custom-tk-detection-device')
    if(data.sliderContainer.direction==='vertikal'){
        bar.classList.add('vertikal');
    }
    rail=document.createElement('div');
    rail.classList.add('custom-tk-rc-slider-rail');
    if(data.sliderContainer.direction==='vertikal'){
        rail.classList.add('vertikal');
    }
    track=document.createElement('div');
    track.classList.add('custom-tk-rc-slider-track');
    if(data.sliderContainer.direction==='vertikal'){
        track.classList.add('vertikal');
    }
    step=document.createElement('div');
    step.classList.add('custom-tk-rc-slider-step');
    if(data.sliderContainer.direction==='vertikal'){
        step.classList.add('vertikal');
    }
    btn=document.createElement('div');
    btn.classList.add('custom-tk-rc-slider-handle');
    if(data.sliderContainer.direction==='vertikal'){
        btn.classList.add('vertikal');
    }
    mark=document.createElement('div');
    mark.classList.add('custom-tk-rc-slider-mark');
    if(data.sliderContainer.direction==='vertikal'){
        mark.classList.add('vertikal');
    }
    bar.appendChild(rail);
    bar.appendChild(track);
    bar.appendChild(step);
    bar.appendChild(btn);
    bar.appendChild(mark);
    sliderContainer.appendChild(bar);
    var g = document, b = window, m = Math;
    bar.onmousedown=function(e){
        can=true
        if (data.sliderContainer.direction === 'vertikal') {
            if (data.onBeforeChange) {
                data.onBeforeChange(discrepancy);
                // console.log('SVonBeforeChange',discrepancy)
            }
            var y = (e || b.event).clientY;
            var barheight = bar.offsetHeight;
            discrepancy = m.round(((bar.getBoundingClientRect().bottom - y) / barheight) * 100);
            if (discrepancy > 100) {
                discrepancy = 100;
            } else if (discrepancy < 0) {
                discrepancy = 0;
            }
            btn.style.bottom = discrepancy + '%';
            track.style.height = discrepancy + '%';
            bar.onmouseup = function (event) {
                if(can){
                    if (data.onAfterChange) {
                        data.onAfterChange(discrepancy);
                        // console.log('SVonAfterChange', discrepancy)
                    }
                }
                if (event) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                return false;
            };
        }
        else {
            if (data.onBeforeChange) {
                data.onBeforeChange(discrepancy);
                // console.log('SonBeforeChange', discrepancy)
            }
            var x = (e || b.event).clientX;
            var barwidth = bar.offsetWidth;
            discrepancy = m.round(((x - bar.getBoundingClientRect().left) / barwidth) * 100);
            if (discrepancy > 100) {
                discrepancy = 100;
            } else if (discrepancy < 0) {
                discrepancy = 0;
            }
            btn.style.left = discrepancy + '%';
            track.style.width = discrepancy + '%';
            bar.onmouseup = function () {
                if(can){
                    if (data.onAfterChange) {
                        data.onAfterChange(discrepancy);
                        // console.log('SonAfterChange', discrepancy)
                    }
                }

            };
        }
        if (e && e.stopPropagation) {
            e.stopPropagation()
        }
        else {
            window.event.cancelBubble = true;
        }

    }
    btn.onclick = function (e) {
        if ( e && e.stopPropagation ){
            e.stopPropagation()}
        else {
            window.event.cancelBubble = true;
        }
    }
    btn.onmousedown = function (e) {
        var canDrag=false
        if(data.sliderContainer.direction==='vertikal')
        {
            if(data.onBeforeChange){
                data.onBeforeChange(round);
                // console.log('BSVertikalonBeforeChange',round)
            }
            var y = (e || b.event).clientY;
            var l = btn.offsetTop;
            var barhidth = bar.offsetHeight;
            var btnhidth = btn.offsetHeight;
            var max = barhidth - btnhidth;
            var discrepancy = barhidth - max;
            document.onmousemove = function (e) {
                var thisY = (e || b.event).clientY;
                var to = m.min(max, m.max(-btnhidth, l + (thisY - y)));
                round=100-m.round(((to+discrepancy)/barhidth)*100);
                if(round>100){
                    round=100;
                }else if(round<0){
                    round=0;
                }

                btn.style.bottom = 'calc(('+round+ '%) - 3px)';
                track.style.height =round + '%';
                if(data.onChange){
                    data.onChange(round)
                    // console.log('BSVvertikalonChange',round)
                }
                //此句代码可以除去选中效果
                b.getSelection ? b.getSelection().removeAllRanges() : g.selection.empty();
                canDrag = true
            };
            //注意此处是document 才能有好的拖动效果
            document.onmouseup = function(){
                document.onmousemove=null;
                if(data.onAfterChange){
                    data.onAfterChange(round)
                    // console.log('BSVvertikonAfterChange', round)
                }
                document.onmouseup = null;
            };
        }
        else{
            if(data.onBeforeChange&&canDrag){
                data.onBeforeChange(round);
                // console.log('BSonBeforeChange',round)
            }
            var x = (e || b.event).clientX;
            var l = btn.offsetLeft;
            var barwidth = bar.offsetWidth;
            var btnwidth = btn.offsetWidth;
            var max = bar.offsetWidth - this.offsetWidth;
            var discrepancy = barwidth - max;
            document.onmousemove = function (e) {
                var thisX = (e || b.event).clientX;
                var to = m.min(max, m.max(-btnwidth, l + (thisX - x)));
                round=m.round(((to+discrepancy)/barwidth)*100);
                if(round>100){
                    round=100;
                }else if(round<0){
                    round=0;
                }
                btn.style.left = round+ '%';
                track.style.width =round + '%';
                if(data.onChange){
                    data.onChange(round);
                    // console.log('BSonChange',round)
                }
                //此句代码可以除去选中效果
                b.getSelection ? b.getSelection().removeAllRanges() : g.selection.empty();
                canDrag = true
            };
            //注意此处是document 才能有好的拖动效果
            document.onmouseup = function () {
                document.onmousemove = null;
                if (canDrag&&data.onAfterChange) {
                    data.onAfterChange(round)
                    // console.log('BSonAfterChange', round)
                }
                document.onmouseup = null;
            };

        }
        if ( e && e.stopPropagation ){
            e.stopPropagation()}
        else {
            window.event.cancelBubble = true;
        }

    };
    btn.ontouchstart = function (e) {
        can=false
        if(data.sliderContainer.direction==='vertikal') {
            if(data.onBeforeChange){
                data.onBeforeChange(round);
                // console.log('BTVertikalonBeforeChange',round)
            }
            var y = (e || b.event).touches[0].clientY;
            var l = btn.offsetTop;
            var barhidth = bar.offsetHeight;
            var btnhidth = btn.offsetHeight;
            var max = barhidth - btnhidth;
            var discrepancy = barhidth - max;
            document.ontouchmove = function (e) {
                var thisY = (e || b.event).touches[0].clientY;
                var to = m.min(max, m.max(-btnhidth, l + (thisY - y)));
                round=100-m.round(((to+discrepancy)/barhidth)*100);
                if(round>100){
                    round=100;
                }else if(round<0){
                    round=0;
                }
                btn.style.bottom = 'calc(('+round+ '%) - 3px)';
                track.style.height =round + '%';
                if(data.onChange){
                    data.onChange(round)
                    // console.log('BTVvertikalonChange',round)
                }
                // musicAudio.volume = round/100
                //此句代码可以除去选中效果
                b.getSelection ? b.getSelection().removeAllRanges() : g.selection.empty();
            };
            //注意此处是document 才能有好的拖动效果
            document.ontouchend = function(){
                document.ontouchmove=null;
                if(data.onAfterChange){
                    data.onAfterChange(round)
                    // console.log('BTVvertikalonAfterChange',round)
                }
                document.ontouchend = null;
            };
        }
        else{
            if(data.onBeforeChange){
                data.onBeforeChange(round);
                // console.log('BTonBeforeChange',round)
            }
            var x = (e || b.event).touches[0].clientX;
            var l = btn.offsetLeft;
            var barwidth = bar.offsetWidth;
            var btnwidth = btn.offsetWidth;
            var max = bar.offsetWidth - this.offsetWidth;
            var discrepancy = barwidth - max;
            btn.ontouchmove = function (e) {
                var thisX = (e || b.event).touches[0].clientX;
                var to = m.min(max, m.max(-btnwidth, l + (thisX - x)));
                round=m.round(((to+discrepancy)/barwidth)*100);
                if(round>100){
                    round=100;
                }else if(round<0){
                    round=0;
                }

                btn.style.left = round+ '%';
                track.style.width =round + '%';
                if(data.onChange){
                    data.onChange(round);
                    // console.log('BTonChange',round)
                }

                // musicAudio.volume = round/100
                //此句代码可以除去选中效果
                b.getSelection ? b.getSelection().removeAllRanges() : g.selection.empty();
            };
            //注意此处是document 才能有好的拖动效果
            document.ontouchend = function(){
                document.ontouchmove=null;
                if (data.onAfterChange) {
                        data.onAfterChange(round)
                        // console.log('BTonAfterChange', round)
                }
                    document.ontouchend = null;
                };

        }
        if ( e && e.stopPropagation ){
            e.stopPropagation()}
        else {
            window.event.cancelBubble = true;
        }
    };

    that.setProgress =function(volume){
        if(volume !== undefined){
            if (data.sliderContainer.direction === 'vertikal') {
                btn.style.bottom = volume + '%';
                track.style.height = volume + '%';
            }else{
                btn.style.left = volume + '%';
                track.style.width = volume + '%';
            }
        }
    };
    // that.setProgress( 0 );
    return that ;
};


/*Drag工具
 * @module TalkDrag
 * @description  拖拽工具
 * @author 支祥
 * @date 2018-05-05
 */
'use strict';
window.TalkDrag=function(element,options){
    var that=this;
    options = options || {} ;
    options.containerData = options.containerData || {} ;
    that.flag=false;
    that.element = element ;
    that.leftPercent= options.containerData.left !== undefined ? options.containerData.left / 100 : 0 ;
    that.topPercent=  options.containerData.top !== undefined ? options.containerData.top / 100 : 0 ;
    that.disabled = options.disabled !== undefined ? options.disabled : false ;
    if( typeof element === 'string' ){
        that.element = document.getElementById(element);
    }
    if( !that.element ){
        console.error( 'parameter elementId cannot find a node!' );
        return ;
    }
    if(options.containerData.parentNodeID !== undefined){
        that.containerElement = options.containerData.parentNodeID ;
        if( typeof options.containerData.parentNodeID === 'string' ){
            that.containerElement = document.getElementById( options.containerData.parentNodeID );
        }
    }else{
        that.containerElement=that.element.parentNode;
    }

    if( that.containerElement ){
        that.containerElement.className = ( that.containerElement.className.replace('talk-cloud-drag-parent-container' , '') +  ' talk-cloud-drag-parent-container ')  ;
    }

    that.cur={x:0,y:0};

    that.updateDisabled = function (disabled) {
        that.disabled = disabled ;
    };
    that.destroy = function () {
        window.removeEventListener('resize' , that.resizeCallback , false);
        that.element.removeEventListener("mousedown",that.mousedownOrTouchstartCallback ,false);
        that.element.removeEventListener("touchstart" ,that.mousedownOrTouchstartCallback ,false);
        that.element.removeEventListener("touchmove",that.mousemoveOrTouchmoveEventCallback,false);
        that.element.removeEventListener("touchend",that.mouseupOrTouchendEventCallback,false);
        document.documentElement.removeEventListener("mousemove",that.mousemoveOrTouchmoveEventCallback,false);
        document.documentElement.removeEventListener("mouseup",that.mouseupOrTouchendEventCallback,false);
    };
    that.resize = function () {
        that.element.style.left=(that.containerElement.offsetWidth-that.element.offsetWidth)*that.leftPercent +"px";
        that.element.style.top=(that.containerElement.offsetHeight-that.element.offsetHeight)*that.topPercent+"px";
    };
    that.setPosition=function(left,top){
        that.leftPercent=left/100;
        that.topPercent=top/100;
        that.element.style.left=(that.containerElement.offsetWidth-that.element.offsetWidth)*that.leftPercent +"px";
        that.element.style.top=(that.containerElement.offsetHeight-that.element.offsetHeight)*that.topPercent+"px";
    };
    that.down=function(event){
        if( event.type === 'mousedown' ){
            document.documentElement.addEventListener("mousemove",that.mousemoveOrTouchmoveEventCallback,false);
            document.documentElement.addEventListener("mouseup",that.mouseupOrTouchendEventCallback,false);
        }

        // that.downTimer = setTimeout( function () {
            that.element.setAttribute('talkDragState' , 'onBeforeDrag');
            if( that.containerElement ){
                that.containerElement.setAttribute('talkDragParentState' , 'onBeforeDrag');
            }
            that.flag=true;
            var touch;
            if(event.touches){
                touch=event.touches[0];
            }else{
                touch=event;
            }
            that.cur.x=touch.clientX;
            that.cur.y = touch.clientY;
            that.dx = that.element.offsetLeft;
            that.dy = that.element.offsetTop;
        /*if(options.onBeforeDrag){
            options.onBeforeDrag(that.leftPercent*100,that.topPercent*100);
        }*/
        if( event.type === 'mousedown' ){
            if(options.onBeforeDrag){
                options.onBeforeDrag(that.leftPercent*100,that.topPercent*100);
            }
        }else if(event.type === 'touchstart') {
            that.flag = false;
            clearTimeout( that.downTimer );
            that.downTimer = setTimeout( function () {
                that.flag = true;
                that.element.style.pointerEvents = 'none';
                that.element.style.boxShadow = '0 0 0.2rem 0.05rem #222';
                that.element.style.transform = 'scale(1.05)';
                if(options.onBeforeDrag){
                    options.onBeforeDrag(that.leftPercent*100,that.topPercent*100);
                }
            } , 500 ) ;
        }
    };
    that.move=function( event ){
        if (event.type === 'touchmove') {
            var offsetX = Math.abs(event.touches[0].clientX - that.cur.x);
            var offsetY = Math.abs(event.touches[0].clientY - that.cur.y);
            if (Math.hypot(offsetX,offsetY) >= 40) { // 所有参数的平方和的平方根。
                clearTimeout(that.downTimer);
                that.downTimer = undefined ;
            }
        }
        if(that.flag){
            that.element.setAttribute('talkDragState' , 'onDrag');
            if( that.containerElement ){
                that.containerElement.setAttribute('talkDragParentState' , 'onDrag');
            }
            var touch ;
            if(event.touches){
                touch = event.touches[0];
            }else {
                touch = event;
            }
            if(options.onDrag){
                options.onDrag(that.leftPercent*100,that.topPercent*100);
            }
            //计算边界值
            var maxX=that.containerElement.offsetWidth-that.element.offsetWidth;
            var maxY=that.containerElement.offsetHeight-that.element.offsetHeight;
            that.nx = touch.clientX - that.cur.x;
            that.ny = touch.clientY - that.cur.y;
            var x = that.dx+that.nx;
            var y = that.dy+that.ny;
            var x = Math.min(Math.max(0,x),maxX);
            var y = Math.min(Math.max(0,y),maxY);

            that.element.style.left = x+"px";
            that.element.style.top = y +"px";
            //计算百分比定位
            that.leftPercent=x/(that.containerElement.offsetWidth-that.element.offsetWidth);
            that.topPercent=y/(that.containerElement.offsetHeight-that.element.offsetHeight);

        }
    };
    that.end=function(event){
        if( event.type === 'mouseup' ){
            document.documentElement.removeEventListener("mousemove",that.mousemoveOrTouchmoveEventCallback,false);
            document.documentElement.removeEventListener("mouseup",that.mouseupOrTouchendEventCallback,false);
        }
        if( event.type === 'touchend' ){
            clearTimeout( that.downTimer );
            that.downTimer = undefined ;
            that.flag = false;
            that.element.style.pointerEvents = 'auto';
            that.element.style.boxShadow = '0 0 0 0 #222';
            that.element.style.transform = 'scale(1)';
        }
        if( that.flag ){
            that.element.setAttribute('talkDragState' , 'onAfterDrag');
            if( that.containerElement ){
                that.containerElement.setAttribute('talkDragParentState' , 'onAfterDrag');
            }
            that.flag = false;
            if(options.onAfterDrag){
                options.onAfterDrag(that.leftPercent*100,that.topPercent*100);
            }
        }
    };
    that.resizeCallback = function(event){
        that.resize();
    };
    that.mousedownOrTouchstartCallback = function(event){
        if( !that.flag && that.disabled ){
            return ;
        }
        try{
            that.down(event);
        }catch (err){
            console.error(err);
        }
        return false;
    } ;
    that.mousemoveOrTouchmoveEventCallback = function(event){
        if( !that.flag && that.disabled ){
            return ;
        }
        try{
            that.move(event);
        }catch (err){
            console.error(err);
        }
        return false;
    };
    that.mouseupOrTouchendEventCallback =  function(event){
        if( !that.flag && that.disabled ){
            return ;
        }
        try{
            that.end(event);
        }catch (err){
            console.error(err);
        }
        return false;
    };
    window.addEventListener('resize' , that.resizeCallback , false);
    that.element.addEventListener("mousedown",that.mousedownOrTouchstartCallback ,false);
    that.element.addEventListener("touchstart" ,that.mousedownOrTouchstartCallback ,false);
    that.element.addEventListener("touchmove",that.mousemoveOrTouchmoveEventCallback,false);
    that.element.addEventListener("touchend",that.mouseupOrTouchendEventCallback,false);
    that.element.setAttribute( "talkDrag" , 'true' );
    that.resize();
    return that;
};
/*
 * talk-whiteboard-sdk v3.0.0
 * 拓课云白板sdk
 * http://www.talk-cloud.com
 * © 2016-2017 北京拓课网络科技有限公司 版权所有 
 * date:2018-12-27 23:09:31
 * author:邱广生
 */

(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
"use strict";

require("core-js/shim");

require("regenerator-runtime/runtime");

require("core-js/fn/regexp/escape");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"core-js/fn/regexp/escape":3,"core-js/shim":330,"regenerator-runtime/runtime":2}],2:[function(require,module,exports){
(function (global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(require,module,exports){
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;

},{"../../modules/_core":25,"../../modules/core.regexp.escape":132}],4:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],5:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

},{"./_cof":20}],6:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_hide":44,"./_wks":130}],7:[function(require,module,exports){
'use strict';
var at = require('./_string-at')(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

},{"./_string-at":107}],8:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],9:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":53}],10:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"./_to-absolute-index":115,"./_to-length":119,"./_to-object":120}],11:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"./_to-absolute-index":115,"./_to-length":119,"./_to-object":120}],12:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":41}],13:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":115,"./_to-iobject":118,"./_to-length":119}],14:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_array-species-create":17,"./_ctx":27,"./_iobject":49,"./_to-length":119,"./_to-object":120}],15:[function(require,module,exports){
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var toLength = require('./_to-length');

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

},{"./_a-function":4,"./_iobject":49,"./_to-length":119,"./_to-object":120}],16:[function(require,module,exports){
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-array":51,"./_is-object":53,"./_wks":130}],17:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":16}],18:[function(require,module,exports){
'use strict';
var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":4,"./_invoke":48,"./_is-object":53}],19:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":20,"./_wks":130}],20:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],21:[function(require,module,exports){
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_an-instance":8,"./_ctx":27,"./_descriptors":31,"./_for-of":41,"./_iter-define":57,"./_iter-step":59,"./_meta":67,"./_object-create":72,"./_object-dp":73,"./_redefine-all":92,"./_set-species":101,"./_validate-collection":127}],22:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof');
var from = require('./_array-from-iterable');
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};

},{"./_array-from-iterable":12,"./_classof":19}],23:[function(require,module,exports){
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_an-instance":8,"./_an-object":9,"./_array-methods":14,"./_for-of":41,"./_has":43,"./_is-object":53,"./_meta":67,"./_redefine-all":92,"./_validate-collection":127}],24:[function(require,module,exports){
'use strict';
var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_an-instance":8,"./_export":35,"./_fails":37,"./_for-of":41,"./_global":42,"./_inherit-if-required":47,"./_is-object":53,"./_iter-detect":58,"./_meta":67,"./_redefine":93,"./_redefine-all":92,"./_set-to-string-tag":102}],25:[function(require,module,exports){
var core = module.exports = { version: '2.6.1' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],26:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":73,"./_property-desc":91}],27:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":4}],28:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = require('./_fails');
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

},{"./_fails":37}],29:[function(require,module,exports){
'use strict';
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"./_an-object":9,"./_to-primitive":121}],30:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],31:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":37}],32:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":42,"./_is-object":53}],33:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],34:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-gops":79,"./_object-keys":82,"./_object-pie":83}],35:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":25,"./_ctx":27,"./_global":42,"./_hide":44,"./_redefine":93}],36:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"./_wks":130}],37:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],38:[function(require,module,exports){
'use strict';
require('./es6.regexp.exec');
var redefine = require('./_redefine');
var hide = require('./_hide');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');
var regexpExec = require('./_regexp-exec');

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"./_defined":30,"./_fails":37,"./_hide":44,"./_redefine":93,"./_regexp-exec":95,"./_wks":130,"./es6.regexp.exec":227}],39:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":9}],40:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = require('./_is-array');
var isObject = require('./_is-object');
var toLength = require('./_to-length');
var ctx = require('./_ctx');
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

},{"./_ctx":27,"./_is-array":51,"./_is-object":53,"./_to-length":119,"./_wks":130}],41:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":9,"./_ctx":27,"./_is-array-iter":50,"./_iter-call":55,"./_to-length":119,"./core.get-iterator-method":131}],42:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],43:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],44:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":31,"./_object-dp":73,"./_property-desc":91}],45:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":42}],46:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":31,"./_dom-create":32,"./_fails":37}],47:[function(require,module,exports){
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"./_is-object":53,"./_set-proto":100}],48:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],49:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":20}],50:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":60,"./_wks":130}],51:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":20}],52:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":53}],53:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],54:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_cof":20,"./_is-object":53,"./_wks":130}],55:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":9}],56:[function(require,module,exports){
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":44,"./_object-create":72,"./_property-desc":91,"./_set-to-string-tag":102,"./_wks":130}],57:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":35,"./_hide":44,"./_iter-create":56,"./_iterators":60,"./_library":61,"./_object-gpo":80,"./_redefine":93,"./_set-to-string-tag":102,"./_wks":130}],58:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":130}],59:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],60:[function(require,module,exports){
module.exports = {};

},{}],61:[function(require,module,exports){
module.exports = false;

},{}],62:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],63:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var sign = require('./_math-sign');
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"./_math-sign":66}],64:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],65:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (
    arguments.length === 0
      // eslint-disable-next-line no-self-compare
      || x != x
      // eslint-disable-next-line no-self-compare
      || inLow != inLow
      // eslint-disable-next-line no-self-compare
      || inHigh != inHigh
      // eslint-disable-next-line no-self-compare
      || outLow != outLow
      // eslint-disable-next-line no-self-compare
      || outHigh != outHigh
  ) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};

},{}],66:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],67:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":37,"./_has":43,"./_is-object":53,"./_object-dp":73,"./_uid":125}],68:[function(require,module,exports){
var Map = require('./es6.map');
var $export = require('./_export');
var shared = require('./_shared')('metadata');
var store = shared.store || (shared.store = new (require('./es6.weak-map'))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};

},{"./_export":35,"./_shared":104,"./es6.map":162,"./es6.weak-map":269}],69:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_cof":20,"./_global":42,"./_task":114}],70:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":4}],71:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

},{"./_fails":37,"./_iobject":49,"./_object-gops":79,"./_object-keys":82,"./_object-pie":83,"./_to-object":120}],72:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":9,"./_dom-create":32,"./_enum-bug-keys":33,"./_html":45,"./_object-dps":74,"./_shared-key":103}],73:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":9,"./_descriptors":31,"./_ie8-dom-define":46,"./_to-primitive":121}],74:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":9,"./_descriptors":31,"./_object-dp":73,"./_object-keys":82}],75:[function(require,module,exports){
'use strict';
// Forced replacement prototype accessors methods
module.exports = require('./_library') || !require('./_fails')(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete require('./_global')[K];
});

},{"./_fails":37,"./_global":42,"./_library":61}],76:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":31,"./_has":43,"./_ie8-dom-define":46,"./_object-pie":83,"./_property-desc":91,"./_to-iobject":118,"./_to-primitive":121}],77:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":78,"./_to-iobject":118}],78:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":33,"./_object-keys-internal":81}],79:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],80:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":43,"./_shared-key":103,"./_to-object":120}],81:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":13,"./_has":43,"./_shared-key":103,"./_to-iobject":118}],82:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":33,"./_object-keys-internal":81}],83:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],84:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_core":25,"./_export":35,"./_fails":37}],85:[function(require,module,exports){
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};

},{"./_object-keys":82,"./_object-pie":83,"./_to-iobject":118}],86:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN = require('./_object-gopn');
var gOPS = require('./_object-gops');
var anObject = require('./_an-object');
var Reflect = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"./_an-object":9,"./_global":42,"./_object-gopn":78,"./_object-gops":79}],87:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat;
var $trim = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"./_global":42,"./_string-trim":112,"./_string-ws":113}],88:[function(require,module,exports){
var $parseInt = require('./_global').parseInt;
var $trim = require('./_string-trim').trim;
var ws = require('./_string-ws');
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"./_global":42,"./_string-trim":112,"./_string-ws":113}],89:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],90:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":9,"./_is-object":53,"./_new-promise-capability":70}],91:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],92:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":93}],93:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_core":25,"./_global":42,"./_has":43,"./_hide":44,"./_uid":125}],94:[function(require,module,exports){
'use strict';

var classof = require('./_classof');
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};

},{"./_classof":19}],95:[function(require,module,exports){
'use strict';

var regexpFlags = require('./_flags');

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"./_flags":39}],96:[function(require,module,exports){
module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};

},{}],97:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],98:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');
var aFunction = require('./_a-function');
var ctx = require('./_ctx');
var forOf = require('./_for-of');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};

},{"./_a-function":4,"./_ctx":27,"./_export":35,"./_for-of":41}],99:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};

},{"./_export":35}],100:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_an-object":9,"./_ctx":27,"./_is-object":53,"./_object-gopd":76}],101:[function(require,module,exports){
'use strict';
var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_descriptors":31,"./_global":42,"./_object-dp":73,"./_wks":130}],102:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":43,"./_object-dp":73,"./_wks":130}],103:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":104,"./_uid":125}],104:[function(require,module,exports){
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":25,"./_global":42,"./_library":61}],105:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":4,"./_an-object":9,"./_wks":130}],106:[function(require,module,exports){
'use strict';
var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"./_fails":37}],107:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":30,"./_to-integer":117}],108:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_defined":30,"./_is-regexp":54}],109:[function(require,module,exports){
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"./_defined":30,"./_export":35,"./_fails":37}],110:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length');
var repeat = require('./_string-repeat');
var defined = require('./_defined');

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":30,"./_string-repeat":111,"./_to-length":119}],111:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer');
var defined = require('./_defined');

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"./_defined":30,"./_to-integer":117}],112:[function(require,module,exports){
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"./_defined":30,"./_export":35,"./_fails":37,"./_string-ws":113}],113:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],114:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":20,"./_ctx":27,"./_dom-create":32,"./_global":42,"./_html":45,"./_invoke":48}],115:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":117}],116:[function(require,module,exports){
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"./_to-integer":117,"./_to-length":119}],117:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],118:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":30,"./_iobject":49}],119:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":117}],120:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":30}],121:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":53}],122:[function(require,module,exports){
'use strict';
if (require('./_descriptors')) {
  var LIBRARY = require('./_library');
  var global = require('./_global');
  var fails = require('./_fails');
  var $export = require('./_export');
  var $typed = require('./_typed');
  var $buffer = require('./_typed-buffer');
  var ctx = require('./_ctx');
  var anInstance = require('./_an-instance');
  var propertyDesc = require('./_property-desc');
  var hide = require('./_hide');
  var redefineAll = require('./_redefine-all');
  var toInteger = require('./_to-integer');
  var toLength = require('./_to-length');
  var toIndex = require('./_to-index');
  var toAbsoluteIndex = require('./_to-absolute-index');
  var toPrimitive = require('./_to-primitive');
  var has = require('./_has');
  var classof = require('./_classof');
  var isObject = require('./_is-object');
  var toObject = require('./_to-object');
  var isArrayIter = require('./_is-array-iter');
  var create = require('./_object-create');
  var getPrototypeOf = require('./_object-gpo');
  var gOPN = require('./_object-gopn').f;
  var getIterFn = require('./core.get-iterator-method');
  var uid = require('./_uid');
  var wks = require('./_wks');
  var createArrayMethod = require('./_array-methods');
  var createArrayIncludes = require('./_array-includes');
  var speciesConstructor = require('./_species-constructor');
  var ArrayIterators = require('./es6.array.iterator');
  var Iterators = require('./_iterators');
  var $iterDetect = require('./_iter-detect');
  var setSpecies = require('./_set-species');
  var arrayFill = require('./_array-fill');
  var arrayCopyWithin = require('./_array-copy-within');
  var $DP = require('./_object-dp');
  var $GOPD = require('./_object-gopd');
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };

},{"./_an-instance":8,"./_array-copy-within":10,"./_array-fill":11,"./_array-includes":13,"./_array-methods":14,"./_classof":19,"./_ctx":27,"./_descriptors":31,"./_export":35,"./_fails":37,"./_global":42,"./_has":43,"./_hide":44,"./_is-array-iter":50,"./_is-object":53,"./_iter-detect":58,"./_iterators":60,"./_library":61,"./_object-create":72,"./_object-dp":73,"./_object-gopd":76,"./_object-gopn":78,"./_object-gpo":80,"./_property-desc":91,"./_redefine-all":92,"./_set-species":101,"./_species-constructor":105,"./_to-absolute-index":115,"./_to-index":116,"./_to-integer":117,"./_to-length":119,"./_to-object":120,"./_to-primitive":121,"./_typed":124,"./_typed-buffer":123,"./_uid":125,"./_wks":130,"./core.get-iterator-method":131,"./es6.array.iterator":143}],123:[function(require,module,exports){
'use strict';
var global = require('./_global');
var DESCRIPTORS = require('./_descriptors');
var LIBRARY = require('./_library');
var $typed = require('./_typed');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var fails = require('./_fails');
var anInstance = require('./_an-instance');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var toIndex = require('./_to-index');
var gOPN = require('./_object-gopn').f;
var dP = require('./_object-dp').f;
var arrayFill = require('./_array-fill');
var setToStringTag = require('./_set-to-string-tag');
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"./_an-instance":8,"./_array-fill":11,"./_descriptors":31,"./_fails":37,"./_global":42,"./_hide":44,"./_library":61,"./_object-dp":73,"./_object-gopn":78,"./_redefine-all":92,"./_set-to-string-tag":102,"./_to-index":116,"./_to-integer":117,"./_to-length":119,"./_typed":124}],124:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var uid = require('./_uid');
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"./_global":42,"./_hide":44,"./_uid":125}],125:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],126:[function(require,module,exports){
var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":42}],127:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":53}],128:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":25,"./_global":42,"./_library":61,"./_object-dp":73,"./_wks-ext":129}],129:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":130}],130:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":42,"./_shared":104,"./_uid":125}],131:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":19,"./_core":25,"./_iterators":60,"./_wks":130}],132:[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export');
var $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });

},{"./_export":35,"./_replacer":96}],133:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });

require('./_add-to-unscopables')('copyWithin');

},{"./_add-to-unscopables":6,"./_array-copy-within":10,"./_export":35}],134:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $every = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":14,"./_export":35,"./_strict-method":106}],135:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { fill: require('./_array-fill') });

require('./_add-to-unscopables')('fill');

},{"./_add-to-unscopables":6,"./_array-fill":11,"./_export":35}],136:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":14,"./_export":35,"./_strict-method":106}],137:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":6,"./_array-methods":14,"./_export":35}],138:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":6,"./_array-methods":14,"./_export":35}],139:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $forEach = require('./_array-methods')(0);
var STRICT = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":14,"./_export":35,"./_strict-method":106}],140:[function(require,module,exports){
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":26,"./_ctx":27,"./_export":35,"./_is-array-iter":50,"./_iter-call":55,"./_iter-detect":58,"./_to-length":119,"./_to-object":120,"./core.get-iterator-method":131}],141:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $indexOf = require('./_array-includes')(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"./_array-includes":13,"./_export":35,"./_strict-method":106}],142:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', { isArray: require('./_is-array') });

},{"./_export":35,"./_is-array":51}],143:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":6,"./_iter-define":57,"./_iter-step":59,"./_iterators":60,"./_to-iobject":118}],144:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

},{"./_export":35,"./_iobject":49,"./_strict-method":106,"./_to-iobject":118}],145:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

},{"./_export":35,"./_strict-method":106,"./_to-integer":117,"./_to-iobject":118,"./_to-length":119}],146:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $map = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":14,"./_export":35,"./_strict-method":106}],147:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_create-property":26,"./_export":35,"./_fails":37}],148:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

},{"./_array-reduce":15,"./_export":35,"./_strict-method":106}],149:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

},{"./_array-reduce":15,"./_export":35,"./_strict-method":106}],150:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var html = require('./_html');
var cof = require('./_cof');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

},{"./_cof":20,"./_export":35,"./_fails":37,"./_html":45,"./_to-absolute-index":115,"./_to-length":119}],151:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $some = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":14,"./_export":35,"./_strict-method":106}],152:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"./_a-function":4,"./_export":35,"./_fails":37,"./_strict-method":106,"./_to-object":120}],153:[function(require,module,exports){
require('./_set-species')('Array');

},{"./_set-species":101}],154:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });

},{"./_export":35}],155:[function(require,module,exports){
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export');
var toISOString = require('./_date-to-iso-string');

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

},{"./_date-to-iso-string":28,"./_export":35}],156:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"./_export":35,"./_fails":37,"./_to-object":120,"./_to-primitive":121}],157:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

},{"./_date-to-primitive":29,"./_hide":44,"./_wks":130}],158:[function(require,module,exports){
var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  require('./_redefine')(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

},{"./_redefine":93}],159:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', { bind: require('./_bind') });

},{"./_bind":18,"./_export":35}],160:[function(require,module,exports){
'use strict';
var isObject = require('./_is-object');
var getPrototypeOf = require('./_object-gpo');
var HAS_INSTANCE = require('./_wks')('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });

},{"./_is-object":53,"./_object-dp":73,"./_object-gpo":80,"./_wks":130}],161:[function(require,module,exports){
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"./_descriptors":31,"./_object-dp":73}],162:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection":24,"./_collection-strong":21,"./_validate-collection":127}],163:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":35,"./_math-log1p":64}],164:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"./_export":35}],165:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"./_export":35}],166:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export');
var sign = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"./_export":35,"./_math-sign":66}],167:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"./_export":35}],168:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"./_export":35}],169:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":35,"./_math-expm1":62}],170:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export = require('./_export');

$export($export.S, 'Math', { fround: require('./_math-fround') });

},{"./_export":35,"./_math-fround":63}],171:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export');
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"./_export":35}],172:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"./_export":35,"./_fails":37}],173:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"./_export":35}],174:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":35,"./_math-log1p":64}],175:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"./_export":35}],176:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', { sign: require('./_math-sign') });

},{"./_export":35,"./_math-sign":66}],177:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":35,"./_fails":37,"./_math-expm1":62}],178:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"./_export":35,"./_math-expm1":62}],179:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"./_export":35}],180:[function(require,module,exports){
'use strict';
var global = require('./_global');
var has = require('./_has');
var cof = require('./_cof');
var inheritIfRequired = require('./_inherit-if-required');
var toPrimitive = require('./_to-primitive');
var fails = require('./_fails');
var gOPN = require('./_object-gopn').f;
var gOPD = require('./_object-gopd').f;
var dP = require('./_object-dp').f;
var $trim = require('./_string-trim').trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}

},{"./_cof":20,"./_descriptors":31,"./_fails":37,"./_global":42,"./_has":43,"./_inherit-if-required":47,"./_object-create":72,"./_object-dp":73,"./_object-gopd":76,"./_object-gopn":78,"./_redefine":93,"./_string-trim":112,"./_to-primitive":121}],181:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"./_export":35}],182:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export = require('./_export');
var _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"./_export":35,"./_global":42}],183:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":35,"./_is-integer":52}],184:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"./_export":35}],185:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"./_export":35,"./_is-integer":52}],186:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"./_export":35}],187:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"./_export":35}],188:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"./_export":35,"./_parse-float":87}],189:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"./_export":35,"./_parse-int":88}],190:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toInteger = require('./_to-integer');
var aNumberValue = require('./_a-number-value');
var repeat = require('./_string-repeat');
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});

},{"./_a-number-value":5,"./_export":35,"./_fails":37,"./_string-repeat":111,"./_to-integer":117}],191:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $fails = require('./_fails');
var aNumberValue = require('./_a-number-value');
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

},{"./_a-number-value":5,"./_export":35,"./_fails":37}],192:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":35,"./_object-assign":71}],193:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":35,"./_object-create":72}],194:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });

},{"./_descriptors":31,"./_export":35,"./_object-dps":74}],195:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_descriptors":31,"./_export":35,"./_object-dp":73}],196:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"./_is-object":53,"./_meta":67,"./_object-sap":84}],197:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_object-gopd":76,"./_object-sap":84,"./_to-iobject":118}],198:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-gopn-ext":77,"./_object-sap":84}],199:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_object-gpo":80,"./_object-sap":84,"./_to-object":120}],200:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"./_is-object":53,"./_object-sap":84}],201:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"./_is-object":53,"./_object-sap":84}],202:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"./_is-object":53,"./_object-sap":84}],203:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', { is: require('./_same-value') });

},{"./_export":35,"./_same-value":97}],204:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_object-keys":82,"./_object-sap":84,"./_to-object":120}],205:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"./_is-object":53,"./_meta":67,"./_object-sap":84}],206:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"./_is-object":53,"./_meta":67,"./_object-sap":84}],207:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":35,"./_set-proto":100}],208:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof');
var test = {};
test[require('./_wks')('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  require('./_redefine')(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"./_classof":19,"./_redefine":93,"./_wks":130}],209:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });

},{"./_export":35,"./_parse-float":87}],210:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });

},{"./_export":35,"./_parse-int":88}],211:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":4,"./_an-instance":8,"./_classof":19,"./_core":25,"./_ctx":27,"./_export":35,"./_for-of":41,"./_global":42,"./_is-object":53,"./_iter-detect":58,"./_library":61,"./_microtask":69,"./_new-promise-capability":70,"./_perform":89,"./_promise-resolve":90,"./_redefine-all":92,"./_set-species":101,"./_set-to-string-tag":102,"./_species-constructor":105,"./_task":114,"./_user-agent":126,"./_wks":130}],212:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"./_a-function":4,"./_an-object":9,"./_export":35,"./_fails":37,"./_global":42}],213:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"./_a-function":4,"./_an-object":9,"./_bind":18,"./_export":35,"./_fails":37,"./_global":42,"./_is-object":53,"./_object-create":72}],214:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":9,"./_export":35,"./_fails":37,"./_object-dp":73,"./_to-primitive":121}],215:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = require('./_export');
var gOPD = require('./_object-gopd').f;
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"./_an-object":9,"./_export":35,"./_object-gopd":76}],216:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

},{"./_an-object":9,"./_export":35,"./_iter-create":56}],217:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = require('./_object-gopd');
var $export = require('./_export');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"./_an-object":9,"./_export":35,"./_object-gopd":76}],218:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = require('./_export');
var getProto = require('./_object-gpo');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"./_an-object":9,"./_export":35,"./_object-gpo":80}],219:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var isObject = require('./_is-object');
var anObject = require('./_an-object');

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"./_an-object":9,"./_export":35,"./_has":43,"./_is-object":53,"./_object-gopd":76,"./_object-gpo":80}],220:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"./_export":35}],221:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"./_an-object":9,"./_export":35}],222:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });

},{"./_export":35,"./_own-keys":86}],223:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":9,"./_export":35}],224:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = require('./_export');
var setProto = require('./_set-proto');

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":35,"./_set-proto":100}],225:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = require('./_object-dp');
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var createDesc = require('./_property-desc');
var anObject = require('./_an-object');
var isObject = require('./_is-object');

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"./_an-object":9,"./_export":35,"./_has":43,"./_is-object":53,"./_object-dp":73,"./_object-gopd":76,"./_object-gpo":80,"./_property-desc":91}],226:[function(require,module,exports){
var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');

},{"./_descriptors":31,"./_fails":37,"./_flags":39,"./_global":42,"./_inherit-if-required":47,"./_is-regexp":54,"./_object-dp":73,"./_object-gopn":78,"./_redefine":93,"./_set-species":101,"./_wks":130}],227:[function(require,module,exports){
'use strict';
var regexpExec = require('./_regexp-exec');
require('./_export')({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});

},{"./_export":35,"./_regexp-exec":95}],228:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});

},{"./_descriptors":31,"./_flags":39,"./_object-dp":73}],229:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var toLength = require('./_to-length');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');

// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"./_advance-string-index":7,"./_an-object":9,"./_fix-re-wks":38,"./_regexp-exec-abstract":94,"./_to-length":119}],230:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return ch;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return ch;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return ch;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

},{"./_advance-string-index":7,"./_an-object":9,"./_fix-re-wks":38,"./_regexp-exec-abstract":94,"./_to-integer":117,"./_to-length":119,"./_to-object":120}],231:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var sameValue = require('./_same-value');
var regExpExec = require('./_regexp-exec-abstract');

// @@search logic
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

},{"./_an-object":9,"./_fix-re-wks":38,"./_regexp-exec-abstract":94,"./_same-value":97}],232:[function(require,module,exports){
'use strict';

var isRegExp = require('./_is-regexp');
var anObject = require('./_an-object');
var speciesConstructor = require('./_species-constructor');
var advanceStringIndex = require('./_advance-string-index');
var toLength = require('./_to-length');
var callRegExpExec = require('./_regexp-exec-abstract');
var regexpExec = require('./_regexp-exec');
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';

// eslint-disable-next-line no-empty
var SUPPORTS_Y = !!(function () { try { return new RegExp('x', 'y'); } catch (e) {} })();

// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                    (rx.multiline ? 'm' : '') +
                    (rx.unicode ? 'u' : '') +
                    (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? 0xffffffff : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});

},{"./_advance-string-index":7,"./_an-object":9,"./_fix-re-wks":38,"./_is-regexp":54,"./_regexp-exec":95,"./_regexp-exec-abstract":94,"./_species-constructor":105,"./_to-length":119}],233:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"./_an-object":9,"./_descriptors":31,"./_fails":37,"./_flags":39,"./_redefine":93,"./es6.regexp.flags":228}],234:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection":24,"./_collection-strong":21,"./_validate-collection":127}],235:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"./_string-html":109}],236:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"./_string-html":109}],237:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"./_string-html":109}],238:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"./_string-html":109}],239:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"./_export":35,"./_string-at":107}],240:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"./_export":35,"./_fails-is-regexp":36,"./_string-context":108,"./_to-length":119}],241:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"./_string-html":109}],242:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"./_string-html":109}],243:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"./_string-html":109}],244:[function(require,module,exports){
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"./_export":35,"./_to-absolute-index":115}],245:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":35,"./_fails-is-regexp":36,"./_string-context":108}],246:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"./_string-html":109}],247:[function(require,module,exports){
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":57,"./_string-at":107}],248:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"./_string-html":109}],249:[function(require,module,exports){
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

},{"./_export":35,"./_to-iobject":118,"./_to-length":119}],250:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});

},{"./_export":35,"./_string-repeat":111}],251:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"./_string-html":109}],252:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"./_export":35,"./_fails-is-regexp":36,"./_string-context":108,"./_to-length":119}],253:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"./_string-html":109}],254:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"./_string-html":109}],255:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"./_string-html":109}],256:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

},{"./_string-trim":112}],257:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":9,"./_descriptors":31,"./_enum-keys":34,"./_export":35,"./_fails":37,"./_global":42,"./_has":43,"./_hide":44,"./_is-array":51,"./_is-object":53,"./_library":61,"./_meta":67,"./_object-create":72,"./_object-dp":73,"./_object-gopd":76,"./_object-gopn":78,"./_object-gopn-ext":77,"./_object-gops":79,"./_object-keys":82,"./_object-pie":83,"./_property-desc":91,"./_redefine":93,"./_set-to-string-tag":102,"./_shared":104,"./_to-iobject":118,"./_to-primitive":121,"./_uid":125,"./_wks":130,"./_wks-define":128,"./_wks-ext":129}],258:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);

},{"./_an-object":9,"./_export":35,"./_fails":37,"./_global":42,"./_is-object":53,"./_set-species":101,"./_species-constructor":105,"./_to-absolute-index":115,"./_to-length":119,"./_typed":124,"./_typed-buffer":123}],259:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});

},{"./_export":35,"./_typed":124,"./_typed-buffer":123}],260:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":122}],261:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":122}],262:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":122}],263:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":122}],264:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":122}],265:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":122}],266:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":122}],267:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":122}],268:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"./_typed-array":122}],269:[function(require,module,exports){
'use strict';
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var fails = require('./_fails');
var validate = require('./_validate-collection');
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"./_array-methods":14,"./_collection":24,"./_collection-weak":23,"./_fails":37,"./_is-object":53,"./_meta":67,"./_object-assign":71,"./_redefine":93,"./_validate-collection":127}],270:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');
var validate = require('./_validate-collection');
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
require('./_collection')(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"./_collection":24,"./_collection-weak":23,"./_validate-collection":127}],271:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var aFunction = require('./_a-function');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

require('./_add-to-unscopables')('flatMap');

},{"./_a-function":4,"./_add-to-unscopables":6,"./_array-species-create":17,"./_export":35,"./_flatten-into-array":40,"./_to-length":119,"./_to-object":120}],272:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatten: function flatten(/* depthArg = 1 */) {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

require('./_add-to-unscopables')('flatten');

},{"./_add-to-unscopables":6,"./_array-species-create":17,"./_export":35,"./_flatten-into-array":40,"./_to-integer":117,"./_to-length":119,"./_to-object":120}],273:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = require('./_export');
var $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');

},{"./_add-to-unscopables":6,"./_array-includes":13,"./_export":35}],274:[function(require,module,exports){
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = require('./_export');
var microtask = require('./_microtask')();
var process = require('./_global').process;
var isNode = require('./_cof')(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});

},{"./_cof":20,"./_export":35,"./_global":42,"./_microtask":69}],275:[function(require,module,exports){
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export');
var cof = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});

},{"./_cof":20,"./_export":35}],276:[function(require,module,exports){
// https://github.com/tc39/proposal-global
var $export = require('./_export');

$export($export.G, { global: require('./_global') });

},{"./_export":35,"./_global":42}],277:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
require('./_set-collection-from')('Map');

},{"./_set-collection-from":98}],278:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
require('./_set-collection-of')('Map');

},{"./_set-collection-of":99}],279:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });

},{"./_collection-to-json":22,"./_export":35}],280:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});

},{"./_export":35}],281:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });

},{"./_export":35}],282:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});

},{"./_export":35}],283:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var scale = require('./_math-scale');
var fround = require('./_math-fround');

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});

},{"./_export":35,"./_math-fround":63,"./_math-scale":65}],284:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});

},{"./_export":35}],285:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});

},{"./_export":35}],286:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});

},{"./_export":35}],287:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });

},{"./_export":35}],288:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});

},{"./_export":35}],289:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { scale: require('./_math-scale') });

},{"./_export":35,"./_math-scale":65}],290:[function(require,module,exports){
// http://jfbastien.github.io/papers/Math.signbit.html
var $export = require('./_export');

$export($export.S, 'Math', { signbit: function signbit(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
} });

},{"./_export":35}],291:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});

},{"./_export":35}],292:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});

},{"./_a-function":4,"./_descriptors":31,"./_export":35,"./_object-dp":73,"./_object-forced-pam":75,"./_to-object":120}],293:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});

},{"./_a-function":4,"./_descriptors":31,"./_export":35,"./_object-dp":73,"./_object-forced-pam":75,"./_to-object":120}],294:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":35,"./_object-to-array":85}],295:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = require('./_export');
var ownKeys = require('./_own-keys');
var toIObject = require('./_to-iobject');
var gOPD = require('./_object-gopd');
var createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"./_create-property":26,"./_export":35,"./_object-gopd":76,"./_own-keys":86,"./_to-iobject":118}],296:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_descriptors":31,"./_export":35,"./_object-forced-pam":75,"./_object-gopd":76,"./_object-gpo":80,"./_to-object":120,"./_to-primitive":121}],297:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_descriptors":31,"./_export":35,"./_object-forced-pam":75,"./_object-gopd":76,"./_object-gpo":80,"./_to-object":120,"./_to-primitive":121}],298:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"./_export":35,"./_object-to-array":85}],299:[function(require,module,exports){
'use strict';
// https://github.com/zenparsing/es-observable
var $export = require('./_export');
var global = require('./_global');
var core = require('./_core');
var microtask = require('./_microtask')();
var OBSERVABLE = require('./_wks')('observable');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var anInstance = require('./_an-instance');
var redefineAll = require('./_redefine-all');
var hide = require('./_hide');
var forOf = require('./_for-of');
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  } if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() { closeSubscription(this); }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$export($export.G, { Observable: $Observable });

require('./_set-species')('Observable');

},{"./_a-function":4,"./_an-instance":8,"./_an-object":9,"./_core":25,"./_export":35,"./_for-of":41,"./_global":42,"./_hide":44,"./_microtask":69,"./_redefine-all":92,"./_set-species":101,"./_wks":130}],300:[function(require,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_core":25,"./_export":35,"./_global":42,"./_promise-resolve":90,"./_species-constructor":105}],301:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-promise-try
var $export = require('./_export');
var newPromiseCapability = require('./_new-promise-capability');
var perform = require('./_perform');

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });

},{"./_export":35,"./_new-promise-capability":70,"./_perform":89}],302:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });

},{"./_an-object":9,"./_metadata":68}],303:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });

},{"./_an-object":9,"./_metadata":68}],304:[function(require,module,exports){
var Set = require('./es6.set');
var from = require('./_array-from-iterable');
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });

},{"./_an-object":9,"./_array-from-iterable":12,"./_metadata":68,"./_object-gpo":80,"./es6.set":234}],305:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":9,"./_metadata":68,"./_object-gpo":80}],306:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });

},{"./_an-object":9,"./_metadata":68}],307:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":9,"./_metadata":68}],308:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":9,"./_metadata":68,"./_object-gpo":80}],309:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":9,"./_metadata":68}],310:[function(require,module,exports){
var $metadata = require('./_metadata');
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });

},{"./_a-function":4,"./_an-object":9,"./_metadata":68}],311:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
require('./_set-collection-from')('Set');

},{"./_set-collection-from":98}],312:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
require('./_set-collection-of')('Set');

},{"./_set-collection-of":99}],313:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });

},{"./_collection-to-json":22,"./_export":35}],314:[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./_export');
var $at = require('./_string-at')(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});

},{"./_export":35,"./_string-at":107}],315:[function(require,module,exports){
'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $export = require('./_export');
var defined = require('./_defined');
var toLength = require('./_to-length');
var isRegExp = require('./_is-regexp');
var getFlags = require('./_flags');
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});

},{"./_defined":30,"./_export":35,"./_flags":39,"./_is-regexp":54,"./_iter-create":56,"./_to-length":119}],316:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"./_export":35,"./_string-pad":110,"./_user-agent":126}],317:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"./_export":35,"./_string-pad":110,"./_user-agent":126}],318:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

},{"./_string-trim":112}],319:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

},{"./_string-trim":112}],320:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":128}],321:[function(require,module,exports){
require('./_wks-define')('observable');

},{"./_wks-define":128}],322:[function(require,module,exports){
// https://github.com/tc39/proposal-global
var $export = require('./_export');

$export($export.S, 'System', { global: require('./_global') });

},{"./_export":35,"./_global":42}],323:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
require('./_set-collection-from')('WeakMap');

},{"./_set-collection-from":98}],324:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
require('./_set-collection-of')('WeakMap');

},{"./_set-collection-of":99}],325:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
require('./_set-collection-from')('WeakSet');

},{"./_set-collection-from":98}],326:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
require('./_set-collection-of')('WeakSet');

},{"./_set-collection-of":99}],327:[function(require,module,exports){
var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./_global":42,"./_hide":44,"./_iterators":60,"./_object-keys":82,"./_redefine":93,"./_wks":130,"./es6.array.iterator":143}],328:[function(require,module,exports){
var $export = require('./_export');
var $task = require('./_task');
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"./_export":35,"./_task":114}],329:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global = require('./_global');
var $export = require('./_export');
var userAgent = require('./_user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"./_export":35,"./_global":42,"./_user-agent":126}],330:[function(require,module,exports){
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.exec');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.array.flat-map');
require('./modules/es7.array.flatten');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.map.of');
require('./modules/es7.set.of');
require('./modules/es7.weak-map.of');
require('./modules/es7.weak-set.of');
require('./modules/es7.map.from');
require('./modules/es7.set.from');
require('./modules/es7.weak-map.from');
require('./modules/es7.weak-set.from');
require('./modules/es7.global');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.clamp');
require('./modules/es7.math.deg-per-rad');
require('./modules/es7.math.degrees');
require('./modules/es7.math.fscale');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.rad-per-deg');
require('./modules/es7.math.radians');
require('./modules/es7.math.scale');
require('./modules/es7.math.umulh');
require('./modules/es7.math.signbit');
require('./modules/es7.promise.finally');
require('./modules/es7.promise.try');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');

},{"./modules/_core":25,"./modules/es6.array.copy-within":133,"./modules/es6.array.every":134,"./modules/es6.array.fill":135,"./modules/es6.array.filter":136,"./modules/es6.array.find":138,"./modules/es6.array.find-index":137,"./modules/es6.array.for-each":139,"./modules/es6.array.from":140,"./modules/es6.array.index-of":141,"./modules/es6.array.is-array":142,"./modules/es6.array.iterator":143,"./modules/es6.array.join":144,"./modules/es6.array.last-index-of":145,"./modules/es6.array.map":146,"./modules/es6.array.of":147,"./modules/es6.array.reduce":149,"./modules/es6.array.reduce-right":148,"./modules/es6.array.slice":150,"./modules/es6.array.some":151,"./modules/es6.array.sort":152,"./modules/es6.array.species":153,"./modules/es6.date.now":154,"./modules/es6.date.to-iso-string":155,"./modules/es6.date.to-json":156,"./modules/es6.date.to-primitive":157,"./modules/es6.date.to-string":158,"./modules/es6.function.bind":159,"./modules/es6.function.has-instance":160,"./modules/es6.function.name":161,"./modules/es6.map":162,"./modules/es6.math.acosh":163,"./modules/es6.math.asinh":164,"./modules/es6.math.atanh":165,"./modules/es6.math.cbrt":166,"./modules/es6.math.clz32":167,"./modules/es6.math.cosh":168,"./modules/es6.math.expm1":169,"./modules/es6.math.fround":170,"./modules/es6.math.hypot":171,"./modules/es6.math.imul":172,"./modules/es6.math.log10":173,"./modules/es6.math.log1p":174,"./modules/es6.math.log2":175,"./modules/es6.math.sign":176,"./modules/es6.math.sinh":177,"./modules/es6.math.tanh":178,"./modules/es6.math.trunc":179,"./modules/es6.number.constructor":180,"./modules/es6.number.epsilon":181,"./modules/es6.number.is-finite":182,"./modules/es6.number.is-integer":183,"./modules/es6.number.is-nan":184,"./modules/es6.number.is-safe-integer":185,"./modules/es6.number.max-safe-integer":186,"./modules/es6.number.min-safe-integer":187,"./modules/es6.number.parse-float":188,"./modules/es6.number.parse-int":189,"./modules/es6.number.to-fixed":190,"./modules/es6.number.to-precision":191,"./modules/es6.object.assign":192,"./modules/es6.object.create":193,"./modules/es6.object.define-properties":194,"./modules/es6.object.define-property":195,"./modules/es6.object.freeze":196,"./modules/es6.object.get-own-property-descriptor":197,"./modules/es6.object.get-own-property-names":198,"./modules/es6.object.get-prototype-of":199,"./modules/es6.object.is":203,"./modules/es6.object.is-extensible":200,"./modules/es6.object.is-frozen":201,"./modules/es6.object.is-sealed":202,"./modules/es6.object.keys":204,"./modules/es6.object.prevent-extensions":205,"./modules/es6.object.seal":206,"./modules/es6.object.set-prototype-of":207,"./modules/es6.object.to-string":208,"./modules/es6.parse-float":209,"./modules/es6.parse-int":210,"./modules/es6.promise":211,"./modules/es6.reflect.apply":212,"./modules/es6.reflect.construct":213,"./modules/es6.reflect.define-property":214,"./modules/es6.reflect.delete-property":215,"./modules/es6.reflect.enumerate":216,"./modules/es6.reflect.get":219,"./modules/es6.reflect.get-own-property-descriptor":217,"./modules/es6.reflect.get-prototype-of":218,"./modules/es6.reflect.has":220,"./modules/es6.reflect.is-extensible":221,"./modules/es6.reflect.own-keys":222,"./modules/es6.reflect.prevent-extensions":223,"./modules/es6.reflect.set":225,"./modules/es6.reflect.set-prototype-of":224,"./modules/es6.regexp.constructor":226,"./modules/es6.regexp.exec":227,"./modules/es6.regexp.flags":228,"./modules/es6.regexp.match":229,"./modules/es6.regexp.replace":230,"./modules/es6.regexp.search":231,"./modules/es6.regexp.split":232,"./modules/es6.regexp.to-string":233,"./modules/es6.set":234,"./modules/es6.string.anchor":235,"./modules/es6.string.big":236,"./modules/es6.string.blink":237,"./modules/es6.string.bold":238,"./modules/es6.string.code-point-at":239,"./modules/es6.string.ends-with":240,"./modules/es6.string.fixed":241,"./modules/es6.string.fontcolor":242,"./modules/es6.string.fontsize":243,"./modules/es6.string.from-code-point":244,"./modules/es6.string.includes":245,"./modules/es6.string.italics":246,"./modules/es6.string.iterator":247,"./modules/es6.string.link":248,"./modules/es6.string.raw":249,"./modules/es6.string.repeat":250,"./modules/es6.string.small":251,"./modules/es6.string.starts-with":252,"./modules/es6.string.strike":253,"./modules/es6.string.sub":254,"./modules/es6.string.sup":255,"./modules/es6.string.trim":256,"./modules/es6.symbol":257,"./modules/es6.typed.array-buffer":258,"./modules/es6.typed.data-view":259,"./modules/es6.typed.float32-array":260,"./modules/es6.typed.float64-array":261,"./modules/es6.typed.int16-array":262,"./modules/es6.typed.int32-array":263,"./modules/es6.typed.int8-array":264,"./modules/es6.typed.uint16-array":265,"./modules/es6.typed.uint32-array":266,"./modules/es6.typed.uint8-array":267,"./modules/es6.typed.uint8-clamped-array":268,"./modules/es6.weak-map":269,"./modules/es6.weak-set":270,"./modules/es7.array.flat-map":271,"./modules/es7.array.flatten":272,"./modules/es7.array.includes":273,"./modules/es7.asap":274,"./modules/es7.error.is-error":275,"./modules/es7.global":276,"./modules/es7.map.from":277,"./modules/es7.map.of":278,"./modules/es7.map.to-json":279,"./modules/es7.math.clamp":280,"./modules/es7.math.deg-per-rad":281,"./modules/es7.math.degrees":282,"./modules/es7.math.fscale":283,"./modules/es7.math.iaddh":284,"./modules/es7.math.imulh":285,"./modules/es7.math.isubh":286,"./modules/es7.math.rad-per-deg":287,"./modules/es7.math.radians":288,"./modules/es7.math.scale":289,"./modules/es7.math.signbit":290,"./modules/es7.math.umulh":291,"./modules/es7.object.define-getter":292,"./modules/es7.object.define-setter":293,"./modules/es7.object.entries":294,"./modules/es7.object.get-own-property-descriptors":295,"./modules/es7.object.lookup-getter":296,"./modules/es7.object.lookup-setter":297,"./modules/es7.object.values":298,"./modules/es7.observable":299,"./modules/es7.promise.finally":300,"./modules/es7.promise.try":301,"./modules/es7.reflect.define-metadata":302,"./modules/es7.reflect.delete-metadata":303,"./modules/es7.reflect.get-metadata":305,"./modules/es7.reflect.get-metadata-keys":304,"./modules/es7.reflect.get-own-metadata":307,"./modules/es7.reflect.get-own-metadata-keys":306,"./modules/es7.reflect.has-metadata":308,"./modules/es7.reflect.has-own-metadata":309,"./modules/es7.reflect.metadata":310,"./modules/es7.set.from":311,"./modules/es7.set.of":312,"./modules/es7.set.to-json":313,"./modules/es7.string.at":314,"./modules/es7.string.match-all":315,"./modules/es7.string.pad-end":316,"./modules/es7.string.pad-start":317,"./modules/es7.string.trim-left":318,"./modules/es7.string.trim-right":319,"./modules/es7.symbol.async-iterator":320,"./modules/es7.symbol.observable":321,"./modules/es7.system.global":322,"./modules/es7.weak-map.from":323,"./modules/es7.weak-map.of":324,"./modules/es7.weak-set.from":325,"./modules/es7.weak-set.of":326,"./modules/web.dom.iterable":327,"./modules/web.immediate":328,"./modules/web.timers":329}],331:[function(require,module,exports){
/*global ActiveXObject, window, console, define, module, jQuery */
//jshint unused:false, strict: false

/*
    PDFObject v2.1.1
    https://github.com/pipwerks/PDFObject
    Copyright (c) 2008-2018 Philip Hutchison
    MIT-style license: http://pipwerks.mit-license.org/
    UMD module pattern from https://github.com/umdjs/umd/blob/master/templates/returnExports.js
*/

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.PDFObject = factory();
  }
}(this, function () {

    "use strict";
    //jshint unused:true

    //PDFObject is designed for client-side (browsers), not server-side (node)
    //Will choke on undefined navigator and window vars when run on server
    //Return boolean false and exit function when running server-side

    if(typeof window === "undefined" || typeof navigator === "undefined"){ return false; }

    var pdfobjectversion = "2.1.1",
        ua = window.navigator.userAgent,

        //declare booleans
        supportsPDFs,
        isIE,
        supportsPdfMimeType = (typeof navigator.mimeTypes['application/pdf'] !== "undefined"),
        supportsPdfActiveX,
        isModernBrowser = (function (){ return (typeof window.Promise !== "undefined"); })(),
        isFirefox = (function (){ return (ua.indexOf("irefox") !== -1); } )(),
        isFirefoxWithPDFJS = (function (){
            //Firefox started shipping PDF.js in Firefox 19.
            //If this is Firefox 19 or greater, assume PDF.js is available
            if(!isFirefox){ return false; }
            //parse userAgent string to get release version ("rv")
            //ex: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0
            return (parseInt(ua.split("rv:")[1].split(".")[0], 10) > 18);
        })(),
        isIOS = (function (){ return (/iphone|ipad|ipod/i.test(ua.toLowerCase())); })(),

        //declare functions
        createAXO,
        buildFragmentString,
        log,
        embedError,
        embed,
        getTargetElement,
        generatePDFJSiframe,
        generateEmbedElement;


    /* ----------------------------------------------------
       Supporting functions
       ---------------------------------------------------- */

    createAXO = function (type){
        var ax;
        try {
            ax = new ActiveXObject(type);
        } catch (e) {
            ax = null; //ensure ax remains null
        }
        return ax;
    };

    //IE11 still uses ActiveX for Adobe Reader, but IE 11 doesn't expose
    //window.ActiveXObject the same way previous versions of IE did
    //window.ActiveXObject will evaluate to false in IE 11, but "ActiveXObject" in window evaluates to true
    //so check the first one for older IE, and the second for IE11
    //FWIW, MS Edge (replacing IE11) does not support ActiveX at all, both will evaluate false
    //Constructed as a method (not a prop) to avoid unneccesarry overhead -- will only be evaluated if needed
    isIE = function (){ return !!(window.ActiveXObject || "ActiveXObject" in window); };

    //If either ActiveX support for "AcroPDF.PDF" or "PDF.PdfCtrl" are found, return true
    //Constructed as a method (not a prop) to avoid unneccesarry overhead -- will only be evaluated if needed
    supportsPdfActiveX = function (){ return !!(createAXO("AcroPDF.PDF") || createAXO("PDF.PdfCtrl")); };

    //Determines whether PDF support is available
    supportsPDFs = (
        //as of iOS 12, inline PDF rendering is still not supported in Safari or native webview
        //3rd-party browsers (eg Chrome, Firefox) use Apple's webview for rendering, and thus the same result as Safari
        //Therefore if iOS, we shall assume that PDF support is not available
        !isIOS && (
            //Modern versions of Firefox come bundled with PDFJS
            isFirefoxWithPDFJS || 
            //Browsers that still support the original MIME type check
            supportsPdfMimeType || (
                //Pity the poor souls still using IE
                isIE() && supportsPdfActiveX()
            )
        )
    );

    //Create a fragment identifier for using PDF Open parameters when embedding PDF
    buildFragmentString = function(pdfParams){

        var string = "",
            prop;

        if(pdfParams){

            for (prop in pdfParams) {
                if (pdfParams.hasOwnProperty(prop)) {
                    string += encodeURIComponent(prop) + "=" + encodeURIComponent(pdfParams[prop]) + "&";
                }
            }

            //The string will be empty if no PDF Params found
            if(string){

                string = "#" + string;

                //Remove last ampersand
                string = string.slice(0, string.length - 1);

            }

        }

        return string;

    };

    log = function (msg){
        if(typeof console !== "undefined" && console.log){
            console.log("[PDFObject] " + msg);
        }
    };

    embedError = function (msg){
        log(msg);
        return false;
    };

    getTargetElement = function (targetSelector){

        //Default to body for full-browser PDF
        var targetNode = document.body;

        //If a targetSelector is specified, check to see whether
        //it's passing a selector, jQuery object, or an HTML element

        if(typeof targetSelector === "string"){

            //Is CSS selector
            targetNode = document.querySelector(targetSelector);

        } else if (typeof jQuery !== "undefined" && targetSelector instanceof jQuery && targetSelector.length) {

            //Is jQuery element. Extract HTML node
            targetNode = targetSelector.get(0);

        } else if (typeof targetSelector.nodeType !== "undefined" && targetSelector.nodeType === 1){

            //Is HTML element
            targetNode = targetSelector;

        }

        return targetNode;

    };

    generatePDFJSiframe = function (targetNode, url, pdfOpenFragment, PDFJS_URL, id){

        var fullURL = PDFJS_URL + "?file=" + encodeURIComponent(url) + pdfOpenFragment;
        var scrollfix = (isIOS) ? "-webkit-overflow-scrolling: touch; overflow-y: scroll; " : "overflow: hidden; ";
        var iframe = "<div style='" + scrollfix + "position: absolute; top: 0; right: 0; bottom: 0; left: 0;'><iframe  " + id + " src='" + fullURL + "' style='border: none; width: 100%; height: 100%;' frameborder='0'></iframe></div>";
        targetNode.className += " pdfobject-container";
        targetNode.style.position = "relative";
        targetNode.style.overflow = "auto";
        targetNode.innerHTML = iframe;
        return targetNode.getElementsByTagName("iframe")[0];

    };

    generateEmbedElement = function (targetNode, targetSelector, url, pdfOpenFragment, width, height, id){

        var style = "";

        if(targetSelector && targetSelector !== document.body){
            style = "width: " + width + "; height: " + height + ";";
        } else {
            style = "position: absolute; top: 0; right: 0; bottom: 0; left: 0; width: 100%; height: 100%;";
        }

        targetNode.className += " pdfobject-container";
        targetNode.innerHTML = "<embed " + id + " class='pdfobject' src='" + url + pdfOpenFragment + "' type='application/pdf' style='overflow: auto; " + style + "'/>";

        return targetNode.getElementsByTagName("embed")[0];

    };

    embed = function(url, targetSelector, options){

        //Ensure URL is available. If not, exit now.
        if(typeof url !== "string"){ return embedError("URL is not valid"); }

        //If targetSelector is not defined, convert to boolean
        targetSelector = (typeof targetSelector !== "undefined") ? targetSelector : false;

        //Ensure options object is not undefined -- enables easier error checking below
        options = (typeof options !== "undefined") ? options : {};

        //Get passed options, or set reasonable defaults
        var id = (options.id && typeof options.id === "string") ? "id='" + options.id + "'" : "",
            page = (options.page) ? options.page : false,
            pdfOpenParams = (options.pdfOpenParams) ? options.pdfOpenParams : {},
            fallbackLink = (typeof options.fallbackLink !== "undefined") ? options.fallbackLink : true,
            width = (options.width) ? options.width : "100%",
            height = (options.height) ? options.height : "100%",
            assumptionMode = (typeof options.assumptionMode === "boolean") ? options.assumptionMode : true,
            forcePDFJS = (typeof options.forcePDFJS === "boolean") ? options.forcePDFJS : false,
            PDFJS_URL = (options.PDFJS_URL) ? options.PDFJS_URL : false,
            targetNode = getTargetElement(targetSelector),
            fallbackHTML = "",
            pdfOpenFragment = "",
            fallbackHTML_default = "<p>This browser does not support inline PDFs. Please download the PDF to view it: <a href='[url]'>Download PDF</a></p>";

        //If target element is specified but is not valid, exit without doing anything
        if(!targetNode){ return embedError("Target element cannot be determined"); }


        //page option overrides pdfOpenParams, if found
        if(page){
            pdfOpenParams.page = page;
        }

        //Stringify optional Adobe params for opening document (as fragment identifier)
        pdfOpenFragment = buildFragmentString(pdfOpenParams);

        //Do the dance

        //If the forcePDFJS option is invoked, skip everything else and embed as directed
        if(forcePDFJS && PDFJS_URL){

            return generatePDFJSiframe(targetNode, url, pdfOpenFragment, PDFJS_URL, id);

        //If traditional support is provided, or if this is a modern browser and not iOS (see comment for supportsPDFs declaration)
        } else if(supportsPDFs || (assumptionMode && isModernBrowser && !isIOS)){

            return generateEmbedElement(targetNode, targetSelector, url, pdfOpenFragment, width, height, id);

        //If everything else has failed and a PDFJS fallback is provided, try to use it
        } else if(PDFJS_URL){

            return generatePDFJSiframe(targetNode, url, pdfOpenFragment, PDFJS_URL, id);

        } else {

            //Display the fallback link if available
            if(fallbackLink){

                fallbackHTML = (typeof fallbackLink === "string") ? fallbackLink : fallbackHTML_default;
                targetNode.innerHTML = fallbackHTML.replace(/\[url\]/g, url);

            }

            return embedError("This browser does not support embedded PDFs");

        }

    };

    return {
        embed: function (a,b,c){ return embed(a,b,c); },
        pdfobjectversion: (function () { return pdfobjectversion; })(),
        supportsPDFs: (function (){ return supportsPDFs; })()
    };

}));
},{}],332:[function(require,module,exports){
/*sdk白板的管理类
 * @module TKWhiteBoardManager
 * @description  sdk与白板的通信管理类
 * @author 邱广生
 * @date 2018-04-18
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TKWhiteBoardManager = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Global = require('./utils/Global');

var _Global2 = _interopRequireDefault(_Global);

var _Constant = require('./utils/Constant');

var _Constant2 = _interopRequireDefault(_Constant);

var _Utils = require('./utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _Configuration = require('./utils/Configuration');

var _Configuration2 = _interopRequireDefault(_Configuration);

var _WhiteboardIntermediateLayer = require('./intermediateLayer/WhiteboardIntermediateLayer');

var _WhiteboardIntermediateLayer2 = _interopRequireDefault(_WhiteboardIntermediateLayer);

var _WhiteboardView = require('./view/containers/WhiteboardView');

var _WhiteboardView2 = _interopRequireDefault(_WhiteboardView);

var _AudioPlayer = require('./view/containers/AudioPlayer');

var _AudioPlayer2 = _interopRequireDefault(_AudioPlayer);

var _VideoPlayer = require('./view/containers/VideoPlayer');

var _VideoPlayer2 = _interopRequireDefault(_VideoPlayer);

var _DocumentToolbar = require('./view/containers/DocumentToolbar');

var _DocumentToolbar2 = _interopRequireDefault(_DocumentToolbar);

var _WhiteboardToolbar = require('./view/containers/WhiteboardToolbar');

var _WhiteboardToolbar2 = _interopRequireDefault(_WhiteboardToolbar);

var _DocumentRemark = require('./view/containers/DocumentRemark');

var _DocumentRemark2 = _interopRequireDefault(_DocumentRemark);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TKWhiteBoardManagerInner = function () {
    /*构造器*/
    function TKWhiteBoardManagerInner(room, sdkReceiveActionCommand, isInner) {
        _classCallCheck(this, TKWhiteBoardManagerInner);

        this.className = 'TKWhiteBoardManagerInner'; //类的名字
        this.isInner = isInner;
        this.room = room;
        this.sdkReceiveActionCommand = sdkReceiveActionCommand;
        this.whiteboardViewMap = new Map();
        this.awitWhiteboardConfigrationMap = new Map();
        this.randomCreateExtendWhiteboardNumber = 0;
        this.audioPlayerView = undefined; //音频播放器
        this.videoPlayerView = undefined; //视频播放器
        this.documentRemarkViewList = {}; //文档备注视图列表
        this.documentToolbarViewList = {}; //文档工具条列表
        this.whiteboardToolbarViewList = {}; //文档标注工具条列表
        this.listernerBackupid = new Date().getTime() + '_' + Math.random();
        this.pureWhiteboardFileinfoList = {};
        this.saveMsglistData = {}; //用于收到msglist消息时实例还没创建，保存数据
        this.savePubmsgData = {}; //用于收到Pubmsg消息时实例还没创建，保存数据
        this._registerEvent();
        this._addRoomEvent();
    }

    _createClass(TKWhiteBoardManagerInner, [{
        key: 'getVersion',


        /*获取版本号*/
        value: function getVersion() {
            return _Constant2.default.WHITEBOARD_SDK_VERSION;
        }

        /*创建主白板
        * @params parentNode:白板容器节点 ， Node
        * @params configration:白板配置项 ， Json
        * @params receiveActionCommand:接收白板通知消息函数 ， Function
        * */

    }, {
        key: 'createMainWhiteboard',
        value: function createMainWhiteboard() {
            var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;

            var _this = this;

            var configration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var receiveActionCommand = arguments[2];

            if (typeof parentNode === 'string') {
                var parentNodeStr = parentNode;
                parentNode = document.getElementById(parentNodeStr);
                if (!parentNode) {
                    L.Logger.warning('The node id cannot be found by node id, and createMainWhiteboard method cannot be performed , element id is ' + parentNodeStr + '.');
                    return;
                }
            }
            var instanceId = 'default';
            L.Logger.debug('[whiteboarrd-sdk]createMainWhiteboard  parentNode and configration and receiveActionCommand:', parentNode, configration, receiveActionCommand);
            this._createWhiteboard(parentNode, instanceId, configration, function () {
                if (_this.documentToolbarViewList[instanceId] && _this.documentToolbarViewList[instanceId].receiveActionCommand) {
                    var _documentToolbarViewL;

                    (_documentToolbarViewL = _this.documentToolbarViewList[instanceId]).receiveActionCommand.apply(_documentToolbarViewL, arguments);
                }
                if (_this.documentRemarkViewList[instanceId] && _this.documentRemarkViewList[instanceId].receiveActionCommand) {
                    var _documentRemarkViewLi;

                    (_documentRemarkViewLi = _this.documentRemarkViewList[instanceId]).receiveActionCommand.apply(_documentRemarkViewLi, arguments);
                }
                if (typeof receiveActionCommand === 'function') {
                    if (_this.isInner) {
                        receiveActionCommand.apply(undefined, arguments);
                    } else {
                        var action = arguments.length <= 0 ? undefined : arguments[0];
                        if (action === 'viewStateUpdate' || action === 'mediaPlayerNotice') {
                            receiveActionCommand.apply(undefined, arguments);
                        }
                    }
                }
            });
            var whiteboardView = this.whiteboardViewMap.get(instanceId);
            if (whiteboardView && whiteboardView.getConfigration().isLoadDocumentToolBar) {
                var documentToolBarParentNode = whiteboardView.getConfigration().documentToolBarConfig.parentNode || whiteboardView.getWhiteboardRootElement();
                this.createDocumentToolBar(documentToolBarParentNode, whiteboardView.getConfigration().documentToolBarConfig, instanceId);
            }
            if (whiteboardView && whiteboardView.getConfigration().isLoadDocumentRemark) {
                var documentRemarkParentNode = whiteboardView.getConfigration().documentRemarkConfig.parentNode || whiteboardView.getWhiteboardRootElement();
                this.createDocumentRemark(documentRemarkParentNode, whiteboardView.getConfigration().documentRemarkConfig, instanceId);
            }
            if (whiteboardView && whiteboardView.getConfigration().isLoadAudioPlayer) {
                var audioPlayerParentNode = whiteboardView.getConfigration().audioPlayerConfig.parentNode || whiteboardView.getWhiteboardRootElement();
                this.createAudioPlayer(audioPlayerParentNode, whiteboardView.getConfigration().audioPlayerConfig);
            }
            if (whiteboardView && whiteboardView.getConfigration().isLoadVideoPlayer) {
                var videoPlayerParentNode = whiteboardView.getConfigration().videoPlayerConfig.parentNode || whiteboardView.getWhiteboardRootElement();
                this.createVideoPlayer(videoPlayerParentNode, whiteboardView.getConfigration().videoPlayerConfig);
            }
            this._executeSaveMsglistData(instanceId);
            this._executeSavePubmsgData(instanceId);
        }
    }, {
        key: 'createExtendWhiteboard',


        /*创建扩展白板
         * @params parentNode:白板容器节点 ， Node
         * @params instanceId:白板实例id  , String
         * @params configration:白板配置项 ， Json
         * @params receiveActionCommand:接收白板通知消息函数 ， Function
        */
        value: function createExtendWhiteboard() {
            var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
            var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var _this2 = this;

            var configration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var receiveActionCommand = arguments[3];

            L.Logger.debug('[whiteboarrd-sdk]createExtendWhiteboard  parentNode  instanceId  configration and receiveActionCommand:', parentNode, instanceId, configration, receiveActionCommand);
            if (instanceId !== undefined && instanceId !== null) {
                if (typeof parentNode === 'string') {
                    var parentNodeStr = parentNode;
                    parentNode = document.getElementById(parentNodeStr);
                    if (!parentNode) {
                        L.Logger.warning('The node id cannot be found by node id, and createExtendWhiteboard method cannot be performed , element id is ' + parentNodeStr + '.');
                        return;
                    }
                }
                if (!instanceId) {
                    this.randomCreateExtendWhiteboardNumber++;
                    instanceId = 'randomWhiteboard' + this.randomCreateExtendWhiteboardNumber;
                }
                this._createWhiteboard(parentNode, instanceId, configration, function () {
                    if (_this2.documentToolbarViewList[instanceId] && _this2.documentToolbarViewList[instanceId].receiveActionCommand) {
                        var _documentToolbarViewL2;

                        (_documentToolbarViewL2 = _this2.documentToolbarViewList[instanceId]).receiveActionCommand.apply(_documentToolbarViewL2, arguments);
                    }
                    if (_this2.documentRemarkViewList[instanceId] && _this2.documentRemarkViewList[instanceId].receiveActionCommand) {
                        var _documentRemarkViewLi2;

                        (_documentRemarkViewLi2 = _this2.documentRemarkViewList[instanceId]).receiveActionCommand.apply(_documentRemarkViewLi2, arguments);
                    }
                    if (typeof receiveActionCommand === 'function') {
                        if (_this2.isInner) {
                            receiveActionCommand.apply(undefined, arguments);
                        } else {
                            var action = arguments.length <= 0 ? undefined : arguments[0];
                            if (action === 'viewStateUpdate' || action === 'mediaPlayerNotice') {
                                receiveActionCommand.apply(undefined, arguments);
                            }
                        }
                    }
                });
                var whiteboardView = this.whiteboardViewMap.get(instanceId);
                if (whiteboardView && whiteboardView.getConfigration().isLoadDocumentToolBar && whiteboardView.getConfigration().hasExtendDocument) {
                    var documentToolBarParentNode = whiteboardView.getConfigration().documentToolBarConfig.parentNode || whiteboardView.getWhiteboardRootElement();
                    this.createDocumentToolBar(documentToolBarParentNode, whiteboardView.getConfigration().documentToolBarConfig, instanceId);
                }
                if (whiteboardView && whiteboardView.getConfigration().isLoadDocumentRemark && whiteboardView.getConfigration().hasExtendDocument) {
                    var documentRemarkParentNode = whiteboardView.getConfigration().documentRemarkConfig.parentNode || whiteboardView.getWhiteboardRootElement();
                    this.createDocumentRemark(documentRemarkParentNode, whiteboardView.getConfigration().documentRemarkConfig, instanceId);
                }
                this._executeSaveMsglistData(instanceId);
                this._executeSavePubmsgData(instanceId);
            }
        }
    }, {
        key: 'destroyMainWhiteboard',


        /*销毁主白板*/
        value: function destroyMainWhiteboard() {
            L.Logger.debug('[whiteboarrd-sdk]destroyMainWhiteboard');
            var instanceId = 'default';
            this._destroyWhiteboard(instanceId);
        }
    }, {
        key: 'destroyExtendWhiteboard',


        /*销毁扩展白板
         * @params instanceId:白板实例id  , String
        * */
        value: function destroyExtendWhiteboard(instanceId) {
            L.Logger.debug('[whiteboarrd-sdk]destroyExtendWhiteboard  instanceId:', instanceId);
            if (instanceId !== undefined && instanceId !== null) {
                this._destroyWhiteboard(instanceId);
            }
        }
    }, {
        key: 'changeDocument',


        /*改变显示的文件
         * @params fileid:文件id , Int
         * @params toPage:跳到的页数 , Int
         * @params instanceId:白板实例id  , String
         * */
        value: function changeDocument(fileid) {
            var toPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            var instanceId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';

            if (TK.SDKTYPE === 'mobile') {
                L.Logger.error('changeDocument method is not allowed in the mobile environment!');
                return;
            }
            if (fileid == undefined || fileid == null) {
                L.Logger.error('changeDocument method parameter error: fileid can\'t be empty! ');
                return;
            }
            if (this.room) {
                if (this.whiteboardViewMap.has(instanceId)) {
                    var whiteboardView = this.whiteboardViewMap.get(instanceId);
                    var fileinfo = undefined;
                    if (fileid == 0) {
                        fileinfo = this.pureWhiteboardFileinfoList[instanceId];
                    } else {
                        var filelist = this.room.getFileList();
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = filelist[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var file = _step.value;

                                if (file.fileid == fileid) {
                                    fileinfo = file;
                                    break;
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    }
                    if (fileinfo) {
                        if (/(mp3|mp4|webm)/g.test(fileinfo.filetype)) {
                            var swfpath = fileinfo.swfpath;
                            var index = swfpath.lastIndexOf(".");
                            var imgType = swfpath.substring(index);
                            var fileUrl = swfpath.replace(imgType, "-1" + imgType);
                            var url = _Global2.default.nowUseDocAddress + fileUrl,
                                isVideo = /(mp4|webm)/g.test(fileinfo.filetype),
                                toID = whiteboardView.getConfigration().mediaShareToID,
                                attrs = {
                                source: 'mediaFileList',
                                filename: fileinfo.filename,
                                fileid: fileinfo.fileid,
                                pauseWhenOver: isVideo && whiteboardView.getConfigration().mediaSharePauseWhenOver
                            };
                            this.startShareMedia(url, isVideo, toID, attrs);
                        } else {
                            var fileprop = Number(fileinfo.fileprop);
                            var isDynamicPPT = fileprop === 1 || fileprop === 2;
                            var isH5Document = fileprop === 3;
                            var isGeneralFile = !isDynamicPPT && !isH5Document;
                            if (isDynamicPPT || isH5Document || isGeneralFile) {
                                if (isGeneralFile && toPage > fileinfo.pagenum) {
                                    toPage = fileinfo.pagenum;
                                }
                                if (toPage < 1) {
                                    toPage = 1;
                                }
                                var pubmsgData = {
                                    name: instanceId === 'default' ? 'ShowPage' : 'ExtendShowPage',
                                    id: instanceId === 'default' ? 'DocumentFilePage_ShowPage' : 'DocumentFilePage_ExtendShowPage_' + instanceId,
                                    toID: '__all',
                                    data: {
                                        sourceInstanceId: instanceId,
                                        isGeneralFile: isGeneralFile,
                                        isMedia: false,
                                        isDynamicPPT: isDynamicPPT,
                                        isH5Document: isH5Document,
                                        action: 'show',
                                        mediaType: '',
                                        filedata: {
                                            currpage: toPage,
                                            pptslide: isDynamicPPT ? toPage : 1,
                                            pptstep: 0,
                                            steptotal: 0,
                                            fileid: fileinfo.fileid,
                                            pagenum: fileinfo.pagenum,
                                            filename: fileinfo.filename,
                                            filetype: fileinfo.filetype,
                                            isContentDocument: fileinfo.isContentDocument,
                                            swfpath: isDynamicPPT || isH5Document ? fileinfo.downloadpath : fileinfo.swfpath
                                        }
                                    },
                                    save: true
                                };
                                this.receiveEventRoomPubmsg({ type: 'room-pubmsg', message: Object.deepAssign({}, pubmsgData) }, instanceId);
                                if (whiteboardView.getConfigration().synchronization && whiteboardView.getConfigration().isConnectedRoom) {
                                    this.pubMsg(pubmsgData);
                                }
                            } else {
                                L.Logger.info('[whiteboarrd-sdk]changeDocument:you open file type is not support , filetype is ' + fileinfo.filetype + ' , fileid is ' + fileid + ' , toPage is ' + toPage + '.');
                            }
                        }
                    } else {
                        L.Logger.info('[whiteboarrd-sdk]changeDocument:you can\'t find the file by fileid , fileid is ' + fileid + ' , toPage is ' + toPage + '.');
                    }
                }
            }
        }
    }, {
        key: 'openRemoteDocument',


        /*打开指定服务器的课件/
         * @params url: 文件路径 String
         * @params id: 文件相关信息辨识用id(任意唯一且不重复的值) String
         * @params type: 文件类型 generalDocument: 图片， dynamicPPT: 动态PPT课件, h5Document: h5课件, mediaFile:媒体文件，  String
         * @params onFailure: 传入失败后回调函数 Function
         * @params: [option]: 配置项 扩展用 Object
        */
        value: function openRemoteDocument(url, id, type, onFailure) {
            var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

            var checkArguments = function () {
                function checkURL(URL) {
                    var str = URL;
                    var Expression = /http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- .\/?%&=]*)?/;
                    var objExp = new RegExp(Expression);
                    if (objExp.test(str) == true) {
                        return true;
                    } else {
                        return false;
                    }
                }
                function checkType(TYPE) {
                    var types = ['generalDocument', 'dynamicPPT', 'h5Document', 'mediaFile'];
                    if (types.indexOf(TYPE) != -1) {
                        return true;
                    }
                    return false;
                }
                function checkNotEmpty(id) {
                    return !!id;
                }
                return function (url, type, id, onFailure) {
                    if (!checkURL(url)) {
                        L.Logger.error('[whiteboarrd-sdk]openRemoteDocument: url invalid');
                        if (typeof onFailure === 'function') {
                            onFailure('url invalid');
                        }
                        return false;
                    }
                    if (!checkType(type)) {
                        L.Logger.error('[whiteboarrd-sdk]openRemoteDocument: type invalid');
                        if (typeof onFailure === 'function') {
                            onFailure('type invalid');
                        }
                        return false;
                    }
                    if (!checkNotEmpty(id)) {
                        L.Logger.error('[whiteboarrd-sdk]openRemoteDocument: id is empty');
                        if (typeof onFailure === 'function') {
                            onFailure('id is empty');
                        }
                        return false;
                    }
                    return true;
                };
            }();
            if (!checkArguments(url, type, id, onFailure) || !this.room) return false;
            if (this.whiteboardViewMap.has('default')) {
                var whiteboardView = this.whiteboardViewMap.get('default');
                var filename = 'unknown';
                var filetype = 'unknown';
                try {
                    var urlArr = url.split(/(\/|\\)/g);
                    if (urlArr && urlArr.length > 1) {
                        var fileInfo = urlArr[urlArr.length - 1];
                        if (fileInfo && typeof fileInfo === 'string') {
                            var fileInfoArr = fileInfo.split('.');
                            if (fileInfoArr && fileInfoArr.length == 2) {
                                filename = fileInfoArr[0];
                                filetype = fileInfoArr[1];
                            }
                        }
                    }
                } catch (e) {
                    L.Logger.error('[whiteboarrd-sdk]openRemoteDocument err:', e);
                }
                if (type === 'mediaFile') {
                    var toID = whiteboardView.getConfigration().mediaShareToID;
                    var isVideo = filetype === 'unknown' ? /(.mp4|.webm)/g.test(url) : /(mp4|webm)/g.test(filetype);
                    var attrs = {
                        source: 'mediaFileList',
                        filename: filename,
                        fileid: id,
                        pauseWhenOver: isVideo && whiteboardView.getConfigration().mediaSharePauseWhenOver
                    };
                    this.startShareMedia(url, isVideo, toID, attrs);
                } else {
                    var pubmsgData = {
                        name: 'ShowPage',
                        id: 'DocumentFilePage_ShowPage',
                        toID: '__all',
                        data: {
                            isGeneralFile: type == 'generalDocument',
                            isMedia: false,
                            isDynamicPPT: type == 'dynamicPPT',
                            isH5Document: type == 'h5Document',
                            action: 'show',
                            mediaType: '',
                            filedata: {
                                currpage: option.toPage !== undefined && typeof option.toPage === 'number' ? option.toPage : 1,
                                pptslide: option.toPage !== undefined && typeof option.toPage === 'number' ? option.toPage : 1,
                                pptstep: 0,
                                steptotal: 0,
                                fileid: id,
                                pagenum: 1,
                                filename: filename,
                                filetype: filetype,
                                isContentDocument: 1,
                                swfpath: url
                            }
                        },
                        save: true
                    };
                    this.receiveEventRoomPubmsg({ type: 'room-pubmsg', message: Object.deepAssign({}, pubmsgData) });
                    if (whiteboardView.getConfigration().synchronization && whiteboardView.getConfigration().isConnectedRoom) {
                        this.pubMsg(pubmsgData);
                    }
                }
            }
        }

        /*改变白板相关配置
         * @params configration:需要更新的配置项 , Object
         * @params instanceId:白板实例id , String
         */

    }, {
        key: 'changeWhiteBoardConfigration',
        value: function changeWhiteBoardConfigration(configration) {
            var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

            var commonWhiteBoardConfigration = {};
            for (var key in configration) {
                if (_Configuration2.default.commonWhiteboard.hasOwnProperty(key)) {
                    commonWhiteBoardConfigration[key] = configration[key];
                    delete configration[key];
                }
            }
            if (Object.keys(commonWhiteBoardConfigration).length) {
                this.changeCommonWhiteBoardConfigration(commonWhiteBoardConfigration);
            }
            if (!Object.keys(configration).length) {
                return;
            }
            L.Logger.debug('[whiteboarrd-sdk]changeWhiteBoardConfigration  configration and instanceId:', configration, instanceId);
            if (this.whiteboardViewMap.has(instanceId)) {
                if (this.awitWhiteboardConfigrationMap.has(instanceId)) {
                    this.awitWhiteboardConfigrationMap.delete(instanceId);
                }
                this.whiteboardViewMap.get(instanceId).changeWhiteBoardConfigration(configration);
            } else {
                if (this.awitWhiteboardConfigrationMap.has(instanceId)) {
                    Object.deepAssign(this.awitWhiteboardConfigrationMap.get(instanceId), configration);
                } else {
                    this.awitWhiteboardConfigrationMap.set(instanceId, Object.deepAssign({}, _Configuration2.default.defaultWhiteboard, _Configuration2.default.commonWhiteboard, configration));
                }
            }
            if (configration.isLoadDocumentToolBar !== undefined && instanceId === 'default' || configration.hasExtendDocument) {
                var whiteboardView = this.whiteboardViewMap.get(instanceId);
                if (configration.isLoadDocumentToolBar && !this.documentToolbarViewList[instanceId]) {
                    if (whiteboardView) {
                        var documentToolBarParentNode = whiteboardView.getConfigration().documentToolBarConfig.parentNode || whiteboardView.getWhiteboardRootElement();
                        this.createDocumentToolBar(documentToolBarParentNode, whiteboardView.getConfigration().documentToolBarConfig, instanceId);
                    }
                } else if (!configration.isLoadDocumentToolBar && this.documentToolbarViewList[instanceId] && this.documentToolbarViewList[instanceId].destroyView) {
                    this.documentToolbarViewList[instanceId].destroyView();
                    this.documentToolbarViewList[instanceId] = undefined;
                }
            }
            if (configration.isLoadDocumentRemark !== undefined && instanceId === 'default' || configration.hasExtendDocument) {
                var _whiteboardView = this.whiteboardViewMap.get(instanceId);
                if (configration.isLoadDocumentRemark && !this.documentRemarkViewList[instanceId]) {
                    if (_whiteboardView) {
                        var documentRemarkParentNode = _whiteboardView.getConfigration().documentRemarkConfig.parentNode || _whiteboardView.getWhiteboardRootElement();
                        this.createDocumentRemark(documentRemarkParentNode, _whiteboardView.getConfigration().documentRemarkConfig, instanceId);
                    }
                } else if (!configration.isLoadDocumentRemark && this.documentRemarkViewList[instanceId] && this.documentRemarkViewList[instanceId].destroyView) {
                    this.documentRemarkViewList[instanceId].destroyView();
                    this.documentRemarkViewList[instanceId] = undefined;
                }
            }

            if (configration.isLoadWhiteboardToolBar !== undefined) {
                var _whiteboardView2 = this.whiteboardViewMap.get(instanceId);
                if (configration.isLoadWhiteboardToolBar && !this.whiteboardToolbarViewList[instanceId]) {
                    if (_whiteboardView2) {
                        var whiteboardToolBarParentNode = _whiteboardView2.getConfigration().whiteboardToolBarConfig.parentNode || _whiteboardView2.getWhiteboardRootElement();
                        this.createWhiteboardToolBar(whiteboardToolBarParentNode, _whiteboardView2.getConfigration().whiteboardToolBarConfig, instanceId);
                    }
                } else if (!configration.isLoadWhiteboardToolBar && this.whiteboardToolbarViewList[instanceId] && this.whiteboardToolbarViewList[instanceId].destroyView) {
                    this.whiteboardToolbarViewList[instanceId].destroyView();
                    this.whiteboardToolbarViewList[instanceId] = undefined;
                    delete this.whiteboardToolbarViewList[instanceId];
                }
            }

            if (configration.isLoadAudioPlayer !== undefined && instanceId === 'default') {
                var _whiteboardView3 = this.whiteboardViewMap.get(instanceId);
                if (configration.isLoadAudioPlayer && !this.audioPlayerView) {
                    if (_whiteboardView3) {
                        var audioPlayerParentNode = _whiteboardView3.getConfigration().audioPlayerConfig.parentNode || _whiteboardView3.getWhiteboardRootElement();
                        this.createAudioPlayer(audioPlayerParentNode, _whiteboardView3.getConfigration().audioPlayerConfig);
                    }
                } else if (!configration.isLoadAudioPlayer && this.audioPlayerView && this.audioPlayerView.destroyView) {
                    this.audioPlayerView.destroyView();
                    this.audioPlayerView = undefined;
                }
            }

            if (configration.isLoadVideoPlayer !== undefined && instanceId === 'default') {
                var _whiteboardView4 = this.whiteboardViewMap.get(instanceId);
                if (configration.isLoadVideoPlayer && !this.videoPlayerView) {
                    if (_whiteboardView4) {
                        var videoPlayerParentNode = _whiteboardView4.getConfigration().videoPlayerConfig.parentNode || _whiteboardView4.getWhiteboardRootElement();
                        this.createVideoPlayer(videoPlayerParentNode, _whiteboardView4.getConfigration().videoPlayerConfig);
                    }
                } else if (!configration.isLoadVideoPlayer && this.videoPlayerView && this.videoPlayerView.destroyView) {
                    this.videoPlayerView.destroyView();
                    this.videoPlayerView = undefined;
                }
            }

            if (configration.languageType !== undefined) {
                if (instanceId === 'default' || configration.hasExtendDocument) {
                    if (this.documentToolbarViewList[instanceId]) {
                        this.documentToolbarViewList[instanceId].setProps({
                            languageType: configration.languageType
                        });
                    }
                    if (this.documentRemarkViewList[instanceId]) {
                        this.documentRemarkViewList[instanceId].setProps({
                            languageType: configration.languageType
                        });
                    }
                }
                if (this.whiteboardToolbarViewList[instanceId]) {
                    this.whiteboardToolbarViewList[instanceId].setProps({
                        languageType: configration.languageType
                    });
                }
            }
            if (configration.isMobile !== undefined) {
                if (instanceId === 'default' || configration.hasExtendDocument) {
                    if (this.documentToolbarViewList[instanceId]) {
                        this.documentToolbarViewList[instanceId].setProps({
                            isMobile: configration.isMobile
                        });
                    }
                    if (this.documentRemarkViewList[instanceId]) {
                        this.documentRemarkViewList[instanceId].setProps({
                            isMobile: configration.isMobile
                        });
                    }
                }
                if (this.whiteboardToolbarViewList[instanceId]) {
                    this.whiteboardToolbarViewList[instanceId].setProps({
                        isMobile: configration.isMobile
                    });
                }
            }

            if (configration.canRemark !== undefined) {
                if (instanceId === 'default' || configration.hasExtendDocument) {
                    if (this.documentToolbarViewList[instanceId]) {
                        this.documentToolbarViewList[instanceId].setProps({
                            canRemark: configration.canRemark
                        });
                    }
                    if (this.documentRemarkViewList[instanceId]) {
                        this.documentRemarkViewList[instanceId].setProps({
                            canRemark: configration.canRemark
                        });
                    }
                }
            }

            if (configration.whiteboardToolBarConfig !== undefined) {
                if (this.whiteboardToolbarViewList[instanceId]) {
                    if (configration.whiteboardToolBarConfig.hasOwnProperty('parentNode') && typeof this.whiteboardToolbarViewList[instanceId].changeParentNode === 'function') {
                        var _whiteboardView5 = this.whiteboardViewMap.get(instanceId);
                        var parentNode = configration.whiteboardToolBarConfig.parentNode || (_whiteboardView5 ? _whiteboardView5.getWhiteboardRootElement() : undefined);
                        if (typeof parentNode === 'string') {
                            var parentNodeStr = parentNode;
                            parentNode = document.getElementById(parentNodeStr);
                            if (!parentNode) {
                                L.Logger.warning('The node id cannot be found by node id, and  whiteboardToolBarConfig.parentNode cannot update config, element id is ' + parentNodeStr + '.');
                                return;
                            }
                        }
                        this.whiteboardToolbarViewList[instanceId].changeParentNode(parentNode);
                    }
                    for (var _key in configration.whiteboardToolBarConfig) {
                        var value = configration.whiteboardToolBarConfig[_key];
                        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
                            configration.whiteboardToolBarConfig[_key] = Object.deepAssign({}, this.whiteboardToolbarViewList[instanceId].props[_key], value);
                        }
                    }
                    this.whiteboardToolbarViewList[instanceId].setProps(Object.deepAssign({}, configration.whiteboardToolBarConfig));
                }
            }

            if (configration.documentToolBarConfig !== undefined) {
                if (instanceId === 'default' || configration.hasExtendDocument) {
                    if (this.documentToolbarViewList[instanceId]) {
                        if (configration.documentToolBarConfig.hasOwnProperty('parentNode') && typeof this.documentToolbarViewList[instanceId].changeParentNode === 'function') {
                            var _whiteboardView6 = this.whiteboardViewMap.get(instanceId);
                            var _parentNode = configration.documentToolBarConfig.parentNode || (_whiteboardView6 ? _whiteboardView6.getWhiteboardRootElement() : undefined);
                            if (typeof _parentNode === 'string') {
                                var _parentNodeStr = _parentNode;
                                _parentNode = document.getElementById(_parentNodeStr);
                                if (!_parentNode) {
                                    L.Logger.warning('The node id cannot be found by node id, and  documentToolBarConfig.parentNode cannot update config, element id is ' + _parentNodeStr + '.');
                                    return;
                                }
                            }
                            this.documentToolbarViewList[instanceId].changeParentNode(_parentNode);
                        }
                        for (var _key2 in configration.documentToolBarConfig) {
                            var _value = configration.documentToolBarConfig[_key2];
                            if ((typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) === 'object') {
                                configration.documentToolBarConfig[_key2] = Object.deepAssign({}, this.documentToolbarViewList[instanceId].props[_key2], _value);
                            }
                        }
                        this.documentToolbarViewList[instanceId].setProps(Object.deepAssign({}, configration.documentToolBarConfig));
                    }
                }
            }

            if (configration.documentRemarkConfig !== undefined) {
                if (instanceId === 'default' || configration.hasExtendDocument) {
                    if (this.documentRemarkViewList[instanceId]) {
                        if (configration.documentRemarkConfig.hasOwnProperty('parentNode') && typeof this.documentRemarkViewList[instanceId].changeParentNode === 'function') {
                            var _whiteboardView7 = this.whiteboardViewMap.get(instanceId);
                            var _parentNode2 = configration.documentRemarkConfig.parentNode || (_whiteboardView7 ? _whiteboardView7.getWhiteboardRootElement() : undefined);
                            if (typeof _parentNode2 === 'string') {
                                var _parentNodeStr2 = _parentNode2;
                                _parentNode2 = document.getElementById(_parentNodeStr2);
                                if (!_parentNode2) {
                                    L.Logger.warning('The node id cannot be found by node id, and  documentRemarkConfig.parentNode cannot update config, element id is ' + _parentNodeStr2 + '.');
                                    return;
                                }
                            }
                            this.documentRemarkViewList[instanceId].changeParentNode(_parentNode2);
                        }
                        for (var _key3 in configration.documentRemarkConfig) {
                            var _value2 = configration.documentRemarkConfig[_key3];
                            if ((typeof _value2 === 'undefined' ? 'undefined' : _typeof(_value2)) === 'object') {
                                configration.documentRemarkConfig[_key3] = Object.deepAssign({}, this.documentRemarkViewList[instanceId].props[_key3], _value2);
                            }
                        }
                        this.documentRemarkViewList[instanceId].setProps(Object.deepAssign({}, configration.documentRemarkConfig));
                    }
                }
            }

            if (configration.audioPlayerConfig !== undefined) {
                if (this.audioPlayerView) {
                    for (var _key4 in configration.audioPlayerConfig) {
                        var _value3 = configration.audioPlayerConfig[_key4];
                        if ((typeof _value3 === 'undefined' ? 'undefined' : _typeof(_value3)) === 'object') {
                            configration.audioPlayerConfig[_key4] = Object.deepAssign({}, this.audioPlayerView.props[_key4], _value3);
                        }
                    }
                    this.audioPlayerView.setProps(Object.deepAssign({}, configration.audioPlayerConfig));
                }
            }

            if (configration.videoPlayerConfig !== undefined) {
                if (this.videoPlayerView) {
                    for (var _key5 in configration.videoPlayerConfig) {
                        var _value4 = configration.videoPlayerConfig[_key5];
                        if ((typeof _value4 === 'undefined' ? 'undefined' : _typeof(_value4)) === 'object') {
                            configration.videoPlayerConfig[_key5] = Object.deepAssign({}, this.videoPlayerView.props[_key5], _value4);
                        }
                    }
                    this.videoPlayerView.setProps(Object.deepAssign({}, configration.videoPlayerConfig));
                }
            }
        }
    }, {
        key: 'noticeWhiteboardActionCommand',


        /*通知白板sdk执行动作指令*/
        value: function noticeWhiteboardActionCommand(action, cmd) {
            var instanceId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]noticeWhiteboardActionCommand ');
            if (this.whiteboardViewMap.has(instanceId)) {
                var whiteboardView = this.whiteboardViewMap.get(instanceId);
                whiteboardView.noticeWhiteboardActionCommand(action, cmd);
            }
        }
    }, {
        key: 'changeCommonWhiteBoardConfigration',


        /*改变所有白板的公有配置
        * @params <Object> commonConfigration 更新的公有配置项
        * */
        value: function changeCommonWhiteBoardConfigration(commonConfigration) {
            L.Logger.debug('[whiteboarrd-sdk]changeCommonWhiteBoardConfigration common configration:', commonConfigration);
            var CopyObj = Object.deepAssign({}, commonConfigration);
            if (_typeof(CopyObj.docAddress) === 'object') {
                _Global2.default.docAddress = commonConfigration.docAddress;
                if (_Global2.default.docAddressKey === '') {
                    _Global2.default.docAddressKey = commonConfigration.docAddress.hostname;
                }
                _Global2.default.protocol = CopyObj.docAddress.protocol;
                _Global2.default.port = CopyObj.docAddress.port;
                CopyObj.docAddress = commonConfigration.docAddress.protocol + '://' + commonConfigration.docAddress.hostname + ':' + commonConfigration.docAddress.port; // 将拷贝完毕之后的doc地址还原成字符串
            };
            if (_typeof(CopyObj.webAddress) === 'object') {
                CopyObj.webAddress = commonConfigration.webAddress.protocol + '://' + commonConfigration.webAddress.hostname + ':' + commonConfigration.webAddress.port; // 将拷贝完毕之后的web地址还原成字符串
            }
            if (CopyObj.backupDocAddressList && Array.isArray(CopyObj.backupDocAddressList)) {
                _Global2.default.backupDocAddressList = commonConfigration.backupDocAddressList;
                _Configuration2.default.commonWhiteboard.backupDocAddressList = [];
            }
            Object.deepAssign(_Configuration2.default.commonWhiteboard, CopyObj);
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.awitWhiteboardConfigrationMap.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var awitWhiteboardConfigration = _step2.value;

                    Object.deepAssign(awitWhiteboardConfigration, CopyObj);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            if (commonConfigration.docAddress !== undefined || commonConfigration.backupDocAddressList !== undefined) {
                _Global2.default.docAddressList = [_Global2.default.docAddress].concat(_toConsumableArray(_Global2.default.backupDocAddressList), _toConsumableArray(_Global2.default.laterAddressList));
                if (!_Global2.default.hasGetDocAddressIndexByLocalStorage) {
                    _Global2.default.nowUseDocAddress = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || _Configuration2.default.commonWhiteboard.docAddress;
                    this.getLocalStorageItem('tkDocAddressKey', function (docAddressKey) {
                        if (docAddressKey && docAddressKey !== undefined && typeof docAddressKey === 'string' && docAddressKey !== 'undefined') {
                            _Global2.default.docAddressKey = docAddressKey;
                            _Global2.default.localStorageDocAddressKey = docAddressKey;
                            if (_Global2.default.localStorageDocAddressKey && _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.localStorageDocAddressKey) === '' && _Utils2.default.getItem(_Global2.default.laterAddressList, _Global2.default.localStorageDocAddressKey) === '') {
                                if (_Global2.default.protocol && _Global2.default.port) {
                                    _Global2.default.laterAddressList = [{ protocol: _Global2.default.protocol, hostname: _Global2.default.localStorageDocAddressKey, port: _Global2.default.port }];
                                }
                                _Global2.default.docAddressList = [_Global2.default.docAddress].concat(_toConsumableArray(_Global2.default.backupDocAddressList), _toConsumableArray(_Global2.default.laterAddressList));
                            }
                            _Global2.default.nowUseDocAddress = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || _Configuration2.default.commonWhiteboard.docAddress;
                            _Global2.default.hasGetDocAddressIndexByLocalStorage = true;
                        } else {
                            if (_Global2.default.localStorageDocAddressKey && _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.localStorageDocAddressKey) === '' && _Utils2.default.getItem(_Global2.default.laterAddressList, _Global2.default.localStorageDocAddressKey) === '') {
                                if (_Global2.default.protocol && _Global2.default.port) {
                                    _Global2.default.laterAddressList = [{ protocol: _Global2.default.protocol, hostname: _Global2.default.localStorageDocAddressKey, port: _Global2.default.port }];
                                }
                                _Global2.default.docAddressList = [_Global2.default.docAddress].concat(_toConsumableArray(_Global2.default.backupDocAddressList), _toConsumableArray(_Global2.default.laterAddressList));
                            }
                            _Global2.default.nowUseDocAddress = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || _Configuration2.default.commonWhiteboard.docAddress;
                            _Global2.default.hasGetDocAddressIndexByLocalStorage = true;
                        }
                    });
                } else {
                    if (_Global2.default.localStorageDocAddressKey && _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.localStorageDocAddressKey) === '' && _Utils2.default.getItem(_Global2.default.laterAddressList, _Global2.default.localStorageDocAddressKey) === '') {
                        if (_Global2.default.protocol && _Global2.default.port) {
                            _Global2.default.laterAddressList = [{ protocol: _Global2.default.protocol, hostname: _Global2.default.localStorageDocAddressKey, port: _Global2.default.port }];
                        }
                        _Global2.default.docAddressList = [_Global2.default.docAddress].concat(_toConsumableArray(_Global2.default.backupDocAddressList), _toConsumableArray(_Global2.default.laterAddressList));
                    }
                    _Global2.default.nowUseDocAddress = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || _Configuration2.default.commonWhiteboard.docAddress;
                }
            }

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.whiteboardViewMap[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _ref = _step3.value;

                    var _ref2 = _slicedToArray(_ref, 2);

                    var instanceId = _ref2[0];
                    var whiteboardView = _ref2[1];

                    if (this.awitWhiteboardConfigrationMap.has(instanceId)) {
                        this.awitWhiteboardConfigrationMap.delete(instanceId);
                    }
                    whiteboardView.changeWhiteBoardConfigration(CopyObj);
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = Object.values(this.whiteboardToolbarViewList)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var whiteboardToolbarView = _step4.value;

                    if (whiteboardToolbarView) {
                        whiteboardToolbarView.setProps(Object.deepAssign({}, CopyObj));
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = Object.values(this.documentToolbarViewList)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var documentToolbarView = _step5.value;

                    if (documentToolbarView) {
                        documentToolbarView.setProps(Object.deepAssign({}, CopyObj));
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = Object.values(this.documentRemarkViewList)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var documentRemarkView = _step6.value;

                    if (documentRemarkView) {
                        documentRemarkView.setProps(Object.deepAssign({}, CopyObj));
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            if (this.audioPlayerView) {
                this.audioPlayerView.setProps(Object.deepAssign({}, CopyObj));
            }

            if (this.videoPlayerView) {
                this.videoPlayerView.setProps(Object.deepAssign({}, CopyObj));
            }
        }
    }, {
        key: 'useWhiteboardTool',


        /*使用标注工具
        * @params toolKey:工具的key，key值描述如下：
             tool_mouse:鼠标
             tool_laser:激光笔
             tool_pencil:画笔
             tool_highlighter:荧光笔
             tool_line:直线
             tool_arrow:箭头
             tool_eraser:橡皮
             tool_text:文字
             tool_ellipse:实心椭圆
             tool_ellipse_empty:空心椭圆
             tool_rectangle:实心矩形
             tool_rectangle_empty:空心矩形
        * @params instanceId:白板实例id
        * */
        value: function useWhiteboardTool(toolKey) {
            var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]useWhiteboardTool toolKey and instanceId:', toolKey, instanceId);
            if (this.whiteboardViewMap.has(instanceId)) {
                this.whiteboardViewMap.get(instanceId).useWhiteboardTool(toolKey);
            }
        }

        /*加页
        * @params instanceId:白板实例id  , String
        * */

    }, {
        key: 'addPage',
        value: function addPage() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]addPage ');
            if (this.whiteboardViewMap.has(instanceId)) {
                this.whiteboardViewMap.get(instanceId).addPage();
            }
        }
    }, {
        key: 'nextPage',


        /*下一页
        * @params instanceId:白板实例id  , String
        * */
        value: function nextPage() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]nextPage ');
            if (this.whiteboardViewMap.has(instanceId)) {
                this.whiteboardViewMap.get(instanceId).nextPage();
            }
        }

        /*上一页
        * @params instanceId:白板实例id  , String
        * */

    }, {
        key: 'prevPage',
        value: function prevPage() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]prevPage ');
            if (this.whiteboardViewMap.has(instanceId)) {
                this.whiteboardViewMap.get(instanceId).prevPage();
            }
        }

        /*跳转到指定页
        * @params page:跳转到的页数，Int
        * @params instanceId:白板实例id  , String
        * */

    }, {
        key: 'skipPage',
        value: function skipPage(page) {
            var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]skipPage  page :', page);
            if (typeof page !== 'number') {
                L.Logger.warning('skipPage page must is number!');
                return;
            }
            if (this.whiteboardViewMap.has(instanceId)) {
                this.whiteboardViewMap.get(instanceId).skipPage(page);
            }
        }

        /*下一步，用于动态ppt
        * @params instanceId:白板实例id  , String
        * */

    }, {
        key: 'nextStep',
        value: function nextStep() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]nextStep ');
            if (this.whiteboardViewMap.has(instanceId)) {
                this.whiteboardViewMap.get(instanceId).nextStep();
            }
        }

        /*上一步，用于动态ppt
        * @params instanceId:白板实例id  , String
        * */

    }, {
        key: 'prevStep',
        value: function prevStep() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]prevStep ');
            if (this.whiteboardViewMap.has(instanceId)) {
                this.whiteboardViewMap.get(instanceId).prevStep();
            }
        }

        /*放大操作
        * @params instanceId:白板实例id  , String
        * */

    }, {
        key: 'enlargeWhiteboard',
        value: function enlargeWhiteboard() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]enlargeWhiteboard  instanceId:', instanceId);
            var zoomKey = 'zoom_big'; // zoom_big:放大白板
            this.executeZoomWhiteaord(zoomKey, instanceId);
        }
    }, {
        key: 'narrowWhiteboard',


        /*缩小操作
        * @params instanceId:白板实例id  , String*/
        value: function narrowWhiteboard() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]narrowWhiteboard  instanceId:', instanceId);
            var zoomKey = 'zoom_small'; // zoom_big:放大白板
            this.executeZoomWhiteaord(zoomKey, instanceId);
        }
    }, {
        key: 'clear',


        /*清空当前页画笔操作
        * @params instanceId:白板实例id  , String*/
        value: function clear() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]clear  instanceId:', instanceId);
            var actionKey = 'action_clear'; // action_clear:清空白板画笔
            this.executeWhiteboardAction(actionKey, instanceId);
        }

        /*撤销画笔操作
        * @params instanceId:白板实例id  , String*/

    }, {
        key: 'undo',
        value: function undo() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]undo  instanceId:', instanceId);
            var actionKey = 'action_undo'; // action_undo:撤销白板画笔
            this.executeWhiteboardAction(actionKey, instanceId);
        }

        /*恢复画笔操作
        * @params instanceId:白板实例id  , String*/

    }, {
        key: 'redo',
        value: function redo() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]redo  instanceId:', instanceId);
            var actionKey = 'action_redo'; // action_redo:恢复白板画笔
            this.executeWhiteboardAction(actionKey, instanceId);
        }

        /*全屏功能
        * @params instanceId:白板实例id  , String*/

    }, {
        key: 'fullScreen',
        value: function fullScreen() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]fullScreen ');
            if (this.whiteboardViewMap.has(instanceId) && this.room) {
                var whiteboardView = this.whiteboardViewMap.get(instanceId);
                if (whiteboardView.getConfigration().isMobile) {
                    //移动端的全屏
                    if (this.room.changeWebPageFullScreen) {
                        this.room.changeWebPageFullScreen(true);
                    }
                } else {
                    //浏览器的全屏
                    if (_Utils2.default.isFullScreenStatus()) {
                        _Utils2.default.exitFullscreen();
                    }
                    var fullScreenElement = whiteboardView.getWhiteboardRootElement();
                    var fullScreenElementId = whiteboardView.getConfigration().documentToolBarConfig.fullScreenElementId;

                    if (fullScreenElementId) {
                        if (typeof fullScreenElementId === 'string') {
                            if (document.getElementById(fullScreenElementId)) {
                                fullScreenElement = document.getElementById(fullScreenElementId);
                            }
                        } else {
                            fullScreenElement = fullScreenElementId;
                        }
                    }
                    _Utils2.default.launchFullscreen(fullScreenElement);
                }
                // whiteboardView.changeFullScreenState( true );
            }
        }

        /*退出全屏功能
        * @params instanceId:白板实例id  , String*/

    }, {
        key: 'exitFullScreen',
        value: function exitFullScreen() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]exitFullScreen ');
            if (this.whiteboardViewMap.has(instanceId) && this.room) {
                var whiteboardView = this.whiteboardViewMap.get(instanceId);
                if (whiteboardView.getConfigration().isMobile) {
                    //移动端的全屏
                    if (this.room.changeWebPageFullScreen) {
                        this.room.changeWebPageFullScreen(false);
                    }
                } else {
                    //浏览器的全屏
                    _Utils2.default.exitFullscreen();
                }
                // whiteboardView.changeFullScreenState( false );
            }
        }

        /*更新白板大小
         * @params instanceId:白板实例id , String
        * */

    }, {
        key: 'updateWhiteboardSize',
        value: function updateWhiteboardSize() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]updateWhiteboardSize  instanceId:', instanceId);
            var configration = {};
            if (this.whiteboardViewMap.has(instanceId)) {
                var whiteboardView = this.whiteboardViewMap.get(instanceId);
                whiteboardView.resizeWhiteboardHandler();
                configration = whiteboardView.getConfigration();
            }
            if ((instanceId === 'default' || configration.hasExtendDocument) && this.documentRemarkViewList[instanceId] && _Utils2.default.isFunction(this.documentRemarkViewList[instanceId].resize)) {
                this.documentRemarkViewList[instanceId].resize();
            }
            if ((instanceId === 'default' || configration.hasExtendDocument) && this.documentToolbarViewList[instanceId] && _Utils2.default.isFunction(this.documentToolbarViewList[instanceId].resize)) {
                this.documentToolbarViewList[instanceId].resize();
            }
            if (this.whiteboardToolbarViewList[instanceId] && _Utils2.default.isFunction(this.whiteboardToolbarViewList[instanceId].resize)) {
                this.whiteboardToolbarViewList[instanceId].resize();
            }
        }
    }, {
        key: 'updateAllWhiteboardSize',


        /*更新所有白板大小*/
        value: function updateAllWhiteboardSize() {
            L.Logger.debug('[whiteboarrd-sdk]updateAllWhiteboardSize ');
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = this.whiteboardViewMap.keys()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var instanceId = _step7.value;

                    this.updateWhiteboardSize(instanceId);
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }
        }
    }, {
        key: 'resetWhiteboardData',


        /*重置指定白板的所有画笔数据
         * @params instanceId:白板实例id , 默认为'default', String
         * */
        value: function resetWhiteboardData() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]resetWhiteboardData  instanceId:', instanceId);
            if (this.whiteboardViewMap.has(instanceId)) {
                this.whiteboardViewMap.get(instanceId).resetWhiteboardData();
            }
        }
    }, {
        key: 'resetAllWhiteboardData',


        /*重置所有白板的数据*/
        value: function resetAllWhiteboardData() {
            L.Logger.debug('[whiteboarrd-sdk]resetAllWhiteboardData ');
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = this.whiteboardViewMap.values()[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var whiteboardView = _step8.value;

                    whiteboardView.resetWhiteboardData();
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }
        }
    }, {
        key: 'resetPureWhiteboardTotalPage',


        /*重置纯白板总页数
        * @params instanceId:白板实例id  , String*/
        value: function resetPureWhiteboardTotalPage() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]resetPureWhiteboardTotalPage ');
            var oldTotalPage = this.pureWhiteboardFileinfoList[instanceId] ? this.pureWhiteboardFileinfoList[instanceId].pagenum : 1;
            if (this.pureWhiteboardFileinfoList[instanceId]) {
                this.pureWhiteboardFileinfoList[instanceId].pagenum = 1;
            }
            var whiteboardView = this.whiteboardViewMap.get(instanceId);
            if (whiteboardView && _Utils2.default.isFunction(whiteboardView.resetPureWhiteboardTotalPage)) {
                whiteboardView.resetPureWhiteboardTotalPage(oldTotalPage);
            }
        }

        /*改变动态PPT音量
        * @params volume:音量大小(0-100)，Int
        * @params instanceId:白板实例id  , String
        * */

    }, {
        key: 'changeDynamicPptVolume',
        value: function changeDynamicPptVolume(volume) {
            var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]changeDynamicPptVolume volume:', volume);
            if (typeof volume === 'number' && this.whiteboardViewMap.has(instanceId)) {
                var whiteboardView = this.whiteboardViewMap.get(instanceId);
                if (volume < 0) {
                    volume = 0;
                } else if (volume > 100) {
                    volume = 100;
                }
                var pubmsgData = {
                    name: instanceId === 'default' ? 'PptVolumeControl' : 'ExtendPptVolumeControl',
                    id: instanceId === 'default' ? 'PptVolumeControl' : 'PptVolumeControl_' + instanceId,
                    toID: '__allExceptSender',
                    data: {
                        sourceInstanceId: instanceId,
                        volume: volume / 100
                    },
                    save: true
                };
                this.receiveEventRoomPubmsg({ type: 'room-pubmsg', message: pubmsgData });
                if (whiteboardView.getConfigration().pptVolumeSynchronization && whiteboardView.getConfigration().isConnectedRoom) {
                    this.pubMsg(pubmsgData);
                }
            }
        }

        /*打开文档备注
        * @params instanceId:白板实例id  , String*/

    }, {
        key: 'openDocumentRemark',
        value: function openDocumentRemark() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]openDocumentRemark ');
            if (this.whiteboardViewMap.has(instanceId)) {
                var whiteboardView = this.whiteboardViewMap.get(instanceId);
                whiteboardView.changeDocumentRemarkState(true);
            }
        }

        /*关闭文档备注
        * @params instanceId:白板实例id  , String*/

    }, {
        key: 'closeDocumentRemark',
        value: function closeDocumentRemark() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]closeDocumentRemark ');
            if (this.whiteboardViewMap.has(instanceId)) {
                var whiteboardView = this.whiteboardViewMap.get(instanceId);
                whiteboardView.changeDocumentRemarkState(false);
            }
        }

        /*执行白板的动作
         * @params actionKey:白板动作的key ， key值描述如下：
         action_clear:清空白板画笔
         action_redo:恢复白板画笔
         action_undo:撤销白板画笔
         * @params instanceId:白板实例id
         * */

    }, {
        key: 'executeWhiteboardAction',
        value: function executeWhiteboardAction(actionKey) {
            var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]executeWhiteboardAction actionKey and	instanceId:', actionKey, instanceId);
            if (this.whiteboardViewMap.has(instanceId)) {
                this.whiteboardViewMap.get(instanceId).executeWhiteboardAction(actionKey);
            }
        }

        /*执行缩放白板
         * @params zoomKey:白板缩放的key ， key值描述如下：
         zoom_big:放大白板
         zoom_small:缩小白板
         * @params instanceId:白板实例id
         * */

    }, {
        key: 'executeZoomWhiteaord',
        value: function executeZoomWhiteaord(zoomKey) {
            var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]executeZoomWhiteaord 	zoomKey and	instanceId:', zoomKey, instanceId);
            if (this.whiteboardViewMap.has(instanceId)) {
                this.whiteboardViewMap.get(instanceId).executeZoomWhiteaord(zoomKey);
            }
        }

        /*处理room-pubmsg*/

    }, {
        key: 'receiveEventRoomPubmsg',
        value: function receiveEventRoomPubmsg(recvEventData) {
            L.Logger.debug('[whiteboarrd-sdk]receiveEventRoomPubmsg 	recvEventData:', recvEventData);
            if (typeof recvEventData === 'string') {
                recvEventData = JSON.parse(recvEventData);
            }
            var pubmsgData = recvEventData.message;
            if (this._isWhiteboardCorrelationSignalling(pubmsgData.name)) {
                if (pubmsgData.name === 'SharpsChange') {
                    if (pubmsgData.data && pubmsgData.data.nickname) {
                        pubmsgData.remindContent = pubmsgData.data.nickname;
                    } else if (this.room && _Utils2.default.isFunction(this.room.getUser) && this.room.getUser(pubmsgData.fromID) && _typeof(this.room.getUser(pubmsgData.fromID)) === 'object' && this.room.getUser(pubmsgData.fromID).nickname) {
                        pubmsgData.remindContent = this.room.getUser(pubmsgData.fromID).nickname;
                    }
                    _WhiteboardIntermediateLayer2.default.handlerPubmsg_SharpsChange(pubmsgData);
                } else if (pubmsgData.name === 'WBPageCount') {
                    if (this.pureWhiteboardFileinfoList['default']) {
                        this.pureWhiteboardFileinfoList['default'].pagenum = pubmsgData.data.totalPage;
                    }
                } else if (pubmsgData.name === 'ExtendWBPageCount') {
                    if (pubmsgData.data && this.pureWhiteboardFileinfoList[pubmsgData.data.sourceInstanceId]) {
                        this.pureWhiteboardFileinfoList[pubmsgData.data.sourceInstanceId].pagenum = pubmsgData.data.totalPage;
                    }
                } else {
                    if (pubmsgData.name === 'ShowPage' || pubmsgData.name === 'whiteboardMarkTool' || pubmsgData.name === 'NewPptTriggerActionClick' || pubmsgData.name === 'PptVolumeControl' || pubmsgData.name === 'H5DocumentAction' || pubmsgData.name === 'ExtendShowPage' || pubmsgData.name === 'ExtendWhiteboardMarkTool' || pubmsgData.name === 'ExtendH5DocumentAction' || pubmsgData.name === 'ExtendPptVolumeControl' || pubmsgData.name === 'ExtendNewPptTriggerActionClick') {
                        if (pubmsgData.name === 'ShowPage' || pubmsgData.name === 'ExtendShowPage') {
                            if (typeof pubmsgData.data === 'string') {
                                pubmsgData.data = _Utils2.default.toJsonParse(pubmsgData.data);
                            }
                            if (pubmsgData.data.isGeneralFile && pubmsgData.data.filedata && pubmsgData.data.filedata.fileid == 0) {
                                if (pubmsgData.name === 'ShowPage' && this.pureWhiteboardFileinfoList['default']) {
                                    pubmsgData.data.filedata.pagenum = this.pureWhiteboardFileinfoList['default'].pagenum;
                                } else if (pubmsgData.name === 'ExtendShowPage' && this.pureWhiteboardFileinfoList[pubmsgData.data.sourceInstanceId]) {
                                    pubmsgData.data.filedata.pagenum = this.pureWhiteboardFileinfoList[pubmsgData.data.sourceInstanceId].pagenum;
                                }
                            }
                        }
                        if (pubmsgData.name === 'ShowPage' || pubmsgData.name === 'whiteboardMarkTool' || pubmsgData.name === 'NewPptTriggerActionClick' || pubmsgData.name === 'PptVolumeControl' || pubmsgData.name === 'H5DocumentAction') {
                            if (this.whiteboardViewMap.has('default')) {
                                this.whiteboardViewMap.get('default').receiveEventRoomPubmsg(recvEventData);
                            } else {
                                //此实例不存在又收到了此实例的消息，则保存数据
                                if (this.savePubmsgData['default'] && Array.isArray(this.savePubmsgData['default'])) {
                                    this.savePubmsgData['default'].push(recvEventData);
                                } else {
                                    this.savePubmsgData['default'] = [recvEventData];
                                }
                            }
                        } else if (pubmsgData.name === 'ExtendShowPage' || pubmsgData.name === 'ExtendWhiteboardMarkTool' || pubmsgData.name === 'ExtendPptVolumeControl' || pubmsgData.name === 'ExtendH5DocumentAction' || pubmsgData.name === 'ExtendNewPptTriggerActionClick') {
                            if (pubmsgData.data) {
                                if (this.whiteboardViewMap.has(pubmsgData.data.sourceInstanceId)) {
                                    this.whiteboardViewMap.get(pubmsgData.data.sourceInstanceId).receiveEventRoomPubmsg(recvEventData);
                                } else {
                                    //此实例不存在又收到了此实例的消息，则保存数据
                                    if (this.savePubmsgData[pubmsgData.data.sourceInstanceId] && Array.isArray(this.savePubmsgData[pubmsgData.data.sourceInstanceId])) {
                                        this.savePubmsgData[pubmsgData.data.sourceInstanceId].push(recvEventData);
                                    } else {
                                        this.savePubmsgData[pubmsgData.data.sourceInstanceId] = [recvEventData];
                                    }
                                }
                            }
                        }
                    } else {
                        var _iteratorNormalCompletion9 = true;
                        var _didIteratorError9 = false;
                        var _iteratorError9 = undefined;

                        try {
                            for (var _iterator9 = this.whiteboardViewMap.values()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                                var whiteboardView = _step9.value;

                                whiteboardView.receiveEventRoomPubmsg(recvEventData);
                            }
                        } catch (err) {
                            _didIteratorError9 = true;
                            _iteratorError9 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion9 && _iterator9.return) {
                                    _iterator9.return();
                                }
                            } finally {
                                if (_didIteratorError9) {
                                    throw _iteratorError9;
                                }
                            }
                        }
                    }
                }
            }
        }
    }, {
        key: 'receiveEventRoomConnected',


        /*处理room-connected*/
        value: function receiveEventRoomConnected(recvEventData) {
            L.Logger.debug('[whiteboarrd-sdk]receiveEventRoomConnected 	recvEventData:', recvEventData);
            // 房间连接成功处理清空数据的相关操作
            this.saveMsglistData = {};
            this.savePubmsgData = {};
            this.resetAllWhiteboardData();
            this.resetPureWhiteboardTotalPage();
            var msgs = recvEventData.message;
            this.receiveEventRoomMsglist(JSON.stringify({ type: 'room-msglist', message: msgs }));
        }
    }, {
        key: 'receiveEventRoomDisconnected',


        /*失去连接*/
        value: function receiveEventRoomDisconnected() {
            L.Logger.debug('[whiteboarrd-sdk]receiveEventRoomDisconnected ');
            _Global2.default.laterAddressList = [];
            _Global2.default.hasGetDocAddressIndexByLocalStorage = false;
            var _iteratorNormalCompletion10 = true;
            var _didIteratorError10 = false;
            var _iteratorError10 = undefined;

            try {
                for (var _iterator10 = this.whiteboardViewMap.values()[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                    var whiteboardView = _step10.value;

                    if (whiteboardView && whiteboardView.getConfigration() && whiteboardView.getConfigration().isDisconnectedClearWhiteboardData && _Utils2.default.isFunction(whiteboardView.resetWhiteboardData)) {
                        whiteboardView.resetWhiteboardData(); //失去连接且有配置项则清除所有数据
                    }
                }
            } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion10 && _iterator10.return) {
                        _iterator10.return();
                    }
                } finally {
                    if (_didIteratorError10) {
                        throw _iteratorError10;
                    }
                }
            }
        }

        /*处理room-delmsg*/

    }, {
        key: 'receiveEventRoomDelmsg',
        value: function receiveEventRoomDelmsg(recvEventData) {
            L.Logger.debug('[whiteboarrd-sdk]receiveEventRoomDelmsg 	recvEventData:', recvEventData);
            if (typeof recvEventData === 'string') {
                recvEventData = JSON.parse(recvEventData);
            }
            var delmsgData = recvEventData.message;
            if (this._isWhiteboardCorrelationSignalling(delmsgData.name)) {
                if (delmsgData.name === 'SharpsChange') {
                    _WhiteboardIntermediateLayer2.default.handlerDelmsg_SharpsChange(delmsgData);
                } else {
                    var _iteratorNormalCompletion11 = true;
                    var _didIteratorError11 = false;
                    var _iteratorError11 = undefined;

                    try {
                        for (var _iterator11 = this.whiteboardViewMap.values()[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                            var whiteboardView = _step11.value;

                            whiteboardView.receiveEventRoomDelmsg(recvEventData);
                        }
                    } catch (err) {
                        _didIteratorError11 = true;
                        _iteratorError11 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion11 && _iterator11.return) {
                                _iterator11.return();
                            }
                        } finally {
                            if (_didIteratorError11) {
                                throw _iteratorError11;
                            }
                        }
                    }
                }
            }
        }
    }, {
        key: 'receiveEventRoomMsglist',


        /*处理room-msglist*/
        value: function receiveEventRoomMsglist(recvEventData) {
            var _this3 = this;

            L.Logger.debug('[whiteboarrd-sdk]receiveEventRoomMsglist 	recvEventData:', recvEventData);
            if (typeof recvEventData === 'string') {
                recvEventData = JSON.parse(recvEventData);
            }
            var tmpSignallingData = {};
            var messageListData = recvEventData.message;
            for (var x in messageListData) {
                if (this._isWhiteboardCorrelationSignalling(messageListData[x].name)) {
                    if (messageListData[x].data && typeof messageListData[x].data === "string") {
                        messageListData[x].data = JSON.parse(messageListData[x].data);
                    }
                    if (tmpSignallingData[messageListData[x].name] === null || tmpSignallingData[messageListData[x].name] === undefined) {
                        tmpSignallingData[messageListData[x].name] = [];
                        tmpSignallingData[messageListData[x].name].push(messageListData[x]);
                    } else {
                        tmpSignallingData[messageListData[x].name].push(messageListData[x]);
                    }
                }
            };

            /*加页数据*/
            var wBPageCountArr = tmpSignallingData["WBPageCount"];
            if (wBPageCountArr !== null && wBPageCountArr !== undefined && wBPageCountArr.length > 0) {
                if (this.pureWhiteboardFileinfoList['default']) {
                    this.pureWhiteboardFileinfoList['default'].pagenum = wBPageCountArr[wBPageCountArr.length - 1].data.totalPage;
                }
            }
            tmpSignallingData["WBPageCount"] = null;
            delete tmpSignallingData["WBPageCount"];

            /*扩展白板加页数据*/
            var extendWBPageCountArr = tmpSignallingData["ExtendWBPageCount"];
            if (extendWBPageCountArr !== null && extendWBPageCountArr !== undefined && extendWBPageCountArr.length > 0) {
                extendWBPageCountArr.forEach(function (extendWBPageCount, index) {
                    if (extendWBPageCount.data && _this3.pureWhiteboardFileinfoList[extendWBPageCount.data.sourceInstanceId]) {
                        _this3.pureWhiteboardFileinfoList[extendWBPageCount.data.sourceInstanceId].pagenum = extendWBPageCount.data.totalPage;
                    }
                });
            }
            tmpSignallingData["ExtendWBPageCount"] = null;
            delete tmpSignallingData["ExtendWBPageCount"];

            var signallingNameArray = ['ShowPage', 'whiteboardMarkTool', 'NewPptTriggerActionClick', 'PptVolumeControl', 'H5DocumentAction', 'ExtendShowPage', 'ExtendWhiteboardMarkTool', 'ExtendPptVolumeControl', 'ExtendH5DocumentAction', 'ExtendNewPptTriggerActionClick'];
            var _iteratorNormalCompletion12 = true;
            var _didIteratorError12 = false;
            var _iteratorError12 = undefined;

            try {
                for (var _iterator12 = signallingNameArray[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                    var signallingName = _step12.value;

                    var signallingArray = tmpSignallingData[signallingName];
                    if ((signallingName === 'ShowPage' || signallingName === 'ExtendShowPage') && signallingArray && signallingArray.length) {
                        var _iteratorNormalCompletion13 = true;
                        var _didIteratorError13 = false;
                        var _iteratorError13 = undefined;

                        try {
                            for (var _iterator13 = signallingArray[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                                var pubmsgData = _step13.value;

                                if (pubmsgData.name === 'ShowPage' || pubmsgData.name === 'ExtendShowPage') {
                                    if (typeof pubmsgData.data === 'string') {
                                        pubmsgData.data = _Utils2.default.toJsonParse(pubmsgData.data);
                                    }
                                    if (pubmsgData.data.isGeneralFile && pubmsgData.data.filedata && pubmsgData.data.filedata.fileid == 0) {
                                        if (pubmsgData.name === 'ShowPage' && this.pureWhiteboardFileinfoList['default']) {
                                            pubmsgData.data.filedata.pagenum = this.pureWhiteboardFileinfoList['default'].pagenum;
                                        } else if (pubmsgData.name === 'ExtendShowPage' && this.pureWhiteboardFileinfoList[pubmsgData.data.sourceInstanceId]) {
                                            pubmsgData.data.filedata.pagenum = this.pureWhiteboardFileinfoList[pubmsgData.data.sourceInstanceId].pagenum;
                                        }
                                    }
                                }
                            }
                        } catch (err) {
                            _didIteratorError13 = true;
                            _iteratorError13 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion13 && _iterator13.return) {
                                    _iterator13.return();
                                }
                            } finally {
                                if (_didIteratorError13) {
                                    throw _iteratorError13;
                                }
                            }
                        }
                    }
                    /*if( signallingName === 'ShowPage' && !( signallingArray !== null && signallingArray !== undefined && signallingArray.length > 0 ) ){
                        if( this.whiteboardViewMap.has('default') ){
                            this.whiteboardViewMap.get('default').saveFiledataAndLoadCurrpageWhiteboardData( ) ;
                        }
                    }*/
                    if (signallingArray !== null && signallingArray !== undefined && signallingArray.length > 0) {
                        if (signallingName === 'ShowPage' || signallingName === 'whiteboardMarkTool' || signallingName === 'NewPptTriggerActionClick' || signallingName === 'PptVolumeControl' || signallingName === 'H5DocumentAction') {
                            if (this.whiteboardViewMap.has('default')) {
                                this.whiteboardViewMap.get('default').receiveEventRoomMsglist(signallingName, signallingArray[signallingArray.length - 1]);
                            } else {
                                if (this.saveMsglistData['default'] && Array.isArray(this.saveMsglistData['default'])) {
                                    this.saveMsglistData['default'].push(signallingArray[signallingArray.length - 1]);
                                } else {
                                    this.saveMsglistData['default'] = [signallingArray[signallingArray.length - 1]];
                                }
                            }
                        } else if (signallingName === 'ExtendShowPage' || signallingName === 'ExtendWhiteboardMarkTool' || signallingName === 'ExtendPptVolumeControl' || signallingName === 'ExtendH5DocumentAction' || signallingName === 'ExtendNewPptTriggerActionClick') {
                            var _iteratorNormalCompletion14 = true;
                            var _didIteratorError14 = false;
                            var _iteratorError14 = undefined;

                            try {
                                for (var _iterator14 = signallingArray[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                                    var _pubmsgData = _step14.value;

                                    if (_pubmsgData.data) {
                                        if (this.whiteboardViewMap.has(_pubmsgData.data.sourceInstanceId)) {
                                            this.whiteboardViewMap.get(_pubmsgData.data.sourceInstanceId).receiveEventRoomMsglist(signallingName, _pubmsgData);
                                        } else {
                                            //此实例不存在又收到了此实例的消息，则保存数据
                                            if (this.saveMsglistData[_pubmsgData.data.sourceInstanceId] && Array.isArray(this.saveMsglistData[_pubmsgData.data.sourceInstanceId])) {
                                                this.saveMsglistData[_pubmsgData.data.sourceInstanceId].push(_pubmsgData);
                                            } else {
                                                this.saveMsglistData[_pubmsgData.data.sourceInstanceId] = [_pubmsgData];
                                            }
                                        }
                                    }
                                }
                            } catch (err) {
                                _didIteratorError14 = true;
                                _iteratorError14 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion14 && _iterator14.return) {
                                        _iterator14.return();
                                    }
                                } finally {
                                    if (_didIteratorError14) {
                                        throw _iteratorError14;
                                    }
                                }
                            }
                        }
                    }
                    tmpSignallingData[signallingName] = null;
                    delete tmpSignallingData[signallingName];
                }

                /*画笔数据*/
            } catch (err) {
                _didIteratorError12 = true;
                _iteratorError12 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion12 && _iterator12.return) {
                        _iterator12.return();
                    }
                } finally {
                    if (_didIteratorError12) {
                        throw _iteratorError12;
                    }
                }
            }

            var sharpsChangeArr = tmpSignallingData["SharpsChange"];
            if (sharpsChangeArr !== null && sharpsChangeArr !== undefined && sharpsChangeArr.length > 0) {
                _WhiteboardIntermediateLayer2.default.handlerMsglist_SharpsChange(sharpsChangeArr);
            }
            tmpSignallingData["SharpsChange"] = null;
            delete tmpSignallingData["SharpsChange"];

            tmpSignallingData = null;
        }
    }, {
        key: 'reveiveEventRoomUsermediaorfilestateChanged',
        value: function reveiveEventRoomUsermediaorfilestateChanged(recvEventData) {
            L.Logger.debug('[whiteboarrd-sdk]reveiveEventRoomUsermediaorfilestateChanged recvEventData:', recvEventData);
            this._forwardingStreamEvents('reveiveEventRoomUsermediaorfilestateChanged', recvEventData);
        }
    }, {
        key: 'reveiveEventRoomUsermediaorfileattributesUpdate',
        value: function reveiveEventRoomUsermediaorfileattributesUpdate(recvEventData) {
            L.Logger.debug('[whiteboarrd-sdk]reveiveEventRoomUsermediaorfileattributesUpdate recvEventData:', recvEventData);
            this._forwardingStreamEvents('reveiveEventRoomUsermediaorfileattributesUpdate', recvEventData);
        }
    }, {
        key: 'receiveEventRoomErrorNotice',
        value: function receiveEventRoomErrorNotice(recvEventData) {
            L.Logger.debug('[whiteboarrd-sdk]receiveEventRoomErrorNotice recvEventData:', recvEventData);
            this._forwardingStreamEvents('receiveEventRoomErrorNotice', recvEventData);
        }

        /*接收room-receiveActionCommand*/

    }, {
        key: 'reveiveEventRoomReceiveActionCommand',
        value: function reveiveEventRoomReceiveActionCommand(recvEventData) {
            L.Logger.debug('[whiteboarrd-sdk]reveiveEventRoomReceiveActionCommand 	recvEventData:', recvEventData);
            var _recvEventData$messag = recvEventData.message,
                action = _recvEventData$messag.action,
                cmd = _recvEventData$messag.cmd;

            switch (action) {
                case 'transmitWindowSize':
                    this._windowResizeCallback();
                    break;
            }
            var _iteratorNormalCompletion15 = true;
            var _didIteratorError15 = false;
            var _iteratorError15 = undefined;

            try {
                for (var _iterator15 = this.whiteboardViewMap.values()[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                    var whiteboardView = _step15.value;

                    whiteboardView.reveiveEventRoomReceiveActionCommand(action, cmd);
                }
                // if( this.whiteboardViewMap.has('default') ){
                //     let whiteboardView = this.whiteboardViewMap.get('default') ;
                //     whiteboardView.reveiveEventRoomReceiveActionCommand( action , cmd );
                // }
            } catch (err) {
                _didIteratorError15 = true;
                _iteratorError15 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion15 && _iterator15.return) {
                        _iterator15.return();
                    }
                } finally {
                    if (_didIteratorError15) {
                        throw _iteratorError15;
                    }
                }
            }
        }
    }, {
        key: 'registerRoomDelegate',


        /*设置房间*/
        value: function registerRoomDelegate(room, sdkReceiveActionCommand) {
            L.Logger.debug('[whiteboarrd-sdk]registerRoomDelegate 	room and  sdkReceiveActionCommand:', room, sdkReceiveActionCommand);
            this.room = room;
            this.sdkReceiveActionCommand = sdkReceiveActionCommand;
            this._addRoomEvent();
        }
    }, {
        key: 'getRoomDelegate',


        /*获取房间*/
        value: function getRoomDelegate() {
            L.Logger.debug('[whiteboarrd-sdk]getRoomDelegate ');
            return this.room;
        }
    }, {
        key: 'hasRoomDelegate',


        /*是否有房间属性*/
        value: function hasRoomDelegate() {
            L.Logger.debug('[whiteboarrd-sdk]hasRoomDelegate ');
            return !!this.room;
        }
    }, {
        key: 'sendActionCommandToSdk',


        /*发送动作指令给sdk
         * @params action：执行的动作
             action目前有：
                whiteboardSdkNotice_ShowPage:翻页消息通知给sdk
         * @params cmd:动作描述
        * */
        value: function sendActionCommandToSdk(action, cmd) {
            L.Logger.debug('[whiteboarrd-sdk]sendActionCommandToSdk 	action and	cmd:', action, cmd);
            if (this.sdkReceiveActionCommand && typeof this.sdkReceiveActionCommand === 'function') {
                if ((typeof cmd === 'undefined' ? 'undefined' : _typeof(cmd)) && !Array.isArray(cmd)) {
                    cmd = JSON.parse(JSON.stringify(cmd));
                }
                this.sdkReceiveActionCommand(action, cmd);
            }
        }

        /*发送PubMsg信令
         * @allParams params:pubMsg需要的所有参数承接对象
         * @params params.name:信令名字 , String
         * @params params.id:信令ID , String
         * @params params.toID:发送给谁(默认发给所有人) , String
         __all（所有人，包括自己） ,
         __allExceptSender （除了自己以外的所有人）,
         userid（指定id发给某人） ,
         __none （谁也不发，只有服务器会收到）,
         __allSuperUsers（只发给助教和老师）,
         __group:groupA:groupB(发送给指定组，组id不能包含冒号),
         __groupExceptSender:groupA（发给指定组，不包括自己）
         * @params params.data:信令携带的数据 , Json/JsonString
         * @params params.save:信令是否保存 , Boolean
         * @params params.expiresabs:暂时不用
         * @params params.associatedMsgID:绑定的父级信令id , String
         * @params params.associatedUserID:绑定的用户id , String
         * @params params.expires:暂时无效
         * @params params.type:扩展类型，目前只有count一种扩展类型，之后如需扩展可在此处进行相应变动 , String (目前直播才有用)
         * @params params.write2DB:暂时无效, Boolean (目前直播才有用)
         * @params params.actions:执行的动作操作列表，目前只有0，1 (0-不操作，1-代表增加操作), Array (目前直播才有用)
         * @params params.do_not_replace:老师和助教不能同时操作，后操作的服务器直接丢弃, Boolean (目前直播才有用)
         * 备注：指定用户会收到事件room-pubmsg
         * */

    }, {
        key: 'pubMsg',
        value: function pubMsg(params) {
            L.Logger.debug('[whiteboarrd-sdk]pubMsg 	params :', params);
            if (this.room && this.room.pubMsg) {
                if (typeof params === 'string') {
                    params = JSON.parse(params);
                }
                if (params.name === 'WBPageCount' && this.pureWhiteboardFileinfoList['default']) {
                    this.pureWhiteboardFileinfoList['default'].pagenum = params.data.totalPage;
                }
                if (params.name === 'ExtendWBPageCount' && this.pureWhiteboardFileinfoList[params.data.sourceInstanceId]) {
                    this.pureWhiteboardFileinfoList[params.data.sourceInstanceId].pagenum = params.data.totalPage;
                }
                if (params.data && _typeof(params.data) === 'object' && !Array.isArray(params.data)) {
                    params.data = JSON.stringify(params.data);
                }
                this.room.pubMsg(params);
            }
        }
    }, {
        key: 'delMsg',


        /*发送DelMsg信令功能函数,删除之前发送的信令
         * @allParams params:delMsg需要的所有参数承接对象
         * @params msgName:信令名字 , String
         * @params msgId:信令ID , String
         * @params toId:发送给谁(默认发给所有人) , String
         __all（所有人，包括自己） ,
         __allExceptSender （除了自己以外的所有人）,
         userid（指定id发给某人） ,
         __none （谁也不发，只有服务器会收到）,
         __allSuperUsers（只发给助教和老师）,
         __group:groupA:groupB(发送给指定组，组id不能包含冒号),
         __groupExceptSender:groupA（发给指定组，不包括自己）
         * @params data:信令携带的数据 , Json/JsonString
         *备注：指定用户会收到事件room-delmsg
         * */
        value: function delMsg(params) {
            L.Logger.debug('[whiteboarrd-sdk]delMsg params :', params);
            if (this.room && this.room.delMsg) {
                if (params.data && _typeof(params.data) === 'object' && !Array.isArray(params.data)) {
                    params.data = JSON.stringify(params.data);
                }
                this.room.delMsg(params);
            }
        }
    }, {
        key: 'startShareMedia',


        /*开始共享媒体文件*/
        value: function startShareMedia(url, isVideo, toID) {
            var attrs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            L.Logger.debug('[whiteboarrd-sdk]startShareMedia url  isVideo  toID  and  attrs:', url, isVideo, toID, attrs);
            this.stopShareMedia();
            this.stopShareLocalMedia();
            if (this.room && this.room.startShareMedia) {
                var whiteboardView = this.whiteboardViewMap.get('default');
                if (isVideo && whiteboardView && whiteboardView.getConfigration() && whiteboardView.getConfigration().mediaSharePauseWhenOver) {
                    attrs['pauseWhenOver'] = whiteboardView.getConfigration().mediaSharePauseWhenOver;
                }
                if (whiteboardView && whiteboardView.getConfigration() && whiteboardView.getConfigration().myUserId !== undefined && !whiteboardView.getConfigration().synchronization) {
                    toID = whiteboardView.getConfigration().myUserId;
                }
                if (TK.SDKTYPE !== 'mobile') {
                    this.room.startShareMedia(url, isVideo, function (failinfo) {
                        L.Logger.warning('[whiteboard-sdk]startShareMedia fail , fail info:' + failinfo);
                    }, { toID: toID, attrs: attrs });
                } else {
                    this.room.startShareMedia(url, isVideo, toID, attrs);
                }
            }
        }
    }, {
        key: 'stopShareMedia',


        /*停止共享媒体文件*/
        value: function stopShareMedia() {
            L.Logger.debug('[whiteboarrd-sdk]stopShareMedia ');
            if (this.room && this.room.stopShareMedia) {
                this.room.stopShareMedia();
            }
        }
    }, {
        key: 'stopShareLocalMedia',


        /*停止共享本地媒体文件*/
        value: function stopShareLocalMedia() {
            if (TK.SDKTYPE !== 'mobile' && this.room && this.room.stopShareLocalMedia) {
                L.Logger.debug('[whiteboarrd-sdk]stopShareLocalMedia ');
                this.room.stopShareLocalMedia();
            }
        }
    }, {
        key: 'createAudioPlayer',


        /*创建音频播放器
        * @params parentNode:承放的节点
        * @params config:配置项*/
        value: function createAudioPlayer(parentNode) {
            var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            L.Logger.debug('[whiteboarrd-sdk]createAudioPlayer parentNode and config :', parentNode, config);
            if (!window.TalkAudioPlayer) {
                L.Logger.error('The resource file for the audio player is not loaded and can\'t be executed with createAudioPlayer methods.');
                return;
            }
            if (typeof parentNode === 'string') {
                var parentNodeStr = parentNode;
                parentNode = document.getElementById(parentNodeStr);
                if (!parentNode) {
                    L.Logger.warning('The node id cannot be found by node id, and createAudioPlayer method cannot be performed , element id is ' + parentNodeStr + '.');
                    return;
                }
            }
            var instanceId = 'default';
            var whiteboardView = this.whiteboardViewMap.get(instanceId);
            var elementNode = parentNode || (whiteboardView ? whiteboardView.getWhiteboardRootElement() : document.body);
            if (this.audioPlayerView && this.audioPlayerView.destroyView) {
                this.audioPlayerView.destroyView();
                this.audioPlayerView = undefined;
            }
            this.audioPlayerView = new window.TalkAudioPlayer(elementNode, instanceId, this, Object.deepAssign({}, config, {
                languageType: whiteboardView ? whiteboardView.getConfigration().languageType : 'ch',
                isMobile: whiteboardView ? whiteboardView.getConfigration().isMobile : false
            }, _Configuration2.default.commonWhiteboard), whiteboardView ? whiteboardView.getConfigration() : undefined);
        }
    }, {
        key: 'createVideoPlayer',


        /*创建视频播放器
         * @params parentNode:承放的节点
         * @params config:配置项*/
        value: function createVideoPlayer(parentNode) {
            var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            L.Logger.debug('[whiteboarrd-sdk]createVideoPlayer parentNode and config :', parentNode, config);
            if (!window.TalkVideoPlayer) {
                L.Logger.error('The resource file for the audio player is not loaded and can\'t be executed with createVideoPlayer methods.');
                return;
            }
            if (typeof parentNode === 'string') {
                var parentNodeStr = parentNode;
                parentNode = document.getElementById(parentNodeStr);
                if (!parentNode) {
                    L.Logger.warning('The node id cannot be found by node id, and createVideoPlayer method cannot be performed , element id is ' + parentNodeStr + '.');
                    return;
                }
            }
            var instanceId = 'default';
            var whiteboardView = this.whiteboardViewMap.get(instanceId);
            var elementNode = parentNode || (whiteboardView ? whiteboardView.getWhiteboardRootElement() : document.body);
            if (this.videoPlayerView && this.videoPlayerView.destroyView) {
                this.videoPlayerView.destroyView();
                this.videoPlayerView = undefined;
            }
            this.videoPlayerView = new window.TalkVideoPlayer(elementNode, instanceId, this, Object.deepAssign({}, config, {
                languageType: whiteboardView ? whiteboardView.getConfigration().languageType : 'ch',
                isMobile: whiteboardView ? whiteboardView.getConfigration().isMobile : false
            }, _Configuration2.default.commonWhiteboard), whiteboardView ? whiteboardView.getConfigration() : undefined);
        }
    }, {
        key: 'createDocumentRemark',


        /*创建课件备注视图
         * @params parentNode:承放的节点
         * @params config:配置项
         * @params instanceId:白板实例id  , String*/
        value: function createDocumentRemark(parentNode) {
            var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var instanceId = arguments[2];

            L.Logger.debug('[whiteboarrd-sdk]createDocumentRemark parentNode and config :', parentNode, config);
            if (!window.TalkDocumentRemark) {
                L.Logger.error('The resource file for the document tool bar is not loaded and can\'t be executed with createDocumentRemark methods.');
                return;
            }
            if (typeof parentNode === 'string') {
                var parentNodeStr = parentNode;
                parentNode = document.getElementById(parentNodeStr);
                if (!parentNode) {
                    L.Logger.warning('The node id cannot be found by node id, and createDocumentRemark method cannot be performed , element id is ' + parentNodeStr + '.');
                    return;
                }
            }

            var whiteboardView = this.whiteboardViewMap.get(instanceId);
            var elementNode = parentNode || (whiteboardView ? whiteboardView.getWhiteboardRootElement() : document.body);
            if (this.documentRemarkViewList[instanceId] && this.documentRemarkViewList[instanceId].destroyView) {
                this.documentRemarkViewList[instanceId].destroyView();
                // this.documentRemarkViewList[instanceId] = undefined ;
                delete this.documentRemarkViewList[instanceId];
            }
            this.documentRemarkViewList[instanceId] = new window.TalkDocumentRemark(elementNode, instanceId, this, Object.deepAssign({}, config, {
                languageType: whiteboardView ? whiteboardView.getConfigration().languageType : 'ch',
                isMobile: whiteboardView ? whiteboardView.getConfigration().isMobile : false,
                canRemark: whiteboardView ? whiteboardView.getConfigration().canRemark : false
            }, _Configuration2.default.commonWhiteboard), whiteboardView ? whiteboardView.getConfigration() : undefined);
            if (whiteboardView) {
                var whiteboardViewState = this.getWhiteboardViewState(instanceId);
                if (this.documentRemarkViewList[instanceId] && this.documentRemarkViewList[instanceId].receiveActionCommand && whiteboardViewState && Object.keys(whiteboardViewState.page).length && Object.keys(whiteboardViewState.zoom).length) {
                    var action = 'viewStateUpdate',
                        cmd = {
                        viewState: whiteboardViewState,
                        updateViewState: {}
                    };
                    this.documentRemarkViewList[instanceId].receiveActionCommand(action, cmd);
                }
            }
        }
    }, {
        key: 'createDocumentToolBar',


        /*创建白板翻页工具条
         * @params parentNode:承放的节点
         * @params config:配置项
         * @params instanceId:白板实例id  , String*/
        value: function createDocumentToolBar(parentNode) {
            var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var instanceId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]createDocumentToolBar parentNode and config :', parentNode, config);
            if (!window.TalkDocumentToolbar) {
                L.Logger.error('The resource file for the document tool bar is not loaded and can\'t be executed with createDocumentToolBar methods.');
                return;
            }
            if (typeof parentNode === 'string') {
                var parentNodeStr = parentNode;
                parentNode = document.getElementById(parentNodeStr);
                if (!parentNode) {
                    L.Logger.warning('The node id cannot be found by node id, and createDocumentToolBar method cannot be performed , element id is ' + parentNodeStr + '.');
                    return;
                }
            }

            var whiteboardView = this.whiteboardViewMap.get(instanceId);
            var elementNode = parentNode || (whiteboardView ? whiteboardView.getWhiteboardRootElement() : document.body);
            if (this.documentToolbarViewList[instanceId] && this.documentToolbarViewList[instanceId].destroyView) {
                this.documentToolbarViewList[instanceId].destroyView();
                // this.documentToolbarViewList[instanceId] = undefined ;
                delete this.documentToolbarViewList[instanceId];
            }
            this.documentToolbarViewList[instanceId] = new window.TalkDocumentToolbar(elementNode, instanceId, this, Object.deepAssign({}, config, {
                languageType: whiteboardView ? whiteboardView.getConfigration().languageType : 'ch',
                isMobile: whiteboardView ? whiteboardView.getConfigration().isMobile : false,
                canRemark: whiteboardView ? whiteboardView.getConfigration().canRemark : false
            }, _Configuration2.default.commonWhiteboard), whiteboardView ? whiteboardView.getConfigration() : undefined);
            if (whiteboardView) {
                var whiteboardViewState = this.getWhiteboardViewState(instanceId);
                if (this.documentToolbarViewList[instanceId] && this.documentToolbarViewList[instanceId].receiveActionCommand && whiteboardViewState && Object.keys(whiteboardViewState.page).length && Object.keys(whiteboardViewState.zoom).length) {
                    var action = 'viewStateUpdate',
                        cmd = {
                        viewState: whiteboardViewState,
                        updateViewState: {}
                    };
                    this.documentToolbarViewList[instanceId].receiveActionCommand(action, cmd);
                }
            }
        }
    }, {
        key: 'createWhiteboardToolBar',


        /*创建白板标注工具条
         * @params parentNode:承放的节点
         * @params config:配置项
         * @params instanceId:白板实例id  , String*/
        value: function createWhiteboardToolBar(parentNode) {
            var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var instanceId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]createWhiteboardToolBar parentNode  config  and instanceId :', parentNode, config, instanceId);
            if (!window.TalkWhiteboardToolbar) {
                L.Logger.error('The resource file for the document tool bar is not loaded and can\'t be executed with TalkWhiteboardToolbar methods.');
                return;
            }
            if (typeof parentNode === 'string') {
                var parentNodeStr = parentNode;
                parentNode = document.getElementById(parentNodeStr);
                if (!parentNode) {
                    L.Logger.warning('The node id cannot be found by node id, and TalkWhiteboardToolbar method cannot be performed , element id is ' + parentNodeStr + '.');
                    return;
                }
            }
            var whiteboardView = this.whiteboardViewMap.get(instanceId);
            var elementNode = parentNode || (whiteboardView ? whiteboardView.getWhiteboardRootElement() : document.body);
            if (this.whiteboardToolbarViewList[instanceId] && this.whiteboardToolbarViewList[instanceId].destroyView) {
                this.whiteboardToolbarViewList[instanceId].destroyView();
                // this.whiteboardToolbarViewList[instanceId] = undefined ;
                delete this.whiteboardToolbarViewList[instanceId];
            }
            this.whiteboardToolbarViewList[instanceId] = new window.TalkWhiteboardToolbar(elementNode, instanceId, this, Object.deepAssign({}, config, {
                languageType: whiteboardView ? whiteboardView.getConfigration().languageType : 'ch',
                isMobile: whiteboardView ? whiteboardView.getConfigration().isMobile : false
            }, _Configuration2.default.commonWhiteboard), whiteboardView ? whiteboardView.getConfigration() : undefined);
            if (whiteboardView) {
                var whiteboardViewState = this.getWhiteboardViewState(instanceId);
                if (this.whiteboardToolbarViewList[instanceId] && this.whiteboardToolbarViewList[instanceId].receiveActionCommand && whiteboardViewState && Object.keys(whiteboardViewState.page).length && Object.keys(whiteboardViewState.zoom).length) {
                    var action = 'viewStateUpdate',
                        cmd = {
                        viewState: whiteboardViewState,
                        updateViewState: {}
                    };
                    this.whiteboardToolbarViewList[instanceId].receiveActionCommand(action, cmd);
                }
            }
        }
    }, {
        key: 'getWhiteboardViewState',


        /*获取白板视图状态
        * @params instanceId:白板实例id  , String*/
        value: function getWhiteboardViewState() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]getWhiteboardViewState ');
            var whiteboardView = this.whiteboardViewMap.get(instanceId);
            if (whiteboardView) {
                return whiteboardView.getWhiteboardViewState();
            } else {
                return undefined;
            }
        }

        /*获取白板中间层*/

    }, {
        key: 'getWhiteboardIntermediateLayerInstance',
        value: function getWhiteboardIntermediateLayerInstance() {
            L.Logger.debug('[whiteboarrd-sdk]getWhiteboardIntermediateLayerInstance ');
            return _WhiteboardIntermediateLayer2.default;
        }

        /*切换文档服务器
        * @params docAddressIndex:文档地址域名 String类型
        * @params isSaveLocalStorage:是否保存本地存储 ， 默认false
        * @params forceReloadDocument:是否强制重新加载文档 ， 默认false（即： 只有文档地址索引和当前索引不一致才会重新加载）
        * @params instanceId:白板实例id  , String
         * */

    }, {
        key: 'switchDocAddress',
        value: function switchDocAddress(docAddressKey) {
            var isSaveLocalStorage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var forceReloadDocument = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var instanceId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]call switchDocAddress method , docAddressKey is ' + docAddressKey);
            if (docAddressKey && typeof docAddressKey === 'string') {
                _Global2.default.localStorageDocAddressKey = docAddressKey;
                if (_Global2.default.localStorageDocAddressKey && _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.localStorageDocAddressKey) === '' && _Utils2.default.getItem(_Global2.default.laterAddressList, _Global2.default.localStorageDocAddressKey) === '') {
                    if (_Global2.default.protocol && _Global2.default.port) {
                        _Global2.default.laterAddressList = [{ protocol: _Global2.default.protocol, hostname: _Global2.default.localStorageDocAddressKey, port: _Global2.default.port }];
                    }
                    _Global2.default.docAddressList = [_Global2.default.docAddress].concat(_toConsumableArray(_Global2.default.backupDocAddressList), _toConsumableArray(_Global2.default.laterAddressList));
                }
                if (_Global2.default.docAddressKey !== docAddressKey) {
                    var oldForceUseDocAddress = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey);
                    _Global2.default.docAddressKey = docAddressKey;
                    _Global2.default.nowUseDocAddress = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || _Configuration2.default.commonWhiteboard.docAddress;
                    if (isSaveLocalStorage) {
                        this.setLocalStorageItem('tkDocAddressKey', _Global2.default.docAddressKey);
                    }
                    var whiteboardView = this.whiteboardViewMap.get(instanceId);
                    if (whiteboardView) {
                        whiteboardView.reloadCurrentDocument();
                        whiteboardView.sendActionCommand('docAddressUpdate', {
                            docAddressList: [].concat(_toConsumableArray(_Global2.default.docAddressList)),
                            docAddressKey: _Global2.default.docAddressKey,
                            oldDocAddress: oldForceUseDocAddress,
                            nowDocAddress: _Global2.default.docAddressList[_Global2.default.docAddressKey] || _Configuration2.default.commonWhiteboard.docAddress
                        });
                    }
                } else if (forceReloadDocument) {
                    var _whiteboardView8 = this.whiteboardViewMap.get(instanceId);
                    if (_whiteboardView8) {
                        _whiteboardView8.reloadCurrentDocument();
                    }
                }
            } else if (forceReloadDocument) {
                var _whiteboardView9 = this.whiteboardViewMap.get(instanceId);
                if (_whiteboardView9) {
                    _whiteboardView9.reloadCurrentDocument();
                }
            }
        }

        /*设置本地存储*/

    }, {
        key: 'setLocalStorageItem',
        value: function setLocalStorageItem(key, value) {
            if (TK.SDKTYPE === 'mobile') {
                if (this.room && _Utils2.default.isFunction(this.room.setLocalStorageItem)) {
                    this.room.setLocalStorageItem(key, value);
                }
            } else {
                _Utils2.default.setLocalStorageItem(key, value);
            }
        }

        /*获取本地存储*/

    }, {
        key: 'getLocalStorageItem',
        value: function getLocalStorageItem(key, callback) {
            if (_Utils2.default.isFunction(callback)) {
                if (TK.SDKTYPE === 'mobile') {
                    if (this.room && _Utils2.default.isFunction(this.room.getLocalStorageItem)) {
                        try {
                            this.room.getLocalStorageItem(key, function (docAddressKey) {
                                callback(docAddressKey);
                            });
                        } catch (e) {
                            L.Logger.error('[whiteboard-sdk]getLocalStorageItem error:', e);
                        }
                    }
                } else {
                    callback(_Utils2.default.getLocalStorageItem('tkDocAddressKey'));
                }
            }
        }
    }, {
        key: '_executeSaveMsglistData',

        /*执行保存的msglist数据
        * @params instanceId:白板实例id  , String*/
        value: function _executeSaveMsglistData(instanceId) {
            var _this4 = this;

            if (this.saveMsglistData[instanceId] && this.whiteboardViewMap.get(instanceId)) {
                this.saveMsglistData[instanceId].forEach(function (pubmsgData, index) {
                    _this4.whiteboardViewMap.get(instanceId).receiveEventRoomMsglist(pubmsgData.name, pubmsgData);
                });
                delete this.saveMsglistData[instanceId];
            }
        }
        /*执行保存的pubmsg数据
        * @params instanceId:白板实例id  , String*/

    }, {
        key: '_executeSavePubmsgData',
        value: function _executeSavePubmsgData(instanceId) {
            var _this5 = this;

            if (this.savePubmsgData[instanceId] && this.whiteboardViewMap.get(instanceId)) {
                this.savePubmsgData[instanceId].forEach(function (recvEventData, index) {
                    _this5.whiteboardViewMap.get(instanceId).receiveEventRoomPubmsg(recvEventData);
                });
                delete this.savePubmsgData[instanceId];
            }
        }

        /*创建白板
         * @params parentNode:白板的父节点 , 默认为 document.body ， ElementNode
         * @params instanceId:白板实例id , 默认为'default' , String
         * @params configration:白板配置项 , 默认为{} ,  Json
         * @params receiveActionCommand:接受白板动作指令函数 , Function
        * */

    }, {
        key: '_createWhiteboard',
        value: function _createWhiteboard() {
            var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
            var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

            var _this6 = this;

            var configration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var receiveActionCommand = arguments[3];

            L.Logger.debug('[whiteboarrd-sdk]_createWhiteboard  parentNode  instanceId  configration  and	receiveActionCommand:', parentNode, instanceId, configration, receiveActionCommand);
            if (typeof parentNode === 'string') {
                var parentNodeStr = parentNode;
                parentNode = document.getElementById(parentNodeStr);
                if (!parentNode) {
                    L.Logger.warning('The node id cannot be found by node id, and createWhiteboard method cannot be performed , element id is ' + parentNodeStr + '.');
                    return;
                }
            }
            this.pureWhiteboardFileinfoList[instanceId] = {
                "fileid": 0,
                "companyid": '',
                "filename": 'whiteboard',
                "uploaduserid": '',
                "uploadusername": '',
                "downloadpath": '',
                "swfpath": '',
                "filetype": 'whiteboard',
                "pagenum": 1,
                "dynamicppt": 0,
                "filecategory": 0,
                "fileprop": 0 //0：普通文档 ， 1-2：动态ppt(1-旧版，2-新版) ， 3：h5文档
            };
            var defaultWhiteboard = undefined;
            if (this.awitWhiteboardConfigrationMap.has(instanceId)) {
                defaultWhiteboard = this.awitWhiteboardConfigrationMap.get(instanceId);
                this.awitWhiteboardConfigrationMap.delete(instanceId);
            } else {
                defaultWhiteboard = Object.deepAssign({}, _Configuration2.default.defaultWhiteboard, _Configuration2.default.commonWhiteboard);
            }
            var whiteboardViewConfigration = Object.deepAssign({}, defaultWhiteboard, configration);
            if (this.whiteboardViewMap.has(instanceId)) {
                this._destroyWhiteboard(instanceId);
            }
            this.whiteboardViewMap.set(instanceId, new _WhiteboardView2.default(parentNode, instanceId, whiteboardViewConfigration, function () {
                if (_this6.whiteboardToolbarViewList[instanceId] && _this6.whiteboardToolbarViewList[instanceId].receiveActionCommand) {
                    var _whiteboardToolbarVie;

                    (_whiteboardToolbarVie = _this6.whiteboardToolbarViewList[instanceId]).receiveActionCommand.apply(_whiteboardToolbarVie, arguments);
                }
                if (typeof receiveActionCommand === 'function') {
                    receiveActionCommand.apply(undefined, arguments);
                }
            }, this));
            _Utils2.default.onElementResize(parentNode, function () {
                _this6.updateWhiteboardSize(instanceId);
            });
            var whiteboardView = this.whiteboardViewMap.get(instanceId);
            if (whiteboardView && whiteboardView.getConfigration().isLoadWhiteboardToolBar) {
                var whiteboardToolBarParentNode = whiteboardView.getConfigration().whiteboardToolBarConfig.parentNode || whiteboardView.getWhiteboardRootElement();
                this.createWhiteboardToolBar(whiteboardToolBarParentNode, whiteboardView.getConfigration().whiteboardToolBarConfig, instanceId);
            }
        }
    }, {
        key: '_destroyWhiteboard',


        /*销毁白板
        * @params instanceId:白板实例id  , String*/
        value: function _destroyWhiteboard() {
            var instanceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            L.Logger.debug('[whiteboarrd-sdk]_destroyWhiteboard    instanceId  :', instanceId);
            if (this.whiteboardViewMap.has(instanceId)) {
                this.whiteboardViewMap.get(instanceId).destroyWhiteboardView();
                this.whiteboardViewMap.delete(instanceId);
            }
            if (this.awitWhiteboardConfigrationMap.has(instanceId)) {
                this.awitWhiteboardConfigrationMap.delete(instanceId);
            }
        }
    }, {
        key: '_isWhiteboardCorrelationSignalling',


        /*是否是白板相关信令*/
        value: function _isWhiteboardCorrelationSignalling(name) {
            L.Logger.debug('[whiteboarrd-sdk]_isWhiteboardCorrelationSignalling    name  :', name);
            var isWhiteboardCorrelationSignalling = false;
            switch (name) {
                case 'SharpsChange':

                case 'ShowPage':
                case 'ExtendShowPage':
                case 'WBPageCount':
                case 'ExtendWBPageCount':
                case 'NewPptTriggerActionClick':
                case 'ExtendNewPptTriggerActionClick':
                case 'PptVolumeControl':
                case 'ExtendPptVolumeControl':
                case 'H5DocumentAction':
                case 'ExtendH5DocumentAction':
                case 'whiteboardMarkTool':
                case 'ExtendWhiteboardMarkTool':
                    // case 'VideoWhiteboard':
                    // case 'BlackBoard':
                    isWhiteboardCorrelationSignalling = true;
                    break;
            }
            return isWhiteboardCorrelationSignalling;
        }
    }, {
        key: '_windowResizeCallback',


        /*窗口改变事件处理方法*/
        value: function _windowResizeCallback() {
            var _this7 = this;

            L.Logger.debug('[whiteboarrd-sdk]_windowResizeCallback ');
            this.updateAllWhiteboardSize();
            setTimeout(function () {
                _this7.updateAllWhiteboardSize();
                setTimeout(function () {
                    _this7.updateAllWhiteboardSize();
                }, 250);
            }, 50);
            return false;
        }
    }, {
        key: '_windowMessageCallback',


        /*收到iframe的消息处理方法*/
        value: function _windowMessageCallback(event) {
            L.Logger.debug('[whiteboarrd-sdk]_windowMessageCallback');
            event = event || window.event;
            var _iteratorNormalCompletion16 = true;
            var _didIteratorError16 = false;
            var _iteratorError16 = undefined;

            try {
                for (var _iterator16 = this.whiteboardViewMap.values()[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                    var whiteboardView = _step16.value;

                    whiteboardView.receiveWindowMessageEvent(event);
                }
            } catch (err) {
                _didIteratorError16 = true;
                _iteratorError16 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion16 && _iterator16.return) {
                        _iterator16.return();
                    }
                } finally {
                    if (_didIteratorError16) {
                        throw _iteratorError16;
                    }
                }
            }

            var _iteratorNormalCompletion17 = true;
            var _didIteratorError17 = false;
            var _iteratorError17 = undefined;

            try {
                for (var _iterator17 = Object.values(this.documentToolbarViewList)[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                    var documentToolbarView = _step17.value;

                    if (documentToolbarView) {
                        documentToolbarView.receiveWindowMessageEvent(event);
                    }
                }
            } catch (err) {
                _didIteratorError17 = true;
                _iteratorError17 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion17 && _iterator17.return) {
                        _iterator17.return();
                    }
                } finally {
                    if (_didIteratorError17) {
                        throw _iteratorError17;
                    }
                }
            }

            return false;
        }
    }, {
        key: '_documentKeydownCallback',


        /*键盘按下事件*/
        value: function _documentKeydownCallback(event) {
            var _this8 = this;

            L.Logger.debug('[whiteboarrd-sdk]_documentKeydownCallback');
            event = event || window.event;
            switch (event.keyCode) {
                case 27:
                    //ESC键
                    if (_Utils2.default.isFullScreenStatus()) {
                        _Utils2.default.exitFullscreen();
                    }
                    break;
            }
            var _pageDeyDown = function _pageDeyDown() {
                if (!_Global2.default.isSkipPageing && _this8.whiteboardViewMap.has('default')) {
                    if (_this8.whiteboardViewMap.get('default').getConfigration().isUseKeyboardPage) {
                        if (!_this8.whiteboardViewMap.get('default').isWhiteboardTextEditing()) {
                            switch (event.keyCode) {
                                case 37:
                                    //左键
                                    _this8.whiteboardViewMap.get('default').prevPage();
                                    break;
                                case 38:
                                    //上键
                                    _this8.whiteboardViewMap.get('default').prevStep();
                                    break;
                                case 39:
                                    //右键
                                    _this8.whiteboardViewMap.get('default').nextPage();
                                    break;
                                case 40:
                                    //下键
                                    _this8.whiteboardViewMap.get('default').nextStep();
                                    break;
                            }
                        }
                    }
                }
            };
            clearTimeout(this.documentKeydownTimer);
            if (this.documentKeydownDateTime && new Date().getTime() - this.documentKeydownDateTime > 500) {
                _pageDeyDown();
            } else {
                this.documentKeydownTimer = setTimeout(function () {
                    _pageDeyDown();
                }, 300);
            }
            this.documentKeydownDateTime = new Date().getTime();
            return false;
        }
    }, {
        key: '_documentFullscreenchangeCallback',
        value: function _documentFullscreenchangeCallback(event) {
            var _this9 = this;

            L.Logger.debug('[whiteboarrd-sdk]_documentFullscreenchangeCallback');
            var _iteratorNormalCompletion18 = true;
            var _didIteratorError18 = false;
            var _iteratorError18 = undefined;

            try {
                for (var _iterator18 = this.whiteboardViewMap.values()[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
                    var whiteboardView = _step18.value;

                    if (_Utils2.default.isFullScreenStatus()) {
                        var fullScreenElement = whiteboardView.getWhiteboardRootElement();
                        var fullScreenElementId = whiteboardView.getConfigration().documentToolBarConfig.fullScreenElementId;

                        if (fullScreenElementId) {
                            if (typeof fullScreenElementId === 'string') {
                                if (document.getElementById(fullScreenElementId)) {
                                    fullScreenElement = document.getElementById(fullScreenElementId);
                                }
                            } else {
                                fullScreenElement = fullScreenElementId;
                            }
                        }
                        if (_Utils2.default.getFullscreenElement() && _Utils2.default.getFullscreenElement().id === fullScreenElement.id) {
                            whiteboardView.changeFullScreenState(true);
                        } else {
                            whiteboardView.changeFullScreenState(false);
                        }
                    } else {
                        whiteboardView.changeFullScreenState(false);
                    }
                }
            } catch (err) {
                _didIteratorError18 = true;
                _iteratorError18 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion18 && _iterator18.return) {
                        _iterator18.return();
                    }
                } finally {
                    if (_didIteratorError18) {
                        throw _iteratorError18;
                    }
                }
            }

            if (this.videoPlayerView && this.videoPlayerView.receiveEventFullScreenChange) {
                this.videoPlayerView.receiveEventFullScreenChange(event);
            }
            this.updateAllWhiteboardSize();
            setTimeout(function () {
                _this9.updateAllWhiteboardSize();
                setTimeout(function () {
                    _this9.updateAllWhiteboardSize();
                }, 250);
            }, 50);
            return false;
        }

        /*注册事件*/

    }, {
        key: '_registerEvent',
        value: function _registerEvent() {
            var _this10 = this;

            L.Logger.debug('[whiteboarrd-sdk]_registerEvent');
            /*处理兼容性，监听浏览器窗口是否课件（最小化）*/
            var _getVisibilityChangeCompatibility = function _getVisibilityChangeCompatibility() {
                var hidden = void 0,
                    state = void 0,
                    visibilityChange = void 0;
                if (typeof document.hidden !== "undefined") {
                    hidden = "hidden";
                    visibilityChange = "visibilitychange";
                    state = "visibilityState";
                } else if (typeof document.mozHidden !== "undefined") {
                    hidden = "mozHidden";
                    visibilityChange = "mozvisibilitychange";
                    state = "mozVisibilityState";
                } else if (typeof document.msHidden !== "undefined") {
                    hidden = "msHidden";
                    visibilityChange = "msvisibilitychange";
                    state = "msVisibilityState";
                } else if (typeof document.webkitHidden !== "undefined") {
                    hidden = "webkitHidden";
                    visibilityChange = "webkitvisibilitychange";
                    state = "webkitVisibilityState";
                }
                return { hidden: hidden, state: state, visibilityChange: visibilityChange };
            };

            _Utils2.default.addEvent(window, 'resize', this._windowResizeCallback.bind(this));
            _Utils2.default.addEvent(window, 'message', this._windowMessageCallback.bind(this));
            _Utils2.default.addEvent(document, 'keyup', this._documentKeydownCallback.bind(this)); //todo 扩展白板如果响应键盘事件有问题
            _Utils2.default.addFullscreenchange(this._documentFullscreenchangeCallback.bind(this));

            var _getVisibilityChangeC = _getVisibilityChangeCompatibility(),
                state = _getVisibilityChangeC.state,
                visibilityChange = _getVisibilityChangeC.visibilityChange;

            _Utils2.default.addEvent(document, visibilityChange, function () {
                if (document[state] === 'visible') {
                    _this10.updateAllWhiteboardSize();
                    setTimeout(function () {
                        _this10.updateAllWhiteboardSize();
                        setTimeout(function () {
                            _this10.updateAllWhiteboardSize();
                        }, 250);
                    }, 50);
                    return false;
                }
            }, false); //监听浏览器窗口是否可见（最小化）
        }
    }, {
        key: '_addRoomEvent',


        /*监听房间的事件*/
        value: function _addRoomEvent() {
            L.Logger.debug('[whiteboarrd-sdk]_addRoomEvent');
            if (this.room) {
                if (this.room.removeBackupListerner) {
                    this.room.removeBackupListerner(this.listernerBackupid);
                }
                this.room.addEventListener('room-receiveActionCommand', this.reveiveEventRoomReceiveActionCommand.bind(this), this.listernerBackupid);
                this.room.addEventListener('room-pubmsg', this.receiveEventRoomPubmsg.bind(this), this.listernerBackupid);
                this.room.addEventListener('room-delmsg', this.receiveEventRoomDelmsg.bind(this), this.listernerBackupid);
                this.room.addEventListener('room-connected', this.receiveEventRoomConnected.bind(this), this.listernerBackupid);
                this.room.addEventListener('room-disconnected', this.receiveEventRoomDisconnected.bind(this), this.listernerBackupid);
                this.room.addEventListener('room-msglist', this.receiveEventRoomMsglist.bind(this), this.listernerBackupid);
                this.room.addEventListener('room-usermediastate-changed', this.reveiveEventRoomUsermediaorfilestateChanged.bind(this), this.listernerBackupid);
                this.room.addEventListener('room-userfilestate-changed', this.reveiveEventRoomUsermediaorfilestateChanged.bind(this), this.listernerBackupid);
                this.room.addEventListener('room-usermediaattributes-update', this.reveiveEventRoomUsermediaorfileattributesUpdate.bind(this), this.listernerBackupid);
                this.room.addEventListener('room-userfileattributes-update', this.reveiveEventRoomUsermediaorfileattributesUpdate.bind(this), this.listernerBackupid);
                this.room.addEventListener('room-error-notice', this.receiveEventRoomErrorNotice.bind(this), this.listernerBackupid);
            }
        }

        /*转发流的相关事件*/

    }, {
        key: '_forwardingStreamEvents',
        value: function _forwardingStreamEvents(handlerName, recvEventData) {
            L.Logger.debug('[whiteboarrd-sdk]_forwardingStreamEvents handlerName and recvEventData:', handlerName, recvEventData);
            if (this.audioPlayerView && this.audioPlayerView[handlerName] && _Utils2.default.isFunction(this.audioPlayerView[handlerName])) {
                this.audioPlayerView[handlerName](recvEventData);
            }
            if (this.videoPlayerView && this.videoPlayerView[handlerName] && _Utils2.default.isFunction(this.videoPlayerView[handlerName])) {
                this.videoPlayerView[handlerName](recvEventData);
            }
        }
    }]);

    return TKWhiteBoardManagerInner;
}();

;

var filterTKWhiteBoardManagerInnerArr = ['createMainWhiteboard', 'destroyMainWhiteboard', 'createExtendWhiteboard', 'destroyExtendWhiteboard', 'changeWhiteBoardConfigration', 'useWhiteboardTool', 'addPage', 'nextPage', 'prevPage', 'skipPage', 'nextStep', 'prevStep', 'enlargeWhiteboard', 'narrowWhiteboard', 'clear', 'undo', 'redo', 'fullScreen', 'exitFullScreen', 'resetWhiteboardData', 'updateWhiteboardSize', 'updateAllWhiteboardSize', 'resetAllWhiteboardData', 'resetPureWhiteboardTotalPage', 'changeDynamicPptVolume', 'openDocumentRemark', 'closeDocumentRemark', 'getWhiteboardIntermediateLayerInstance', 'changeCommonWhiteBoardConfigration', 'registerRoomDelegate', 'changeDocument', 'stopShareLocalMedia', 'switchDocAddress', 'getVersion', 'openRemoteDocument', 'noticeWhiteboardActionCommand'];
var filterTKWhiteBoardManagerOuterArr = ['createMainWhiteboard', 'destroyMainWhiteboard', 'changeDocument', 'changeWhiteBoardConfigration', 'useWhiteboardTool', 'addPage', 'nextPage', 'prevPage', 'skipPage', 'nextStep', 'prevStep', 'enlargeWhiteboard', 'narrowWhiteboard', 'clear', 'undo', 'redo', 'fullScreen', 'exitFullScreen', 'resetWhiteboardData', 'registerRoomDelegate', 'changeCommonWhiteBoardConfigration', 'getVersion', 'openRemoteDocument', 'noticeWhiteboardActionCommand'];

function TKWhiteBoardManager(room, sdkReceiveActionCommand, isInner) {
    var that = {};
    that.className = 'TKWhiteBoardManager'; //类的名字

    var TKWhiteBoard = new TKWhiteBoardManagerInner(room, sdkReceiveActionCommand, isInner);
    var filterTKWhiteBoardManager = isInner ? filterTKWhiteBoardManagerInnerArr : filterTKWhiteBoardManagerOuterArr;

    var _loop = function _loop(methodName) {
        that[methodName] = function () {
            return TKWhiteBoard[methodName].apply(TKWhiteBoard, arguments);
        };
    };

    var _iteratorNormalCompletion19 = true;
    var _didIteratorError19 = false;
    var _iteratorError19 = undefined;

    try {
        for (var _iterator19 = filterTKWhiteBoardManager[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
            var methodName = _step19.value;

            _loop(methodName);
        }
    } catch (err) {
        _didIteratorError19 = true;
        _iteratorError19 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion19 && _iterator19.return) {
                _iterator19.return();
            }
        } finally {
            if (_didIteratorError19) {
                throw _iteratorError19;
            }
        }
    }

    return that;
}

window.TKWhiteBoardManager = TKWhiteBoardManager;
exports.TKWhiteBoardManager = TKWhiteBoardManager;
exports.default = TKWhiteBoardManager;
},{"./intermediateLayer/WhiteboardIntermediateLayer":335,"./utils/Configuration":336,"./utils/Constant":337,"./utils/Global":339,"./utils/Utils":343,"./view/containers/AudioPlayer":349,"./view/containers/DocumentRemark":350,"./view/containers/DocumentToolbar":351,"./view/containers/VideoPlayer":353,"./view/containers/WhiteboardToolbar":354,"./view/containers/WhiteboardView":355}],333:[function(require,module,exports){
/**
 * 动态PPT中间层处理类
 * @class DynamicPptIntermediateLayer
 * @description  提供动态PPT中间层处理类
 * @author 邱广生
 * @date 2018-04-22
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DynamicPptIntermediateLayer = function () {
    function DynamicPptIntermediateLayer() {
        _classCallCheck(this, DynamicPptIntermediateLayer);

        this.defaultProductionOptions = { //默认的动态PPT生产配置选项
            synchronizationDynamicPpt: true, //是否同步动态PPT
            dynamicPptActionClick: true, //动态PPT的点击权限
            maxForceReloadNumber: 10, //最多能强制重连的次数
            forceReloadInterval: 60000, //重新加载的间隔 ， ms
            languageType: 'ch' //语言类型，默认ch ,  languageType的值有 ch / tw / en  , ch:简体中文，tw:繁体中文 ， en:英文
        };
        this.dynamicPptInstanceIDPrefix = "dynamicPpt_";
        this.dynamicPptInstanceDefaultID = "dynamicPpt_" + 'default';
        this.dynamicPptInstanceStore = {}; //动态PPT实例存储中心
        this.uniqueDynamicPpt = false; //唯一的动态PPT
        this.specialDynamicPptInstanceIDPrefix = 'specialDynamicPptInstanceIDPrefix_';
    }

    _createClass(DynamicPptIntermediateLayer, [{
        key: 'productionDynamicPpt',


        /*初始化动态PPT权限
         * @params
         dynamicPptElementId:动态PPT元素id（string , required） thumbnailId:缩略图元素id（string ） ，
         options:配置项(object)
         */
        value: function productionDynamicPpt() {
            var _this = this;

            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                dynamicPptElementId = _ref.dynamicPptElementId,
                _ref$productionOption = _ref.productionOptions,
                productionOptions = _ref$productionOption === undefined ? {} : _ref$productionOption,
                _ref$handler = _ref.handler,
                handler = _ref$handler === undefined ? {} : _ref$handler,
                id = _ref.id;

            if (!dynamicPptElementId) {
                L.Logger.error('dynamicPptElementId is required!');return;
            }
            var dynamicPptInstanceID = this._getDynamicPptInstanceID(id);
            var dynamicPptInstance = this.getDynamicPptInstanceByID(dynamicPptInstanceID);
            if (dynamicPptInstance) {
                L.Logger.error('The production dynamicPpt(dynamicPptInstanceID:' + dynamicPptInstanceID + ') fails, the dynamicPpt already exists!');return dynamicPptInstance;
            }
            dynamicPptInstance = {};
            productionOptions = Object.deepAssign({}, this.defaultProductionOptions, productionOptions);

            var dynamicPptElement = document.getElementById(dynamicPptElementId);
            if (!dynamicPptElement) {
                L.Logger.error('DynamicPpt elements do not exist , element id is:' + dynamicPptElementId + '!');return dynamicPptInstance;
            }

            var dynamicPptInstanceElement = document.createElement('div');
            var dynamicPptInstanceElementId = dynamicPptElementId + '_dynamicPptInstance';
            dynamicPptInstanceElement.className = 'dynamicPpt-instance-element';
            dynamicPptInstanceElement.id = dynamicPptInstanceElementId;
            dynamicPptInstanceElement.style.width = '100%';
            dynamicPptInstanceElement.style.height = '100%';

            var dynamicPptIframeElement = document.createElement('iframe');
            var dynamicPptIframeElementId = dynamicPptElementId + '_dynamicPptIframe';
            dynamicPptIframeElement.className = 'dynamicPpt-iframe-element';
            dynamicPptIframeElement.id = dynamicPptIframeElementId;
            dynamicPptIframeElement.name = dynamicPptElementId + "_dynamicPptIframeName";
            dynamicPptIframeElement.allowFullScreen = true;
            dynamicPptIframeElement.frameborder = 0;
            dynamicPptIframeElement.scrolling = 'no';
            dynamicPptIframeElement.allow = 'autoplay';
            dynamicPptIframeElement.width = '100%';
            dynamicPptIframeElement.height = '100%';
            dynamicPptIframeElement.style.width = '100%';
            dynamicPptIframeElement.style.height = '100%';
            dynamicPptIframeElement.style.border = 'none';
            dynamicPptIframeElement.style.padding = '0';
            dynamicPptIframeElement.style.margin = '0';
            dynamicPptInstanceElement.appendChild(dynamicPptIframeElement);

            var dynamicPptLoadingElement = document.createElement('div');
            var dynamicPptLoadingElementId = dynamicPptElementId + '_dynamicPptLoading';
            dynamicPptLoadingElement.className = 'dynamicPpt-loading-element talkcloud-loading';
            dynamicPptLoadingElement.id = dynamicPptLoadingElementId;
            var dynamicPptReloadNumberElement = document.createElement('span');
            dynamicPptReloadNumberElement.className = 'tk-loading-reload-number';
            dynamicPptReloadNumberElement.style.display = 'none';
            dynamicPptLoadingElement.appendChild(dynamicPptReloadNumberElement);
            dynamicPptInstanceElement.appendChild(dynamicPptLoadingElement);

            var dynamicPptActionElement = document.createElement('div');
            var dynamicPptActionElementId = dynamicPptElementId + '_dynamicPptAction';
            dynamicPptActionElement.className = 'dynamicPpt-action-element talkcloud-action';
            dynamicPptActionElement.style.width = '100%';
            dynamicPptActionElement.style.height = '100%';
            dynamicPptActionElement.style.zIndex = 98;
            dynamicPptActionElement.style.display = productionOptions.dynamicPptActionClick ? 'none' : 'block';
            dynamicPptActionElement.style.position = 'absolute';
            dynamicPptActionElement.style.top = '0';
            dynamicPptActionElement.style.left = '0';
            dynamicPptActionElement.id = dynamicPptActionElementId;
            dynamicPptInstanceElement.appendChild(dynamicPptActionElement);
            dynamicPptInstanceElement.appendChild(dynamicPptActionElement);

            dynamicPptElement.appendChild(dynamicPptInstanceElement);

            this.dynamicPptInstanceStore[dynamicPptInstanceID] = dynamicPptInstance; //动态PPT实例
            dynamicPptInstance.dynamicPptInstanceID = dynamicPptInstanceID; //动态PPTid
            dynamicPptInstance.handler = {}; //处理函数集合
            dynamicPptInstance.handler.sendSignallingToServer = handler.sendSignallingToServer;
            dynamicPptInstance.handler.delSignallingToServer = handler.delSignallingToServer;
            dynamicPptInstance.handler.receiveActionCommandCallback = handler.receiveActionCommandCallback;
            dynamicPptInstance.dynamicPptElementId = dynamicPptElementId; //动态PPT节点的id
            dynamicPptInstance.dynamicPptElement = dynamicPptElement; //动态PPT的节点元素
            dynamicPptInstance.dynamicPptInstanceElementId = dynamicPptInstanceElementId; //动态PPT实例节点的id
            dynamicPptInstance.dynamicPptInstanceElement = dynamicPptInstanceElement; //动态PPT实例节点元素
            dynamicPptInstance.dynamicPptIframeElementId = dynamicPptIframeElementId; //动态PPT的iframe节点的id
            dynamicPptInstance.dynamicPptIframeElement = dynamicPptIframeElement; //动态PPT的iframe节点元素
            dynamicPptInstance.dynamicPptLoadingElementId = dynamicPptLoadingElementId; //动态PPT的loading节点的id
            dynamicPptInstance.dynamicPptLoadingElement = dynamicPptLoadingElement; //动态PPT的loading节点元素
            dynamicPptInstance.dynamicPptReloadNumberElement = dynamicPptReloadNumberElement; //h5文档的reload number节点元素
            dynamicPptInstance.dynamicPptActionElementId = dynamicPptActionElementId; //动态PPT的action节点的id
            dynamicPptInstance.dynamicPptActionElement = dynamicPptActionElement; //动态PPT的action节点元素

            dynamicPptInstance.id = id; //实例id
            dynamicPptInstance.remoteData = {}; //动态ppt收到的远程数据
            dynamicPptInstance.awitExecutePostMessageArray = []; //等待执行的postMessage消息数组
            dynamicPptInstance.dynamicPptActionJson = {}; //动态ppt点击动作列表
            dynamicPptInstance.associatedMsgID = productionOptions.associatedMsgID; //绑定的信令消息id
            dynamicPptInstance.associatedUserID = productionOptions.associatedUserID; //绑定的用户id
            dynamicPptInstance.synchronizationDynamicPpt = productionOptions.synchronizationDynamicPpt; //是否同步动态ppt
            dynamicPptInstance.dynamicPptActionClick = productionOptions.dynamicPptActionClick; //动态PPT的点击权限
            dynamicPptInstance.forceReloadNumber = 0; //强制重连的次数
            dynamicPptInstance.maxForceReloadNumber = productionOptions.maxForceReloadNumber; //最多能强制重连的次数
            dynamicPptInstance.forceReloadInterval = productionOptions.forceReloadInterval; //重新加载的间隔 , ms
            dynamicPptInstance.isShowReloadFileTip = productionOptions.isShowReloadFileTip; //重新加载文档，是否显示重连次数
            dynamicPptInstance.languageType = productionOptions.languageType; //语言类型
            dynamicPptInstance.againreconnectNum = 0; //动态PPT内部发送的重连消息的次数
            if (productionOptions.againreconnectElementParentNode) {
                dynamicPptInstance.againreconnectElementParentNode = productionOptions.againreconnectElementParentNode;
            }

            dynamicPptInstance.dynamicPptIframeElement.onload = function () {
                clearTimeout(dynamicPptInstance.forceReloadNumberTimer);
                dynamicPptInstance.forceReloadNumberTimer = null;
                if (dynamicPptInstance.iframeSrc && !dynamicPptInstance.isLoadFinished && dynamicPptInstance.forceReloadNumber < dynamicPptInstance.maxForceReloadNumber) {
                    _this._iframeReloadMonitor(dynamicPptInstance, 'dynamicPptLoaded');
                }
            };
            return dynamicPptInstance;
        }
    }, {
        key: 'destroyDynamicPptInstance',


        /*销毁动态PPT实例，通过id*/
        value: function destroyDynamicPptInstance(id) {
            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[destroy]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            this._destroyDynamicPptInstance(dynamicPptInstance);
        }
    }, {
        key: 'receiveWindowMessageEvent',


        /*接收动态PPT的iframe消息*/
        value: function receiveWindowMessageEvent(id, event) {
            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[receiveWindowMessageEvent]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            //根据event.source判断消息来源是否是当前实例id对应的iframe
            if (event.source !== dynamicPptInstance.dynamicPptIframeElement.contentWindow) {
                return;
            }
            this._receiveWindowMessageEvent(id, dynamicPptInstance, event);
        }
    }, {
        key: 'changeDynamicPptSize',
        value: function changeDynamicPptSize(id) {
            var _this2 = this;

            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[changeDynamicPptSize]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            var postMessageData = {
                action: "resizeHandler",
                width: dynamicPptInstance.dynamicPptElement.clientWidth,
                height: dynamicPptInstance.dynamicPptElement.clientHeight
            };
            this._postMessage(dynamicPptInstance, postMessageData);
            setTimeout(function () {
                var postMessageData = {
                    action: "resizeHandler",
                    width: dynamicPptInstance.dynamicPptElement.clientWidth,
                    height: dynamicPptInstance.dynamicPptElement.clientHeight
                };
                _this2._postMessage(dynamicPptInstance, postMessageData);
            }, 250);
        }
        /*是否有动态PPT实例*/

    }, {
        key: 'hasDynamicPptById',
        value: function hasDynamicPptById(id) {
            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            return dynamicPptInstance !== undefined && dynamicPptInstance !== null;
        }

        /*设置动态ppt的iframe的src*/

    }, {
        key: 'setDynamicPptIframeSrc',
        value: function setDynamicPptIframeSrc(id, src) {
            var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var filedata = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[setDynamicPptIframeSrc]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            var srcStr = '';
            dynamicPptInstance.isLoadFinished = false;
            dynamicPptInstance.awitExecutePostMessageArray.length = 0;
            clearTimeout(dynamicPptInstance.forceReloadNumberTimer);
            dynamicPptInstance.forceReloadNumberTimer = null;
            dynamicPptInstance.forceReloadNumber = options.forceReloadNumber || 0;
            var fileid = filedata.fileid,
                pptslide = filedata.pptslide,
                pptstep = filedata.pptstep;

            dynamicPptInstance.playback = options.playback;
            if (dynamicPptInstance.againreconnectElement) {
                if (dynamicPptInstance.againreconnectElement.parentNode) {
                    dynamicPptInstance.againreconnectElement.parentNode.removeChild(dynamicPptInstance.againreconnectElement);
                }
                dynamicPptInstance.againreconnectElement = undefined;
            }
            if (fileid != dynamicPptInstance.fileid || !src || !options.isAgainreconnect) {
                dynamicPptInstance.againreconnectNum = 0;
            }
            dynamicPptInstance.fileid = fileid;
            dynamicPptInstance.awitJumpToAnimPptslide = pptslide;
            dynamicPptInstance.awitJumpToAnimPptstep = pptstep;
            if (src) {
                srcStr = src;
                var first = false;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = Object.entries(parameters)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _ref2 = _step.value;

                        var _ref3 = _slicedToArray(_ref2, 2);

                        var key = _ref3[0];
                        var value = _ref3[1];

                        if (value === undefined || value === null) {
                            continue;
                        }
                        if (!first) {
                            first = true;
                            srcStr += (/\?/g.test(srcStr) ? '&' : '?') + key + '=' + value;
                        } else {
                            srcStr += '&' + key + '=' + value;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                dynamicPptInstance.iframeSrc = srcStr;
                this._showLoading(dynamicPptInstance);
                this._iframeReloadMonitor(dynamicPptInstance, 'setDynamicPptIframeSrc');
            } else {
                dynamicPptInstance.iframeSrc = srcStr;
            }
            if (options.isAgainreconnect) {
                dynamicPptInstance.dynamicPptIframeElement.src = '';
            }
            dynamicPptInstance.dynamicPptIframeElement.src = srcStr;
            L.Logger.debug('set dynamic ppt src:', srcStr);
        }

        /*获取iframe的src地址*/

    }, {
        key: 'getIframeSrc',
        value: function getIframeSrc(id) {
            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[getIframeSrc]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            return dynamicPptInstance.iframeSrc;
        }

        /*跳转到ppt的指定页和帧*/

    }, {
        key: 'jumpToAnimation',
        value: function jumpToAnimation(id, slide, step, initiative, timeOffset, autoStart) {
            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[jumpToAnimation]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            this._jumpToAnimation(dynamicPptInstance, slide, step, initiative, timeOffset, autoStart);
        }

        /*下一页*/

    }, {
        key: 'nextSlide',
        value: function nextSlide(id, autoStart) {
            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[nextPage]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            if (!dynamicPptInstance.isLoadFinished) {
                L.Logger.info('[nextPage]dynamic ppt is not load finished  , cannot execute nextPage method');
                return;
            }
            if (dynamicPptInstance.remoteData && dynamicPptInstance.remoteData.pptslide >= dynamicPptInstance.remoteData.pptslidesCount) {
                L.Logger.warning('[nextPage]dynamic ppt is on the last page , cannot execute nextPage method.');
                return;
            }
            this._postMessage(dynamicPptInstance, {
                action: "gotoNextSlide",
                autoStart: autoStart
            });
        }

        /*上一页*/

    }, {
        key: 'prevSlide',
        value: function prevSlide(id, autoStart) {
            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[prevPage]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            if (!dynamicPptInstance.isLoadFinished) {
                L.Logger.info('[prevPage]dynamic ppt is not load finished  , cannot execute prevPage method');
                return;
            }
            if (dynamicPptInstance.remoteData && dynamicPptInstance.remoteData.pptslide <= 1) {
                L.Logger.warning('[prevPage]dynamic ppt is  on page 1 , cannot execute prevPage method.');
                return;
            }
            this._postMessage(dynamicPptInstance, {
                action: "gotoPreviousSlide",
                autoStart: autoStart
            });
        }

        /*下一帧*/

    }, {
        key: 'nextStep',
        value: function nextStep(id) {
            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[nextStep]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            if (!dynamicPptInstance.isLoadFinished) {
                L.Logger.info('[nextStep]dynamic ppt is not load finished  , cannot execute nextStep method');
                return;
            }
            this._postMessage(dynamicPptInstance, {
                action: "gotoNextStep"
            });
        }

        /*上一帧*/

    }, {
        key: 'prevStep',
        value: function prevStep(id) {
            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[prevStep]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            if (!dynamicPptInstance.isLoadFinished) {
                L.Logger.info('[prevStep]dynamic ppt is not load finished  , cannot execute prevStep method');
                return;
            }
            this._postMessage(dynamicPptInstance, {
                action: "gotoPreviousStep"
            });
        }

        /*更新动态PPT实例属性*/

    }, {
        key: 'updateDynamicPptProperty',
        value: function updateDynamicPptProperty(id, updateProperty) {
            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[updateDynamicPptProperty]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            if (updateProperty.associatedMsgID !== undefined) {
                dynamicPptInstance.associatedMsgID = updateProperty.associatedMsgID;
            }
            if (updateProperty.associatedUserID !== undefined) {
                dynamicPptInstance.associatedUserID = updateProperty.associatedUserID;
            }
            if (updateProperty.synchronizationDynamicPpt !== undefined) {
                dynamicPptInstance.synchronizationDynamicPpt = updateProperty.synchronizationDynamicPpt;
                /*this._postMessage(dynamicPptInstance , {
                    action:"changeClassBegin" ,
                    classbegin:dynamicPptInstance.synchronizationDynamicPpt
                });*/
                this._postMessage(dynamicPptInstance, {
                    action: "changePublishDynamicPptMediaPermission_video",
                    publishDynamicPptMediaPermission_video: dynamicPptInstance.synchronizationDynamicPpt
                });
            }
            if (updateProperty.dynamicPptActionClick !== undefined) {
                dynamicPptInstance.dynamicPptActionClick = updateProperty.dynamicPptActionClick;
                dynamicPptInstance.dynamicPptActionElement.style.display = dynamicPptInstance.dynamicPptActionClick ? 'none' : 'block';
                this._postMessage(dynamicPptInstance, {
                    action: "changeDynamicPptActionClick",
                    dynamicPptActionClick: dynamicPptInstance.dynamicPptActionClick
                });
            }
            if (updateProperty.canPage !== undefined) {
                this._postMessage(dynamicPptInstance, {
                    action: "changeNewpptPagingPage",
                    newpptPagingPage: updateProperty.canPage
                });
            }
            if (updateProperty.isShowReloadFileTip !== undefined) {
                dynamicPptInstance.isShowReloadFileTip = updateProperty.isShowReloadFileTip;
            }
            if (updateProperty.languageType !== undefined) {
                dynamicPptInstance.languageType = updateProperty.languageType;
                this._isShowReloadFileShowReloadNumber(dynamicPptInstance);
                if (dynamicPptInstance.againreconnectElement) {
                    this._setAgainreconnectInfo(dynamicPptInstance);
                }
            }
        }

        /*发送动态PPT的点击action给iframe*/

    }, {
        key: 'postMessageDynamicPptTriggerAction',
        value: function postMessageDynamicPptTriggerAction(id, postMessageData) {
            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[postMessageDynamicPptTriggerAction]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            var slide = postMessageData.slide,
                fileid = postMessageData.fileid;

            if (!(dynamicPptInstance.fileid == fileid && dynamicPptInstance.remoteData.pptslide === slide + 1)) {
                dynamicPptInstance.dynamicPptActionJson[slide + 1] = dynamicPptInstance.dynamicPptActionJson[slide + 1] || [];
                dynamicPptInstance.dynamicPptActionJson[slide + 1].push(postMessageData);
            } else {
                this._postMessage(dynamicPptInstance, postMessageData);
            }
        }

        /*提供postMessage*/

    }, {
        key: 'postMessage',
        value: function postMessage(id, postMessageData) {
            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[postMessage]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            this._postMessage(dynamicPptInstance, postMessageData);
        }

        /*是否加载完成h5文档*/

    }, {
        key: 'isLoadFinished',
        value: function isLoadFinished(id) {
            var dynamicPptInstance = this.getDynamicPptInstanceByID(id);
            if (!dynamicPptInstance) {
                L.Logger.error('[isLoadFinished]There are no dynamic ppt Numbers that belong to id ' + id);return;
            };
            return dynamicPptInstance.isLoadFinished;
        }

        /*获取动态PPT实例,根据id获取*/

    }, {
        key: 'getDynamicPptInstanceByID',
        value: function getDynamicPptInstanceByID(id) {
            var dynamicPptInstanceID = this._getDynamicPptInstanceID(id);
            var dynamicPptInstance = this.dynamicPptInstanceStore[dynamicPptInstanceID];
            return dynamicPptInstance;
        }

        /*跳转到ppt的指定页和帧*/

    }, {
        key: '_jumpToAnimation',
        value: function _jumpToAnimation(dynamicPptInstance, slide, step, initiative, timeOffset, autoStart) {
            if (dynamicPptInstance.isLoadFinished) {
                if (dynamicPptInstance.remoteData.pptslide > dynamicPptInstance.remoteData.pptslidesCount || dynamicPptInstance.remoteData.pptslide < 1) {
                    if (dynamicPptInstance.remoteData.pptslide > dynamicPptInstance.remoteData.pptslidesCount) {
                        slide = dynamicPptInstance.remoteData.pptslidesCount;
                        dynamicPptInstance.remoteData.pptslide = dynamicPptInstance.remoteData.pptslidesCount;
                    }
                    if (dynamicPptInstance.remoteData.pptslide < 1) {
                        slide = 1;
                        dynamicPptInstance.remoteData.pptslide = 1;
                    }
                    if (dynamicPptInstance.handler && dynamicPptInstance.handler.receiveActionCommandCallback) {
                        dynamicPptInstance.handler.receiveActionCommandCallback('dynamicPptSlideChange', {
                            id: dynamicPptInstance.id,
                            updateFileData: {
                                pptslide: dynamicPptInstance.remoteData.pptslide,
                                pptstep: dynamicPptInstance.remoteData.pptstep,
                                currpage: dynamicPptInstance.remoteData.pptslide,
                                steptotal: dynamicPptInstance.remoteData.pptstepTotal,
                                fileid: dynamicPptInstance.fileid,
                                pagenum: dynamicPptInstance.remoteData.pptslidesCount
                            }
                        });
                    }
                }
            }
            var data = {
                action: "jumpToAnim",
                data: {
                    slide: slide,
                    step: step,
                    timeOffset: timeOffset,
                    autoStart: autoStart,
                    initiative: initiative
                }
            };
            this._postMessage(dynamicPptInstance, data);
        }

        /*发送消息给动态ppt的iframe框架*/

    }, {
        key: '_postMessage',
        value: function _postMessage(dynamicPptInstance, data) {
            if (dynamicPptInstance.isLoadFinished) {
                try {
                    if (dynamicPptInstance.dynamicPptIframeElement && dynamicPptInstance.dynamicPptIframeElement.src) {
                        var source = "tk_dynamicPPT";
                        var sendData = {
                            source: source,
                            data: data
                        };
                        sendData = JSON.stringify(sendData);
                        if (dynamicPptInstance.dynamicPptIframeElement && dynamicPptInstance.dynamicPptIframeElement.contentWindow && dynamicPptInstance.dynamicPptIframeElement.contentWindow.postMessage) {
                            L.Logger.debug('[_postMessage]dynamic ppt postMessage instanceId is ' + dynamicPptInstance.id + ',sendData:' + sendData);
                            dynamicPptInstance.dynamicPptIframeElement.contentWindow.postMessage(sendData, "*");
                        }
                    }
                } catch (err) {
                    L.Logger.error('[_postMessage] dynamic ppt postMessage error:', err);
                }
            } else {
                dynamicPptInstance.awitExecutePostMessageArray.push(data);
            }
        }

        /*显示loading*/

    }, {
        key: '_showLoading',
        value: function _showLoading(dynamicPptInstance) {
            dynamicPptInstance.dynamicPptLoadingElement.style.display = 'block';
            this._isShowReloadFileShowReloadNumber(dynamicPptInstance);
        }

        /*隐藏loading*/

    }, {
        key: '_hideLoading',
        value: function _hideLoading(dynamicPptInstance) {
            dynamicPptInstance.dynamicPptLoadingElement.style.display = 'none';
            this._isShowReloadFileShowReloadNumber(dynamicPptInstance);
        }

        /*获取动态PPT实例id,根据id获取*/

    }, {
        key: '_getDynamicPptInstanceID',
        value: function _getDynamicPptInstanceID(id) {
            var dynamicPptInstanceID = !this.uniqueDynamicPpt && id !== undefined && id !== null ? this.dynamicPptInstanceIDPrefix + id : this.dynamicPptInstanceDefaultID;
            if (id && typeof id === 'string') {
                var rq = new RegExp(this.specialDynamicPptInstanceIDPrefix, 'g');
                if (rq.test(id)) {
                    dynamicPptInstanceID = id;
                }
            }
            return dynamicPptInstanceID;
        }
    }, {
        key: '_destroyDynamicPptInstance',


        /*销毁动态PPT实例，通过实例dynamicPptInstance*/
        value: function _destroyDynamicPptInstance(dynamicPptInstance) {
            var dynamicPptInstanceID = dynamicPptInstance.dynamicPptInstanceID;
            var dynamicPptElement = dynamicPptInstance.dynamicPptElement;
            if (!dynamicPptElement) {
                L.Logger.warning('[destroy] dynamicPpt elements do not exist , element id is:' + dynamicPptInstance.dynamicPptElementId + '!');
            } else {
                dynamicPptElement.innerHTML = '';
            }
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = Object.keys(dynamicPptInstance)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var key = _step2.value;

                    dynamicPptInstance[key] = null;
                    delete dynamicPptInstance[key];
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.dynamicPptInstanceStore[dynamicPptInstanceID] = null; //动态PPT实例
            delete this.dynamicPptInstanceStore[dynamicPptInstanceID];
        }
    }, {
        key: '_receiveWindowMessageEvent',


        /*接收动态PPT的iframe消息*/
        value: function _receiveWindowMessageEvent(instanceId, dynamicPptInstance, event) {
            var _this3 = this;

            // 通过origin属性判断消息来源地址
            if (event.data) {
                var data = undefined;
                var recvData = undefined;
                try {
                    recvData = JSON.parse(event.data);
                    data = recvData.data;
                } catch (e) {
                    L.Logger.warning("dynamic ppt receive iframe message data can't be converted to JSON , iframe data:", event.data);
                    return;
                }
                if (recvData && recvData.source === "tk_dynamicPPT") {
                    L.Logger.debug("[dynamicPpt]receive remote iframe data form " + event.origin + ":", event);
                    var INITEVENT = "initEvent";
                    var SLIDECHANGEEVENT = "slideChangeEvent";
                    var STEPCHANGEEVENT = "stepChangeEvent";
                    var AUTOPLAYVIDEOINNEWPPT = "autoPlayVideoInNewPpt";
                    var CLICKNEWPPTTRIGGEREVENT = "clickNewpptTriggerEvent";
                    var CLICKLINK = "clickLink";
                    var ALLVIDEOANDAUDIO = "allVideoAndAudio";
                    var AGAINRECONNECT = "againReconnect";
                    var CLINETAUDIOPLAYER = "clinetAudioPlayer";
                    switch (data.action) {
                        case INITEVENT:
                            this._handleIframeMessage_initEvent(dynamicPptInstance, data);
                            break;
                        case SLIDECHANGEEVENT:
                        case STEPCHANGEEVENT:
                            this._handleIframeMessage_slideOrStepChangeEvent(dynamicPptInstance, data, data.action);
                            break;
                        case AUTOPLAYVIDEOINNEWPPT:
                            this._handleIframeMessage_autoPlayVideoInNewPpt(dynamicPptInstance, data);
                            break;
                        case CLINETAUDIOPLAYER:
                            this._handleIframeMessage_autoPlayAudioInIos(dynamicPptInstance, data);
                            break;
                        case CLICKNEWPPTTRIGGEREVENT:
                            this._handleIframeMessage_clickNewpptTriggerEvent(instanceId, dynamicPptInstance, data);
                            break;
                        case ALLVIDEOANDAUDIO:
                            //FIXME 此处处理由文档工具条代为处理
                            break;
                        case CLICKLINK:
                            //TODO 超链接 ， bug:触发器的也会走这
                            break;
                        case AGAINRECONNECT:
                            //动态PPT内部要求重新加载文档
                            L.Logger.warning('[dynamic ppt]again reconnect info from dynamic ppt inner, again reconnect number is ' + dynamicPptInstance.againreconnectNum);
                            dynamicPptInstance.againreconnectNum++;
                            if (dynamicPptInstance.againreconnectNum <= 1) {
                                if (dynamicPptInstance.handler && dynamicPptInstance.handler.receiveActionCommandCallback) {
                                    dynamicPptInstance.handler.receiveActionCommandCallback('reloadCurrentDocument', {
                                        id: dynamicPptInstance.id,
                                        iframeSrc: dynamicPptInstance.iframeSrc,
                                        fileid: dynamicPptInstance.fileid,
                                        forceReloadNumber: dynamicPptInstance.forceReloadNumber,
                                        isAgainreconnect: true
                                    });
                                }
                            } else {
                                if (dynamicPptInstance.againreconnectElement) {
                                    if (dynamicPptInstance.againreconnectElement.parentNode) {
                                        dynamicPptInstance.againreconnectElement.parentNode.removeChild(dynamicPptInstance.againreconnectElement);
                                    }
                                }
                                if (dynamicPptInstance.playback) {
                                    return;
                                }
                                dynamicPptInstance.againreconnectElement = document.createElement('div');
                                dynamicPptInstance.againreconnectElement.className = 'againreconnect-container';
                                var againreconnectBox = document.createElement('div');
                                againreconnectBox.className = 'againreconnect-box';
                                var topSpan = document.createElement('span');
                                topSpan.className = 'top-box title';
                                var topMiddle = document.createElement('span');
                                topMiddle.className = 'middle-box point-icon';
                                var bottomMiddle = document.createElement('span');
                                bottomMiddle.className = 'bottom-box ok-container';
                                var okBtn = document.createElement('button');
                                okBtn.className = 'ok-btn';
                                okBtn.onclick = function () {
                                    _this3._postMessage(dynamicPptInstance, {
                                        action: 'userTriggerAudio'
                                    });
                                    if (dynamicPptInstance.againreconnectElement) {
                                        if (dynamicPptInstance.againreconnectElement.parentNode) {
                                            dynamicPptInstance.againreconnectElement.parentNode.removeChild(dynamicPptInstance.againreconnectElement);
                                        }
                                    }
                                    dynamicPptInstance.againreconnectElement = undefined;
                                };
                                okBtn.ontouchend = function () {
                                    _this3._postMessage(dynamicPptInstance, {
                                        action: 'userTriggerAudio'
                                    });
                                    if (dynamicPptInstance.againreconnectElement) {
                                        if (dynamicPptInstance.againreconnectElement.parentNode) {
                                            dynamicPptInstance.againreconnectElement.parentNode.removeChild(dynamicPptInstance.againreconnectElement);
                                        }
                                    }
                                    dynamicPptInstance.againreconnectElement = undefined;
                                };
                                bottomMiddle.appendChild(okBtn);
                                againreconnectBox.appendChild(topSpan);
                                againreconnectBox.appendChild(topMiddle);
                                againreconnectBox.appendChild(bottomMiddle);
                                dynamicPptInstance.againreconnectElement.appendChild(againreconnectBox);
                                var againreconnectElementParnetNode = dynamicPptInstance.againreconnectElementParentNode || dynamicPptInstance.dynamicPptInstanceElement;
                                againreconnectElementParnetNode.appendChild(dynamicPptInstance.againreconnectElement);
                                this._setAgainreconnectInfo(dynamicPptInstance);
                            }
                            break;
                    };
                }
            }
        }

        /*处理iframe的initEvent消息*/

    }, {
        key: '_handleIframeMessage_initEvent',
        value: function _handleIframeMessage_initEvent(dynamicPptInstance, data) {
            clearTimeout(dynamicPptInstance.forceReloadNumberTimer);
            dynamicPptInstance.forceReloadNumberTimer = null;
            dynamicPptInstance.remoteData.pptview = data.view;
            dynamicPptInstance.remoteData.pptslidesCount = data.slidesCount;
            dynamicPptInstance.remoteData.pptslide = data.slide + 1;
            dynamicPptInstance.remoteData.pptstep = data.step;
            dynamicPptInstance.remoteData.pptstepTotal = data.stepTotal;
            if (dynamicPptInstance.handler && dynamicPptInstance.handler.receiveActionCommandCallback) {
                dynamicPptInstance.handler.receiveActionCommandCallback('dynamicPptSlideChange', {
                    id: dynamicPptInstance.id,
                    updateFileData: {
                        pptslide: dynamicPptInstance.remoteData.pptslide,
                        pptstep: dynamicPptInstance.remoteData.pptstep,
                        currpage: dynamicPptInstance.remoteData.pptslide,
                        steptotal: dynamicPptInstance.remoteData.pptstepTotal,
                        fileid: dynamicPptInstance.fileid,
                        pagenum: dynamicPptInstance.remoteData.pptslidesCount
                    }
                });
                dynamicPptInstance.handler.receiveActionCommandCallback('updateWhiteboardWatermarkImageScale', {
                    id: dynamicPptInstance.id,
                    scale: dynamicPptInstance.remoteData.pptview.width / dynamicPptInstance.remoteData.pptview.height
                });
                dynamicPptInstance.handler.receiveActionCommandCallback('dynamicPptLoadEnd', {
                    id: dynamicPptInstance.id,
                    scale: dynamicPptInstance.remoteData.pptview.width / dynamicPptInstance.remoteData.pptview.height
                });
            }
            if (!dynamicPptInstance.isLoadFinished) {
                dynamicPptInstance.isLoadFinished = true;
                if (dynamicPptInstance.awitJumpToAnimPptslide !== undefined) {
                    this._jumpToAnimation(dynamicPptInstance, dynamicPptInstance.awitJumpToAnimPptslide, dynamicPptInstance.awitJumpToAnimPptstep);
                    dynamicPptInstance.awitJumpToAnimPptslide = undefined;
                    dynamicPptInstance.awitJumpToAnimPptstep = undefined;
                    delete dynamicPptInstance.awitJumpToAnimPptslide;
                    delete dynamicPptInstance.awitJumpToAnimPptstep;
                }
            };
            if (dynamicPptInstance.awitExecutePostMessageArray && dynamicPptInstance.awitExecutePostMessageArray.length > 0) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = dynamicPptInstance.awitExecutePostMessageArray[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var postMessageData = _step3.value;

                        this._postMessage(dynamicPptInstance, postMessageData);
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            }
            dynamicPptInstance.awitExecutePostMessageArray.length = 0;
            this._hideLoading(dynamicPptInstance);
        }
    }, {
        key: '_handleIframeMessage_slideOrStepChangeEvent',


        /*处理iframe的slideChangeEvent或者stepChangeEvent消息*/
        value: function _handleIframeMessage_slideOrStepChangeEvent(dynamicPptInstance, data, eventAction) {
            dynamicPptInstance.remoteData.pptslide = data.slide + 1;
            dynamicPptInstance.remoteData.pptstep = data.step;
            dynamicPptInstance.remoteData.pptstepTotal = data.stepTotal;
            if (dynamicPptInstance.handler && dynamicPptInstance.handler.receiveActionCommandCallback) {
                dynamicPptInstance.handler.receiveActionCommandCallback(eventAction === 'slideChangeEvent' ? 'dynamicPptSlideChange' : 'dynamicPptStepChange', {
                    id: dynamicPptInstance.id,
                    updateFileData: {
                        pptslide: dynamicPptInstance.remoteData.pptslide,
                        pptstep: dynamicPptInstance.remoteData.pptstep,
                        currpage: dynamicPptInstance.remoteData.pptslide,
                        steptotal: dynamicPptInstance.remoteData.pptstepTotal,
                        fileid: dynamicPptInstance.fileid,
                        pagenum: dynamicPptInstance.remoteData.pptslidesCount
                    }
                });
            }
            if (Object.keys(dynamicPptInstance.dynamicPptActionJson).length > 0 && dynamicPptInstance.dynamicPptActionJson[dynamicPptInstance.remoteData.pptslide]) {
                if (dynamicPptInstance.dynamicPptActionJson[dynamicPptInstance.remoteData.pptslide].length !== 0) {
                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;

                    try {
                        for (var _iterator4 = dynamicPptInstance.dynamicPptActionJson[dynamicPptInstance.remoteData.pptslide][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                            var dynamicPptAction = _step4.value;

                            this._postMessage(dynamicPptInstance, dynamicPptAction);
                        }
                    } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                _iterator4.return();
                            }
                        } finally {
                            if (_didIteratorError4) {
                                throw _iteratorError4;
                            }
                        }
                    }

                    dynamicPptInstance.dynamicPptActionJson[dynamicPptInstance.remoteData.pptslide].length = 0;
                    delete dynamicPptInstance.dynamicPptActionJson[dynamicPptInstance.remoteData.pptslide];
                }
            }
            if (data.externalData && data.externalData.initiative) {
                this._sendSignalling_ShowPage(dynamicPptInstance, {
                    data: {
                        action: eventAction === 'slideChangeEvent' ? 'slide' : 'step'
                    }
                });
                if (dynamicPptInstance.handler && dynamicPptInstance.handler.receiveActionCommandCallback) {
                    dynamicPptInstance.handler.receiveActionCommandCallback('closeAllSelectBox', {
                        id: dynamicPptInstance.id
                    });
                }
            }
        }
    }, {
        key: '_handleIframeMessage_autoPlayVideoInNewPpt',


        /*处理iframe的autoPlayVideoInNewPpt消息*/
        value: function _handleIframeMessage_autoPlayVideoInNewPpt(dynamicPptInstance, data) {
            if (dynamicPptInstance.handler && dynamicPptInstance.handler.receiveActionCommandCallback) {
                var isvideo = data.isvideo,
                    url = data.url,
                    fileid = data.fileid;

                var action = 'publishDymanicPptNetworkMedia';
                var cmd = {
                    id: dynamicPptInstance.id,
                    url: url,
                    video: isvideo,
                    audio: true,
                    attributes: {
                        source: 'dynamicPPT',
                        filename: '',
                        fileid: fileid
                    }
                };
                dynamicPptInstance.handler.receiveActionCommandCallback(action, cmd);
            }
        }
    }, {
        key: '_handleIframeMessage_autoPlayAudioInIos',
        value: function _handleIframeMessage_autoPlayAudioInIos(dynamicPptInstance, data) {
            if (dynamicPptInstance.handler && dynamicPptInstance.handler.receiveActionCommandCallback) {
                var isPlay = data.isPlay,
                    url = data.url,
                    fileid = data.fileid,
                    other = _objectWithoutProperties(data, ['isPlay', 'url', 'fileid']);

                var action = 'publishDymanicPptNetworkAudio';
                var cmd = {
                    id: dynamicPptInstance.id,
                    url: url,
                    isPlay: isPlay,
                    audio: true,
                    attributes: {
                        source: 'dynamicPPT',
                        filename: '',
                        fileid: fileid,
                        type: 'audio',
                        other: other
                    }
                };
                dynamicPptInstance.handler.receiveActionCommandCallback(action, cmd);
            }
        }

        /*处理iframe的clickNewpptTriggerEvent消息*/

    }, {
        key: '_handleIframeMessage_clickNewpptTriggerEvent',
        value: function _handleIframeMessage_clickNewpptTriggerEvent(instanceId, dynamicPptInstance, data) {
            if (data.externalData && data.externalData.initiative) {
                data.fileid = dynamicPptInstance.fileid;
                data.sourceInstanceId = instanceId;
                this._sendSignallingToServer(dynamicPptInstance, {
                    name: instanceId === 'default' ? 'NewPptTriggerActionClick' : 'ExtendNewPptTriggerActionClick',
                    id: instanceId === 'default' ? 'NewPptTriggerActionClick' : 'NewPptTriggerActionClick_' + instanceId,
                    toID: '__allExceptSender',
                    data: data
                });
                if (dynamicPptInstance.handler && dynamicPptInstance.handler.receiveActionCommandCallback) {
                    dynamicPptInstance.handler.receiveActionCommandCallback('closeAllSelectBox', {
                        id: dynamicPptInstance.id
                    });
                }
            }
        }

        /*发送信令*/

    }, {
        key: '_sendSignallingToServer',
        value: function _sendSignallingToServer(dynamicPptInstance) {
            var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                name = _ref4.name,
                id = _ref4.id,
                _ref4$toID = _ref4.toID,
                toID = _ref4$toID === undefined ? '__all' : _ref4$toID,
                data = _ref4.data,
                do_not_save = _ref4.do_not_save,
                expiresabs = _ref4.expiresabs,
                associatedMsgID = _ref4.associatedMsgID,
                associatedUserID = _ref4.associatedUserID;

            if (dynamicPptInstance.handler && dynamicPptInstance.handler.sendSignallingToServer) {
                associatedMsgID = associatedMsgID || dynamicPptInstance.associatedMsgID;
                associatedUserID = associatedUserID || dynamicPptInstance.associatedUserID;
                dynamicPptInstance.handler.sendSignallingToServer(name, id, toID, data, do_not_save, expiresabs, associatedMsgID, associatedUserID);
            }
        }

        /*监测iframe进行重新加载*/

    }, {
        key: '_iframeReloadMonitor',
        value: function _iframeReloadMonitor(dynamicPptInstance, source) {
            var _this4 = this;

            clearTimeout(dynamicPptInstance.forceReloadNumberTimer);
            dynamicPptInstance.forceReloadNumberTimer = null;
            if (dynamicPptInstance.iframeSrc && !dynamicPptInstance.isLoadFinished && dynamicPptInstance.forceReloadNumber < dynamicPptInstance.maxForceReloadNumber) {
                dynamicPptInstance.forceReloadNumberTimer = setTimeout(function () {
                    if (dynamicPptInstance.iframeSrc && !dynamicPptInstance.isLoadFinished && dynamicPptInstance.forceReloadNumber < dynamicPptInstance.maxForceReloadNumber) {
                        dynamicPptInstance.forceReloadNumber++;
                        _this4._isShowReloadFileShowReloadNumber(dynamicPptInstance);
                        if (dynamicPptInstance.handler && dynamicPptInstance.handler.receiveActionCommandCallback) {
                            dynamicPptInstance.handler.receiveActionCommandCallback('reloadDynamicPptIframeSrc', {
                                id: dynamicPptInstance.id,
                                iframeSrc: dynamicPptInstance.iframeSrc,
                                source: source,
                                fileid: dynamicPptInstance.fileid,
                                forceReloadNumber: dynamicPptInstance.forceReloadNumber
                            });
                        }
                    }
                }, dynamicPptInstance.forceReloadInterval);
            }
        }

        /*发送ShowPage信令*/

    }, {
        key: '_sendSignalling_ShowPage',
        value: function _sendSignalling_ShowPage(dynamicPptInstance) {
            var updatePubmsgData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (dynamicPptInstance.handler && dynamicPptInstance.handler.receiveActionCommandCallback) {
                dynamicPptInstance.handler.receiveActionCommandCallback('sendSignalling_ShowPage', {
                    id: dynamicPptInstance.id,
                    updatePubmsgData: updatePubmsgData
                });
            }
        }

        /*是否显示文件重新加载提示*/

    }, {
        key: '_isShowReloadFileShowReloadNumber',
        value: function _isShowReloadFileShowReloadNumber(dynamicPptInstance) {
            dynamicPptInstance.dynamicPptReloadNumberElement.style.display = dynamicPptInstance.isShowReloadFileTip && dynamicPptInstance.forceReloadNumber ? 'inline-table' : 'none';
            var forceReloadNumberTip = '当前网络不稳定，正在尝试重新打开课件……第' + dynamicPptInstance.forceReloadNumber + '次';
            switch (dynamicPptInstance.languageType) {
                case 'tw':
                    forceReloadNumberTip = '當前網絡不穩定，正在嘗試重新打開課件……第' + dynamicPptInstance.forceReloadNumber + '次';
                    break;
                case 'en':
                    forceReloadNumberTip = 'The network is unstable , Trying to reopen the courseware ...' + dynamicPptInstance.forceReloadNumber + '';
                    break;
                case 'ja':
                    forceReloadNumberTip = 'ネットが不安定です、教材を開きなおしています' + dynamicPptInstance.forceReloadNumber + '次';
                    break;
            }
            dynamicPptInstance.dynamicPptReloadNumberElement.innerHTML = forceReloadNumberTip || '';
        }
    }, {
        key: '_setAgainreconnectInfo',
        value: function _setAgainreconnectInfo(dynamicPptInstance) {
            if (dynamicPptInstance.againreconnectElement) {
                var topSpan = dynamicPptInstance.againreconnectElement.getElementsByClassName('top-box')[0];
                var okBtn = dynamicPptInstance.againreconnectElement.getElementsByClassName('ok-btn')[0];
                if (topSpan || okBtn) {
                    var againreconnectTitle = '加载有点慢......';
                    var againreconnectOk = '点此继续';
                    switch (dynamicPptInstance.languageType) {
                        case 'tw':
                            againreconnectTitle = '加載有點慢......';
                            againreconnectOk = '點此繼續';
                            break;
                        case 'en':
                            againreconnectTitle = 'Loading a bit slow...';
                            againreconnectOk = 'Click to continue';
                            break;
                        case 'ja':
                            againreconnectTitle = 'インストールに時間がかかっています。...';
                            againreconnectOk = '続行する';
                            break;
                    }
                    if (topSpan) {
                        topSpan.innerHTML = againreconnectTitle;
                    }
                    if (okBtn) {
                        okBtn.innerHTML = againreconnectOk;
                    }
                }
            }
        }
    }]);

    return DynamicPptIntermediateLayer;
}();

;
var DynamicPptIntermediateLayerInstance = new DynamicPptIntermediateLayer();
exports.default = DynamicPptIntermediateLayerInstance;
},{}],334:[function(require,module,exports){
/**
 * H5文档中间层处理类
 * @class H5DocumentIntermediateLayer
 * @description  提供H5文档中间层处理类
 * @author 邱广生
 * @date 2018-04-24
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var H5DocumentIntermediateLayer = function () {
    function H5DocumentIntermediateLayer() {
        _classCallCheck(this, H5DocumentIntermediateLayer);

        this.defaultProductionOptions = { //默认的h5文档生产配置选项
            synchronizationH5Document: true, //是否同步h5文档
            h5DocumentActionClick: true, //h5文档的点击权限
            maxForceReloadNumber: 10, //最多能强制重连的次数
            forceReloadInterval: 60000, //重新加载的间隔 ， ms
            languageType: 'ch' //语言类型，默认ch ,  languageType的值有 ch / tw / en  , ch:简体中文，tw:繁体中文 ， en:英文
        };
        this.h5DocumentInstanceIDPrefix = "h5Document_";
        this.h5DocumentInstanceDefaultID = "h5Document_" + 'default';
        this.h5DocumentInstanceStore = {}; //h5文档实例存储中心
        this.uniqueH5Document = false; //唯一的h5文档
        this.specialH5DocumentInstanceIDPrefix = 'specialH5DocumentInstanceIDPrefix_';
    }

    _createClass(H5DocumentIntermediateLayer, [{
        key: 'productionH5Document',


        /*初始化h5文档权限
         * @params
         h5DocumentElementId:h5文档元素id（string , required） thumbnailId:缩略图元素id（string ） ，
         options:配置项(object)
         */
        value: function productionH5Document() {
            var _this = this;

            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                h5DocumentElementId = _ref.h5DocumentElementId,
                _ref$productionOption = _ref.productionOptions,
                productionOptions = _ref$productionOption === undefined ? {} : _ref$productionOption,
                _ref$handler = _ref.handler,
                handler = _ref$handler === undefined ? {} : _ref$handler,
                id = _ref.id;

            if (!h5DocumentElementId) {
                L.Logger.error('h5DocumentElementId is required!');return;
            }
            var h5DocumentInstanceID = this._getH5DocumentInstanceID(id);
            var h5DocumentInstance = this.getH5DocumentInstanceByID(h5DocumentInstanceID);
            if (h5DocumentInstance) {
                L.Logger.error('The production h5Document(h5DocumentInstanceID:' + h5DocumentInstanceID + ') fails, the h5Document already exists!');return h5DocumentInstance;
            }
            h5DocumentInstance = {};
            productionOptions = Object.deepAssign({}, this.defaultProductionOptions, productionOptions);

            var h5DocumentElement = document.getElementById(h5DocumentElementId);
            if (!h5DocumentElement) {
                L.Logger.error('H5Document elements do not exist , element id is:' + h5DocumentElementId + '!');return h5DocumentInstance;
            }

            var h5DocumentInstanceElement = document.createElement('div');
            var h5DocumentInstanceElementId = h5DocumentElementId + '_h5DocumentInstance';
            h5DocumentInstanceElement.className = 'h5Document-instance-element';
            h5DocumentInstanceElement.id = h5DocumentInstanceElementId;
            h5DocumentInstanceElement.style.width = '100%';
            h5DocumentInstanceElement.style.height = '100%';

            var h5DocumentIframeElement = document.createElement('iframe');
            var h5DocumentIframeElementId = h5DocumentElementId + '_h5DocumentIframe';
            h5DocumentIframeElement.className = 'h5Document-iframe-element';
            h5DocumentIframeElement.id = h5DocumentIframeElementId;
            h5DocumentIframeElement.name = h5DocumentElementId + "_h5DocumentIframeName";
            h5DocumentIframeElement.allowFullScreen = true;
            h5DocumentIframeElement.allow = 'autoplay';
            h5DocumentIframeElement.frameborder = 0;
            h5DocumentIframeElement.scrolling = 'no';
            h5DocumentIframeElement.width = '100%';
            h5DocumentIframeElement.height = '100%';
            h5DocumentIframeElement.style.width = '100%';
            h5DocumentIframeElement.style.height = '100%';
            h5DocumentIframeElement.style.border = 'none';
            h5DocumentIframeElement.style.padding = '0';
            h5DocumentIframeElement.style.margin = '0';
            h5DocumentInstanceElement.appendChild(h5DocumentIframeElement);

            var h5DocumentLoadingElement = document.createElement('div');
            var h5DocumentLoadingElementId = h5DocumentElementId + '_h5DocumentLoading';
            h5DocumentLoadingElement.className = 'h5Document-loading-element talkcloud-loading';
            h5DocumentLoadingElement.id = h5DocumentLoadingElementId;
            var h5DocumentReloadNumberElement = document.createElement('span');
            h5DocumentReloadNumberElement.className = 'tk-loading-reload-number';
            h5DocumentReloadNumberElement.style.display = 'none';
            h5DocumentLoadingElement.appendChild(h5DocumentReloadNumberElement);
            h5DocumentInstanceElement.appendChild(h5DocumentLoadingElement);

            var h5DocumentActionElement = document.createElement('div');
            var h5DocumentActionElementId = h5DocumentElementId + '_h5DocumentAction';
            h5DocumentActionElement.className = 'h5Document-action-element talkcloud-action';
            h5DocumentActionElement.style.width = '100%';
            h5DocumentActionElement.style.height = '100%';
            h5DocumentActionElement.style.zIndex = 98;
            h5DocumentActionElement.style.display = productionOptions.h5DocumentActionClick ? 'none' : 'block';
            h5DocumentActionElement.style.position = 'absolute';
            h5DocumentActionElement.style.top = '0';
            h5DocumentActionElement.style.left = '0';
            h5DocumentActionElement.id = h5DocumentActionElementId;
            h5DocumentInstanceElement.appendChild(h5DocumentActionElement);
            h5DocumentInstanceElement.appendChild(h5DocumentActionElement);

            h5DocumentElement.appendChild(h5DocumentInstanceElement);

            this.h5DocumentInstanceStore[h5DocumentInstanceID] = h5DocumentInstance; //h5文档实例
            h5DocumentInstance.h5DocumentInstanceID = h5DocumentInstanceID; //h5文档id
            h5DocumentInstance.handler = {}; //处理函数集合
            h5DocumentInstance.handler.sendSignallingToServer = handler.sendSignallingToServer;
            h5DocumentInstance.handler.delSignallingToServer = handler.delSignallingToServer;
            h5DocumentInstance.handler.receiveActionCommandCallback = handler.receiveActionCommandCallback;
            h5DocumentInstance.h5DocumentElementId = h5DocumentElementId; //h5文档节点的id
            h5DocumentInstance.h5DocumentElement = h5DocumentElement; //h5文档的节点元素
            h5DocumentInstance.h5DocumentInstanceElementId = h5DocumentInstanceElementId; //h5文档实例节点的id
            h5DocumentInstance.h5DocumentInstanceElement = h5DocumentInstanceElement; //h5文档实例节点元素
            h5DocumentInstance.h5DocumentIframeElementId = h5DocumentIframeElementId; //h5文档的iframe节点的id
            h5DocumentInstance.h5DocumentIframeElement = h5DocumentIframeElement; //h5文档的iframe节点元素
            h5DocumentInstance.h5DocumentLoadingElementId = h5DocumentLoadingElementId; //h5文档的loading节点的id
            h5DocumentInstance.h5DocumentLoadingElement = h5DocumentLoadingElement; //h5文档的loading节点元素
            h5DocumentInstance.h5DocumentReloadNumberElement = h5DocumentReloadNumberElement; //h5文档的reload number节点元素
            h5DocumentInstance.h5DocumentActionElementId = h5DocumentActionElementId; //h5文档的action节点的id
            h5DocumentInstance.h5DocumentActionElement = h5DocumentActionElement; //h5文档的action节点元素

            h5DocumentInstance.id = id; //实例id
            h5DocumentInstance.awitExecutePostMessageArray = []; //等待执行的postMessage消息数组
            h5DocumentInstance.h5DocumentActionJson = {}; //h5文档点击动作列表
            h5DocumentInstance.associatedMsgID = productionOptions.associatedMsgID; //绑定的信令消息id
            h5DocumentInstance.associatedUserID = productionOptions.associatedUserID; //绑定的用户id
            h5DocumentInstance.synchronizationH5Document = productionOptions.synchronizationH5Document; //是否同步H5文档
            h5DocumentInstance.h5DocumentActionClick = productionOptions.h5DocumentActionClick; //h5文档的点击权限
            h5DocumentInstance.forceReloadNumber = 0; //强制重连的次数
            h5DocumentInstance.maxForceReloadNumber = productionOptions.maxForceReloadNumber; //最多能强制重连的次数
            h5DocumentInstance.forceReloadInterval = productionOptions.forceReloadInterval; //重新加载的间隔 , ms
            h5DocumentInstance.isShowReloadFileTip = productionOptions.isShowReloadFileTip; //重新加载文档，是否显示重连次数
            h5DocumentInstance.languageType = productionOptions.languageType; //语言类型

            h5DocumentInstance.h5DocumentIframeElement.onload = function () {
                clearTimeout(h5DocumentInstance.forceReloadNumberTimer);
                h5DocumentInstance.forceReloadNumberTimer = null;
                if (h5DocumentInstance.iframeSrc && !h5DocumentInstance.isLoadFinished && h5DocumentInstance.forceReloadNumber < h5DocumentInstance.maxForceReloadNumber) {
                    _this._iframeReloadMonitor(h5DocumentInstance, 'h5DocumentLoaded');
                }
            };

            return h5DocumentInstance;
        }
    }, {
        key: 'destroyH5DocumentInstance',


        /*销毁h5文档实例，通过id*/
        value: function destroyH5DocumentInstance(id) {
            var h5DocumentInstance = this.getH5DocumentInstanceByID(id);
            if (!h5DocumentInstance) {
                L.Logger.error('[destroy]There are no h5 document Numbers that belong to id ' + id);return;
            };
            this._destroyH5DocumentInstance(h5DocumentInstance);
        }
    }, {
        key: 'receiveWindowMessageEvent',


        /*接收h5文档的iframe消息*/
        value: function receiveWindowMessageEvent(id, event) {
            var h5DocumentInstance = this.getH5DocumentInstanceByID(id);
            if (!h5DocumentInstance) {
                L.Logger.error('[receiveWindowMessageEvent]There are no h5 document Numbers that belong to id ' + id);return;
            };
            //根据event.source判断消息来源是否是当前实例id对应的iframe
            if (event.source !== h5DocumentInstance.h5DocumentIframeElement.contentWindow) {
                return;
            }
            this._receiveWindowMessageEvent(id, h5DocumentInstance, event);
        }

        /*是否有h5文档实例*/

    }, {
        key: 'hasH5DocumentById',
        value: function hasH5DocumentById(id) {
            var h5DocumentInstance = this.getH5DocumentInstanceByID(id);
            return h5DocumentInstance !== undefined && h5DocumentInstance !== null;
        }

        /*设置h5文档的iframe的src*/

    }, {
        key: 'setH5DocumentIframeSrc',
        value: function setH5DocumentIframeSrc(id, src) {
            var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var filedata = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

            var h5DocumentInstance = this.getH5DocumentInstanceByID(id);
            if (!h5DocumentInstance) {
                L.Logger.error('[setH5DocumentIframeSrc]There are no h5 document Numbers that belong to id ' + id);return;
            };
            var srcStr = '';
            h5DocumentInstance.isLoadFinished = false;
            h5DocumentInstance.isReceivePagenum = false;
            clearTimeout(h5DocumentInstance.h5DocumentActionTimer);
            h5DocumentInstance.awitExecutePostMessageArray.length = 0;
            clearTimeout(h5DocumentInstance.forceReloadNumberTimer);
            h5DocumentInstance.forceReloadNumberTimer = null;
            h5DocumentInstance.forceReloadNumber = options.forceReloadNumber || 0;
            var fileid = filedata.fileid;

            h5DocumentInstance.fileid = fileid;
            if (src) {
                srcStr = src;
                var first = false;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = Object.entries(parameters)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _ref2 = _step.value;

                        var _ref3 = _slicedToArray(_ref2, 2);

                        var key = _ref3[0];
                        var value = _ref3[1];

                        if (!first) {
                            first = true;
                            srcStr += (/\?/g.test(srcStr) ? '&' : '?') + key + '=' + value;
                        } else {
                            srcStr += '&' + key + '=' + value;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                h5DocumentInstance.iframeSrc = srcStr;
                this._showLoading(h5DocumentInstance);
                this._iframeReloadMonitor(h5DocumentInstance, 'setH5DocumentIframeSrc');
            } else {
                h5DocumentInstance.iframeSrc = srcStr;
                this._hideLoading(h5DocumentInstance);
            }
            h5DocumentInstance.h5DocumentIframeElement.src = srcStr;
            L.Logger.debug('set h5 document src:', srcStr);
        }

        /*获取iframe的src地址*/

    }, {
        key: 'getIframeSrc',
        value: function getIframeSrc(id) {
            var h5DocumentInstance = this.getH5DocumentInstanceByID(id);
            if (!h5DocumentInstance) {
                L.Logger.error('[getIframeSrc]There are no h5 document Numbers that belong to id ' + id);return;
            };
            return h5DocumentInstance.iframeSrc;
        }

        /*跳转到ppt的指定页和帧*/

    }, {
        key: 'jumpToPage',
        value: function jumpToPage(id, page) {
            var h5DocumentInstance = this.getH5DocumentInstanceByID(id);
            if (!h5DocumentInstance) {
                L.Logger.error('[jumpToPage]There are no h5 document Numbers that belong to id ' + id);return;
            };
            this._jumpToPage(h5DocumentInstance, page);
        }

        /*下一页*/

    }, {
        key: 'nextPage',
        value: function nextPage(id) {
            var h5DocumentInstance = this.getH5DocumentInstanceByID(id);
            if (!h5DocumentInstance) {
                L.Logger.error('[nextPage]There are no h5 document Numbers that belong to id ' + id);return;
            };
            if (!h5DocumentInstance.isLoadFinished) {
                L.Logger.info('[nextPage]h5 document is not load finished  , cannot execute nextPage method');
                return;
            }
            var filedata = this._getWhiteboardFiledata(h5DocumentInstance);
            if (filedata && filedata.currpage >= filedata.pagenum) {
                L.Logger.warning('[nextPage]h5 document is on the last page , cannot execute nextPage method.');
                return;
            }
            // this._postMessage(h5DocumentInstance , { method:"onPagedown" } );
            var updateFileData = {
                currpage: filedata.currpage + 1
            };
            this._postMessage(h5DocumentInstance, { method: "onJumpPage", toPage: updateFileData.currpage });
            this._saveFiledataAndLoadCurrpageWhiteboardData(h5DocumentInstance, updateFileData);
            this._sendSignalling_ShowPage(h5DocumentInstance);
        }

        /*上一页*/

    }, {
        key: 'prevPage',
        value: function prevPage(id) {
            var h5DocumentInstance = this.getH5DocumentInstanceByID(id);
            if (!h5DocumentInstance) {
                L.Logger.error('[nextPage]There are no h5 document Numbers that belong to id ' + id);return;
            };
            if (!h5DocumentInstance.isLoadFinished) {
                L.Logger.info('[prevPage]h5 document is not load finished  , cannot execute prevPage method');
                return;
            }
            var filedata = this._getWhiteboardFiledata(h5DocumentInstance);
            if (filedata && filedata.currpage <= 1) {
                L.Logger.warning('[nextPage]h5 document is on page 1, cannot execute prevPage method.');
                return;
            }
            // this._postMessage(h5DocumentInstance , { method:"onPageup" } );
            var updateFileData = {
                currpage: filedata.currpage - 1
            };
            this._postMessage(h5DocumentInstance, { method: "onJumpPage", toPage: updateFileData.currpage });
            this._saveFiledataAndLoadCurrpageWhiteboardData(h5DocumentInstance, updateFileData);
            this._sendSignalling_ShowPage(h5DocumentInstance);
        }
    }, {
        key: 'skipPage',
        value: function skipPage(id, toPage) {
            var h5DocumentInstance = this.getH5DocumentInstanceByID(id);
            if (!h5DocumentInstance) {
                L.Logger.error('[skipPage]There are no h5 document Numbers that belong to id ' + id);return;
            };
            if (!h5DocumentInstance.isLoadFinished) {
                L.Logger.info('[skipPage]h5 document is not load finished  , cannot execute skipPage method');
                return;
            }
            var filedata = this._getWhiteboardFiledata(h5DocumentInstance);
            if (filedata && toPage > filedata.pagenum) {
                L.Logger.info('[skipPage]h5 document skip to page exceeds the maximum number of pages , change skip page  to 5(max page number).');
                toPage = filedata.pagenum;
            }
            if (toPage < 1) {
                L.Logger.info('[skipPage]h5 document skip to page less than the minimum page , change skip page  to 1(min page number).');
                toPage = 1;
            }
            this._saveFiledataAndLoadCurrpageWhiteboardData(h5DocumentInstance, {
                currpage: toPage
            });
            this._jumpToPage(h5DocumentInstance, toPage);
            this._sendSignalling_ShowPage(h5DocumentInstance);
        }

        /*更新h5文档实例属性*/

    }, {
        key: 'updateH5DocumentProperty',
        value: function updateH5DocumentProperty(id, updateProperty) {
            var h5DocumentInstance = this.getH5DocumentInstanceByID(id);
            if (!h5DocumentInstance) {
                L.Logger.error('[updateH5DocumentProperty]There are no h5 document Numbers that belong to id ' + id);return;
            };
            if (updateProperty.associatedMsgID !== undefined) {
                h5DocumentInstance.associatedMsgID = updateProperty.associatedMsgID;
            }
            if (updateProperty.associatedUserID !== undefined) {
                h5DocumentInstance.associatedUserID = updateProperty.associatedUserID;
            }
            if (updateProperty.synchronizationH5Document !== undefined) {
                h5DocumentInstance.synchronizationH5Document = updateProperty.synchronizationH5Document;
            }
            if (updateProperty.h5DocumentActionClick !== undefined) {
                h5DocumentInstance.h5DocumentActionClick = updateProperty.h5DocumentActionClick;
                h5DocumentInstance.h5DocumentActionElement.style.display = h5DocumentInstance.h5DocumentActionClick ? 'none' : 'block';
            }
            if (updateProperty.isShowReloadFileTip !== undefined) {
                h5DocumentInstance.isShowReloadFileTip = updateProperty.isShowReloadFileTip;
            }
            if (updateProperty.languageType !== undefined) {
                h5DocumentInstance.languageType = updateProperty.languageType;
                this._isShowReloadFileShowReloadNumber(h5DocumentInstance);
            }
        }

        /*发送h5文档的点击action给iframe*/

    }, {
        key: 'postMessageH5DocumentTriggerAction',
        value: function postMessageH5DocumentTriggerAction(id, postMessageData) {
            var h5DocumentInstance = this.getH5DocumentInstanceByID(id);
            if (!h5DocumentInstance) {
                L.Logger.error('[postMessageH5DocumentTriggerAction]There are no h5 document Numbers that belong to id ' + id);return;
            };
            var filedata = this._getWhiteboardFiledata(h5DocumentInstance);
            if (postMessageData && postMessageData.fileid != undefined && postMessageData.currpage !== undefined && !(filedata.fileid == postMessageData.fileid && filedata.currpage === postMessageData.currpage)) {
                h5DocumentInstance.h5DocumentActionJson[postMessageData.currpage] = h5DocumentInstance.h5DocumentActionJson[postMessageData.currpage] || [];
                h5DocumentInstance.h5DocumentActionJson[postMessageData.currpage].push(postMessageData);
            } else {
                this._postMessage(h5DocumentInstance, postMessageData);
            }
        }

        /*提供postMessage*/

    }, {
        key: 'postMessage',
        value: function postMessage(id, postMessageData) {
            var h5DocumentInstance = this.getH5DocumentInstanceByID(id);
            if (!h5DocumentInstance) {
                L.Logger.error('[postMessage]There are no h5 document Numbers that belong to id ' + id);return;
            };
            this._postMessage(h5DocumentInstance, postMessageData);
        }

        /*是否加载完成h5文档*/

    }, {
        key: 'isLoadFinished',
        value: function isLoadFinished(id) {
            var h5DocumentInstance = this.getH5DocumentInstanceByID(id);
            if (!h5DocumentInstance) {
                L.Logger.error('[isLoadFinished]There are no h5 document Numbers that belong to id ' + id);return;
            };
            return h5DocumentInstance.isLoadFinished;
        }

        /*获取h5文档实例,根据id获取*/

    }, {
        key: 'getH5DocumentInstanceByID',
        value: function getH5DocumentInstanceByID(id) {
            var h5DocumentInstanceID = this._getH5DocumentInstanceID(id);
            var h5DocumentInstance = this.h5DocumentInstanceStore[h5DocumentInstanceID];
            return h5DocumentInstance;
        }

        /*跳转到ppt的指定页和帧*/

    }, {
        key: '_jumpToPage',
        value: function _jumpToPage(h5DocumentInstance, page) {
            if (h5DocumentInstance.isLoadFinished) {
                var filedata = this._getWhiteboardFiledata(h5DocumentInstance);
                var needChangeCurrpage = false,
                    currpage = page;
                if (filedata) {
                    if (filedata.currpage > filedata.pagenum) {
                        filedata.currpage = filedata.pagenum;
                        needChangeCurrpage = true;
                        page = filedata.currpage;
                    }
                    if (filedata.currpage < 1) {
                        filedata.currpage = 1;
                        needChangeCurrpage = true;
                        page = filedata.currpage;
                    }
                    currpage = filedata.currpage;
                }
                if (needChangeCurrpage) {
                    var updateFileData = {};
                    if (needChangeCurrpage) {
                        updateFileData.currpage = currpage;
                    }
                    this._saveFiledataAndLoadCurrpageWhiteboardData(h5DocumentInstance, updateFileData);
                }
                if (page !== undefined && page !== null && !isNaN(page)) {
                    var data = {
                        method: "onJumpPage",
                        toPage: page
                    };
                    this._postMessage(h5DocumentInstance, data);
                }
            }
        }

        /*发送消息给h5文档的iframe框架*/

    }, {
        key: '_postMessage',
        value: function _postMessage(h5DocumentInstance, data) {
            if (h5DocumentInstance.isLoadFinished) {
                try {
                    if (h5DocumentInstance.h5DocumentIframeElement && h5DocumentInstance.h5DocumentIframeElement.src) {
                        // let source =  "tk_h5Document" ;
                        var sendData = data;
                        sendData = JSON.stringify(sendData);
                        if (h5DocumentInstance.h5DocumentIframeElement && h5DocumentInstance.h5DocumentIframeElement.contentWindow && h5DocumentInstance.h5DocumentIframeElement.contentWindow.postMessage) {
                            L.Logger.debug('[_postMessage]h5 document postMessage instanceId is ' + h5DocumentInstance.id + ',sendData:' + sendData);
                            h5DocumentInstance.h5DocumentIframeElement.contentWindow.postMessage(sendData, "*");
                        }
                    }
                } catch (err) {
                    L.Logger.error('[_postMessage] h5 document postMessage error:', err);
                }
            } else {
                h5DocumentInstance.awitExecutePostMessageArray.push(data);
            }
        }

        /*显示loading*/

    }, {
        key: '_showLoading',
        value: function _showLoading(h5DocumentInstance) {
            h5DocumentInstance.h5DocumentLoadingElement.style.display = 'block';
            this._isShowReloadFileShowReloadNumber(h5DocumentInstance);
        }

        /*隐藏loading*/

    }, {
        key: '_hideLoading',
        value: function _hideLoading(h5DocumentInstance) {
            h5DocumentInstance.h5DocumentLoadingElement.style.display = 'none';
            this._isShowReloadFileShowReloadNumber(h5DocumentInstance);
        }

        /*获取h5文档实例id,根据id获取*/

    }, {
        key: '_getH5DocumentInstanceID',
        value: function _getH5DocumentInstanceID(id) {
            var h5DocumentInstanceID = !this.uniqueH5Document && id !== undefined && id !== null ? this.h5DocumentInstanceIDPrefix + id : this.h5DocumentInstanceDefaultID;
            if (id && typeof id === 'string') {
                var rq = new RegExp(this.specialH5DocumentInstanceIDPrefix, 'g');
                if (rq.test(id)) {
                    h5DocumentInstanceID = id;
                }
            }
            return h5DocumentInstanceID;
        }
    }, {
        key: '_destroyH5DocumentInstance',


        /*销毁h5文档实例，通过实例h5DocumentInstance*/
        value: function _destroyH5DocumentInstance(h5DocumentInstance) {
            var h5DocumentInstanceID = h5DocumentInstance.h5DocumentInstanceID;
            var h5DocumentElement = h5DocumentInstance.h5DocumentElement;
            if (!h5DocumentElement) {
                L.Logger.warning('[destroy] h5Document elements do not exist , element id is:' + h5DocumentInstance.h5DocumentElementId + '!');
            } else {
                h5DocumentElement.innerHTML = '';
            }
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = Object.keys(h5DocumentInstance)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var key = _step2.value;

                    h5DocumentInstance[key] = null;
                    delete h5DocumentInstance[key];
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.h5DocumentInstanceStore[h5DocumentInstanceID] = null; //h5文档实例
            delete this.h5DocumentInstanceStore[h5DocumentInstanceID];
        }
    }, {
        key: '_receiveWindowMessageEvent',


        /*接收h5文档的iframe消息*/
        value: function _receiveWindowMessageEvent(instanceId, h5DocumentInstance, event) {
            // 通过origin属性判断消息来源地址
            if (event.data) {
                var recvData = undefined;
                try {
                    recvData = JSON.parse(event.data);
                } catch (e) {
                    L.Logger.warning("h5 document receive iframe message data can't be converted to JSON , iframe data:", event.data);
                    return;
                }
                if (recvData.method || recvData.source === "tk_h5Document") {
                    L.Logger.debug("[h5Document]receive remote iframe data form " + event.origin + ":", event);
                    var ONLOADCOMPLETE = "onLoadComplete"; //收到iframe加载完成时
                    var ONPAGENUM = "onPagenum"; //收到总页数
                    var ONFILEMESSAGE = "onFileMessage"; //操作h5课件时
                    var ONJUMPPAGE = "onJumpPage"; //跳到某页
                    switch (recvData.method) {
                        case ONLOADCOMPLETE:
                            this._handleIframeMessage_onLoadComplete(h5DocumentInstance, recvData);
                            break;
                        case ONPAGENUM:
                            this._handleIframeMessage_onPagenum(h5DocumentInstance, recvData);
                            break;
                        case ONFILEMESSAGE:
                            this._handleIframeMessage_onFileMessage(instanceId, h5DocumentInstance, recvData);
                            break;
                        case ONJUMPPAGE:
                            if (!recvData.toPage || typeof recvData.toPage !== "number") {
                                L.Logger.warning("h5 document toPage is not a number , toPage:", recvData.toPage);
                                return;
                            }
                            h5DocumentInstance.handler.receiveActionCommandCallback('h5DocumentOnJumpPage', {
                                id: h5DocumentInstance.id,
                                toPage: recvData.toPage
                            });
                            break;
                    };
                }
            }
        }

        /*处理iframe的onLoadComplete消息*/

    }, {
        key: '_handleIframeMessage_onLoadComplete',
        value: function _handleIframeMessage_onLoadComplete(h5DocumentInstance, data) {
            var _this2 = this;

            clearTimeout(h5DocumentInstance.forceReloadNumberTimer);
            h5DocumentInstance.forceReloadNumberTimer = null;
            if (h5DocumentInstance.handler && h5DocumentInstance.handler.receiveActionCommandCallback) {
                h5DocumentInstance.handler.receiveActionCommandCallback('updateWhiteboardWatermarkImageScale', {
                    id: h5DocumentInstance.id,
                    scale: data.coursewareRatio || 16 / 9
                });
                h5DocumentInstance.handler.receiveActionCommandCallback('h5DocumentLoadEnd', {
                    id: h5DocumentInstance.id,
                    scale: data.coursewareRatio || 16 / 9
                });
            }
            if (!h5DocumentInstance.isLoadFinished) {
                h5DocumentInstance.isLoadFinished = true;
                if (h5DocumentInstance.isReceivePagenum) {
                    var filedata = this._getWhiteboardFiledata(h5DocumentInstance);
                    if (filedata) {
                        this._jumpToPage(h5DocumentInstance, filedata.currpage);
                        clearTimeout(h5DocumentInstance.h5DocumentActionTimer);
                        h5DocumentInstance.h5DocumentActionTimer = setTimeout(function () {
                            if (h5DocumentInstance.isLoadFinished) {
                                filedata = _this2._getWhiteboardFiledata(h5DocumentInstance);
                                if (Object.keys(h5DocumentInstance.h5DocumentActionJson).length > 0 && h5DocumentInstance.h5DocumentActionJson[filedata.currpage]) {
                                    if (h5DocumentInstance.h5DocumentActionJson[filedata.currpage].length !== 0) {
                                        var _iteratorNormalCompletion3 = true;
                                        var _didIteratorError3 = false;
                                        var _iteratorError3 = undefined;

                                        try {
                                            for (var _iterator3 = h5DocumentInstance.h5DocumentActionJson[filedata.currpage][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                                var h5DocumentAction = _step3.value;

                                                _this2._postMessage(h5DocumentInstance, h5DocumentAction);
                                            }
                                        } catch (err) {
                                            _didIteratorError3 = true;
                                            _iteratorError3 = err;
                                        } finally {
                                            try {
                                                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                                    _iterator3.return();
                                                }
                                            } finally {
                                                if (_didIteratorError3) {
                                                    throw _iteratorError3;
                                                }
                                            }
                                        }

                                        h5DocumentInstance.h5DocumentActionJson[filedata.currpage].length = 0;
                                        delete h5DocumentInstance.h5DocumentActionJson[filedata.currpage];
                                    }
                                }
                            }
                        }, 100);
                    }
                }
            };

            if (h5DocumentInstance.awitExecutePostMessageArray && h5DocumentInstance.awitExecutePostMessageArray.length > 0) {
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = h5DocumentInstance.awitExecutePostMessageArray[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var postMessageData = _step4.value;

                        this._postMessage(h5DocumentInstance, postMessageData);
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }
            }
            h5DocumentInstance.awitExecutePostMessageArray.length = 0;
            this._hideLoading(h5DocumentInstance);
        }
    }, {
        key: '_handleIframeMessage_onPagenum',


        /*处理iframe的onPagenum消息*/
        value: function _handleIframeMessage_onPagenum(h5DocumentInstance, data) {
            var _this3 = this;

            var h5Pagenum = data.totalPages;
            var needChangeCurrpage = false,
                currpage = 1;
            var filedata = this._getWhiteboardFiledata(h5DocumentInstance);
            if (filedata) {
                filedata.pagenum = h5Pagenum;
                if (filedata.currpage > filedata.pagenum) {
                    filedata.currpage = filedata.pagenum;
                    needChangeCurrpage = true;
                }
                if (filedata.currpage < 1) {
                    filedata.currpage = 1;
                    needChangeCurrpage = true;
                }
                currpage = filedata.currpage;
            }
            var updateFileData = {
                pagenum: h5Pagenum
            };
            if (needChangeCurrpage) {
                updateFileData.currpage = currpage;
            }
            if (needChangeCurrpage) {
                this._saveFiledataAndLoadCurrpageWhiteboardData(h5DocumentInstance, updateFileData);
            } else {
                this._updateWhiteboardFiledata(h5DocumentInstance, updateFileData);
            }
            if (h5DocumentInstance.isLoadFinished && !h5DocumentInstance.isReceivePagenum) {
                filedata = this._getWhiteboardFiledata(h5DocumentInstance);
                if (filedata) {
                    this._jumpToPage(h5DocumentInstance, filedata.currpage);
                    clearTimeout(h5DocumentInstance.h5DocumentActionTimer);
                    h5DocumentInstance.h5DocumentActionTimer = setTimeout(function () {
                        if (h5DocumentInstance.isLoadFinished) {
                            filedata = _this3._getWhiteboardFiledata(h5DocumentInstance);
                            if (Object.keys(h5DocumentInstance.h5DocumentActionJson).length > 0 && h5DocumentInstance.h5DocumentActionJson[filedata.currpage]) {
                                if (h5DocumentInstance.h5DocumentActionJson[filedata.currpage].length !== 0) {
                                    var _iteratorNormalCompletion5 = true;
                                    var _didIteratorError5 = false;
                                    var _iteratorError5 = undefined;

                                    try {
                                        for (var _iterator5 = h5DocumentInstance.h5DocumentActionJson[filedata.currpage][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                                            var h5DocumentAction = _step5.value;

                                            _this3._postMessage(h5DocumentInstance, h5DocumentAction);
                                        }
                                    } catch (err) {
                                        _didIteratorError5 = true;
                                        _iteratorError5 = err;
                                    } finally {
                                        try {
                                            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                                                _iterator5.return();
                                            }
                                        } finally {
                                            if (_didIteratorError5) {
                                                throw _iteratorError5;
                                            }
                                        }
                                    }

                                    h5DocumentInstance.h5DocumentActionJson[filedata.currpage].length = 0;
                                    delete h5DocumentInstance.h5DocumentActionJson[filedata.currpage];
                                }
                            }
                        }
                    }, 100);
                }
            };
            h5DocumentInstance.isReceivePagenum = true;
        }
    }, {
        key: '_handleIframeMessage_onFileMessage',


        /*处理iframe的onFileMessage消息*/
        value: function _handleIframeMessage_onFileMessage(instanceId, h5DocumentInstance, data) {
            data.sourceInstanceId = instanceId;
            this._sendSignallingToServer(h5DocumentInstance, {
                name: instanceId === 'default' ? 'H5DocumentAction' : 'ExtendH5DocumentAction',
                id: instanceId === 'default' ? 'H5DocumentAction' : 'H5DocumentAction_' + instanceId,
                toID: '__allExceptSender',
                data: data
            });
            if (h5DocumentInstance.handler && h5DocumentInstance.handler.receiveActionCommandCallback) {
                h5DocumentInstance.handler.receiveActionCommandCallback('closeAllSelectBox', {
                    id: h5DocumentInstance.id
                });
            }
        }

        /*发送信令*/

    }, {
        key: '_sendSignallingToServer',
        value: function _sendSignallingToServer(h5DocumentInstance) {
            var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                name = _ref4.name,
                id = _ref4.id,
                _ref4$toID = _ref4.toID,
                toID = _ref4$toID === undefined ? '__all' : _ref4$toID,
                data = _ref4.data,
                do_not_save = _ref4.do_not_save,
                expiresabs = _ref4.expiresabs,
                associatedMsgID = _ref4.associatedMsgID,
                associatedUserID = _ref4.associatedUserID;

            if (h5DocumentInstance.handler && h5DocumentInstance.handler.sendSignallingToServer) {
                associatedMsgID = associatedMsgID || h5DocumentInstance.associatedMsgID;
                associatedUserID = associatedUserID || h5DocumentInstance.associatedUserID;
                h5DocumentInstance.handler.sendSignallingToServer(name, id, toID, data, do_not_save, expiresabs, associatedMsgID, associatedUserID);
            }
        }

        /*获取whiteboard filedata*/

    }, {
        key: '_getWhiteboardFiledata',
        value: function _getWhiteboardFiledata(h5DocumentInstance) {
            var filedata = undefined;
            if (h5DocumentInstance.handler && h5DocumentInstance.handler.receiveActionCommandCallback) {
                h5DocumentInstance.handler.receiveActionCommandCallback('getWhiteboardFiledata', {
                    id: h5DocumentInstance.id,
                    callback: function callback(filedataResult) {
                        filedata = filedataResult;
                    }
                });
            }
            return filedata;
        }

        /*保存白板数据且加载当前页的白板数据*/

    }, {
        key: '_saveFiledataAndLoadCurrpageWhiteboardData',
        value: function _saveFiledataAndLoadCurrpageWhiteboardData(h5DocumentInstance) {
            var updateFiledata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (h5DocumentInstance.handler && h5DocumentInstance.handler.receiveActionCommandCallback) {
                h5DocumentInstance.handler.receiveActionCommandCallback('saveFiledataAndLoadCurrpageWhiteboardData', {
                    id: h5DocumentInstance.id,
                    updateFileData: updateFiledata
                });
            }
        }

        /*更新whiteboard filedata*/

    }, {
        key: '_updateWhiteboardFiledata',
        value: function _updateWhiteboardFiledata(h5DocumentInstance) {
            var updateFileData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (h5DocumentInstance.handler && h5DocumentInstance.handler.receiveActionCommandCallback) {
                h5DocumentInstance.handler.receiveActionCommandCallback('updateWhiteboardFiledata', {
                    id: h5DocumentInstance.id,
                    updateFileData: updateFileData
                });
            }
        }

        /*监测iframe进行重新加载*/

    }, {
        key: '_iframeReloadMonitor',
        value: function _iframeReloadMonitor(h5DocumentInstance, source) {
            var _this4 = this;

            clearTimeout(h5DocumentInstance.forceReloadNumberTimer);
            h5DocumentInstance.forceReloadNumberTimer = null;
            if (h5DocumentInstance.iframeSrc && !h5DocumentInstance.isLoadFinished && h5DocumentInstance.forceReloadNumber < h5DocumentInstance.maxForceReloadNumber) {
                h5DocumentInstance.forceReloadNumberTimer = setTimeout(function () {
                    if (h5DocumentInstance.iframeSrc && !h5DocumentInstance.isLoadFinished && h5DocumentInstance.forceReloadNumber < h5DocumentInstance.maxForceReloadNumber) {
                        h5DocumentInstance.forceReloadNumber++;
                        _this4._isShowReloadFileShowReloadNumber(h5DocumentInstance);
                        if (h5DocumentInstance.handler && h5DocumentInstance.handler.receiveActionCommandCallback) {
                            h5DocumentInstance.handler.receiveActionCommandCallback('reloadH5DocumentIframeSrc', {
                                id: h5DocumentInstance.id,
                                iframeSrc: h5DocumentInstance.iframeSrc,
                                source: source,
                                fileid: h5DocumentInstance.fileid,
                                forceReloadNumber: h5DocumentInstance.forceReloadNumber
                            });
                        }
                    }
                }, h5DocumentInstance.forceReloadInterval);
            }
        }

        /*发送ShowPage信令*/

    }, {
        key: '_sendSignalling_ShowPage',
        value: function _sendSignalling_ShowPage(h5DocumentInstance) {
            var updatePubmsgData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (h5DocumentInstance.handler && h5DocumentInstance.handler.receiveActionCommandCallback) {
                h5DocumentInstance.handler.receiveActionCommandCallback('sendSignalling_ShowPage', {
                    id: h5DocumentInstance.id,
                    updatePubmsgData: updatePubmsgData
                });
            }
        }
    }, {
        key: '_isShowReloadFileShowReloadNumber',


        /*是否显示文件重新加载提示*/
        value: function _isShowReloadFileShowReloadNumber(h5DocumentInstance) {
            h5DocumentInstance.h5DocumentReloadNumberElement.style.display = h5DocumentInstance.isShowReloadFileTip && h5DocumentInstance.forceReloadNumber ? 'inline-table' : 'none';
            var forceReloadNumberTip = '当前网络不稳定，正在尝试重新打开课件……第' + h5DocumentInstance.forceReloadNumber + '次';
            switch (h5DocumentInstance.languageType) {
                case 'tw':
                    forceReloadNumberTip = '當前網絡不穩定，正在嘗試重新打開課件……第' + h5DocumentInstance.forceReloadNumber + '次';
                    break;
                case 'en':
                    forceReloadNumberTip = 'The network is unstable , Trying to reopen the courseware ...' + h5DocumentInstance.forceReloadNumber + '';
                    break;
                case 'en':
                    forceReloadNumberTip = 'ネットが不安定です、教材を開きなおしています' + h5DocumentInstance.forceReloadNumber + '次';
                    break;
            }
            h5DocumentInstance.h5DocumentReloadNumberElement.innerHTML = forceReloadNumberTip || '';
        }
    }]);

    return H5DocumentIntermediateLayer;
}();

;
var H5DocumentIntermediateLayerInstance = new H5DocumentIntermediateLayer();
exports.default = H5DocumentIntermediateLayerInstance;
},{}],335:[function(require,module,exports){
/**
 * 白板界面与白板底层沟通的中间层处理类
 * @class WhiteboardIntermediateLayer
 * @description  提供白板界面与白板底层沟通的中间层处理类
 * @author 邱广生
 * @date 2018-04-18
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _pdfobject = require('pdfobject');

var _pdfobject2 = _interopRequireDefault(_pdfobject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

window.PDFObject = _pdfobject2.default;
if (!(window.L && window.L.Logger && window.L.Logger.debug && window.L.Logger.trace && window.L.Logger.info && window.L.Logger.warning && window.L.Logger.error)) {
    window.L = window.L || {};
    window.L.Logger = window.L.Logger || {};
    window.L.Logger.debug = window.L.Logger.debug || function () {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
        }
        console.debug.apply(console, args);
    };
    window.L.Logger.trace = window.L.Logger.trace || function () {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
        }
        console.trace.apply(console, args);
    };
    window.L.Logger.info = window.L.Logger.info || function () {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
        }
        console.info.apply(console, args);
    };
    window.L.Logger.warning = window.L.Logger.warning || function () {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
        }
        console.warn.apply(console, args);
    };
    window.L.Logger.error = window.L.Logger.error || function () {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
        }
        console.error.apply(console, args);
    };
};

if (!(Object && Object.shallowAssign) || !(Object && Object.customAssign)) {
    /*浅合并对象*/
    var shallowAssign = function shallowAssign(source) {
        try {
            return Object.assign.apply(Object.assign, arguments);
        } catch (err) {
            var copySource = undefined;
            try {
                if (!Array.isArray(source)) {
                    copySource = JSON.parse(JSON.stringify(source));
                } else {
                    copySource = source.slice(0);
                }
            } catch (e) {
                copySource = source;
            }
            for (var i = 1; i < arguments.length; i++) {
                var assignObj = arguments[i];
                if (assignObj && (typeof assignObj === 'undefined' ? 'undefined' : _typeof(assignObj)) === 'object') {
                    for (var key in assignObj) {
                        copySource[key] = assignObj[key];
                    }
                }
            }
            if ((typeof copySource === 'undefined' ? 'undefined' : _typeof(copySource)) === 'object') {
                for (var _key in copySource) {
                    source[_key] = copySource[_key];
                }
            }
            return source;
        }
    };
    if (!(Object && Object.shallowAssign)) {
        Object.shallowAssign = shallowAssign;
    }
    if (!(Object && Object.customAssign)) {
        Object.customAssign = shallowAssign;
    }
}

if (!(Object && Object.deepAssign)) {
    /*深合并对象*/
    Object.deepAssign = function (source) {
        var copySource = undefined;
        if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' && !Array.isArray(source)) {
            try {
                copySource = JSON.parse(JSON.stringify(source));
            } catch (e) {
                copySource = source;
            }
        } else if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' && Array.isArray(source)) {
            copySource = source.slice(0);
        } else {
            copySource = source;
        }
        for (var i = 1; i < arguments.length; i++) {
            var assignObj = arguments[i];
            if (assignObj && (typeof assignObj === 'undefined' ? 'undefined' : _typeof(assignObj)) === 'object') {
                for (var key in assignObj) {
                    if (copySource[key] === undefined) {
                        if (_typeof(assignObj[key]) === 'object') {
                            if (Array.isArray(assignObj[key])) {
                                copySource[key] = assignObj[key].slice(0);
                            } else {
                                copySource[key] = JSON.parse(JSON.stringify(assignObj[key]));
                            }
                        } else {
                            copySource[key] = assignObj[key];
                        }
                    } else {
                        if (_typeof(assignObj[key]) === 'object') {
                            copySource[key] = Object.deepAssign(Array.isArray(assignObj[key]) ? [] : {}, _typeof(copySource[key]) === 'object' ? copySource[key] : Array.isArray(assignObj[key]) ? [] : {}, assignObj[key]);
                        } else {
                            copySource[key] = assignObj[key];
                        }
                    }
                }
            }
        }
        if ((typeof copySource === 'undefined' ? 'undefined' : _typeof(copySource)) === 'object') {
            for (var _key2 in copySource) {
                source[_key2] = copySource[_key2];
            }
        }
        return source;
    };
}

/*RGB颜色转换为16进制*/
String.prototype.colorHex = function () {
    var that = this;
    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    if (/^(rgb|RGB)/.test(that)) {
        var aColor = that.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");
        var strHex = "#";
        for (var i = 0; i < aColor.length; i++) {
            var hex = Number(aColor[i]).toString(16);
            if (hex === "0") {
                hex += hex;
            }
            strHex += hex;
        }
        if (strHex.length !== 7) {
            strHex = that;
        }
        return strHex;
    } else if (reg.test(that)) {
        var aNum = that.replace(/#/, "").split("");
        if (aNum.length === 6) {
            return that;
        } else if (aNum.length === 3) {
            var numHex = "#";
            for (var _i = 0; _i < aNum.length; _i += 1) {
                numHex += aNum[_i] + aNum[_i];
            }
            return numHex;
        }
    } else {
        return that;
    }
};

/*16进制颜色转为RGB格式*/
String.prototype.colorRgb = function () {
    var sColor = this.toLowerCase();
    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    if (sColor && reg.test(sColor)) {
        if (sColor.length === 4) {
            var sColorNew = "#";
            for (var i = 1; i < 4; i += 1) {
                sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
            }
            sColor = sColorNew;
        }
        //处理六位的颜色值
        var sColorChange = [];
        for (var _i2 = 1; _i2 < 7; _i2 += 2) {
            sColorChange.push(parseInt("0x" + sColor.slice(_i2, _i2 + 2)));
        }
        return "RGB(" + sColorChange.join(",") + ")";
    } else {
        return sColor;
    }
};

/*白板内部使用的工具*/
var whiteboardInnerUtils = {
    /**绑定事件
     @method addEvent
     @param   {element} element 添加事件元素
             {string} eType 事件类型
             {Function} handle 事件处理器
             {Bollean} bol false 表示在事件第三阶段（冒泡）触发，true表示在事件第一阶段（捕获）触发。
     */
    addEvent: function addEvent(element, eType, handle, bol) {
        bol = bol != undefined && bol != null ? bol : false;
        if (element.addEventListener) {
            //如果支持addEventListener
            element.addEventListener(eType, handle, bol);
        } else if (element.attachEvent) {
            //如果支持attachEvent
            element.attachEvent("on" + eType, handle);
        } else {
            //否则使用兼容的onclick绑定
            element["on" + eType] = handle;
        }
    },
    /**事件解绑
     @method removeEvent
     @param   {element} element 删除事件元素
             {string} eType 事件类型
             {Function} handle 事件处理器
             {Bollean} bol false 表示在事件第三阶段（冒泡）触发，true表示在事件第一阶段（捕获）触发。
     */
    removeEvent: function removeEvent(element, eType, handle, bol) {
        if (element.addEventListener) {
            element.removeEventListener(eType, handle, bol);
        } else if (element.attachEvent) {
            element.detachEvent("on" + eType, handle);
        } else {
            element["on" + eType] = null;
        }
    },
    getOffset: function getOffset(elem) {
        var obj = {
            left: elem.offsetLeft,
            top: elem.offsetTop
        };
        while (elem != document.body) {
            elem = elem.offsetParent;
            obj.left += elem.offsetLeft;
            obj.top += elem.offsetTop;
        }
        return obj;
    }
};

/*白板类*/

var WhiteboardIntermediateLayer = function () {
    function WhiteboardIntermediateLayer() {
        _classCallCheck(this, WhiteboardIntermediateLayer);

        this.whiteboardToolsInfo = { //白板当前工具的状态
            primaryColor: "#000000", //画笔的颜色
            secondaryColor: "#ffffff", //填充的颜色
            backgroundColor: "#ffffff", //背景颜色
            pencilWidth: 5, //笔的大小
            shapeWidth: 5, //图形画笔大小
            eraserWidth: 15, //橡皮大小
            fontSize: 18, //字体大小
            fontFamily: "微软雅黑",
            fontStyle: "normal",
            fontWeight: "normal"
        };
        this.defaultProductionOptions = { //默认的白板生产配置选项
            whiteboardClear: true, //默认清除白板
            defaultWhiteboardScale: 16 / 9, //默认的白板比例
            whiteboardMagnification: 1, //默认的白板放大比例
            containerWidthAndHeight: { width: 0, height: 0 }, //白板承载容器的宽和高
            minHeight: undefined, //白板默认的最小高度
            rotateDeg: 0, //默认的旋转角度
            baseWhiteboardWidth: 960, //白板的宽高比例基数
            proprietaryTools: false, //白板是否拥有专属工具
            deawPermission: true, //白板可画权限
            tempDeawPermission: true, //白板临时可画权限（必须在可画权限的基础上）
            saveRedoStack: true, //saveRedoStack权限
            saveUndoStack: true, //saveUndoStack权限
            remindContentTime: 3000, //提示内容显示时间
            showShapeAuthor: false, //是否显示远程提示内容
            showMyselfRemindContent: false, //是否显示自己的提示内容
            isOnlyUndoRedoClearMyselfShape: false, //是否可以redo , undo , clear
            synchronizationWhiteboard: true //是否同步白板
        };
        this.whiteboardInstanceIDPrefix = "whiteboard_";
        this.whiteboardInstanceDefaultID = "whiteboard_" + 'default';
        this.whiteboardInstanceStore = {}; //白板实例存储中心
        this.whiteboardThumbnailStore = {}; //白板缩略图存储中心
        this.uniqueWhiteboard = false; //唯一的白板
        this.minMagnification = 1; //最小的白板放大倍数
        this.maxMagnification = 3; //最大的白板放大倍数
        this.historyPenTool = undefined; //使用过的画笔工具
        this.historyShapeTool = undefined; //使用过的图形工具
        this.useWhiteboardTool = {
            tool_pencil: false, //画笔
            tool_highlighter: false, //荧光笔
            tool_line: false, //直线
            tool_arrow: false, //箭头
            tool_dashed: false, //虚线
            tool_eraser: false, //橡皮
            tool_text: false, //文字
            tool_rectangle: false, //实心矩形
            tool_rectangle_empty: false, //空心矩形
            tool_ellipse: false, //实心椭圆
            tool_ellipse_empty: false, //空心椭圆
            tool_polygon: false, //多边形
            tool_eyedropper: false, //吸管
            tool_selectShape: false, //选中拖动
            tool_mouse: false, //鼠标
            tool_laser: false, //激光笔
            action_undo: false, //撤销动作
            action_redo: false, //恢复动作
            action_clear: false, //清除动作
            zoom_big: false, //放大
            zoom_small: false, //缩小
            zoom_default: false //默认
        }; //使用的白板工具
        this.specialWhiteboardInstanceIDPrefix = 'specialWhiteboardInstanceIDPrefix_';
        this.awaitSaveToWhiteboardInstanceSignallingArray = []; //等待保存到白板实例的信令数据集合
        this.commonActiveTool = 'tool_pencil'; //公共的正在使用的白板工具
        this.basicTemplateWhiteboardSignallingList = {}; //基本模板信令集合
        //this.basicTemplateWhiteboardSignallingChildrenStackStorage = {} ; //基本模板画笔数据集合-孩子集合（用户保存使用模板的白板数据栈数据,不包含模板数据）
    }

    _createClass(WhiteboardIntermediateLayer, [{
        key: 'getSpecialWhiteboardInstanceIDPrefix',


        /*获取特殊白板id前缀*/
        value: function getSpecialWhiteboardInstanceIDPrefix() {
            return this.specialWhiteboardInstanceIDPrefix;
        }
    }, {
        key: 'setUniqueWhiteboard',


        /*设置白板是否是唯一的白板*/
        value: function setUniqueWhiteboard(isUniqueWhiteboard) {
            this.uniqueWhiteboard = isUniqueWhiteboard;
        }
    }, {
        key: 'activeCommonWhiteboardTool',


        /*激活公共的白板工具*/
        value: function activeCommonWhiteboardTool(toolKey) {
            var that = this;
            if (/^tool_/.test(toolKey)) {
                //白板底层工具
                that.commonActiveTool = toolKey; //当前使用的公共的激活工具
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.values(that.whiteboardInstanceStore)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var whiteboardInstance = _step.value;

                    if (whiteboardInstance.proprietaryTools) {
                        //白板拥有专属工具则不受公共工具的管理
                        continue;
                    }
                    var id = whiteboardInstance.id;
                    that.activeWhiteboardTool(toolKey, id);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: 'updateCommonWhiteboardToolsInfo',


        /*更新whiteboardToolsInfo*/
        value: function updateCommonWhiteboardToolsInfo(whiteboardToolsInfo) {
            if (whiteboardToolsInfo && (typeof whiteboardToolsInfo === 'undefined' ? 'undefined' : _typeof(whiteboardToolsInfo)) === 'object') {
                Object.deepAssign(this.whiteboardToolsInfo, whiteboardToolsInfo);
            }
        }
    }, {
        key: 'getWhiteboardDefaultFiledata',


        /*获取白板的默认filedata数据*/
        value: function getWhiteboardDefaultFiledata(replaceJson) {
            var filedata = {
                fileid: 0,
                currpage: 1,
                pagenum: 1,
                filetype: 'whiteboard',
                filename: 'whiteboard',
                swfpath: '',
                pptslide: 1,
                pptstep: 0,
                steptotal: 0
            };
            if (replaceJson && (typeof replaceJson === 'undefined' ? 'undefined' : _typeof(replaceJson)) === 'object') {
                Object.deepAssign(filedata, replaceJson);
            }
            return filedata;
        }
    }, {
        key: 'handlerPubmsg_SharpsChange',


        /*处理pubmsg的SharpsChange信令数据(注意：只能有一个地方调用)*/
        value: function handlerPubmsg_SharpsChange(pubmsgData) {
            if (pubmsgData) {
                if (pubmsgData.data && typeof pubmsgData.data === 'string') {
                    pubmsgData.data = JSON.parse(pubmsgData.data);
                }
                this._saveBasicTemplateWhiteboardSignallingData(pubmsgData, 'pubmsg');
                var whiteboardID = pubmsgData.data.whiteboardID;
                var whiteboardInstance = this._getWhiteboardInstanceById(whiteboardID);
                if (!whiteboardInstance) {
                    pubmsgData.source = 'pubmsg';
                    this.awaitSaveToWhiteboardInstanceSignallingArray.push(pubmsgData);
                    return;
                }
                if (pubmsgData && pubmsgData.data != null && (pubmsgData.data.eventType === "shapeSaveEvent" || pubmsgData.data.eventType === "clearEvent" || pubmsgData.data.eventType === "redoEvent" || pubmsgData.data.eventType === "laserMarkEvent")) {
                    pubmsgData.source = 'pubmsg';
                    if (pubmsgData.data.eventType === "laserMarkEvent") {
                        this._receiveSnapshot(pubmsgData, whiteboardInstance);
                    } else {
                        var shapeName = pubmsgData.id.substring(pubmsgData.id.lastIndexOf("###_") + 4);
                        if (shapeName) {
                            var shapeNameArr = shapeName.split("_");
                            shapeName = shapeNameArr[0] + '_' + shapeNameArr[1] + '_' + shapeNameArr[2];
                            var remoteFileid = shapeNameArr[1];
                            var remoteCurrpage = shapeNameArr[2];
                            var currFileData = this.getWhiteboardFiledata(whiteboardID);
                            if (currFileData.fileid == remoteFileid && currFileData.currpage == remoteCurrpage) {
                                this._receiveSnapshot(pubmsgData, whiteboardInstance);
                                pubmsgData.remindContent = pubmsgData.data && pubmsgData.data.nickname || pubmsgData.remindContent;
                                if (whiteboardInstance.showShapeAuthor && pubmsgData.remindContent && pubmsgData.fromID != whiteboardInstance.myselfId) {
                                    this._handlerShowRemoteRemindContentFromPubmsgData(whiteboardInstance, pubmsgData);
                                }
                            }
                            if (whiteboardInstance.waitingProcessShapeData[shapeName] === null || whiteboardInstance.waitingProcessShapeData[shapeName] === undefined) {
                                whiteboardInstance.waitingProcessShapeData[shapeName] = [];
                                whiteboardInstance.waitingProcessShapeData[shapeName].push(pubmsgData);
                            } else {
                                whiteboardInstance.waitingProcessShapeData[shapeName].push(pubmsgData);
                            }
                        }
                    };
                }
            }
        }
    }, {
        key: 'handlerDelmsg_SharpsChange',


        /*处理delmsg的SharpsChange信令数据(注意：只能有一个地方调用)*/
        value: function handlerDelmsg_SharpsChange(delmsgData) {
            if (delmsgData) {
                if (delmsgData.data && typeof delmsgData.data === 'string') {
                    delmsgData.data = JSON.parse(delmsgData.data);
                }
                this._saveBasicTemplateWhiteboardSignallingData(delmsgData, 'delmsg');
                var whiteboardID = delmsgData.data.whiteboardID;
                var whiteboardInstance = this._getWhiteboardInstanceById(whiteboardID);
                if (!whiteboardInstance) {
                    delmsgData.source = 'delmsg';
                    for (var i = this.awaitSaveToWhiteboardInstanceSignallingArray.length - 1; i >= 0; i--) {
                        var awaitSaveToWhiteboardInstanceSignalling = this.awaitSaveToWhiteboardInstanceSignallingArray[i];
                        if (awaitSaveToWhiteboardInstanceSignalling.id === delmsgData.id) {
                            this.awaitSaveToWhiteboardInstanceSignallingArray.splice(i, 1);
                            break;
                        }
                    }
                    //this.awaitSaveToWhiteboardInstanceSignallingArray.push(delmsgData);
                    return;
                }
                var shapeName = delmsgData.id.substring(delmsgData.id.lastIndexOf("###_") + 4);
                if (shapeName) {
                    var shapeNameArr = shapeName.split("_");
                    shapeName = shapeNameArr[0] + '_' + shapeNameArr[1] + '_' + shapeNameArr[2];
                    var remoteFileid = shapeNameArr[1];
                    var remoteCurrpage = shapeNameArr[2];
                    var currFileData = this.getWhiteboardFiledata(whiteboardID);
                    delmsgData.source = 'delmsg';
                    if (currFileData.fileid == remoteFileid && currFileData.currpage == remoteCurrpage) {
                        this._receiveSnapshot(delmsgData, whiteboardInstance);
                    }
                    if (whiteboardInstance.waitingProcessShapeData[shapeName] && Array.isArray(whiteboardInstance.waitingProcessShapeData[shapeName]) && whiteboardInstance.waitingProcessShapeData[shapeName].length > 0) {
                        for (var _i3 = whiteboardInstance.waitingProcessShapeData[shapeName].length - 1; _i3 >= 0; _i3--) {
                            var waitingProcessShape = whiteboardInstance.waitingProcessShapeData[shapeName][_i3];
                            if (waitingProcessShape.id === delmsgData.id) {
                                whiteboardInstance.waitingProcessShapeData[shapeName].splice(_i3, 1);
                                break;
                            }
                        }
                    }
                }
            }
        }
    }, {
        key: 'handlerMsglist_SharpsChange',


        /*处理msglist的SharpsChange信令数据(注意：只能有一个地方调用)*/
        value: function handlerMsglist_SharpsChange(sharpsChangeArray) {
            var needLoadCurrentPageList = {};
            for (var i = 0; i < sharpsChangeArray.length; i++) {
                var waitingProcessData = sharpsChangeArray[i];
                if (waitingProcessData.data && typeof waitingProcessData.data === 'string') {
                    waitingProcessData.data = JSON.parse(waitingProcessData.data);
                }
                /*  if( waitingProcessData.data.whiteboardID!==undefined  && waitingProcessData.data.dependenceBaseboardWhiteboardID !== undefined  &&  this.basicTemplateWhiteboardSignallingChildrenStackStorage[waitingProcessData.data.dependenceBaseboardWhiteboardID] && this.basicTemplateWhiteboardSignallingChildrenStackStorage[waitingProcessData.data.dependenceBaseboardWhiteboardID][waitingProcessData.data.whiteboardID] ){
                      this.basicTemplateWhiteboardSignallingChildrenStackStorage[waitingProcessData.data.dependenceBaseboardWhiteboardID][waitingProcessData.data.whiteboardID] = null ;
                      delete  this.basicTemplateWhiteboardSignallingChildrenStackStorage[waitingProcessData.data.dependenceBaseboardWhiteboardID][waitingProcessData.data.whiteboardID] ;
                  }*/
                this._saveBasicTemplateWhiteboardSignallingData(waitingProcessData, 'msglist');
                var whiteboardID = waitingProcessData.data.whiteboardID;
                var whiteboardInstance = this._getWhiteboardInstanceById(whiteboardID);
                if (!whiteboardInstance) {
                    waitingProcessData.source = 'msglist';
                    this.awaitSaveToWhiteboardInstanceSignallingArray.push(waitingProcessData);
                    continue;
                }
                if (waitingProcessData.data != null && (waitingProcessData.data.eventType === "shapeSaveEvent" || waitingProcessData.data.eventType === "clearEvent" || waitingProcessData.data.eventType === "redoEvent")) {
                    waitingProcessData.source = 'msglist';
                    var shapeName = waitingProcessData.id.substring(waitingProcessData.id.lastIndexOf("###_") + 4);
                    if (shapeName) {
                        var shapeNameArr = shapeName.split("_");
                        shapeName = shapeNameArr[0] + '_' + shapeNameArr[1] + '_' + shapeNameArr[2];
                        var remoteFileid = shapeNameArr[1];
                        var remoteCurrpage = shapeNameArr[2];
                        var currFileData = this.getWhiteboardFiledata(whiteboardID);
                        if (currFileData.fileid == remoteFileid && currFileData.currpage == remoteCurrpage) {
                            needLoadCurrentPageList[whiteboardInstance.id] = true;
                        }
                        if (whiteboardInstance.waitingProcessShapeData[shapeName] === null || whiteboardInstance.waitingProcessShapeData[shapeName] === undefined) {
                            whiteboardInstance.waitingProcessShapeData[shapeName] = [];
                            whiteboardInstance.waitingProcessShapeData[shapeName].push(waitingProcessData);
                        } else {
                            whiteboardInstance.waitingProcessShapeData[shapeName].push(waitingProcessData);
                        }
                    }
                }
            }
            if (needLoadCurrentPageList && Object.keys(needLoadCurrentPageList).length) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = Object.keys(needLoadCurrentPageList)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var id = _step2.value;

                        this.saveWhiteboardStackToStorage(id);
                        this.updateWhiteboardFiledata(id, {});
                        this.loadCurrpageWhiteboard(id);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }
        }
    }, {
        key: 'preloadWhiteboardImg',


        /*预加载白板的图片*/
        value: function preloadWhiteboardImg(imgUrl, callback) {
            if (!imgUrl) {
                L.Logger.warning('preload img url is not esixt!');return;
            };
            var img = new Image();
            img.onload = function () {
                //图片加载成功后
                if (callback && typeof callback === 'function') {
                    callback();
                }
            };
            img.onerror = function (err) {
                L.Logger.error('preload img  fail , img url is ' + imgUrl);
            };
            img.src = imgUrl;
        }
    }, {
        key: 'productionWhiteboard',


        /*初始化白板权限
         * @params
         whiteboardElementId:白板元素id（string , required） thumbnailId:缩略图元素id（string ） ，
         options:配置项(object)
         */
        value: function productionWhiteboard() {
            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                whiteboardElementId = _ref.whiteboardElementId,
                thumbnailId = _ref.thumbnailId,
                _ref$productionOption = _ref.productionOptions,
                productionOptions = _ref$productionOption === undefined ? {} : _ref$productionOption,
                _ref$handler = _ref.handler,
                handler = _ref$handler === undefined ? {} : _ref$handler,
                id = _ref.id;

            var that = this;
            if (!whiteboardElementId) {
                L.Logger.error('whiteboardElementId is required!');return;
            }
            var whiteboardInstanceID = that._getWhiteboardInstanceID(id);
            var whiteboardInstance = that._getWhiteboardInstanceByID(whiteboardInstanceID);
            if (whiteboardInstance) {
                L.Logger.error('The production whiteboard(whiteboardInstanceID:' + whiteboardInstanceID + ') fails, the whiteboard already exists!');return whiteboardInstance;
            }
            whiteboardInstance = {};
            var whiteboardElement = document.getElementById(whiteboardElementId);
            if (!whiteboardElement) {
                L.Logger.error('Whiteboard elements do not exist , element id is:' + whiteboardElementId + '!');return whiteboardInstance;
            }
            var whiteboardInstanceElement = document.createElement('div');
            var whiteboardInstanceElementId = whiteboardElementId + '_whiteboardInstance';
            whiteboardInstanceElement.className = 'whiteboard-instance-element';
            whiteboardInstanceElement.id = whiteboardInstanceElementId;
            whiteboardElement.appendChild(whiteboardInstanceElement);
            productionOptions = Object.deepAssign({}, that.defaultProductionOptions, productionOptions);
            that.whiteboardInstanceStore[whiteboardInstanceID] = whiteboardInstance; //白板实例
            whiteboardInstance.filedata = productionOptions.filedata || this.getWhiteboardDefaultFiledata({
                fileid: whiteboardInstanceID === 'whiteboard_default' ? 0 : id
            });
            whiteboardInstance.baseWhiteboardWidth = productionOptions.baseWhiteboardWidth;
            whiteboardInstance.whiteboardInstanceID = whiteboardInstanceID; //白板id
            whiteboardInstance.parcelAncestorElementId = productionOptions.parcelAncestorElementId; //包裹的祖先元素的id
            whiteboardInstance.isBaseboard = productionOptions.isBaseboard; //是否是模板白板
            whiteboardInstance.needLooadBaseboard = productionOptions.needLooadBaseboard; //是否需要加载模板数据
            whiteboardInstance.dependenceBaseboardWhiteboardID = productionOptions.dependenceBaseboardWhiteboardID; //依赖的模板白板的id
            whiteboardInstance.defaultWhiteboardScale = productionOptions.defaultWhiteboardScale; //白板默认比例
            whiteboardInstance.watermarkImageScale = productionOptions.defaultWhiteboardScale; //白板比例
            whiteboardInstance.whiteboardMagnification = productionOptions.whiteboardMagnification; //白板缩放倍数
            whiteboardInstance.remindContentTime = productionOptions.remindContentTime; //提示内容显示时间
            whiteboardInstance.showShapeAuthor = productionOptions.showShapeAuthor; //是否显示远程提示内容
            whiteboardInstance.showMyselfRemindContent = productionOptions.showMyselfRemindContent; //是否显示自己的提示内容
            whiteboardInstance.associatedMsgID = productionOptions.associatedMsgID; //绑定的信令消息id
            whiteboardInstance.associatedUserID = productionOptions.associatedUserID; //绑定的用户id
            whiteboardInstance.proprietaryTools = productionOptions.proprietaryTools; //白板是否拥有专属工具
            whiteboardInstance.minHeight = productionOptions.minHeight; //白板最小的高度
            whiteboardInstance.rotateDeg = productionOptions.rotateDeg; //白板的旋转角度
            whiteboardInstance.deawPermission = productionOptions.deawPermission; //白板可画权限
            whiteboardInstance.tempDeawPermission = productionOptions.tempDeawPermission; //白板临时可画权限（必须在可画权限的基础上）
            whiteboardInstance.nickname = productionOptions.nickname; //白板属于的用户的nickname
            whiteboardInstance.userid = productionOptions.userid; //白板属于的用户的userid
            whiteboardInstance.insertPictureRule = productionOptions.insertPictureRule || 'default';
            whiteboardInstance.synchronizationWhiteboard = productionOptions.synchronizationWhiteboard; //是否同步白板
            whiteboardInstance.whiteboardToolsInfo = Object.deepAssign({}, that.whiteboardToolsInfo); //白板工具信息
            if (productionOptions.primaryColor) {
                whiteboardInstance.whiteboardToolsInfo.primaryColor = productionOptions.primaryColor;
            }
            if (productionOptions.secondaryColor) {
                whiteboardInstance.whiteboardToolsInfo.secondaryColor = productionOptions.secondaryColor;
            }
            if (productionOptions.backgroundColor) {
                whiteboardInstance.whiteboardToolsInfo.backgroundColor = productionOptions.backgroundColor;
            }
            if (productionOptions.pencilWidth) {
                whiteboardInstance.whiteboardToolsInfo.pencilWidth = productionOptions.pencilWidth;
            }
            if (productionOptions.shapeWidth) {
                whiteboardInstance.whiteboardToolsInfo.shapeWidth = productionOptions.shapeWidth;
            }
            if (productionOptions.eraserWidth) {
                whiteboardInstance.whiteboardToolsInfo.eraserWidth = productionOptions.eraserWidth;
            }
            if (productionOptions.fontSize) {
                whiteboardInstance.whiteboardToolsInfo.fontSize = productionOptions.fontSize;
            }
            if (productionOptions.fontFamily) {
                whiteboardInstance.whiteboardToolsInfo.fontFamily = productionOptions.fontFamily;
            }
            if (productionOptions.fontStyle) {
                whiteboardInstance.whiteboardToolsInfo.fontStyle = productionOptions.fontStyle;
            }
            if (productionOptions.fontWeight) {
                whiteboardInstance.whiteboardToolsInfo.fontWeight = productionOptions.fontWeight;
            }
            whiteboardInstance.saveRedoStack = productionOptions.saveRedoStack; //白板的saveRedoStack权限
            whiteboardInstance.saveUndoStack = productionOptions.saveUndoStack; //白板的saveUndoStack权限
            whiteboardInstance.imageThumbnailId = productionOptions.imageThumbnailId; //白板的图片缩略图Id
            whiteboardInstance.imageThumbnailTipContent = productionOptions.imageThumbnailTipContent; //白板的图片缩略图提示信息
            whiteboardInstance.registerWhiteboardToolsList = {}; //白板标注工具注册集合
            whiteboardInstance.stackStorage = {}; //白板数据栈对象
            whiteboardInstance.handler = {}; //处理函数集合
            whiteboardInstance.handler.sendSignallingToServer = handler.sendSignallingToServer;
            whiteboardInstance.handler.delSignallingToServer = handler.delSignallingToServer;
            whiteboardInstance.handler.resizeWhiteboardSizeCallback = handler.resizeWhiteboardSizeCallback;
            whiteboardInstance.handler.noticeUpdateToolDescCallback = handler.noticeUpdateToolDescCallback;
            whiteboardInstance.handler.noticeUpdateWhiteboardFiledataCallback = handler.noticeUpdateWhiteboardFiledataCallback;
            whiteboardInstance.handler.whiteboardWatermarkImageOnloadCallback = handler.whiteboardWatermarkImageOnloadCallback;
            whiteboardInstance.handler.whiteboardWatermarkImageOnFailureCallback = handler.whiteboardWatermarkImageOnFailureCallback;
            whiteboardInstance.handler.receiveActionCommandCallback = handler.receiveActionCommandCallback;
            whiteboardInstance.active = true; //白板激活状态
            whiteboardInstance.containerWidthAndHeight = productionOptions.containerWidthAndHeight;
            whiteboardInstance.useImgOriginalSizeToContainerWidthAndHeight = productionOptions.useImgOriginalSizeToContainerWidthAndHeight;
            whiteboardInstance.myselfId = productionOptions.myselfId;
            whiteboardInstance.isOnlyUndoRedoClearMyselfShape = productionOptions.isOnlyUndoRedoClearMyselfShape;
            whiteboardInstance.historyPenTool = this.historyPenTool; //使用过的画笔工具
            whiteboardInstance.historyShapeTool = this.historyShapeTool; //使用过的图形工具

            //tkpc2.0.8
            whiteboardInstance.useToolKey = productionOptions.useToolKey;
            whiteboardInstance.waitingProcessShapeData = {}; //等待处理的白板数据
            whiteboardInstance.whiteboardElementId = whiteboardElementId; //白板节点的id
            whiteboardInstance.whiteboardElement = whiteboardElement; //白板的节点元素
            whiteboardInstance.whiteboardInstanceElementId = whiteboardInstanceElementId; //白板实例节点的id
            whiteboardInstance.whiteboardInstanceElement = whiteboardInstanceElement; //白板实例节点元素
            whiteboardInstance.id = id; //文件id
            whiteboardInstance.thumbnailId = thumbnailId; //白板缩略图元素id
            whiteboardInstance.lc = window.LC.init(whiteboardInstance.whiteboardInstanceElement); //白板对象
            whiteboardInstance.lc.backingScale = 1; //设置canvas不受电脑分辨率影响
            whiteboardInstance.lc.setColor('primary', whiteboardInstance.whiteboardToolsInfo.primaryColor); //画笔颜色
            whiteboardInstance.lc.setColor('secondary', whiteboardInstance.whiteboardToolsInfo.secondaryColor); //填充颜色
            whiteboardInstance.lc.setColor('background', whiteboardInstance.whiteboardToolsInfo.backgroundColor); //背景颜色
            whiteboardInstance.lc.setWatermarkImageToLcBackground(false);
            whiteboardInstance.lc.setZoom(1);
            whiteboardInstance.lc.setPan(0, 0);
            whiteboardInstance.lc.on("shapeSave", that._handlerShapeSaveEvent.bind(that, whiteboardInstance));
            /*    whiteboardInstance.lc.on( "undo" , that._handlerUndoEvent.bind(that , whiteboardInstance ) ) ;
                whiteboardInstance.lc.on( "redo" ,that._handlerRedoEvent.bind(that , whiteboardInstance ) ) ;
                whiteboardInstance.lc.on( "clear" ,that._handlerClearEvent.bind(that , whiteboardInstance ) ) ;*/
            whiteboardInstance.lc.on("sendUndo", that._handlerUndoEvent.bind(that, whiteboardInstance));
            whiteboardInstance.lc.on("sendRedo", that._handlerRedoEvent.bind(that, whiteboardInstance));
            whiteboardInstance.lc.on("sendClear", that._handlerClearEvent.bind(that, whiteboardInstance));
            whiteboardInstance.lc.on('drawingChange', this._handlerDrawingChangeEvent.bind(that, whiteboardInstance));
            //      whiteboardInstance.lc.on('snapshotLoad ', this.snapshotLoadEvent);
            //      whiteboardInstance.lc.on("doClearRedoStack",this.doClearRedoStackEvent) ;
            //      whiteboardInstance.lc.on("primaryColorChange",this.primaryColorChangeEvent) ;
            //      whiteboardInstance.lc.on("secondaryColorChange",this.secondaryColorChangeEvent) ;
            //      whiteboardInstance.lc.on("backgroundColorChange",this.backgroundColorChangeEvent) ;
            //      whiteboardInstance.lc.on("drawStart",this.drawStartEvent) ;
            //      whiteboardInstance.lc.on("drawContinue",this.drawContinueEvent) ;
            //      whiteboardInstance.lc.on("drawEnd",this.drawEndEvent) ;
            //      whiteboardInstance.lc.on("toolChange",this.toolChangeEvent) ;
            //      whiteboardInstance.lc.on('pan',  this.panEvent);
            //      whiteboardInstance.lc.on('zoom',  this.zoomEvent);
            //      whiteboardInstance.lc.on("repaint",this.repaintEvent) ;
            //      whiteboardInstance.lc.on("lc-pointerdown",whiteboardInstance.lcPointerdownEvent) ;
            //      whiteboardInstance.lc.on("lc-pointerup",whiteboardInstance.lcPointerupEvent) ;
            //      whiteboardInstance.lc.on("lc-pointermove",whiteboardInstance.lcPointermoveEvent) ;
            //      whiteboardInstance.lc.on("lc-pointerdrag",whiteboardInstance.lcPointerdragEvent) ;
            whiteboardInstance.activeTool = undefined;
            whiteboardInstance.lc.myselfId = whiteboardInstance.myselfId;
            whiteboardInstance.lc.isOnlyUndoRedoClearMyselfShape = whiteboardInstance.isOnlyUndoRedoClearMyselfShape;
            if (productionOptions.whiteboardClear) {
                that.clearWhiteboardAllDataById(id);
            };
            /*   if( whiteboardInstance.dependenceBaseboardWhiteboardID !== undefined  && whiteboardInstance.id !== undefined){
                   if(that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.dependenceBaseboardWhiteboardID]  && that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.dependenceBaseboardWhiteboardID][whiteboardInstance.id] ){
                       if(!whiteboardInstance.isBaseboard){
                           whiteboardInstance.stackStorage = Object.deepAssign({} , that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.dependenceBaseboardWhiteboardID][whiteboardInstance.id]);
                       }
                       that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.dependenceBaseboardWhiteboardID][whiteboardInstance.id]  = null ;
                       delete that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.dependenceBaseboardWhiteboardID][whiteboardInstance.id]  ;
                   }
               }*/
            that._changeWhiteboardDeawPermission(whiteboardInstance.deawPermission, whiteboardInstance);
            that._changeWhiteboardTemporaryDeawPermission(whiteboardInstance.tempDeawPermission, whiteboardInstance);
            that._saveAwaitSaveToWhiteboardInstanceSignallingToWhiteboardInstance(whiteboardInstance); //保存等待的白板信令数据到相应的白板实例中
            that.activeWhiteboardTool(!whiteboardInstance.proprietaryTools ? that.commonActiveTool : whiteboardInstance.useToolKey ? whiteboardInstance.useToolKey : 'tool_pencil', id);
            that._zoomIsDisable(whiteboardInstance);
            that._actionIsDisable(whiteboardInstance);
            that._noticeUpdateToolDesc(whiteboardInstance);
            that._resizeWhiteboardHandler(whiteboardInstance);
            that._noticeNpdateWhiteboardToolsInfo(whiteboardInstance);
            return whiteboardInstance;
        }
    }, {
        key: 'changeWhiteboardExclusiveAttribute',


        /*改变白板的专属属性*/
        value: function changeWhiteboardExclusiveAttribute(id, changeExclusiveAttribute) {
            if (changeExclusiveAttribute && (typeof changeExclusiveAttribute === 'undefined' ? 'undefined' : _typeof(changeExclusiveAttribute)) === 'object') {
                var whiteboardInstance = this._getWhiteboardInstanceById(id);
                if (!whiteboardInstance) {
                    L.Logger.error('[changeWhiteboardExclusiveAttribute]There are no white board Numbers that belong to id ' + id);return;
                }
                for (var key in changeExclusiveAttribute) {
                    if (whiteboardInstance.hasOwnProperty(key)) {
                        whiteboardInstance[key] = changeExclusiveAttribute[key];
                        if (key === 'myselfId' || key === 'isOnlyUndoRedoClearMyselfShape') {
                            if (whiteboardInstance.lc) {
                                whiteboardInstance.lc[key] = whiteboardInstance[key];
                            }
                        } else if (key === 'defaultWhiteboardScale') {
                            if (!whiteboardInstance.currentWatermarkImageUrl) {
                                whiteboardInstance.watermarkImageScale = whiteboardInstance.defaultWhiteboardScale;
                                whiteboardInstance.lc.watermarkImage = null;
                                this._resizeWhiteboardHandler(whiteboardInstance);
                            }
                        } else if (key === 'insertPictureRule') {
                            this._resizeWhiteboardHandler(whiteboardInstance);
                        }
                    }
                }
            }
        }

        /*更新图片缩略图ID*/

    }, {
        key: 'updateImageThumbnailId',
        value: function updateImageThumbnailId(id, imageThumbnailId) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateImageThumbnailId]There are no white board Numbers that belong to id ' + id);return;
            }
            whiteboardInstance.imageThumbnailId = imageThumbnailId;
            this._saveImageBase64ToImageThumbnail(whiteboardInstance);
        }
    }, {
        key: 'updateWhiteboardSaveRedoStackAndSaveUndoStack',


        /*更新白板saveRedoStack、saveUndoStack权限*/
        value: function updateWhiteboardSaveRedoStackAndSaveUndoStack(id, _ref2) {
            var saveRedoStack = _ref2.saveRedoStack,
                saveUndoStack = _ref2.saveUndoStack;

            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateSaveRedoStackAndSaveUndoStack]There are no white board Numbers that belong to id ' + id);return;
            }
            whiteboardInstance.saveRedoStack = saveRedoStack !== undefined ? saveRedoStack : whiteboardInstance.saveRedoStack;
            whiteboardInstance.saveUndoStack = saveUndoStack !== undefined ? saveUndoStack : whiteboardInstance.saveUndoStack;
        }

        /*更新isBaseboard*/

    }, {
        key: 'updateIsBaseboard',
        value: function updateIsBaseboard(id, isBaseboard) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateIsBaseboard]There are no white board Numbers that belong to id ' + id);return;
            }
            whiteboardInstance.isBaseboard = isBaseboard;
        }

        /*更新dependenceBaseboardWhiteboardID*/

    }, {
        key: 'updateDependenceBaseboardWhiteboardID',
        value: function updateDependenceBaseboardWhiteboardID(id, dependenceBaseboardWhiteboardID) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateDependenceBaseboardWhiteboardID]There are no white board Numbers that belong to id ' + id);return;
            }
            whiteboardInstance.dependenceBaseboardWhiteboardID = dependenceBaseboardWhiteboardID;
        }

        /*更新提示内容显示权限*/

    }, {
        key: 'updateShowRemindContent',
        value: function updateShowRemindContent(id, showShapeAuthor, showMyselfRemindContent) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateShowRemindContent]There are no white board Numbers that belong to id ' + id);return;
            }
            whiteboardInstance.showShapeAuthor = showShapeAuthor || whiteboardInstance.showShapeAuthor;
            whiteboardInstance.showMyselfRemindContent = showMyselfRemindContent || whiteboardInstance.showMyselfRemindContent;
        }
    }, {
        key: 'updateWhiteboardAssociatedMsgID',


        /*生产白板提示内容*/
        /*productionWhiteboardRemindContent(id , x , y , content){
            let whiteboardInstance = this._getWhiteboardInstanceById(id);
            if(!whiteboardInstance){L.Logger.error( '[productionWhiteboardRemindContent]There are no white board Numbers that belong to id '+id ) ;return ;}
            this._productionWhiteboardRemindContent(id , x , y , content);
        }*/

        /*更新白板信令绑定的消息id*/
        value: function updateWhiteboardAssociatedMsgID(id, associatedMsgID) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateWhiteboardAssociatedMsgID]There are no white board Numbers that belong to id ' + id);return;
            }
            whiteboardInstance.associatedMsgID = associatedMsgID;
        }

        /*更新白板信令绑定的用户id*/

    }, {
        key: 'updateWhiteboardAssociatedUserID',
        value: function updateWhiteboardAssociatedUserID(id, associatedUserID) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateWhiteboardAssociatedUserID]There are no white board Numbers that belong to id ' + id);return;
            }
            whiteboardInstance.associatedUserID = associatedUserID;
        }

        /*白板实例是否存在，通过id判断*/

    }, {
        key: 'hasWhiteboardById',
        value: function hasWhiteboardById(id) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            return whiteboardInstance !== undefined && whiteboardInstance !== null;
        }
    }, {
        key: 'clearWhiteboardAllDataById',


        /*清除白板的所有数据，包括存储的数据,通过id*/
        value: function clearWhiteboardAllDataById(id) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[clear]There are no white board Numbers that belong to id ' + id);return;
            }
            that._clearWhiteboardAllDataByInstance(whiteboardInstance);
        }
    }, {
        key: 'productionSpecialId',


        /*生产特殊的id*/
        value: function productionSpecialId(id) {
            var that = this;
            var specialId = that.specialWhiteboardInstanceIDPrefix + id;
            return specialId;
        }

        /*销毁白板实例，通过id*/

    }, {
        key: 'destroyWhiteboardInstance',
        value: function destroyWhiteboardInstance(id) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[destroy]There are no white board Numbers that belong to id ' + id);return;
            };
            that._destroyWhiteboardInstance(whiteboardInstance);
        }
    }, {
        key: 'clearRedoAndUndoStack',


        /*清空白板且清除白板数据栈*/
        value: function clearRedoAndUndoStack(id, clearRedoAndUndoStackJson) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[clearRedoAndUndoStack]There are no white board Numbers that belong to id ' + id);return;
            };
            that._clearRedoAndUndoStack(whiteboardInstance, clearRedoAndUndoStackJson);
        }
    }, {
        key: 'resetDedaultWhiteboardMagnification',


        /*重置白板的缩放比*/
        value: function resetDedaultWhiteboardMagnification(id) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[resetDedaultWhiteboardMagnification]There are no white board Numbers that belong to id ' + id);return;
            };
            whiteboardInstance.whiteboardMagnification = that.defaultProductionOptions.whiteboardMagnification;
            that._zoomIsDisable(whiteboardInstance);
            that._resizeWhiteboardHandler(whiteboardInstance);
        }
    }, {
        key: 'updateWhiteboardMagnification',


        /*更新白板的缩放比*/
        value: function updateWhiteboardMagnification(id, whiteboardMagnification) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateWhiteboardMagnification]There are no white board Numbers that belong to id ' + id);return;
            };
            whiteboardInstance.whiteboardMagnification = whiteboardMagnification;
        }
    }, {
        key: 'updateWhiteboardWatermarkImageScale',


        /*更新白板的watermarkImageScale*/
        value: function updateWhiteboardWatermarkImageScale(id) {
            var watermarkImageScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultProductionOptions.watermarkImageScale;

            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateWhiteboardWatermarkImageScale]There are no white board Numbers that belong to id ' + id);return;
            };
            this._updateWhiteboardWatermarkImageScale(whiteboardInstance, watermarkImageScale);
        }
    }, {
        key: 'getFileExt',
        value: function getFileExt(filepath) {
            if (filepath != "") {
                var pos = "." + filepath.replace(/.+\./, "");
                return pos;
            }
        }

        /*设置白板的图片*/

    }, {
        key: 'setWhiteboardWatermarkImage',
        value: function setWhiteboardWatermarkImage(id, watermarkImageUrl) {
            var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
                _ref3$resetDedaultWhi = _ref3.resetDedaultWhiteboardMagnification,
                resetDedaultWhiteboardMagnification = _ref3$resetDedaultWhi === undefined ? true : _ref3$resetDedaultWhi,
                loadSucceedCallback = _ref3.loadSucceedCallback,
                loadFailureCallback = _ref3.loadFailureCallback;

            var that = this;
            L.Logger.debug('[setWhiteboardWatermarkImage]setWhiteboardWatermarkImage watermarkImageUrl:' + watermarkImageUrl);
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[setWhiteboardWatermarkImage]There are no white board Numbers that belong to id ' + id);return;
            };
            whiteboardInstance.currentWatermarkImageUrl = watermarkImageUrl;
            if (resetDedaultWhiteboardMagnification) {
                that.resetDedaultWhiteboardMagnification(id);
            }
            if (!watermarkImageUrl) {
                //图片地址没有，则使用默认白板
                that.hideWhiteboardCanvasBackground(id);
                whiteboardInstance.lc.watermarkScale = 1;
                that._resizeWhiteboardByScale(whiteboardInstance, { isChangeWatermarkScale: false });
                that._hideWhiteboardLoading(whiteboardInstance);
                whiteboardInstance.lc.watermarkImage = null;
                whiteboardInstance.lc.customCanvasBackgroundElement.style.backgroundImage = '';
            } else {
                that.showWhiteboardCanvasBackground(id);
                that._showWhiteboardLoading(whiteboardInstance);
                if (that.getFileExt(watermarkImageUrl) == '.pdf' && _pdfobject2.default.supportsPDFs && window.PDFObject) {
                    whiteboardInstance.lc.setPdf(watermarkImageUrl, function () {
                        that._hideWhiteboardLoading(whiteboardInstance);
                    });
                    return false;
                }
                clearTimeout(whiteboardInstance.setWhiteboardWatermarkImageTimer);
                whiteboardInstance.setWhiteboardWatermarkImageTimer = setTimeout(function () {
                    var watermarkImage = new Image();
                    watermarkImage.onload = function () {
                        if (!whiteboardInstance.currentWatermarkImageUrl) {
                            //HACK 此处处理动态PPT和H5课件不响应图片加载完后更改白板比例
                            // whiteboardInstance.watermarkImageScale = whiteboardInstance.defaultWhiteboardScale ;
                            whiteboardInstance.lc.watermarkImage = null;
                            that._resizeWhiteboardHandler(whiteboardInstance);
                        } else {
                            var watermarkImageScale = watermarkImage.width / watermarkImage.height;
                            if (whiteboardInstance.useImgOriginalSizeToContainerWidthAndHeight) {
                                whiteboardInstance.containerWidthAndHeight = { width: watermarkImage.width, height: watermarkImage.height };
                            }
                            whiteboardInstance.lc.setWatermarkImage(watermarkImage);
                            that._resizeWhiteboardByScale(whiteboardInstance, { watermarkImage: watermarkImage, watermarkImageScale: watermarkImageScale });
                            if (whiteboardInstance.handler.whiteboardWatermarkImageOnloadCallback && typeof whiteboardInstance.handler.whiteboardWatermarkImageOnloadCallback === 'function') {
                                whiteboardInstance.handler.whiteboardWatermarkImageOnloadCallback({ width: watermarkImage.width, height: watermarkImage.height });
                            }
                        }
                        that._hideWhiteboardLoading(whiteboardInstance);
                        if (loadSucceedCallback && typeof loadSucceedCallback === 'function') {
                            loadSucceedCallback(watermarkImageUrl);
                        }
                    };
                    watermarkImage.onerror = function (err) {
                        L.Logger.error('img load fail , img url is ' + watermarkImageUrl);
                        if (loadFailureCallback && typeof loadFailureCallback === 'function') {
                            loadFailureCallback(watermarkImageUrl);
                        }
                        if (whiteboardInstance && whiteboardInstance.handler && whiteboardInstance.handler.whiteboardWatermarkImageOnFailureCallback && whiteboardInstance.currentWatermarkImageUrl && whiteboardInstance.currentWatermarkImageUrl === watermarkImageUrl) {
                            whiteboardInstance.handler.whiteboardWatermarkImageOnFailureCallback(watermarkImageUrl);
                        }
                    };
                    watermarkImage.src = watermarkImageUrl;
                }, 150);
            }
        }
    }, {
        key: 'resizeWhiteboardHandler',


        /*根据resize更新白板的大小*/
        value: function resizeWhiteboardHandler(id) {
            var that = this;
            if (id === undefined) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = Object.values(that.whiteboardInstanceStore)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var whiteboardInstance = _step3.value;

                        that._resizeWhiteboardHandler(whiteboardInstance);
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            } else {
                var _whiteboardInstance = that._getWhiteboardInstanceById(id);
                if (!_whiteboardInstance) {
                    L.Logger.error('[resizeWhiteboardHandler]There are no white board Numbers that belong to id ' + id);return;
                };
                that._resizeWhiteboardHandler(_whiteboardInstance);
            }
        }
    }, {
        key: 'updateContainerWidthAndHeight',


        /*更新承载容器的宽高*/
        value: function updateContainerWidthAndHeight(id) {
            var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                width = _ref4.width,
                height = _ref4.height;

            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateContainerWidthAndHeight]There are no white board Numbers that belong to id ' + id);return;
            };
            if (width === undefined || height === undefined) {
                L.Logger.error('[updateContainerWidthAndHeight]width or height is not exist , [width:' + width + ' , height:' + height + ']!');return;
            };
            whiteboardInstance.containerWidthAndHeight = { width: width, height: height };
            that._resizeWhiteboardHandler(whiteboardInstance);
        }
    }, {
        key: 'hideWhiteboardCanvasBackground',


        /*隐藏白板的背景canvas*/
        value: function hideWhiteboardCanvasBackground(id) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[hideWhiteboardCanvasBackground]There are no white board Numbers that belong to id ' + id);return;
            };
            if (whiteboardInstance.lc && whiteboardInstance.lc.backgroundCanvas) {
                whiteboardInstance.lc.backgroundCanvas.style.display = 'none';
                whiteboardInstance.lc.customCanvasBackgroundElement.style.display = 'none';
            }
        }
    }, {
        key: 'showWhiteboardCanvasBackground',


        /*显示白板的背景canvas*/
        value: function showWhiteboardCanvasBackground(id) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[showWhiteboardCanvasBackground]There are no white board Numbers that belong to id ' + id);return;
            };
            if (whiteboardInstance.lc && whiteboardInstance.lc.backgroundCanvas) {
                whiteboardInstance.lc.backgroundCanvas.style.display = '';
                whiteboardInstance.lc.customCanvasBackgroundElement.style.display = '';
            }
        }
    }, {
        key: 'hideWhiteboard',


        /*隐藏白板*/
        value: function hideWhiteboard(id) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (whiteboardInstance && whiteboardInstance.whiteboardElement) {
                whiteboardInstance.whiteboardElement.style.display = 'none';
            }
        }
    }, {
        key: 'showWhiteboard',


        /*显示白板*/
        value: function showWhiteboard(id) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (whiteboardInstance && whiteboardInstance.whiteboardElement) {
                whiteboardInstance.whiteboardElement.style.display = 'block';
            }
        }
    }, {
        key: 'updateTextFont',


        /*更新白板字体*/
        value: function updateTextFont(id) {
            var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                fontSize = _ref5.fontSize,
                fontFamily = _ref5.fontFamily,
                fontStyle = _ref5.fontStyle,
                fontWeight = _ref5.fontWeight;

            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateTextFont]There are no white board Numbers that belong to id ' + id);return;
            }
            whiteboardInstance.whiteboardToolsInfo.fontSize = fontSize !== undefined ? fontSize : whiteboardInstance.whiteboardToolsInfo.fontSize;
            whiteboardInstance.whiteboardToolsInfo.fontFamily = fontFamily !== undefined ? fontFamily : whiteboardInstance.whiteboardToolsInfo.fontFamily;
            whiteboardInstance.whiteboardToolsInfo.fontStyle = fontStyle !== undefined ? fontStyle : whiteboardInstance.whiteboardToolsInfo.fontStyle;
            whiteboardInstance.whiteboardToolsInfo.fontWeight = fontWeight !== undefined ? fontWeight : whiteboardInstance.whiteboardToolsInfo.fontWeight;
            that._noticeNpdateWhiteboardToolsInfo(whiteboardInstance);
            that._updateTextFont(whiteboardInstance);
        }
    }, {
        key: 'updateEraserWidth',


        /*更新橡皮宽度*/
        value: function updateEraserWidth(id) {
            var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                eraserWidth = _ref6.eraserWidth;

            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateEraserWidth]There are no white board Numbers that belong to id ' + id);return;
            }
            whiteboardInstance.whiteboardToolsInfo.eraserWidth = eraserWidth !== undefined ? eraserWidth : whiteboardInstance.whiteboardToolsInfo.eraserWidth;
            that._noticeNpdateWhiteboardToolsInfo(whiteboardInstance);
            that._updateEraserWidth(whiteboardInstance);
        }
    }, {
        key: 'updatePencilWidth',


        /*更新画笔的宽度*/
        value: function updatePencilWidth(id) {
            var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                pencilWidth = _ref7.pencilWidth;

            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updatePencilWidth]There are no white board Numbers that belong to id ' + id);return;
            }
            whiteboardInstance.whiteboardToolsInfo.pencilWidth = pencilWidth !== undefined ? pencilWidth : whiteboardInstance.whiteboardToolsInfo.pencilWidth;
            that._noticeNpdateWhiteboardToolsInfo(whiteboardInstance);
            that._updatePencilWidth(whiteboardInstance);
        }
    }, {
        key: 'updateWhiteboardToolsInfo',


        /*更新whiteboardToolsInfo*/
        value: function updateWhiteboardToolsInfo(id, whiteboardToolsInfo) {
            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateWhiteboardToolsInfo]There are no white board Numbers that belong to id ' + id);return;
            }
            if (whiteboardToolsInfo && (typeof whiteboardToolsInfo === 'undefined' ? 'undefined' : _typeof(whiteboardToolsInfo)) === 'object') {
                Object.deepAssign(whiteboardInstance.whiteboardToolsInfo, whiteboardToolsInfo);
                that._noticeNpdateWhiteboardToolsInfo(whiteboardInstance);
            }
        }
    }, {
        key: 'updateShapeWidth',


        /*更新形状的宽度*/
        value: function updateShapeWidth(id) {
            var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                shapeWidth = _ref8.shapeWidth;

            var that = this;
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[uploadShapeWidth]There are no white board Numbers that belong to id ' + id);return;
            }
            whiteboardInstance.whiteboardToolsInfo.shapeWidth = shapeWidth !== undefined ? shapeWidth : whiteboardInstance.whiteboardToolsInfo.shapeWidth;
            that._noticeNpdateWhiteboardToolsInfo(whiteboardInstance);
            that._updateShapeWidth(whiteboardInstance);
        }
    }, {
        key: 'updateColor',


        /*更新颜色*/
        value: function updateColor(id, colorJson) {
            var that = this;
            if (colorJson && (typeof colorJson === 'undefined' ? 'undefined' : _typeof(colorJson)) === 'object') {
                var whiteboardInstance = that._getWhiteboardInstanceById(id);
                if (!whiteboardInstance) {
                    L.Logger.error('[updateColor]There are no white board Numbers that belong to id ' + id);return;
                }
                var colorJsonCopy = {};
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = Object.entries(colorJson)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var _ref9 = _step4.value;

                        var _ref10 = _slicedToArray(_ref9, 2);

                        var key = _ref10[0];
                        var value = _ref10[1];

                        /*
                         primaryColor:"#000000" , //画笔的颜色
                         secondaryColor:"#ffffff" , //填充的颜色
                         backgroundColor:"#ffffff" , //背景颜色
                         */
                        var colorKey = key.replace(/Color/g, '');
                        colorJsonCopy[colorKey] = value;
                        whiteboardInstance.whiteboardToolsInfo[colorKey + "Color"] = value;
                        that._noticeNpdateWhiteboardToolsInfo(whiteboardInstance);
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }

                that._updateColor(whiteboardInstance, colorJsonCopy);
            }
        }

        /*获取白板当前激活的标注工具*/

    }, {
        key: 'getActiveTool',
        value: function getActiveTool(id) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[getActiveTool]There are no white board Numbers that belong to id ' + id);return;
            }
            return whiteboardInstance.activeTool;
        }

        /*激活白板工具*/

    }, {
        key: 'activeWhiteboardTool',
        value: function activeWhiteboardTool(toolKey, id) {
            var that = this;
            if (that.useWhiteboardTool[toolKey] === undefined) {
                L.Logger.error('The whiteboard does not have the ' + toolKey + ' tool!');return;
            };
            if (id === undefined || id === null) {
                L.Logger.error('[activeWhiteboardTool]id is undefined or null ');return;
            };
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[activeWhiteboardTool]There are no white board Numbers that belong to id ' + id);return;
            }
            if (/^tool_/.test(toolKey)) {
                //白板底层工具
                if (toolKey === 'tool_pencil' || toolKey === 'tool_highlighter' || toolKey === 'tool_line' || toolKey === 'tool_arrow' || toolKey === 'tool_dashed') {
                    whiteboardInstance.historyPenTool = toolKey;
                } else if (toolKey === 'tool_rectangle' || toolKey === 'tool_rectangle_empty' || toolKey === 'tool_ellipse' || toolKey === 'tool_ellipse_empty' || toolKey === 'tool_polygon') {
                    whiteboardInstance.historyShapeTool = toolKey;
                }
                whiteboardInstance.activeTool = toolKey; //当前使用的激活工具
                that._setWhiteboardTools(toolKey, whiteboardInstance);
                that._handlerActiveToolLaser(toolKey, whiteboardInstance);
                if (toolKey === "tool_text") {
                    that._updateTextFont(whiteboardInstance);
                } else if (toolKey === "tool_eraser") {
                    that._updateEraserWidth(whiteboardInstance);
                } else if (toolKey === "tool_pencil" || toolKey === "tool_highlighter" || toolKey === "tool_line" || toolKey == "tool_arrow" || toolKey === "tool_dashed") {
                    that._updatePencilWidth(whiteboardInstance);
                } else if (toolKey === "tool_rectangle" || toolKey === "tool_rectangle_empty" || toolKey === "tool_ellipse" || toolKey === "tool_ellipse_empty" || toolKey === "tool_polygon") {
                    that._updateShapeWidth(whiteboardInstance);
                }

                if (toolKey === "tool_ellipse_empty" || toolKey === "tool_rectangle_empty") {
                    //空心
                    whiteboardInstance.lc.setColor('secondary', "transparent");
                } else if (toolKey === "tool_rectangle" || toolKey === "tool_ellipse" || toolKey === "tool_polygon") {
                    whiteboardInstance.lc.setColor('secondary', whiteboardInstance.whiteboardToolsInfo.primaryColor);
                } else {
                    whiteboardInstance.lc.setColor('secondary', whiteboardInstance.whiteboardToolsInfo.secondaryColor);
                }

                if (toolKey === 'tool_highlighter') {
                    //荧光笔
                    var color = whiteboardInstance.whiteboardToolsInfo.primaryColor.colorRgb().toLowerCase().replace("rgb", "rgba").replace(")", ",0.5)");
                    whiteboardInstance.lc.setColor('primary', color);
                } else {
                    whiteboardInstance.lc.setColor('primary', whiteboardInstance.whiteboardToolsInfo.primaryColor);
                }
                if (whiteboardInstance.handler.receiveActionCommandCallback) {
                    whiteboardInstance.handler.receiveActionCommandCallback('changeWhiteboardActiveTool', { id: whiteboardInstance.id, activeTool: whiteboardInstance.activeTool });
                }
                this._toolIsUse(whiteboardInstance);
            } else if (/^action_/.test(toolKey)) {
                //白板执行的动作
                if (toolKey === 'action_undo') {
                    var toAuthorUserId = whiteboardInstance.isOnlyUndoRedoClearMyselfShape && whiteboardInstance.myselfId ? whiteboardInstance.myselfId : undefined;
                    if (whiteboardInstance.synchronizationWhiteboard) {
                        whiteboardInstance.lc.sendUndo(toAuthorUserId);
                    } else {
                        whiteboardInstance.lc.undo();
                    }
                } else if (toolKey === 'action_redo') {
                    var _toAuthorUserId = whiteboardInstance.isOnlyUndoRedoClearMyselfShape && whiteboardInstance.myselfId ? whiteboardInstance.myselfId : undefined;
                    if (whiteboardInstance.synchronizationWhiteboard) {
                        whiteboardInstance.lc.sendRedo(_toAuthorUserId);
                    } else {
                        whiteboardInstance.lc.redo();
                    }
                } else if (toolKey === 'action_clear') {
                    var _toAuthorUserId2 = whiteboardInstance.isOnlyUndoRedoClearMyselfShape && whiteboardInstance.myselfId ? whiteboardInstance.myselfId : undefined;
                    if (whiteboardInstance.synchronizationWhiteboard) {
                        whiteboardInstance.lc.sendClear(_toAuthorUserId2);
                    } else {
                        whiteboardInstance.lc.clear();
                    }
                }
                that._actionIsDisable(whiteboardInstance);
            } else if (/^zoom_/.test(toolKey)) {
                //白板的缩放调整
                if (toolKey === 'zoom_big') {
                    if (whiteboardInstance.whiteboardMagnification < that.maxMagnification) {
                        whiteboardInstance.whiteboardMagnification += 0.5;
                    }
                } else if (toolKey === 'zoom_small') {
                    if (whiteboardInstance.whiteboardMagnification > that.minMagnification) {
                        whiteboardInstance.whiteboardMagnification -= 0.5;
                    }
                } else if (toolKey === 'zoom_default') {
                    whiteboardInstance.whiteboardMagnification = that.defaultProductionOptions.whiteboardMagnification;
                }
                if (whiteboardInstance.whiteboardMagnification > that.maxMagnification) {
                    whiteboardInstance.whiteboardMagnification = that.maxMagnification;
                } else if (whiteboardInstance.whiteboardMagnification < that.minMagnification) {
                    whiteboardInstance.whiteboardMagnification = that.minMagnification;
                }
                that._zoomIsDisable(whiteboardInstance);
                that._resizeWhiteboardHandler(whiteboardInstance);
            }
        }
    }, {
        key: 'useHistoryPenTool',


        /*使用历史的画笔工具*/
        value: function useHistoryPenTool(id) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[useHistoryPenTool]There are no white board Numbers that belong to id ' + id);return;
            }
            var toolKey = whiteboardInstance.historyPenTool || 'tool_pencil';
            this.activeWhiteboardTool(toolKey, id);
        }

        /*使用历史的画笔工具*/

    }, {
        key: 'useHistoryShapeTool',
        value: function useHistoryShapeTool(id) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[useHistoryShapeTool]There are no white board Numbers that belong to id ' + id);return;
            }
            var toolKey = whiteboardInstance.historyShapeTool || 'tool_rectangle';
            this.activeWhiteboardTool(toolKey, id);
        }

        /*改变白板临时可画权限*/

    }, {
        key: 'changeWhiteboardTemporaryDeawPermission',
        value: function changeWhiteboardTemporaryDeawPermission(value, id) {
            var that = this;
            var whiteboardInstance = undefined;
            if (id !== undefined) {
                whiteboardInstance = that._getWhiteboardInstanceById(id);
            }
            if (!whiteboardInstance) {
                L.Logger.error('[changeWhiteboardTemporaryDeawPermission]There are no white board Numbers that belong to id ' + id);return;
            }
            that._changeWhiteboardTemporaryDeawPermission(value, whiteboardInstance);
        }
    }, {
        key: 'updateWhiteboardProperty',


        /*更新白板的属性*/
        value: function updateWhiteboardProperty(id, updateProperty) {
            var that = this;
            if (updateProperty && (typeof updateProperty === 'undefined' ? 'undefined' : _typeof(updateProperty)) === 'object') {
                var whiteboardInstance = this._getWhiteboardInstanceById(id);
                if (!whiteboardInstance) {
                    L.Logger.error('[updateWhiteboardProperty]There are no white board Numbers that belong to id ' + id);return;
                }
                if (updateProperty.deawPermission !== undefined) {
                    that.changeWhiteboardDeawPermission(updateProperty.deawPermission, id);
                }
                if (updateProperty.showShapeAuthor !== undefined) {
                    that.changeWhiteboardExclusiveAttribute(id, { showShapeAuthor: updateProperty.showShapeAuthor });
                }
                if (updateProperty.myselfId !== undefined) {
                    that.changeWhiteboardExclusiveAttribute(id, { myselfId: updateProperty.myselfId });
                }
                if (updateProperty.isOnlyUndoRedoClearMyselfShape !== undefined) {
                    that.changeWhiteboardExclusiveAttribute(id, { isOnlyUndoRedoClearMyselfShape: updateProperty.isOnlyUndoRedoClearMyselfShape });
                }
                if (updateProperty.nickname !== undefined) {
                    that.changeWhiteboardExclusiveAttribute(id, { nickname: updateProperty.nickname });
                }
                if (updateProperty.primary !== undefined || updateProperty.secondary !== undefined || updateProperty.background !== undefined || updateProperty.primaryColor !== undefined || updateProperty.secondaryColor !== undefined || updateProperty.backgroundColor !== undefined) {
                    var updateColor = {};
                    for (var colorKey in updateProperty) {
                        if (colorKey === 'primary' || colorKey === 'secondary' || colorKey === 'background' || colorKey === 'primaryColor' || colorKey === 'secondaryColor' || colorKey === 'backgroundColor') {
                            updateColor[colorKey] = updateProperty[colorKey];
                        }
                    }
                    that.updateColor(id, updateColor);
                }
                if (updateProperty.synchronizationWhiteboard !== undefined) {
                    that.changeWhiteboardExclusiveAttribute(id, { synchronizationWhiteboard: updateProperty.synchronizationWhiteboard });
                }
                if (updateProperty.defaultWhiteboardScale !== undefined) {
                    that.changeWhiteboardExclusiveAttribute(id, { defaultWhiteboardScale: updateProperty.defaultWhiteboardScale });
                }
                if (updateProperty.associatedMsgID !== undefined) {
                    that.updateWhiteboardAssociatedMsgID(id, updateProperty.associatedMsgID);
                }
                if (updateProperty.associatedUserID !== undefined) {
                    that.updateWhiteboardAssociatedUserID(id, updateProperty.associatedUserID);
                }
                if (updateProperty.pencilWidth !== undefined || updateProperty.shapeWidth !== undefined || updateProperty.eraserWidth !== undefined || updateProperty.fontSize !== undefined || updateProperty.fontFamily !== undefined) {
                    var whiteboardToolsInfo = {};
                    if (updateProperty.pencilWidth !== undefined) {
                        whiteboardToolsInfo.pencilWidth = Number(updateProperty.pencilWidth);
                    }
                    if (updateProperty.shapeWidth !== undefined) {
                        whiteboardToolsInfo.shapeWidth = Number(updateProperty.shapeWidth);
                    }
                    if (updateProperty.eraserWidth !== undefined) {
                        whiteboardToolsInfo.eraserWidth = Number(updateProperty.eraserWidth);
                    }
                    if (updateProperty.fontSize !== undefined) {
                        whiteboardToolsInfo.fontSize = Number(updateProperty.fontSize);
                    }
                    if (updateProperty.fontFamily !== undefined) {
                        whiteboardToolsInfo.fontFamily = updateProperty.fontFamily;
                    }
                    this.updateWhiteboardToolsInfo(id, whiteboardToolsInfo);
                    if (updateProperty.fontSize !== undefined || updateProperty.fontFamily !== undefined) {
                        this.updateTextFont(id);
                    }
                    if (updateProperty.pencilWidth !== undefined) {
                        if (whiteboardInstance.activeTool === 'tool_pencil' || whiteboardInstance.activeTool === 'tool_highlighter' || whiteboardInstance.activeTool === 'tool_line' || whiteboardInstance.activeTool === 'tool_arrow' || whiteboardInstance.activeTool === 'tool_dashed') {
                            this.updatePencilWidth(id);
                        }
                    }
                    if (updateProperty.shapeWidth !== undefined) {
                        if (whiteboardInstance.activeTool === 'tool_rectangle' || whiteboardInstance.activeTool === 'tool_rectangle_empty' || whiteboardInstance.activeTool === 'tool_ellipse' || whiteboardInstance.activeTool === 'tool_ellipse_empty' || whiteboardInstance.activeTool === 'tool_polygon') {
                            this.updateShapeWidth(id);
                        }
                    }
                    if (updateProperty.eraserWidth !== undefined) {
                        if (whiteboardInstance.activeTool === 'tool_eraser') {
                            this.updateEraserWidth(id);
                        }
                    }
                }

                if (updateProperty.insertPictureRule !== undefined) {
                    that.changeWhiteboardExclusiveAttribute(id, { insertPictureRule: updateProperty.insertPictureRule });
                }
            }
        }

        /*改变白板临时可画权限*/

    }, {
        key: 'changeWhiteboardDeawPermission',
        value: function changeWhiteboardDeawPermission(value, id) {
            var that = this;
            var whiteboardInstance = undefined;
            if (id !== undefined) {
                whiteboardInstance = that._getWhiteboardInstanceById(id);
            }
            if (!whiteboardInstance) {
                L.Logger.error('[changeWhiteboardDeawPermission]There are no white board Numbers that belong to id ' + id);return;
            }
            that._changeWhiteboardDeawPermission(value, whiteboardInstance);
        }
    }, {
        key: 'registerWhiteboardTools',


        /*初始化标注工具*/
        value: function registerWhiteboardTools(id, toolsDesc) {
            var that = this;
            if (!(toolsDesc && (typeof toolsDesc === 'undefined' ? 'undefined' : _typeof(toolsDesc)) === 'object')) {
                L.Logger.error('[initWhiteboardTools] tools desc cannot be empty and type json!');return;
            };
            var whiteboardInstance = that._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[registerWhiteboardTools]There are no white board Numbers that belong to id ' + id);return;
            }
            var toolsDescMap = {};
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = Object.entries(toolsDesc)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _ref11 = _step5.value;

                    var _ref12 = _slicedToArray(_ref11, 2);

                    var toolKey = _ref12[0];
                    var toolValue = _ref12[1];

                    if (that.useWhiteboardTool[toolKey] === undefined) {
                        L.Logger.warning('The whiteboard does not have the ' + toolKey + ' tool!');continue;
                    }
                    toolsDescMap[toolKey] = that._productionToolDesc(toolKey, toolValue);
                    that.useWhiteboardTool[toolKey] = true;
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            whiteboardInstance.registerWhiteboardToolsList = toolsDescMap;
            whiteboardInstance.isRegisterWhiteboardTool = true;
            that._zoomIsDisable(whiteboardInstance);
            that._zoomIsDisable(whiteboardInstance);
            that._noticeUpdateToolDesc(whiteboardInstance);
        }
    }, {
        key: 'hasWhiteboardFiledata',


        /*是否拥有filedata数据*/
        value: function hasWhiteboardFiledata(id) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[hasWhiteboardFiledata]There are no white board Numbers that belong to id ' + id);return;
            }
            if (whiteboardInstance.filedata && _typeof(whiteboardInstance.filedata) === 'object' && Object.keys(whiteboardInstance.filedata).length > 0) {
                return true;
            }
            return false;
        }
    }, {
        key: 'updateWhiteboardFiledata',


        /*更新白板的filedata数据*/
        value: function updateWhiteboardFiledata(id, filedata) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[updateWhiteboardFiledata]There are no white board Numbers that belong to id ' + id);return;
            }
            this._updateWhiteboardFiledata(whiteboardInstance, filedata);
        }
    }, {
        key: 'getRegisterWhiteboardToolsList',


        /*获取注册的标注工具的描述*/
        value: function getRegisterWhiteboardToolsList(id) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[getRegisterWhiteboardToolsList]There are no white board Numbers that belong to id ' + id);return;
            }
            return Object.deepAssign({}, whiteboardInstance.registerWhiteboardToolsList);
        }

        /*获取白板的filedata*/

    }, {
        key: 'getWhiteboardFiledata',
        value: function getWhiteboardFiledata(id) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[getWhiteboardFiledata]There are no white board Numbers that belong to id ' + id);return;
            }
            if (typeof whiteboardInstance.filedata.currpage !== 'number') {
                whiteboardInstance.filedata.currpage = Number(whiteboardInstance.filedata.currpage);
            }
            if (typeof whiteboardInstance.filedata.pagenum !== 'number') {
                whiteboardInstance.filedata.pagenum = Number(whiteboardInstance.filedata.pagenum);
            }
            if (typeof whiteboardInstance.filedata.pptslide !== 'number') {
                whiteboardInstance.filedata.pptslide = Number(whiteboardInstance.filedata.pptslide);
            }
            if (typeof whiteboardInstance.filedata.pptstep !== 'number') {
                whiteboardInstance.filedata.pptstep = Number(whiteboardInstance.filedata.pptstep);
            }
            if (typeof whiteboardInstance.filedata.steptotal !== 'number') {
                whiteboardInstance.filedata.steptotal = Number(whiteboardInstance.filedata.steptotal);
            }

            return Object.deepAssign({}, whiteboardInstance.filedata);
        }
    }, {
        key: 'clearWhiteboardDataByFileidAndCurrpage',


        /*清除指定文件和页数的画笔数据*/
        value: function clearWhiteboardDataByFileidAndCurrpage(id, fileid, currpage) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[clearWhiteboardDataByFileidAndCurrpage]There are no white board Numbers that belong to id ' + id);return;
            }
            if (fileid != undefined && currpage !== null) {
                whiteboardInstance.waitingProcessShapeData["SharpsChange_" + fileid + "_" + currpage] = undefined;
                whiteboardInstance.stackStorage["redoStack_" + fileid + "_" + currpage] = undefined;
                whiteboardInstance.stackStorage["undoStack_" + fileid + "_" + currpage] = undefined;
                delete whiteboardInstance.waitingProcessShapeData["SharpsChange_" + fileid + "_" + currpage];
                delete whiteboardInstance.stackStorage["redoStack_" + fileid + "_" + currpage];
                delete whiteboardInstance.stackStorage["undoStack_" + fileid + "_" + currpage];
            }
        }

        /*加载当前页的白板数据*/

    }, {
        key: 'loadCurrpageWhiteboard',
        value: function loadCurrpageWhiteboard(id) {
            var _ref13 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref13$loadRedoStack = _ref13.loadRedoStack,
                loadRedoStack = _ref13$loadRedoStack === undefined ? true : _ref13$loadRedoStack,
                callback = _ref13.callback;

            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[loadCurrpageWhiteboard]There are no white board Numbers that belong to id ' + id);return;
            }
            this._clearRedoAndUndoStack(whiteboardInstance); //清空白板且清除白板数据栈
            this._basicTemplateWhiteboardSignallingListToWhiteboardInstance(whiteboardInstance);
            var _whiteboardInstance$f = whiteboardInstance.filedata,
                fileid = _whiteboardInstance$f.fileid,
                currpage = _whiteboardInstance$f.currpage;

            if (whiteboardInstance.waitingProcessShapeData === undefined || whiteboardInstance.waitingProcessShapeData === null) {
                whiteboardInstance.waitingProcessShapeData = {};
            } else {
                var currpageWaitingProcessShapeData = whiteboardInstance.waitingProcessShapeData["SharpsChange_" + fileid + "_" + currpage];
                if (currpageWaitingProcessShapeData !== null && currpageWaitingProcessShapeData !== undefined && currpageWaitingProcessShapeData.length > 0) {
                    this._batchReceiveSnapshot(currpageWaitingProcessShapeData, whiteboardInstance);
                }
            }
            if (loadRedoStack) {
                var redoStack = whiteboardInstance.stackStorage["redoStack_" + fileid + "_" + currpage];
                if (redoStack && redoStack.length > 0) {
                    whiteboardInstance.lc.redoStack = redoStack;
                }
            }
            this._actionIsDisable(whiteboardInstance);
            if (callback && typeof callback === "function") {
                callback();
            }
        }
    }, {
        key: 'saveWhiteboardStackToStorage',


        /*保存白板数据栈到数据栈仓库中*/
        value: function saveWhiteboardStackToStorage(id) {
            var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                saveRedoStack = _ref14.saveRedoStack,
                saveUndoStack = _ref14.saveUndoStack;

            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[saveWhiteboardStackToStorage]There are no white board Numbers that belong to id ' + id);return;
            }
            saveRedoStack = saveRedoStack !== undefined ? saveRedoStack : whiteboardInstance.saveRedoStack;
            saveUndoStack = saveUndoStack !== undefined ? saveUndoStack : whiteboardInstance.saveUndoStack;

            var _getWhiteboardFiledat = this.getWhiteboardFiledata(id),
                fileid = _getWhiteboardFiledat.fileid,
                currpage = _getWhiteboardFiledat.currpage;
            /*  if(saveUndoStack){
                  whiteboardInstance.stackStorage["undoStack_"+fileid+"_"+currpage]  = whiteboardInstance.lc.undoStack.slice(0) ;
              }*/


            if (saveRedoStack) {
                whiteboardInstance.stackStorage["redoStack_" + fileid + "_" + currpage] = whiteboardInstance.lc.redoStack.slice(0);
            }
        }
    }, {
        key: 'showWhiteboardLoading',


        /*显示白板正在loading*/
        value: function showWhiteboardLoading(id) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[showWhiteboardLoading]There are no white board Numbers that belong to id ' + id);return;
            }
            this._showWhiteboardLoading(whiteboardInstance);
        }
    }, {
        key: 'hideWhiteboardLoading',


        /*隐藏白板正在loading*/
        value: function hideWhiteboardLoading(id) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[showWhiteboardLoading]There are no white board Numbers that belong to id ' + id);return;
            }
            this._hideWhiteboardLoading(whiteboardInstance);
        }
    }, {
        key: 'isWhiteboardTextEditing',


        /*白板是否处于文本点击状态*/
        value: function isWhiteboardTextEditing(id) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[isWhiteboardTextEditing]There are no white board Numbers that belong to id ' + id);return;
            }
            var isEditing = whiteboardInstance.lc.tool.name.toString() == "Text" && whiteboardInstance.lc.tool.currentShapeState == "editing";
            return isEditing;
        }

        /*检测白板Canvas大小*/

    }, {
        key: 'checkWhiteboardCanvasSize',
        value: function checkWhiteboardCanvasSize(id) {
            var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref15$isResize = _ref15.isResize,
                isResize = _ref15$isResize === undefined ? false : _ref15$isResize;

            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[checkWhiteboardCanvasSize]There are no white board Numbers that belong to id ' + id);return;
            }
            if (whiteboardInstance.lc && whiteboardInstance.lc.canvas) {
                if (whiteboardInstance.lc.canvas.width === 0 || whiteboardInstance.lc.canvas.height === 0) {
                    if (isResize) {
                        this._resizeWhiteboardHandler(whiteboardInstance);
                    }
                    return true;
                }
                return false;
            }
            return undefined;
        }
    }, {
        key: 'downCanvasImageToLocalFile',


        /*下载画板canvas图片*/
        value: function downCanvasImageToLocalFile(id) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'png';

            var _fixtype = function _fixtype(type) {
                type = type.toLocaleLowerCase().replace(/jpg/i, 'jpeg');
                var r = type.match(/png|jpeg|bmp|gif/)[0];
                return 'image/' + r;
            };
            var _savaFile = function _savaFile(data, filename) {
                //将图片保存到本地
                var save_link = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');
                save_link.href = data;
                save_link.download = filename;
                var event = document.createEvent('MouseEvents');
                event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
                save_link.dispatchEvent(event);
            };
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[downCanvasImageToLocalFile]There are no white board Numbers that belong to id ' + id);return;
            }
            var imgBase64 = this._convertCanvasToImageBase64(whiteboardInstance, type);
            imgBase64 = imgBase64.replace(_fixtype(type), 'image/octet-stream'); //将mime-type改为image/octet-stream,强制让浏览器下载
            var filename = (whiteboardInstance.nickname ? whiteboardInstance.nickname + "_" : "") + whiteboardInstance.id + '_' + new Date().getTime() + '.' + type;
            _savaFile(imgBase64, filename);
        }

        /*获取白板工具信息*/

    }, {
        key: 'getWhiteboardToolsInfo',
        value: function getWhiteboardToolsInfo(id) {
            var whiteboardInstance = this._getWhiteboardInstanceById(id);
            if (!whiteboardInstance) {
                L.Logger.error('[getWhiteboardToolsInfo]There are no white board Numbers that belong to id ' + id);return;
            }
            return Object.deepAssign({}, whiteboardInstance.whiteboardToolsInfo);
        }

        /*清空白板且清除白板数据栈*/

    }, {
        key: '_clearRedoAndUndoStack',
        value: function _clearRedoAndUndoStack(whiteboardInstance) {
            var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref16$clear = _ref16.clear,
                clear = _ref16$clear === undefined ? true : _ref16$clear,
                _ref16$redo = _ref16.redo,
                redo = _ref16$redo === undefined ? true : _ref16$redo,
                _ref16$undo = _ref16.undo,
                undo = _ref16$undo === undefined ? true : _ref16$undo;

            var that = this;
            if (clear) {
                that._clearLc(whiteboardInstance, { triggerEvent: false });
            };
            if (redo) {
                that._clearLcRedoStack(whiteboardInstance);
            };
            if (undo) {
                that._clearLcUndoStack(whiteboardInstance);
            };
            that._actionIsDisable(whiteboardInstance);
            setTimeout(function () {
                that._resizeWhiteboardHandler(whiteboardInstance);
            }, 0);
        }
    }, {
        key: '_updateWhiteboardFiledata',


        /*更新白板的filedata数据*/
        value: function _updateWhiteboardFiledata(whiteboardInstance, filedata) {
            if (filedata && (typeof filedata === 'undefined' ? 'undefined' : _typeof(filedata)) === 'object') {
                if (filedata.currpage !== undefined) {
                    filedata.currpage = Number(filedata.currpage);
                }
                if (filedata.pagenum !== undefined) {
                    filedata.pagenum = Number(filedata.pagenum);
                }
                if (filedata.pptslide !== undefined) {
                    filedata.pptslide = Number(filedata.pptslide);
                }
                if (filedata.pptstep !== undefined) {
                    filedata.pptstep = Number(filedata.pptstep);
                }
                if (filedata.steptotal !== undefined) {
                    filedata.steptotal = Number(filedata.steptotal);
                }
                /*if( filedata.currpage !== undefined ){
                    if(filedata.currpage > whiteboardInstance.filedata.pagenum ){
                        filedata.currpage = whiteboardInstance.filedata.pagenum ;
                    }
                    if(filedata.currpage < 1){
                        filedata.currpage = 1 ;
                    }
                }
                if( filedata.pptslide !== undefined ){
                    if(filedata.pptslide > whiteboardInstance.filedata.pagenum ){
                        filedata.pptslide = whiteboardInstance.filedata.pagenum ;
                    }
                    if(filedata.pptslide < 1){
                        filedata.pptslide = 1 ;
                    }
                }*/
                Object.deepAssign(whiteboardInstance.filedata, filedata);
                if (whiteboardInstance && whiteboardInstance.handler && whiteboardInstance.handler.noticeUpdateWhiteboardFiledataCallback) {
                    /* clearTimeout( whiteboardInstance.noticeUpdateWhiteboardFiledataTimer ) ;
                     whiteboardInstance.noticeUpdateWhiteboardFiledataTimer = setTimeout( () => {
                         if(whiteboardInstance.handler && whiteboardInstance.handler.noticeUpdateWhiteboardFiledataCallback){
                             whiteboardInstance.handler.noticeUpdateWhiteboardFiledataCallback( whiteboardInstance.filedata   );
                         }
                     } , 100);*/
                    if (whiteboardInstance.handler && whiteboardInstance.handler.noticeUpdateWhiteboardFiledataCallback) {
                        whiteboardInstance.handler.noticeUpdateWhiteboardFiledataCallback(whiteboardInstance.filedata);
                    }
                }
            }
        }
    }, {
        key: '_batchReceiveSnapshot',


        /*批量接收白板数据操作shape画图*/
        value: function _batchReceiveSnapshot(shapesArray, whiteboardInstance) {
            var that = this;
            if (!Array.isArray(shapesArray)) {
                L.Logger.error('shapesArray must be an array!');return;
            };
            shapesArray.forEach(function (remoteData, index) {
                var doNotPaint = true;
                if (index === shapesArray.length - 1) {
                    doNotPaint = false;
                }
                that._handlerRemoteDataToWhiteboard(remoteData, doNotPaint, whiteboardInstance);
            });
            that._actionIsDisable(whiteboardInstance);
        }
    }, {
        key: '_receiveSnapshot',


        /* 接收白板数据操作shape画图*/
        value: function _receiveSnapshot(remoteData, whiteboardInstance) {
            var that = this;
            var doNotPaint = false;
            that._handlerRemoteDataToWhiteboard(remoteData, doNotPaint, whiteboardInstance);
            that._actionIsDisable(whiteboardInstance);
        }
    }, {
        key: '_handlerRemoteDataToWhiteboard',


        /*处理远程的数据到白板上*/
        value: function _handlerRemoteDataToWhiteboard(remoteData) {
            var doNotPaint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var whiteboardInstance = arguments[2];

            if (remoteData.data && typeof remoteData.data === 'string') {
                remoteData.data = JSON.parse(remoteData.data);
            }
            if (remoteData.data != null && remoteData.data.eventType != null) {
                if (remoteData.source === 'delmsg') {
                    //回放的delmsg数据不是发送上去的数据，而是撤销的动作的相关描述，所以这里需要做兼容，如果是来自于delmsg的则事件类型为shapeSaveEvent和clearEvent也执行撤销操作
                    switch (remoteData.data.eventType) {
                        case "shapeSaveEvent":
                        case "clearEvent":
                        case "undoEvent":
                            if (remoteData.data.actionName && remoteData.data.actionName === "AddShapeAction") {
                                whiteboardInstance.lc.undo(false, remoteData.data.shapeId);
                                this._removeRemindContentByElementId(whiteboardInstance, "whiteboard_remind_" + remoteData.data.shapeId);
                            } else if (remoteData.data.actionName && remoteData.data.actionName === "ClearAction") {
                                whiteboardInstance.lc.undo(false, remoteData.data.clearActionId);
                            }
                            break;
                    }
                } else {
                    switch (remoteData.data.eventType) {
                        case "shapeSaveEvent":
                            if (whiteboardInstance && whiteboardInstance.lc && whiteboardInstance.lc.undoStack && whiteboardInstance.lc.undoStack.length > 0) {
                                var isBreak = false;
                                for (var i = whiteboardInstance.lc.undoStack.length - 1; i >= 0; i--) {
                                    var value = whiteboardInstance.lc.undoStack[i];
                                    switch (value.actionName) {
                                        case "AddShapeAction":
                                            if (value.shapeId === remoteData.data.shapeId) {
                                                if (value.undo) {
                                                    value.undo();
                                                }
                                                whiteboardInstance.lc.undoStack.splice(i, 1);
                                                isBreak = true;
                                            }
                                            break;
                                    }
                                    if (isBreak) {
                                        break;
                                    }
                                }
                            }
                            if (remoteData.data && remoteData.data.data && remoteData.data.data.data) {
                                remoteData.data.data = window.LC.JSONToShape(remoteData.data.data);
                            }
                            whiteboardInstance.lc.saveShape(remoteData.data.data, false, null, doNotPaint, remoteData.fromID, remoteData.seq);
                            break;
                        case "undoEvent":
                            if (remoteData.data.actionName && remoteData.data.actionName === "AddShapeAction") {
                                whiteboardInstance.lc.undo(false, remoteData.data.shapeId);
                                this._removeRemindContentByElementId(whiteboardInstance, "whiteboard_remind_" + remoteData.data.shapeId);
                            } else if (remoteData.data.actionName && remoteData.data.actionName === "ClearAction") {
                                whiteboardInstance.lc.undo(false, remoteData.data.clearActionId);
                            }
                            break;
                        case "redoEvent":
                            if (remoteData.data.actionName && remoteData.data.actionName === "AddShapeAction") {
                                var isRedo = true;
                                for (var _i4 = whiteboardInstance.lc.undoStack.length - 1; _i4 >= 0; _i4--) {
                                    if (remoteData.data.shapeId === whiteboardInstance.lc.undoStack[_i4].shapeId) {
                                        isRedo = false;
                                        break;
                                    }
                                }
                                if (isRedo) {
                                    var flag = false; //恢复栈中是否有该shape
                                    for (var _i5 = whiteboardInstance.lc.redoStack.length - 1; _i5 >= 0; _i5--) {
                                        if (remoteData.data.shapeId === whiteboardInstance.lc.redoStack[_i5].shapeId) {
                                            //whiteboardInstance.lc.redoStack.splice(i,1);
                                            flag = true;
                                            break;
                                        }
                                    }
                                    if (flag) {
                                        whiteboardInstance.lc.redo(false, remoteData.data.shapeId);
                                    } else {
                                        if (remoteData.data && remoteData.data.data && remoteData.data.data.data) {
                                            remoteData.data.data = window.LC.JSONToShape(remoteData.data.data);
                                        }
                                        var _remoteData$data$othe = remoteData.data.otherInfo,
                                            otherInfo = _remoteData$data$othe === undefined ? { authorUserId: remoteData.fromID, seq: remoteData.seq } : _remoteData$data$othe;

                                        whiteboardInstance.lc.saveShape(remoteData.data.data, false, null, doNotPaint, otherInfo.authorUserId, otherInfo.seq);
                                    }
                                }
                            } else if (remoteData.data.actionName && remoteData.data.actionName === "ClearAction") {
                                var _isRedo = true;
                                for (var _i6 = whiteboardInstance.lc.undoStack.length - 1; _i6 >= 0; _i6--) {
                                    if (remoteData.data.clearActionId === whiteboardInstance.lc.undoStack[_i6].id) {
                                        _isRedo = false;
                                        break;
                                    }
                                }
                                if (_isRedo) {
                                    var _flag = false; //恢复栈中是否有该shape
                                    for (var _i7 = whiteboardInstance.lc.redoStack.length - 1; _i7 >= 0; _i7--) {
                                        if (remoteData.data.clearActionId === whiteboardInstance.lc.redoStack[_i7].id) {
                                            _flag = true;
                                            break;
                                        }
                                    }
                                    if (_flag) {
                                        whiteboardInstance.lc.redo(false, remoteData.data.clearActionId);
                                        this._removeAllRemindContent(whiteboardInstance);
                                    } else {
                                        //whiteboardInstance.lc.clear(false , null);
                                        var _remoteData$data$othe2 = remoteData.data.otherInfo,
                                            _otherInfo = _remoteData$data$othe2 === undefined ? { authorUserId: remoteData.fromID, toAuthorUserId: undefined, seq: remoteData.seq } : _remoteData$data$othe2;

                                        whiteboardInstance.lc.clear(false, remoteData.data.clearActionId, _otherInfo.authorUserId, _otherInfo.toAuthorUserId, _otherInfo.seq);
                                        this._removeAllRemindContent(whiteboardInstance);
                                    }
                                }
                            }
                            break;
                        case "clearEvent":
                            // whiteboardInstance.lc.clear(false , null);
                            whiteboardInstance.lc.clear(false, remoteData.data.clearActionId, remoteData.fromID, remoteData.data.toAuthorUserId, remoteData.seq);
                            this._removeAllRemindContent(whiteboardInstance);
                            break;
                        case "laserMarkEvent":
                            var laserMark = whiteboardInstance.lc.containerEl.parentNode.getElementsByClassName("laser-mark")[0];
                            switch (remoteData.data.actionName) {
                                case "show":
                                    laserMark.style.display = 'block';
                                    break;
                                case "hide":
                                    laserMark.style.display = 'none';
                                    break;
                                case "move":
                                    if (remoteData.data && remoteData.data.laser) {
                                        var left = remoteData.data.laser.left;
                                        var top = remoteData.data.laser.top;
                                        laserMark.style.left = left + "%";
                                        laserMark.style.top = top + "%";
                                    }
                                    break;
                                default:
                                    break;
                            }
                            break;
                    }
                }
            }
        }
    }, {
        key: '_productionToolDesc',


        /*生产标注工具的描述信息*/
        value: function _productionToolDesc(toolKey, toolValue) {
            var that = this;
            var toolDesc = {
                toolKey: toolKey,
                disabled: false
            };
            return toolDesc;
        }
    }, {
        key: '_noticeUpdateToolDesc',


        /*通知白板工具更新的消息给上层*/
        value: function _noticeUpdateToolDesc(whiteboardInstance) {
            if (whiteboardInstance && whiteboardInstance.isRegisterWhiteboardTool) {
                /*clearTimeout( whiteboardInstance.noticeUpdateToolDescTimer ) ;
                whiteboardInstance.noticeUpdateToolDescTimer = setTimeout( () => {
                    if(whiteboardInstance.handler && whiteboardInstance.handler.noticeUpdateToolDescCallback){
                        whiteboardInstance.handler.noticeUpdateToolDescCallback(whiteboardInstance.registerWhiteboardToolsList);
                    }
                } , 100);*/
                if (whiteboardInstance.handler && whiteboardInstance.handler.noticeUpdateToolDescCallback) {
                    whiteboardInstance.handler.noticeUpdateToolDescCallback(whiteboardInstance.registerWhiteboardToolsList);
                }
            }
        }
    }, {
        key: '_updateToolDesc',


        /*更新标注工具的描述信息*/
        value: function _updateToolDesc(whiteboardInstance, toolKey, toolValue) {
            if (whiteboardInstance.registerWhiteboardToolsList[toolKey]) {
                var _iteratorNormalCompletion6 = true;
                var _didIteratorError6 = false;
                var _iteratorError6 = undefined;

                try {
                    for (var _iterator6 = Object.entries(toolValue)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                        var _ref17 = _step6.value;

                        var _ref18 = _slicedToArray(_ref17, 2);

                        var key = _ref18[0];
                        var value = _ref18[1];

                        if (whiteboardInstance.registerWhiteboardToolsList[toolKey][key] !== undefined) {
                            whiteboardInstance.registerWhiteboardToolsList[toolKey][key] = value;
                        }
                    }
                } catch (err) {
                    _didIteratorError6 = true;
                    _iteratorError6 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
                            _iterator6.return();
                        }
                    } finally {
                        if (_didIteratorError6) {
                            throw _iteratorError6;
                        }
                    }
                }
            }
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = Object.keys(whiteboardInstance.registerWhiteboardToolsList)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var _key3 = _step7.value;

                    if (/tool_/g.test(_key3)) {
                        whiteboardInstance.registerWhiteboardToolsList[_key3].isUse = _key3 === whiteboardInstance.activeTool;
                    } else if (/zoom_/g.test(_key3)) {
                        whiteboardInstance.registerWhiteboardToolsList[_key3].zoom = whiteboardInstance.whiteboardMagnification;
                    }
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }
        }
    }, {
        key: '_batchUpdateToolDesc',


        /*批量更新工具描述*/
        value: function _batchUpdateToolDesc(whiteboardInstance, updateDescArray) {
            var that = this;
            if (!Array.isArray(updateDescArray)) {
                L.Logger.error('updateDescArray must be an array , whiteboard id is ' + whiteboardInstance.id + '!');return;
            };
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = updateDescArray[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var desc = _step8.value;

                    if (Array.isArray(desc)) {
                        that._updateToolDesc(whiteboardInstance, desc[0], desc[1]);
                    }
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }
        }
    }, {
        key: '_setWhiteboardTools',


        /*设置白板的标注工具*/
        value: function _setWhiteboardTools(toolKey, whiteboardInstance) {
            var that = this;
            var _setWhiteboardToolsFromInner = function _setWhiteboardToolsFromInner(whiteboardInstance) {
                var tool = that._productionToolByCore(toolKey, whiteboardInstance);
                whiteboardInstance.lc.setTool(tool);
            };
            that._automaticTraverseWhiteboardInstance(whiteboardInstance, _setWhiteboardToolsFromInner);
        }
    }, {
        key: '_productionToolByCore',


        /*生产白板核心层工具，通过白板核心层来生产*/
        value: function _productionToolByCore(toolKey, whiteboardInstance) {
            var that = this;
            var tool = undefined;
            if (that.useWhiteboardTool[toolKey] === undefined) {
                L.Logger.error('The whiteboard does not have the ' + toolKey + ' tool!');return tool;
            }
            switch (toolKey) {
                case 'tool_pencil':
                    //笔
                    tool = new window.LC.tools.Pencil(whiteboardInstance.lc);
                    break;
                case 'tool_highlighter':
                    //荧光笔
                    tool = new window.LC.tools.Pencil(whiteboardInstance.lc);
                    break;
                case 'tool_line':
                    //直线
                    tool = new window.LC.tools.Line(whiteboardInstance.lc);
                    break;
                case 'tool_arrow':
                    //箭头
                    tool = new window.LC.tools.Line(whiteboardInstance.lc);
                    tool.hasEndArrow = true;
                    break;
                case 'tool_dashed':
                    //虚线
                    tool = new window.LC.tools.Line(whiteboardInstance.lc);
                    tool.isDashed = true;
                    break;
                case 'tool_eraser':
                    //橡皮
                    tool = new window.LC.tools.Eraser(whiteboardInstance.lc);
                    break;
                case 'tool_text':
                    //文字
                    tool = new window.LC.tools.Text(whiteboardInstance.lc);
                    break;
                case 'tool_rectangle':
                    //矩形
                    tool = new window.LC.tools.Rectangle(whiteboardInstance.lc);
                    break;
                case 'tool_rectangle_empty':
                    //空心矩形
                    tool = new window.LC.tools.Rectangle(whiteboardInstance.lc);
                    break;
                case 'tool_ellipse':
                    //椭圆
                    tool = new window.LC.tools.Ellipse(whiteboardInstance.lc);
                    break;
                case 'tool_ellipse_empty':
                    //空心椭圆
                    tool = new window.LC.tools.Ellipse(whiteboardInstance.lc);
                    break;
                case 'tool_polygon':
                    //多边形
                    tool = new window.LC.tools.Polygon(whiteboardInstance.lc);
                    break;
                case 'tool_eyedropper':
                    //吸管
                    tool = new window.LC.tools.Eyedropper(whiteboardInstance.lc);
                    break;
                case 'tool_selectShape':
                    //选中拖动
                    tool = new window.LC.tools.SelectShape(whiteboardInstance.lc);
                    break;
                case 'tool_mouse':
                    //鼠标
                    tool = whiteboardInstance.lc.tool;
                    break;
                case 'tool_laser':
                    //激光笔
                    tool = whiteboardInstance.lc.tool;
                    break;
                default:
                    L.Logger.warning('Tool ' + toolKey + ' is not created in the whiteboard core layer!');
                    tool = whiteboardInstance.lc.tool;
                    break;
            };
            return tool;
        }
    }, {
        key: '_getWhiteboardInstanceID',


        /*获取白板实例id,根据id获取*/
        value: function _getWhiteboardInstanceID(id) {
            var that = this;
            var whiteboardInstanceID = !that.uniqueWhiteboard && id !== undefined && id !== null ? that.whiteboardInstanceIDPrefix + id : that.whiteboardInstanceDefaultID;
            if (id && typeof id === 'string') {
                var rq = new RegExp(that.specialWhiteboardInstanceIDPrefix, 'g');
                if (rq.test(id)) {
                    whiteboardInstanceID = id;
                }
            }
            return whiteboardInstanceID;
        }
    }, {
        key: '_getWhiteboardInstanceById',


        /*获取白板实例,根据id获取*/
        value: function _getWhiteboardInstanceById(id) {
            var that = this;
            var whiteboardInstanceID = that._getWhiteboardInstanceID(id);
            var whiteboardInstance = that.whiteboardInstanceStore[whiteboardInstanceID];
            return whiteboardInstance;
        }
    }, {
        key: '_getWhiteboardInstanceByID',


        /*获取白板实例,根据whiteboardInstanceID获取*/
        value: function _getWhiteboardInstanceByID(whiteboardInstanceID) {
            var that = this;
            var whiteboardInstance = that.whiteboardInstanceStore[whiteboardInstanceID];
            return whiteboardInstance;
        }
    }, {
        key: '_resizeWhiteboardByScale',


        /*白板大小根据比例自适应*/
        value: function _resizeWhiteboardByScale(whiteboardInstance) {
            var _ref19 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                watermarkImage = _ref19.watermarkImage,
                _ref19$isChangeCanvas = _ref19.isChangeCanvas,
                isChangeCanvas = _ref19$isChangeCanvas === undefined ? true : _ref19$isChangeCanvas,
                _ref19$isChangeWaterm = _ref19.isChangeWatermarkScale,
                isChangeWatermarkScale = _ref19$isChangeWaterm === undefined ? true : _ref19$isChangeWaterm,
                watermarkImageScale = _ref19.watermarkImageScale;

            watermarkImageScale = watermarkImageScale !== undefined ? watermarkImageScale : whiteboardInstance.watermarkImageScale;
            var whiteboardInstance_lc = whiteboardInstance.lc;
            if (whiteboardInstance_lc) {
                var whiteboardElement = whiteboardInstance.whiteboardElement;
                var whiteboardInstanceElement = whiteboardInstance.whiteboardInstanceElement;
                var containerWidth = whiteboardInstance.containerWidthAndHeight['width'];
                var containerHeight = whiteboardInstance.containerWidthAndHeight['height'];
                if (whiteboardInstance.parcelAncestorElementId) {
                    var parcelAncestorElement = document.getElementById(whiteboardInstance.parcelAncestorElementId);
                    if (parcelAncestorElement) {
                        containerWidth = parcelAncestorElement.clientWidth;
                        containerHeight = parcelAncestorElement.clientHeight;
                    }
                }
                var fatherContainerConfiguration = {};
                var fatherContainerStyle = {};
                var width = 0,
                    height = 0,
                    minWidth = 0,
                    minHeight = 0;
                if (containerHeight * watermarkImageScale < containerWidth) {
                    width = Math.round(containerHeight * watermarkImageScale * whiteboardInstance.whiteboardMagnification);
                    height = Math.round(containerHeight * whiteboardInstance.whiteboardMagnification);
                    if (whiteboardInstance.insertPictureRule === 'relativeOriginalSize') {
                        if (watermarkImage) {
                            if (watermarkImage.width < containerWidth && watermarkImage.height < containerHeight) {
                                width = watermarkImage.width;
                                height = watermarkImage.height;
                            }
                        }
                    }
                    whiteboardElement.style.width = width + 'px';
                    whiteboardElement.style.height = height + 'px';
                    whiteboardInstanceElement.style.width = width + 'px';
                    whiteboardInstanceElement.style.height = height + 'px';
                    if (whiteboardInstance.minHeight !== undefined && whiteboardInstance.minHeight !== null) {
                        minWidth = whiteboardInstance.minHeight * watermarkImageScale;
                        minHeight = whiteboardInstance.minHeight;
                        whiteboardElement.style.minWidth = minWidth + 'px';
                        whiteboardElement.style.minHeight = minHeight + 'px';
                        whiteboardInstanceElement.style.minWidth = minWidth + 'px';
                        whiteboardInstanceElement.style.minHeight = minHeight + 'px';
                        fatherContainerStyle['minWidth'] = minWidth + 'px';
                        fatherContainerStyle['minHegiht'] = minHeight + 'px';
                    }
                    fatherContainerStyle['top'] = 0 + '%';
                    fatherContainerStyle['left'] = 50 + '%';
                    fatherContainerStyle['marginTop'] = 0 + 'px';
                    fatherContainerStyle['marginLeft'] = -width / 2 + 'px';
                    fatherContainerStyle['width'] = width + 'px';
                    fatherContainerStyle['height'] = height + 'px';
                } else {
                    width = Math.round(containerWidth * whiteboardInstance.whiteboardMagnification);
                    height = Math.round(containerWidth / watermarkImageScale * whiteboardInstance.whiteboardMagnification);
                    if (whiteboardInstance.insertPictureRule === 'relativeOriginalSize') {
                        if (watermarkImage) {
                            if (watermarkImage.width < containerWidth && watermarkImage.height < containerHeight) {
                                width = watermarkImage.width;
                                height = watermarkImage.height;
                            }
                        }
                    }
                    whiteboardElement.style.width = width + 'px';
                    whiteboardElement.style.height = height + 'px';
                    whiteboardInstanceElement.style.width = width + 'px';
                    whiteboardInstanceElement.style.height = height + 'px';
                    if (whiteboardInstance.minHeight !== undefined && whiteboardInstance.minHeight !== null) {
                        minWidth = whiteboardInstance.minHeight * watermarkImageScale;
                        minHeight = whiteboardInstance.minHeight;
                        whiteboardElement.style.minWidth = minWidth + 'px';
                        whiteboardElement.style.minHeight = minHeight + 'px';
                        whiteboardInstanceElement.style.minWidth = minWidth + 'px';
                        whiteboardInstanceElement.style.minHeight = minHeight + 'px';
                        fatherContainerStyle['minWidth'] = minWidth + 'px';
                        fatherContainerStyle['minHegiht'] = minHeight + 'px';
                    }
                    fatherContainerStyle['top'] = 50 + '%';
                    fatherContainerStyle['left'] = 0 + '%';
                    fatherContainerStyle['marginTop'] = -height / 2 + 'px';
                    fatherContainerStyle['marginLeft'] = 0 + 'px';
                    fatherContainerStyle['width'] = width + 'px';
                    fatherContainerStyle['height'] = height + 'px';
                }
                if (isChangeCanvas) {
                    whiteboardInstance_lc.respondToSizeChange();
                    var eleWidth = whiteboardInstanceElement.clientWidth;
                    var eleHeight = whiteboardInstanceElement.clientHeight;
                    var whiteboardScale = (eleWidth + eleHeight) / (whiteboardInstance.baseWhiteboardWidth + whiteboardInstance.baseWhiteboardWidth * watermarkImageScale);
                    whiteboardInstance_lc.setZoom(whiteboardScale);
                    whiteboardInstance_lc.setPan(0, 0);
                    if (isChangeWatermarkScale && watermarkImage) {
                        var watermarkImageWidth = watermarkImage.width;
                        var watermarkImageHeight = watermarkImage.height;
                        // let lvW = whiteboardInstance_lc.backgroundCanvas.width / watermarkImageWidth ;
                        // let lvH =  whiteboardInstance_lc.backgroundCanvas.height / watermarkImageHeight ;
                        var lvW = eleWidth / watermarkImageWidth;
                        var lvH = eleHeight / watermarkImageHeight;
                        var lv = (lvW + lvH) / 2;
                        if (whiteboardInstance.insertPictureRule === 'relativeOriginalSize') {
                            if (watermarkImage) {
                                if (watermarkImage.width < containerWidth && watermarkImage.height < containerHeight) {
                                    lv = 1;
                                }
                            }
                        }
                        whiteboardInstance_lc.watermarkScale = lv;
                        whiteboardInstance_lc.setWatermarkImage(watermarkImage);
                    }
                }
                fatherContainerConfiguration.style = fatherContainerStyle;
                fatherContainerConfiguration.addClassName = whiteboardInstance.whiteboardMagnification > 1 ? 'custom-scroll-bar' : '';
                fatherContainerConfiguration.loadScrollBar = whiteboardInstance.whiteboardMagnification > 1;
                if (whiteboardInstance.handler && whiteboardInstance.handler.resizeWhiteboardSizeCallback && typeof whiteboardInstance.handler.resizeWhiteboardSizeCallback === 'function') {
                    whiteboardInstance.handler.resizeWhiteboardSizeCallback(fatherContainerConfiguration);
                } else {
                    fatherContainerConfiguration = null;
                }
            }
        }

        /*清除白板的所有数据，包括存储的数据,通过whiteboardInstanceID*/

    }, {
        key: '_clearWhiteboardAllDataByInstance',
        value: function _clearWhiteboardAllDataByInstance(whiteboardInstance) {
            var _this = this;

            if (!whiteboardInstance) {
                L.Logger.error('[_clear]The whiteboard instance does not exist!');return;
            }
            whiteboardInstance.lc.clear(false);
            whiteboardInstance.lc.redoStack.length = 0;
            whiteboardInstance.lc.undoStack.length = 0;
            whiteboardInstance.stackStorage = {}; //白板数据栈对象
            whiteboardInstance.waitingProcessShapeData = {}; //等待处理的白板数据
            this._removeAllRemindContent(whiteboardInstance);
            setTimeout(function () {
                _this._resizeWhiteboardHandler(whiteboardInstance);
            }, 0);
        }
    }, {
        key: '_resizeWhiteboardHandler',


        /*更新白板的大小*/
        value: function _resizeWhiteboardHandler(whiteboardInstance) {
            var that = this;
            if (whiteboardInstance && whiteboardInstance.lc) {
                var watermarkImage = whiteboardInstance.lc.watermarkImage;
                if (watermarkImage && watermarkImage.src) {
                    var watermarkImageScale = watermarkImage.width / watermarkImage.height;
                    that._resizeWhiteboardByScale(whiteboardInstance, { watermarkImage: watermarkImage, watermarkImageScale: watermarkImageScale });
                } else {
                    that._resizeWhiteboardByScale(whiteboardInstance, { isChangeWatermarkScale: false });
                }
                this._updateAllRemindContent(whiteboardInstance);
            }
        }
    }, {
        key: '_updateWhiteboardWatermarkImageScale',


        /*更新白板的watermarkImageScale*/
        value: function _updateWhiteboardWatermarkImageScale(whiteboardInstance, watermarkImageScale) {
            whiteboardInstance.watermarkImageScale = watermarkImageScale;
            this._resizeWhiteboardHandler(whiteboardInstance);
        }

        /*生产白板提示内容*/

    }, {
        key: '_productionWhiteboardRemindContent',
        value: function _productionWhiteboardRemindContent(whiteboardInstance, x, y, content, shapeId) {
            var _this2 = this;

            if (whiteboardInstance && content) {
                try {
                    if (whiteboardInstance && whiteboardInstance.lc && whiteboardInstance.lc.containerEl.parentNode && typeof whiteboardInstance.lc.drawingCoordsToClientCoords === 'function') {
                        var coords = whiteboardInstance.lc.drawingCoordsToClientCoords(x, y);
                        if (coords) {
                            var remindSpan = document.createElement('span');
                            remindSpan.className = "remind-content";
                            remindSpan.style.position = 'absolute';
                            remindSpan.style.left = coords.x + 'px';
                            remindSpan.style.top = coords.y + 'px';
                            remindSpan.innerHTML = content;
                            var remindSpanId = shapeId ? 'whiteboard_remind_' + shapeId : "whiteboard_remind_" + new Date().getTime();
                            remindSpan.setAttribute('data-position-x', x);
                            remindSpan.setAttribute('data-position-y', y);
                            remindSpan.setAttribute('id', remindSpanId);
                            whiteboardInstance.lc.containerEl.parentNode.appendChild(remindSpan);
                            setTimeout(function () {
                                _this2._removeRemindContentByElementId(whiteboardInstance, remindSpanId);
                                // whiteboardInstance.lc.containerEl.parentNode.removeChild(remindSpan);
                                remindSpan = null;
                            }, whiteboardInstance.remindContentTime);
                        }
                    }
                } catch (error) {
                    L.Logger.error('productionWhiteboardRemindContent error:', error);
                }
            }
        }

        /*更新所有提示内容的坐标*/

    }, {
        key: '_updateAllRemindContent',
        value: function _updateAllRemindContent(whiteboardInstance) {
            try {
                if (whiteboardInstance.lc && whiteboardInstance.lc.containerEl.parentNode) {
                    var remindSpanElements = whiteboardInstance.lc.containerEl.parentNode.getElementsByClassName("remind-content");
                    if (remindSpanElements && remindSpanElements.length > 0) {
                        for (var index = 0; index < remindSpanElements.length; index++) {
                            var remindSpanElement = remindSpanElements[index];
                            var x = Number(remindSpanElement.getAttribute('data-position-x')),
                                y = Number(remindSpanElement.getAttribute('data-position-y'));
                            var coords = whiteboardInstance.lc.drawingCoordsToClientCoords(x, y);
                            remindSpanElement.style.left = coords.x + 'px';
                            remindSpanElement.style.top = coords.y + 'px';
                        }
                    }
                }
            } catch (error) {
                L.Logger.error('updateAllRemindContent error:', error);
            }
        }

        /*移除所有提示内容*/

    }, {
        key: '_removeRemindContentByElementId',
        value: function _removeRemindContentByElementId(whiteboardInstance, elementid) {
            if (whiteboardInstance && whiteboardInstance.lc && whiteboardInstance.lc.containerEl.parentNode) {
                var remindSpanElement = document.getElementById(elementid);
                if (remindSpanElement) {
                    remindSpanElement.innerHTML = '';
                    whiteboardInstance.lc.containerEl.parentNode.removeChild(remindSpanElement);
                    remindSpanElement = null;
                }
            }
        }

        /*移除所有提示内容*/

    }, {
        key: '_removeAllRemindContent',
        value: function _removeAllRemindContent(whiteboardInstance) {
            if (whiteboardInstance && whiteboardInstance.lc && whiteboardInstance.lc.containerEl.parentNode) {
                try {
                    if (whiteboardInstance.lc && whiteboardInstance.lc.containerEl.parentNode) {
                        var remindSpanElements = whiteboardInstance.lc.containerEl.parentNode.getElementsByClassName("remind-content");
                        if (remindSpanElements && remindSpanElements.length > 0) {
                            for (var index = remindSpanElements.length - 1; index >= 0; index--) {
                                var remindSpanElement = remindSpanElements[index];
                                remindSpanElement.innerHTML = '';
                                whiteboardInstance.lc.containerEl.parentNode.removeChild(remindSpanElement);
                                remindSpanElement = null;
                            }
                        }
                    }
                } catch (error) {
                    L.Logger.error('removeAllRemindContent error:', error);
                }
            }
        }

        /*白板事件回调处理函数:shapeSave*/

    }, {
        key: '_handlerShapeSaveEvent',
        value: function _handlerShapeSaveEvent(whiteboardInstance, eventData) {
            this._sendWhiteboardMessageToSignallingServer(whiteboardInstance, "shapeSaveEvent", eventData);
            this._actionIsDisable(whiteboardInstance);
        }
    }, {
        key: '_handlerUndoEvent',


        /*白板事件回调处理函数:undo*/
        value: function _handlerUndoEvent(whiteboardInstance, eventData) {
            this._sendWhiteboardMessageToSignallingServer(whiteboardInstance, "undoEvent", eventData);
            this._actionIsDisable(whiteboardInstance);
        }
    }, {
        key: '_handlerRedoEvent',


        /*白板事件回调处理函数:redo*/
        value: function _handlerRedoEvent(whiteboardInstance, eventData) {
            this._sendWhiteboardMessageToSignallingServer(whiteboardInstance, "redoEvent", eventData);
            this._actionIsDisable(whiteboardInstance);
        }
    }, {
        key: '_handlerClearEvent',


        /*白板事件回调处理函数:clear*/
        value: function _handlerClearEvent(whiteboardInstance, eventData) {
            this._sendWhiteboardMessageToSignallingServer(whiteboardInstance, "clearEvent", eventData);
            this._actionIsDisable(whiteboardInstance);
        }
    }, {
        key: '_handlerDrawingChangeEvent',


        /*白板画了数据之后的回调函数*/
        value: function _handlerDrawingChangeEvent(whiteboardInstance) {
            this._saveImageBase64ToImageThumbnail(whiteboardInstance);
        }
    }, {
        key: '_saveImageBase64ToImageThumbnail',


        /*保存canvas数据到图片缩略图中*/
        value: function _saveImageBase64ToImageThumbnail(whiteboardInstance) {
            if (whiteboardInstance.imageThumbnailId) {
                var imageThumbnail = document.getElementById(whiteboardInstance.imageThumbnailId);
                if (imageThumbnail && imageThumbnail.nodeName.toLowerCase() === 'img') {
                    var imageBase64Url = this._convertCanvasToImageBase64(whiteboardInstance, 'jpg');
                    imageThumbnail.src = imageBase64Url;
                    if (whiteboardInstance.imageThumbnailTipContent && document.getElementById(whiteboardInstance.imageThumbnailId + '_imageDescribe')) {
                        document.getElementById(whiteboardInstance.imageThumbnailId + '_imageDescribe').innerHTML = whiteboardInstance.imageThumbnailTipContent;
                    } else if (whiteboardInstance.nickname && document.getElementById(whiteboardInstance.imageThumbnailId + '_imageDescribe')) {
                        document.getElementById(whiteboardInstance.imageThumbnailId + '_imageDescribe').innerHTML = whiteboardInstance.nickname;
                    }
                }
            }
        }

        /*销毁白板实例，通过实例whiteboardInstance*/

    }, {
        key: '_destroyWhiteboardInstance',
        value: function _destroyWhiteboardInstance(whiteboardInstance) {
            var that = this;
            clearTimeout(whiteboardInstance.noticeUpdateToolDescTimer);
            clearTimeout(whiteboardInstance.laserTimer);
            clearTimeout(whiteboardInstance.setWhiteboardWatermarkImageTimer);
            /*   if( whiteboardInstance.dependenceBaseboardWhiteboardID !== undefined  && !whiteboardInstance.isBaseboard && whiteboardInstance.id !== undefined){
                   if(that.basicTemplateWhiteboardSignallingList[whiteboardInstance.dependenceBaseboardWhiteboardID]){
                       that.saveWhiteboardStackToStorage(whiteboardInstance.id , {saveRedoStack:whiteboardInstance.saveRedoStack , saveUndoStack:whiteboardInstance.saveUndoStack });
                       that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.dependenceBaseboardWhiteboardID] = that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.dependenceBaseboardWhiteboardID] || {} ;
                       that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.dependenceBaseboardWhiteboardID][whiteboardInstance.id] = Object.deepAssign({} ,  whiteboardInstance.stackStorage) ;
                   }else if( that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.dependenceBaseboardWhiteboardID] ){
                       that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.dependenceBaseboardWhiteboardID] = null;
                       delete that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.dependenceBaseboardWhiteboardID] ;
                   }
               }*/
            if (that.basicTemplateWhiteboardSignallingList[whiteboardInstance.id]) {
                that.basicTemplateWhiteboardSignallingList[whiteboardInstance.id] = null;
                delete that.basicTemplateWhiteboardSignallingList[whiteboardInstance.id];
            }
            /*   if(that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.id]){
                   that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.id] = null ;
                   delete that.basicTemplateWhiteboardSignallingChildrenStackStorage[whiteboardInstance.id] ;
               }*/
            that._clearWhiteboardAllDataByInstance(whiteboardInstance);
            var whiteboardInstanceID = whiteboardInstance.whiteboardInstanceID;
            var whiteboardElement = whiteboardInstance.whiteboardElement;
            if (whiteboardInstance.lc && typeof whiteboardInstance.lc.teardown === 'function') {
                whiteboardInstance.lc.teardown();
            }
            if (!whiteboardElement) {
                L.Logger.warning('[destroy] whiteboard elements do not exist , element id is:' + whiteboardInstance.whiteboardElementId + '!');
            } else {
                whiteboardElement.innerHTML = '';
            }
            var thumbnailElement = whiteboardInstance.thumbnailId ? document.getElementById(whiteboardInstance.thumbnailId) : undefined;
            if (thumbnailElement) {
                thumbnailElement.innerHTML = '';
            }
            var _iteratorNormalCompletion9 = true;
            var _didIteratorError9 = false;
            var _iteratorError9 = undefined;

            try {
                for (var _iterator9 = Object.keys(whiteboardInstance)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                    var key = _step9.value;

                    whiteboardInstance[key] = null;
                    delete whiteboardInstance[key];
                }
            } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion9 && _iterator9.return) {
                        _iterator9.return();
                    }
                } finally {
                    if (_didIteratorError9) {
                        throw _iteratorError9;
                    }
                }
            }

            that.whiteboardInstanceStore[whiteboardInstanceID] = null; //白板实例
            delete that.whiteboardInstanceStore[whiteboardInstanceID];
        }
    }, {
        key: '_clearLc',


        /*执行白板的clear方法*/
        value: function _clearLc(whiteboardInstance) {
            var _ref20 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref20$triggerEvent = _ref20.triggerEvent,
                triggerEvent = _ref20$triggerEvent === undefined ? true : _ref20$triggerEvent;

            if (whiteboardInstance && whiteboardInstance.lc) {
                whiteboardInstance.lc.clear(false);
                this._removeAllRemindContent(whiteboardInstance);
            } else {
                L.Logger.warning('clear whiteboard is not exist!');
            }
        }
    }, {
        key: '_clearLcRedoStack',


        /*执行白板的redoStack方法*/
        value: function _clearLcRedoStack(whiteboardInstance) {
            whiteboardInstance && whiteboardInstance.lc ? whiteboardInstance.lc.redoStack.length = 0 : L.Logger.warning('clearRedoStack whiteboard is not exist!');
        }
    }, {
        key: '_clearLcUndoStack',


        /*执行白板的UndoStack方法*/
        value: function _clearLcUndoStack(whiteboardInstance) {
            whiteboardInstance && whiteboardInstance.lc ? whiteboardInstance.lc.undoStack.length = 0 : L.Logger.warning('clearUndoStack whiteboard is not exist!');
        }
    }, {
        key: '_showWhiteboardLoading',


        /*显示白板正在loading*/
        value: function _showWhiteboardLoading(whiteboardInstance) {
            var that = this;
            if (whiteboardInstance.lc.loadingElement) {
                whiteboardInstance.lc.loadingElement.style.display = 'block';
            }
        }
    }, {
        key: '_hideWhiteboardLoading',


        /*隐藏白板正在loading*/
        value: function _hideWhiteboardLoading(whiteboardInstance) {
            var that = this;
            if (whiteboardInstance.lc.loadingElement) {
                whiteboardInstance.lc.loadingElement.style.display = 'none';
            }
        }
    }, {
        key: '_changeWhiteboardTemporaryDeawPermission',


        /*改变白板临时可画权限*/
        value: function _changeWhiteboardTemporaryDeawPermission(value, whiteboardInstance) {
            var that = this;
            var _handerChangeWhiteboardTemporaryDeawPermission = function _handerChangeWhiteboardTemporaryDeawPermission(whiteboardInstance) {
                var whiteboardInstance_lc = whiteboardInstance.lc;
                if (whiteboardInstance_lc.isTmpDrawAble !== value) {
                    whiteboardInstance_lc.isTmpDrawAble = value;
                    var temporaryDrawPermission = whiteboardInstance_lc.containerEl.parentNode.getElementsByClassName("temporary-draw-permission")[0];
                    if (whiteboardInstance_lc.isTmpDrawAble) {
                        temporaryDrawPermission.className = temporaryDrawPermission.className.replace(/( yes| no)/g, "");
                        temporaryDrawPermission.className += " yes";
                    } else {
                        temporaryDrawPermission.className = temporaryDrawPermission.className.replace(/( yes| no)/g, "");
                        temporaryDrawPermission.className += " no";
                    }
                }
            };
            that._automaticTraverseWhiteboardInstance(whiteboardInstance, _handerChangeWhiteboardTemporaryDeawPermission);
        }
    }, {
        key: '_changeWhiteboardDeawPermission',


        /*改变白板可画权限*/
        value: function _changeWhiteboardDeawPermission(value, whiteboardInstance) {
            var that = this;
            var _handerChangeWhiteboardDeawPermission = function _handerChangeWhiteboardDeawPermission(whiteboardInstance) {
                whiteboardInstance.deawPermission = value;
                var whiteboardInstance_lc = whiteboardInstance.lc;
                if (whiteboardInstance_lc.isDrawAble !== value) {
                    whiteboardInstance_lc.isDrawAble = value;
                    var drawPermission = whiteboardInstance_lc.containerEl.parentNode.getElementsByClassName("draw-permission")[0];
                    if (whiteboardInstance_lc.isDrawAble) {
                        drawPermission.className = drawPermission.className.replace(/( yes| no)/g, "");
                        drawPermission.className += " yes";
                    } else {
                        drawPermission.className = drawPermission.className.replace(/( yes| no)/g, "");
                        drawPermission.className += " no";
                    }
                }
            };
            that._automaticTraverseWhiteboardInstance(whiteboardInstance, _handerChangeWhiteboardDeawPermission);
        }
    }, {
        key: '_handlerActiveToolLaser',


        /*处理激光笔工具的激活*/
        value: function _handlerActiveToolLaser(toolKey, whiteboardInstance) {
            var that = this;
            var _handlerActiveToolLaserFromInner = function _handlerActiveToolLaserFromInner(whiteboardInstance) {
                var whiteboardInstance_lc = whiteboardInstance.lc;
                var containerElParent = whiteboardInstance_lc.containerEl.parentNode;
                var temporaryDrawPermission = containerElParent.getElementsByClassName("temporary-draw-permission")[0];
                var laserMark = containerElParent.getElementsByClassName("laser-mark")[0];

                if (toolKey === 'tool_laser') {
                    whiteboardInnerUtils.removeEvent(temporaryDrawPermission, 'mousemove', whiteboardInstance._laserEventHandler_mousemove);
                    whiteboardInnerUtils.removeEvent(containerElParent, 'mouseenter', whiteboardInstance._laserEventHandler_mouseenter);
                    whiteboardInnerUtils.removeEvent(containerElParent, 'mouseleave', whiteboardInstance._laserEventHandler_mouseleave);
                    whiteboardInstance._laserEventHandler_mousemove = function (e) {
                        if (whiteboardInstance.activeTool !== 'tool_laser') {
                            var parameter = {
                                action: {
                                    actionName: "hide"
                                }
                            };
                            that._sendWhiteboardMessageToSignallingServer(whiteboardInstance, "laserMarkEvent", parameter);
                            laserMark.style.display = 'none';
                            whiteboardInnerUtils.removeEvent(temporaryDrawPermission, 'mousemove', whiteboardInstance._laserEventHandler_mousemove);
                            return false;
                        }
                        var x = e.pageX,
                            y = e.pageY;
                        var offset = temporaryDrawPermission.getBoundingClientRect();
                        var x1 = void 0,
                            y1 = void 0;
                        var markContainerWidth = temporaryDrawPermission.clientWidth;
                        var markContainerHeight = temporaryDrawPermission.clientHeight;
                        switch (whiteboardInstance.rotateDeg) {
                            case 0:
                                x1 = x - offset.left;
                                y1 = y - offset.top;
                                break;
                            case 90:
                                x1 = y - offset.top;
                                y1 = markContainerHeight - (x - offset.left);
                                break;
                            case 180:
                                x1 = markContainerWidth - (x - offset.left);
                                y1 = markContainerHeight - (y - offset.top);
                                break;
                            case 270:
                                x1 = markContainerWidth - (y - offset.top);
                                y1 = x - offset.left;
                                break;
                            default:
                                x1 = x - offset.left;
                                y1 = y - offset.top;
                                break;
                        }
                        var left = x1 / markContainerWidth * 100;
                        var top = y1 / markContainerHeight * 100;
                        laserMark.style.left = left + "%";
                        laserMark.style.top = top + "%";
                        clearTimeout(whiteboardInstance.laserTimer);
                        whiteboardInstance.laserTimer = setTimeout(function () {
                            if (whiteboardInstance.laserPosition && (Math.abs(left - whiteboardInstance.laserPosition.left) > 0.3 || Math.abs(top - whiteboardInstance.laserPosition.top) > 0.3)) {
                                var _parameter = {
                                    laser: {
                                        left: left,
                                        top: top
                                    },
                                    action: {
                                        actionName: "move"
                                    }
                                };
                                whiteboardInstance.laserPosition = _parameter.laser;
                                that._sendWhiteboardMessageToSignallingServer(whiteboardInstance, "laserMarkEvent", _parameter);
                            }
                        }, 100);
                        return false;
                    };
                    whiteboardInstance._laserEventHandler_mouseenter = function (e) {
                        if (whiteboardInstance.activeTool !== 'tool_laser') {
                            var _parameter2 = {
                                action: {
                                    actionName: "hide"
                                }
                            };
                            that._sendWhiteboardMessageToSignallingServer(whiteboardInstance, "laserMarkEvent", _parameter2);
                            laserMark.style.display = 'none';
                            whiteboardInnerUtils.removeEvent(containerElParent, 'mouseenter', whiteboardInstance._laserEventHandler_mouseenter);
                            return false;
                        }
                        var parameter = {
                            action: {
                                actionName: "show"
                            }
                        };
                        that._sendWhiteboardMessageToSignallingServer(whiteboardInstance, "laserMarkEvent", parameter);
                        laserMark.style.display = 'block';
                        return false;
                    };
                    whiteboardInstance._laserEventHandler_mouseleave = function (e) {
                        var parameter = {
                            action: {
                                actionName: "hide"
                            }
                        };
                        that._sendWhiteboardMessageToSignallingServer(whiteboardInstance, "laserMarkEvent", parameter);
                        laserMark.style.display = 'none';
                        if (whiteboardInstance.activeTool !== 'tool_laser') {
                            whiteboardInnerUtils.removeEvent(containerElParent, 'mouseleave', whiteboardInstance._laserEventHandler_mouseleave);
                        }
                        return false;
                    };

                    that._changeWhiteboardTemporaryDeawPermission(false, whiteboardInstance);
                    whiteboardInstance.selectLaserTool = true;
                    whiteboardInnerUtils.removeEvent(temporaryDrawPermission, 'mousemove', whiteboardInstance._laserEventHandler_mousemove);
                    whiteboardInnerUtils.removeEvent(containerElParent, 'mouseenter', whiteboardInstance._laserEventHandler_mouseenter);
                    whiteboardInnerUtils.removeEvent(containerElParent, 'mouseleave', whiteboardInstance._laserEventHandler_mouseleave);
                    temporaryDrawPermission.className = temporaryDrawPermission.className.replace(/ cursor-none/g, "");
                    temporaryDrawPermission.className += " cursor-none";
                    whiteboardInstance.laserPosition = whiteboardInstance.laserPosition || { left: 0, top: 0 };
                    whiteboardInnerUtils.addEvent(temporaryDrawPermission, 'mousemove', whiteboardInstance._laserEventHandler_mousemove);
                    whiteboardInnerUtils.addEvent(containerElParent, 'mouseenter', whiteboardInstance._laserEventHandler_mouseenter);
                    whiteboardInnerUtils.addEvent(containerElParent, 'mouseleave', whiteboardInstance._laserEventHandler_mouseleave);
                } else {
                    that._changeWhiteboardTemporaryDeawPermission(toolKey !== 'tool_mouse', whiteboardInstance);
                    whiteboardInnerUtils.removeEvent(temporaryDrawPermission, 'mousemove', whiteboardInstance._laserEventHandler_mousemove);
                    whiteboardInnerUtils.removeEvent(containerElParent, 'mouseenter', whiteboardInstance._laserEventHandler_mouseenter);
                    whiteboardInnerUtils.removeEvent(containerElParent, 'mouseleave', whiteboardInstance._laserEventHandler_mouseleave);
                    temporaryDrawPermission.className = temporaryDrawPermission.className.replace(/ cursor-none/g, "");
                    laserMark.style.display = 'none';
                    if (whiteboardInstance.selectLaserTool) {
                        var parameter = {
                            action: {
                                actionName: "hide"
                            }
                        };
                        that._sendWhiteboardMessageToSignallingServer(whiteboardInstance, "laserMarkEvent", parameter);
                        whiteboardInstance.selectLaserTool = false;
                    }
                }
            };
            that._automaticTraverseWhiteboardInstance(whiteboardInstance, _handlerActiveToolLaserFromInner);
        }
    }, {
        key: '_sendSignallingToServer',


        /*发送白板数据信令给服务器*/
        value: function _sendSignallingToServer(whiteboardInstance) {
            var _ref21 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                idPrefix = _ref21.idPrefix,
                data = _ref21.data,
                name = _ref21.name,
                assignId = _ref21.assignId,
                do_not_save = _ref21.do_not_save,
                expiresabs = _ref21.expiresabs,
                associatedMsgID = _ref21.associatedMsgID,
                associatedUserID = _ref21.associatedUserID;

            if (!whiteboardInstance) {
                L.Logger.error('[_sendSignallingToServer]whiteboardInstance is not exist!');
                return;
            }
            if (whiteboardInstance.handler && whiteboardInstance.handler.sendSignallingToServer && typeof whiteboardInstance.handler.sendSignallingToServer === 'function') {
                var _whiteboardInstance$f2 = whiteboardInstance.filedata,
                    currpage = _whiteboardInstance$f2.currpage,
                    fileid = _whiteboardInstance$f2.fileid;

                if (currpage === undefined || fileid === undefined) {
                    L.Logger.error('[_sendSignallingToServer]whiteboardInstance.filedata do not contain  currpage or fileid , [ currpage , fileid ]is [' + currpage + ',' + fileid + ']!');
                    return;
                }
                if (data && typeof data === 'string') {
                    data = JSON.parse(data);
                }
                data.whiteboardID = whiteboardInstance.id;
                data.isBaseboard = whiteboardInstance.isBaseboard;
                data.nickname = whiteboardInstance.nickname;
                if (whiteboardInstance.dependenceBaseboardWhiteboardID !== undefined) {
                    data.dependenceBaseboardWhiteboardID = whiteboardInstance.dependenceBaseboardWhiteboardID;
                }
                associatedMsgID = associatedMsgID || whiteboardInstance.associatedMsgID;
                associatedUserID = associatedUserID || whiteboardInstance.associatedUserID;
                var id = assignId || idPrefix + "###_" + name + "_" + fileid + "_" + currpage,
                    toID = "__allExceptSender";
                if (data.eventType === 'shapeSaveEvent' || data.eventType === 'undoEvent' || data.eventType === 'redoEvent' || data.eventType === 'clearEvent') {
                    toID = '__all';
                }
                var copyData = Object.deepAssign({}, data);
                if (toID !== '__all') {
                    this._saveBasicTemplateWhiteboardSignallingData({ name: name, id: id, toID: toID, data: copyData, do_not_save: do_not_save, expiresabs: expiresabs, associatedMsgID: associatedMsgID, associatedUserID: associatedUserID }, 'pubmsg');
                }
                whiteboardInstance.handler.sendSignallingToServer(name, id, toID, data, do_not_save, expiresabs, associatedMsgID, associatedUserID);
            }
        }
    }, {
        key: '_delSignallingToServer',


        /*发送白板数据信令给服务器*/
        value: function _delSignallingToServer(whiteboardInstance) {
            var _ref22 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                idPrefix = _ref22.idPrefix,
                data = _ref22.data,
                name = _ref22.name,
                assignId = _ref22.assignId;

            if (!whiteboardInstance) {
                L.Logger.error('[_delSignallingToServer]whiteboardInstance is not exist!');
                return;
            }
            if (whiteboardInstance.handler && whiteboardInstance.handler.delSignallingToServer && typeof whiteboardInstance.handler.delSignallingToServer === 'function') {
                var _whiteboardInstance$f3 = whiteboardInstance.filedata,
                    currpage = _whiteboardInstance$f3.currpage,
                    fileid = _whiteboardInstance$f3.fileid;

                if (currpage === undefined || fileid === undefined) {
                    L.Logger.error('[_delSignallingToServer]whiteboardInstance.filedata do not contain  currpage or fileid , [ currpage , fileid ]is [' + currpage + ',' + fileid + ']!');
                    return;
                }
                data.whiteboardID = whiteboardInstance.id;
                data.isBaseboard = whiteboardInstance.isBaseboard;
                if (whiteboardInstance.dependenceBaseboardWhiteboardID !== undefined) {
                    data.dependenceBaseboardWhiteboardID = whiteboardInstance.dependenceBaseboardWhiteboardID;
                }
                var id = assignId || idPrefix + "###_" + name + "_" + fileid + "_" + currpage,
                    toID = "__allExceptSender";
                if (data.eventType === 'shapeSaveEvent' || data.eventType === 'undoEvent' || data.eventType === 'redoEvent' || data.eventType === 'clearEvent') {
                    toID = '__all';
                }
                var copyData = Object.deepAssign({}, data);
                if (toID !== '__all') {
                    this._saveBasicTemplateWhiteboardSignallingData({ name: name, id: id, toID: toID, data: copyData }, 'delmsg');
                }
                whiteboardInstance.handler.delSignallingToServer(name, id, toID, data);
            }
        }
    }, {
        key: '_sendWhiteboardMessageToSignallingServer',


        /*发送白板消息给信令服务器*/
        value: function _sendWhiteboardMessageToSignallingServer(whiteboardInstance, eventType, parameter) {
            var that = this;
            var idPrefix = void 0,
                data = void 0,
                name = void 0,
                assignId = void 0,
                do_not_save = void 0,
                shapeData = void 0,
                testData = void 0;
            switch (eventType) {
                case "shapeSaveEvent":
                    shapeData = window.LC.shapeToJSON(parameter.shape);
                    if (shapeData != null && shapeData.className != null && (shapeData.className == "LinePath" || shapeData.className == "ErasedLinePath")) {
                        shapeData.data.smoothedPointCoordinatePairs = null;
                        delete shapeData.data.smoothedPointCoordinatePairs;
                        var tmpData = shapeData.data.pointCoordinatePairs;
                        tmpData.forEach(function (item) {
                            item[0] = Math.round(item[0]);
                            item[1] = Math.round(item[1]);
                        });
                    }
                    testData = { eventType: eventType, actionName: parameter.action.actionName, shapeId: parameter.shapeId, data: shapeData };
                    idPrefix = parameter.shapeId, data = testData, name = "SharpsChange", assignId = undefined, do_not_save = undefined;
                    that._sendSignallingToServer(whiteboardInstance, { idPrefix: idPrefix, data: data, name: name, assignId: assignId, do_not_save: do_not_save });
                    break;
                case "undoEvent":
                    if (parameter.action.actionName === "AddShapeAction") {
                        var shapeId = parameter.action.shapeId;
                        testData = { eventType: eventType, actionName: parameter.action.actionName, shapeId: shapeId };
                        idPrefix = shapeId, data = testData, name = "SharpsChange", assignId = undefined;
                        that._delSignallingToServer(whiteboardInstance, { idPrefix: idPrefix, data: data, name: name, assignId: assignId });
                    } else if (parameter.action.actionName === "ClearAction") {
                        var _clearActionId = parameter.action.id;
                        testData = { eventType: eventType, actionName: parameter.action.actionName, clearActionId: _clearActionId };
                        idPrefix = _clearActionId, data = testData, name = "SharpsChange", assignId = undefined;
                        that._delSignallingToServer(whiteboardInstance, { idPrefix: idPrefix, data: data, name: name, assignId: assignId });
                    }
                    break;
                case "redoEvent":
                    if (parameter.action.actionName === "AddShapeAction") {
                        shapeData = window.LC.shapeToJSON(parameter.action.shape);
                        if (shapeData != null && shapeData.className != null && (shapeData.className == "LinePath" || shapeData.className == "ErasedLinePath")) {
                            shapeData.data.smoothedPointCoordinatePairs = null;
                            delete shapeData.data.smoothedPointCoordinatePairs;
                            var _tmpData = shapeData.data.pointCoordinatePairs;
                            _tmpData.forEach(function (item) {
                                item[0] = Math.round(item[0]);
                                item[1] = Math.round(item[1]);
                            });
                        };
                        var _shapeId = parameter.action.shapeId;
                        var otherInfo = { authorUserId: parameter.action.authorUserId, seq: parameter.action.seq };
                        testData = { eventType: eventType, actionName: parameter.action.actionName, shapeId: _shapeId, data: shapeData, otherInfo: otherInfo };
                        var _idPrefix = _shapeId,
                            _data = testData,
                            _name = "SharpsChange",
                            _assignId = undefined,
                            _do_not_save = undefined;
                        that._sendSignallingToServer(whiteboardInstance, { idPrefix: _idPrefix, data: _data, name: _name, assignId: _assignId, do_not_save: _do_not_save });
                    } else if (parameter.action.actionName === "ClearAction") {
                        var _clearActionId2 = parameter.action.id;
                        var _otherInfo2 = { authorUserId: parameter.action.authorUserId, seq: parameter.action.seq, toAuthorUserId: parameter.action.toAuthorUserId };
                        testData = { eventType: eventType, actionName: parameter.action.actionName, clearActionId: _clearActionId2, otherInfo: _otherInfo2 };
                        idPrefix = _clearActionId2, data = testData, name = "SharpsChange", assignId = undefined, do_not_save = undefined;
                        that._sendSignallingToServer(whiteboardInstance, { idPrefix: idPrefix, data: data, name: name, assignId: assignId, do_not_save: do_not_save });
                    }
                    break;
                case "clearEvent":
                    var clearActionId = parameter.clearActionId;
                    testData = { eventType: eventType, actionName: parameter.action.actionName, clearActionId: clearActionId };
                    idPrefix = clearActionId, data = testData, name = "SharpsChange", assignId = undefined, do_not_save = undefined;
                    if (whiteboardInstance && whiteboardInstance.isOnlyUndoRedoClearMyselfShape && whiteboardInstance.myselfId) {
                        testData.toAuthorUserId = whiteboardInstance.myselfId;
                    }
                    that._sendSignallingToServer(whiteboardInstance, { idPrefix: idPrefix, data: data, name: name, assignId: assignId, do_not_save: do_not_save });
                    break;
                case "laserMarkEvent":
                    var laserMarkId = "laserMarkEvent";
                    testData = { eventType: eventType, actionName: parameter.action.actionName };
                    if (parameter && parameter.laser) {
                        testData.laser = parameter.laser;
                    }
                    idPrefix = laserMarkId, data = testData, name = "SharpsChange", assignId = undefined, do_not_save = true;
                    that._sendSignallingToServer(whiteboardInstance, { idPrefix: idPrefix, data: data, name: name, assignId: assignId, do_not_save: do_not_save });
                    break;
            };
        }
    }, {
        key: '_updateTextFont',


        /*更新白板字体*/
        value: function _updateTextFont(whiteboardInstance) {
            /*：font-style | font-variant | font-weight | font-size | line-height | font-family */
            /*
             font:italic small-caps bold 12px/1.5em arial,verdana;  （注：简写时，font-size和line-height只能通过斜杠/组成一个值，不能分开写。）
             等效于：
             font-style:italic;
             font-variant:small-caps;
             font-weight:bold;
             font-size:12px;
             line-height:1.5em;
             font-family:arial,verdana;
             */
            var that = this;
            var _updateTextFontFromInner = function _updateTextFontFromInner(whiteboardInstance) {
                var fontSize = whiteboardInstance.whiteboardToolsInfo.fontSize;
                var fontFamily = whiteboardInstance.whiteboardToolsInfo.fontFamily;
                var fontStyle = whiteboardInstance.whiteboardToolsInfo.fontStyle;
                var fontWeight = whiteboardInstance.whiteboardToolsInfo.fontWeight;
                var tool = whiteboardInstance.lc.tool;
                if (tool.name === "Text") {
                    tool.font = fontStyle + " " + fontWeight + " " + fontSize + "px " + fontFamily;
                }
            };
            that._automaticTraverseWhiteboardInstance(whiteboardInstance, _updateTextFontFromInner);
        }
    }, {
        key: '_updateEraserWidth',


        /*更新橡皮宽度*/
        value: function _updateEraserWidth(whiteboardInstance) {
            var that = this;
            var _updateEraserWidthFromInner = function _updateEraserWidthFromInner(whiteboardInstance) {
                var eraserWidth = whiteboardInstance.whiteboardToolsInfo.eraserWidth;
                whiteboardInstance.lc.trigger('setStrokeWidth', eraserWidth);
            };
            that._automaticTraverseWhiteboardInstance(whiteboardInstance, _updateEraserWidthFromInner);
        }
    }, {
        key: '_updatePencilWidth',


        /*更新画笔的宽度*/
        value: function _updatePencilWidth(whiteboardInstance) {
            var that = this;
            var _updatePencilWidthFromInner = function _updatePencilWidthFromInner(whiteboardInstance) {
                var pencilWidth = whiteboardInstance.whiteboardToolsInfo.pencilWidth;
                whiteboardInstance.lc.trigger('setStrokeWidth', pencilWidth);
            };
            that._automaticTraverseWhiteboardInstance(whiteboardInstance, _updatePencilWidthFromInner);
        }
    }, {
        key: '_updateShapeWidth',


        /*更新形状的宽度*/
        value: function _updateShapeWidth(whiteboardInstance) {
            var that = this;
            var _updateShapeWidthFromInner = function _updateShapeWidthFromInner(whiteboardInstance) {
                var shapeWidth = whiteboardInstance.whiteboardToolsInfo.shapeWidth;
                whiteboardInstance.lc.trigger('setStrokeWidth', shapeWidth);
            };
            that._automaticTraverseWhiteboardInstance(whiteboardInstance, _updateShapeWidthFromInner);
        }
    }, {
        key: '_updateColor',


        /*更新颜色*/
        value: function _updateColor(whiteboardInstance, colorJson) {
            var that = this;
            if (colorJson && (typeof colorJson === 'undefined' ? 'undefined' : _typeof(colorJson)) === 'object') {
                var _updateColorFromInner = function _updateColorFromInner(whiteboardInstance) {
                    var _iteratorNormalCompletion10 = true;
                    var _didIteratorError10 = false;
                    var _iteratorError10 = undefined;

                    try {
                        for (var _iterator10 = Object.keys(colorJson)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                            var key = _step10.value;

                            var colorKey = key.replace(/Color/g, '');
                            whiteboardInstance.lc.setColor(colorKey, whiteboardInstance.whiteboardToolsInfo[colorKey + "Color"]);
                            if ((colorKey === "primary" || colorKey === "secondary") && (whiteboardInstance.activeTool === "tool_rectangle" || whiteboardInstance.activeTool === "tool_rectangle_empty" || whiteboardInstance.activeTool === "tool_ellipse" || whiteboardInstance.activeTool === "tool_ellipse_empty" || whiteboardInstance.activeTool === "tool_polygon")) {
                                if (whiteboardInstance.activeTool === "tool_ellipse_empty" || whiteboardInstance.activeTool === "tool_rectangle_empty") {
                                    //空心
                                    whiteboardInstance.lc.setColor('secondary', "transparent");
                                } else {
                                    whiteboardInstance.lc.setColor('secondary', whiteboardInstance.whiteboardToolsInfo.primaryColor);
                                }
                            }
                            if (colorKey === "primary" && whiteboardInstance.activeTool === 'tool_highlighter') {
                                var color = whiteboardInstance.whiteboardToolsInfo[colorKey + "Color"].colorRgb().toLowerCase().replace("rgb", "rgba").replace(")", ",0.5)");
                                whiteboardInstance.lc.setColor(colorKey, color);
                            }
                        }
                    } catch (err) {
                        _didIteratorError10 = true;
                        _iteratorError10 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion10 && _iterator10.return) {
                                _iterator10.return();
                            }
                        } finally {
                            if (_didIteratorError10) {
                                throw _iteratorError10;
                            }
                        }
                    }
                };
                that._automaticTraverseWhiteboardInstance(whiteboardInstance, _updateColorFromInner);
            }
        }
    }, {
        key: '_actionIsDisable',


        /*undo、redo、clear等动作是否禁用*/
        value: function _actionIsDisable(whiteboardInstance) {
            var that = this;
            var _actionIsDisableFromInnner = function _actionIsDisableFromInnner(whiteboardInstance) {
                if (whiteboardInstance.active) {
                    //如果白板处于激活动态
                    if (whiteboardInstance.lc.shapes.length === 0) {
                        //白板没有画笔数据
                        var updateDescArray = [['action_clear', { disabled: true }], ['tool_eraser', { disabled: true }], ['tool_eyedropper', { disabled: true }]];
                        that._batchUpdateToolDesc(whiteboardInstance, updateDescArray);
                        that._noticeUpdateToolDesc(whiteboardInstance);
                    } else {
                        var _updateDescArray = [['action_clear', { disabled: false }], ['tool_eraser', { disabled: false }], ['tool_eyedropper', { disabled: false }]];
                        if (whiteboardInstance.isOnlyUndoRedoClearMyselfShape && whiteboardInstance.myselfId) {
                            _updateDescArray = [['action_clear', { disabled: true }], ['tool_eraser', { disabled: true }], ['tool_eyedropper', { disabled: true }]];
                            for (var i = 0; i < whiteboardInstance.lc.shapes.length; i++) {
                                if (whiteboardInstance.lc.shapes[i].authorUserId == whiteboardInstance.myselfId) {
                                    _updateDescArray = [['action_clear', { disabled: false }], ['tool_eraser', { disabled: false }], ['tool_eyedropper', { disabled: false }]];
                                    break;
                                }
                            }
                        }
                        that._batchUpdateToolDesc(whiteboardInstance, _updateDescArray);
                        that._noticeUpdateToolDesc(whiteboardInstance);
                    }
                    if (!whiteboardInstance.lc.canRedo()) {
                        //不能够redo
                        that._updateToolDesc(whiteboardInstance, 'action_redo', { disabled: true });
                        that._noticeUpdateToolDesc(whiteboardInstance);
                    } else {
                        that._updateToolDesc(whiteboardInstance, 'action_redo', { disabled: false });
                        that._noticeUpdateToolDesc(whiteboardInstance);
                    }
                    if (!whiteboardInstance.lc.canUndo()) {
                        //不能够undo
                        that._updateToolDesc(whiteboardInstance, 'action_undo', { disabled: true });
                        that._noticeUpdateToolDesc(whiteboardInstance);
                    } else {
                        that._updateToolDesc(whiteboardInstance, 'action_undo', { disabled: false });
                        that._noticeUpdateToolDesc(whiteboardInstance);
                    }
                }
            };
            that._automaticTraverseWhiteboardInstance(whiteboardInstance, _actionIsDisableFromInnner);
        }
    }, {
        key: '_zoomIsDisable',


        /*白板缩放比例决定其描述信息*/
        value: function _zoomIsDisable(whiteboardInstance) {
            var that = this;
            var _zoomIsDisableFromInnner = function _zoomIsDisableFromInnner(whiteboardInstance) {
                if (whiteboardInstance.active) {
                    //如果白板处于激活动态
                    if (whiteboardInstance.whiteboardMagnification <= that.minMagnification) {
                        var updateDescArray = [['zoom_small', { disabled: true }], ['zoom_default', { disabled: true }]];
                        that._batchUpdateToolDesc(whiteboardInstance, updateDescArray);
                        that._noticeUpdateToolDesc(whiteboardInstance);
                    } else {
                        var _updateDescArray2 = [['zoom_small', { disabled: false }], ['zoom_default', { disabled: false }]];
                        that._batchUpdateToolDesc(whiteboardInstance, _updateDescArray2);
                        that._noticeUpdateToolDesc(whiteboardInstance);
                    }
                    if (whiteboardInstance.whiteboardMagnification >= that.maxMagnification) {
                        that._updateToolDesc(whiteboardInstance, 'zoom_big', { disabled: true });
                        that._noticeUpdateToolDesc(whiteboardInstance);
                    } else {
                        that._updateToolDesc(whiteboardInstance, 'zoom_big', { disabled: false });
                        that._noticeUpdateToolDesc(whiteboardInstance);
                    }
                }
            };
            that._automaticTraverseWhiteboardInstance(whiteboardInstance, _zoomIsDisableFromInnner);
        }
    }, {
        key: '_toolIsUse',


        /*工具是否在使用*/
        value: function _toolIsUse(whiteboardInstance) {
            var _iteratorNormalCompletion11 = true;
            var _didIteratorError11 = false;
            var _iteratorError11 = undefined;

            try {
                for (var _iterator11 = Object.keys(whiteboardInstance.registerWhiteboardToolsList)[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                    var key = _step11.value;

                    if (/tool_/g.test(key)) {
                        whiteboardInstance.registerWhiteboardToolsList[key].isUse = key === whiteboardInstance.activeTool;
                    } else if (/zoom_/g.test(key)) {
                        whiteboardInstance.registerWhiteboardToolsList[key].zoom = whiteboardInstance.whiteboardMagnification;
                    }
                }
            } catch (err) {
                _didIteratorError11 = true;
                _iteratorError11 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion11 && _iterator11.return) {
                        _iterator11.return();
                    }
                } finally {
                    if (_didIteratorError11) {
                        throw _iteratorError11;
                    }
                }
            }

            this._noticeUpdateToolDesc(whiteboardInstance);
        }
    }, {
        key: '_automaticTraverseWhiteboardInstance',


        /*自动遍历白板实例，如果实例没有则遍历所有实例执行处理*/
        value: function _automaticTraverseWhiteboardInstance(whiteboardInstance, callback) {
            var that = this;
            if (whiteboardInstance) {
                if (callback && typeof callback === 'function') {
                    callback(whiteboardInstance);
                }
            } else {
                var _iteratorNormalCompletion12 = true;
                var _didIteratorError12 = false;
                var _iteratorError12 = undefined;

                try {
                    for (var _iterator12 = Object.values(that.whiteboardInstanceStore)[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                        var _whiteboardInstance2 = _step12.value;

                        if (callback && typeof callback === 'function') {
                            callback(_whiteboardInstance2);
                        }
                    }
                } catch (err) {
                    _didIteratorError12 = true;
                    _iteratorError12 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion12 && _iterator12.return) {
                            _iterator12.return();
                        }
                    } finally {
                        if (_didIteratorError12) {
                            throw _iteratorError12;
                        }
                    }
                }
            }
        }
    }, {
        key: '_saveAwaitSaveToWhiteboardInstanceSignallingToWhiteboardInstance',


        /*保存等待的白板信令数据到相应的白板实例中*/
        value: function _saveAwaitSaveToWhiteboardInstanceSignallingToWhiteboardInstance(whiteboardInstance) {
            var isClear = false;
            for (var i = 0; i < this.awaitSaveToWhiteboardInstanceSignallingArray.length; i++) {
                var waitingProcessData = this.awaitSaveToWhiteboardInstanceSignallingArray[i];
                if (waitingProcessData.data && typeof waitingProcessData.data === 'string') {
                    waitingProcessData.data = JSON.parse(waitingProcessData.data);
                }
                if (waitingProcessData.data.whiteboardID === whiteboardInstance.id) {
                    var shapeName = waitingProcessData.id.substring(waitingProcessData.id.lastIndexOf("###_") + 4);
                    if (shapeName) {
                        var shapeNameArr = shapeName.split("_");
                        shapeName = shapeNameArr[0] + '_' + shapeNameArr[1] + '_' + shapeNameArr[2];
                        if (!whiteboardInstance.waitingProcessShapeData[shapeName]) {
                            whiteboardInstance.waitingProcessShapeData[shapeName] = [];
                            whiteboardInstance.waitingProcessShapeData[shapeName].push(waitingProcessData);
                        } else {
                            whiteboardInstance.waitingProcessShapeData[shapeName].push(waitingProcessData);
                        }
                        isClear = true;
                        this.awaitSaveToWhiteboardInstanceSignallingArray.splice(i, 1, null);
                    }
                }
            }
            if (isClear) {
                for (var _i8 = this.awaitSaveToWhiteboardInstanceSignallingArray.length - 1; _i8 >= 0; _i8--) {
                    if (this.awaitSaveToWhiteboardInstanceSignallingArray[_i8] === null) {
                        this.awaitSaveToWhiteboardInstanceSignallingArray.splice(_i8, 1);
                    }
                }
            }
        }
    }, {
        key: '_basicTemplateWhiteboardSignallingListToWhiteboardInstance',


        /*模板数据保存到*/
        value: function _basicTemplateWhiteboardSignallingListToWhiteboardInstance(whiteboardInstance) {
            if (whiteboardInstance.needLooadBaseboard && !whiteboardInstance.isBaseboard && whiteboardInstance.dependenceBaseboardWhiteboardID !== undefined && !whiteboardInstance.isHandleBasicTemplateWhiteboardSignallingList && whiteboardInstance.id !== whiteboardInstance.dependenceBaseboardWhiteboardID && this.basicTemplateWhiteboardSignallingList[whiteboardInstance.dependenceBaseboardWhiteboardID] && Array.isArray(this.basicTemplateWhiteboardSignallingList[whiteboardInstance.dependenceBaseboardWhiteboardID])) {
                this._batchReceiveSnapshot(this.basicTemplateWhiteboardSignallingList[whiteboardInstance.dependenceBaseboardWhiteboardID], whiteboardInstance);
                whiteboardInstance.isHandleBasicTemplateWhiteboardSignallingList = true;
            }
        }
    }, {
        key: '_convertCanvasToImage',


        /*从 canvas 提取图片 image*/
        value: function _convertCanvasToImage(whiteboardInstance) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'png';

            if (whiteboardInstance && whiteboardInstance.lc && whiteboardInstance.lc.canvas) {
                var canvas = whiteboardInstance.lc.canvas;
                //新Image对象，可以理解为DOM
                var image = new Image();
                // canvas.toDataURL 返回的是一串Base64编码的URL，当然,浏览器自己肯定支持
                image.src = canvas.toDataURL("image/" + type); // 指定格式 PNG
                return image;
            }
        }
    }, {
        key: '_convertCanvasToImageBase64',


        /*从 canvas 提取图片 image base64*/
        value: function _convertCanvasToImageBase64(whiteboardInstance, type) {
            if (whiteboardInstance && whiteboardInstance.lc && whiteboardInstance.lc.canvas) {
                var canvas = whiteboardInstance.lc.canvas;
                // canvas.toDataURL 返回的是一串Base64编码的URL，当然,浏览器自己肯定支持
                var imgBase64 = canvas.toDataURL("image/" + type); // 指定格式 PNG
                return imgBase64;
            }
        }
    }, {
        key: '_saveBasicTemplateWhiteboardSignallingData',


        /*保存基础模板数据*/
        value: function _saveBasicTemplateWhiteboardSignallingData(signallingData, source) {
            if (signallingData && signallingData.data) {
                if (signallingData.data.isBaseboard && signallingData.data.whiteboardID !== undefined) {
                    signallingData.source = source;
                    this.basicTemplateWhiteboardSignallingList[signallingData.data.whiteboardID] = this.basicTemplateWhiteboardSignallingList[signallingData.data.whiteboardID] || [];
                    this.basicTemplateWhiteboardSignallingList[signallingData.data.whiteboardID].push(signallingData);
                }
            }
        }
    }, {
        key: '_handlerShowRemoteRemindContentFromPubmsgData',


        /*显示远程提示内容，来自于pubmsg*/
        value: function _handlerShowRemoteRemindContentFromPubmsgData(whiteboardInstance, pubmsgData) {
            var x = void 0,
                y = void 0,
                content = void 0;
            if (pubmsgData.source === 'pubmsg' && pubmsgData.data && pubmsgData.data.eventType === 'shapeSaveEvent') {
                if (pubmsgData.data.data.className == "LinePath") {
                    var arrLength = pubmsgData.data.data.points.length;
                    if (arrLength > 0) {
                        x = pubmsgData.data.data.points[arrLength - 1].x;
                        y = pubmsgData.data.data.points[arrLength - 1].y;
                        content = pubmsgData.remindContent;
                    }
                    this._productionWhiteboardRemindContent(whiteboardInstance, x, y, content, pubmsgData.data.shapeId);
                } else if (pubmsgData.data.data.className == "Rectangle" || pubmsgData.data.data.className == "Ellipse") {
                    if (pubmsgData.data.data.width > 0 && pubmsgData.data.data.height > 0) {
                        x = pubmsgData.data.data.x + pubmsgData.data.data.width;
                        y = pubmsgData.data.data.y;
                    } else if (pubmsgData.data.data.width > 0 && pubmsgData.data.data.height < 0) {
                        x = pubmsgData.data.data.x + pubmsgData.data.data.width;
                        y = pubmsgData.data.data.y + pubmsgData.data.data.height;
                    } else if (pubmsgData.data.data.width < 0 && pubmsgData.data.data.height < 0) {
                        x = pubmsgData.data.data.x;
                        y = pubmsgData.data.data.y + pubmsgData.data.data.height;
                    } else if (pubmsgData.data.data.width < 0 && pubmsgData.data.data.height > 0) {
                        x = pubmsgData.data.data.x;
                        y = pubmsgData.data.data.y;
                    }
                    content = pubmsgData.remindContent;
                    this._productionWhiteboardRemindContent(whiteboardInstance, x, y, content, pubmsgData.data.shapeId);
                } else if (pubmsgData.data.data.className == "Text") {
                    x = pubmsgData.data.data.x + pubmsgData.data.data.renderer.metrics.width;
                    y = pubmsgData.data.data.y + pubmsgData.data.data.renderer.metricses.length * 20;
                    content = pubmsgData.remindContent;
                    this._productionWhiteboardRemindContent(whiteboardInstance, x, y, content, pubmsgData.data.shapeId);
                } else if (pubmsgData.data.data.className == "Line") {
                    x = pubmsgData.data.data.x2;
                    y = pubmsgData.data.data.y2;
                    content = pubmsgData.remindContent;
                    this._productionWhiteboardRemindContent(whiteboardInstance, x, y, content, pubmsgData.data.shapeId);
                }
            }
        }

        /*通知白板工具信息更新*/

    }, {
        key: '_noticeNpdateWhiteboardToolsInfo',
        value: function _noticeNpdateWhiteboardToolsInfo(whiteboardInstance) {
            if (whiteboardInstance.handler && typeof whiteboardInstance.handler.receiveActionCommandCallback === 'function') {
                whiteboardInstance.handler.receiveActionCommandCallback('updateWhiteboardToolsInfo', {
                    id: whiteboardInstance.id,
                    whiteboardToolsInfo: Object.deepAssign({}, whiteboardInstance.whiteboardToolsInfo)
                });
            }
        }
    }]);

    return WhiteboardIntermediateLayer;
}();

;
var WhiteboardIntermediateLayerInstance = new WhiteboardIntermediateLayer();
// window.WhiteboardInstance = WhiteboardIntermediateLayerInstance ;
exports.default = WhiteboardIntermediateLayerInstance;
},{"pdfobject":331}],336:[function(require,module,exports){
/**
 * sdk白板全局配置项对象
 * @class Configuration
 * @description   提供 所需的全局配置项
 * @author 邱广生
 * @date 2018-04-20
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var Configuration = {};
/*所有白板公有配置*/
Configuration.commonWhiteboard = {
    webAddress: /http:/.test(window.location.protocol) ? 'http://global.talk-cloud.net:80' : 'https://global.talk-cloud.net:443', //php服务器地址(注：不提供给用户，自己内部使用)
    docAddress: /http:/.test(window.location.protocol) ? 'http://global.talk-cloud.net:80' : 'https://global.talk-cloud.net:443', //文档服务器地址(注：不提供给用户，自己内部使用)
    backupDocAddressList: [], //备份文档域名列表(注：不提供给用户，自己内部使用)
    myUserId: undefined, //我的userID(注：不提供给用户，自己内部使用)
    myRole: undefined, //我的角色(注：不提供给用户，自己内部使用)
    myName: undefined, //我的名字(注：不提供给用户，自己内部使用)
    isConnectedRoom: false, //是否已经连接房间，默认false(注：不提供给用户，自己内部使用)
    isPlayback: false, //是否是回放,默认false(注：不提供给用户，自己内部使用)
    deviceType: undefined, //设备类型，phone , pad  , windowClient , macClient (注：不提供给用户，自己内部使用，并且只有移动端使用)
    clientType: undefined //android , ios
};

//TODO 动态PPT视频播放可能需要定义新的权限
/*默认白板配置项*/
Configuration.defaultWhiteboard = {
    isBackEvent: true, //是否返回课件鼠标位置信息 会议版
    hasExtendDocument: false, //是否支持扩展文档
    showpageNotice: false, //翻页消息是否通知给原生程序(注：不提供给用户，自己内部使用)
    loadDynamicPptView: true, //加载动态ppt视图(注：不提供给用户，自己内部使用)
    loadH5DocumentView: true, //加载h5课件视图(注：不提供给用户，自己内部使用)
    isMobile: false, //是否是移动端 ， 默认false(注：不提供给用户，自己内部使用)
    mediaShareToID: undefined, //媒体共享给谁 ， 不指定则默认共享给所有人(注：不提供给用户，自己内部使用)
    associatedMsgID: undefined, //绑定的信令消息id (注：不提供给用户，自己内部使用)
    associatedUserID: undefined, //绑定的用户id (注：不提供给用户，自己内部使用)
    clientMediaShare: false, //是否是客户端共享媒体 , 默认false(注：不提供给用户，自己内部使用)
    mediaSharePauseWhenOver: false, //是否播放结束暂停不自动关闭 , 默认自动关闭不暂停(注：不提供给用户，自己内部使用)
    isLoadAudioPlayer: true, //是否加载音频播放器 ，默认true (注：不提供给用户，自己内部使用)
    isLoadVideoPlayer: true, //是否加载视频播放器 ，默认true  (注：不提供给用户，自己内部使用)
    isLoadDocumentRemark: true, //是否加载课件备注 ，默认true  (注：不提供给用户，自己内部使用)
    canRemark: false, //获取课件备注权限，默认false (注：不提供给用户，自己内部使用)
    secondaryColor: '#ffffff', //填充颜色 ,默认 #ffffff(注：不提供给用户，自己内部使用,暂时无用)
    initWhiteboardProductionOptions: {}, //初始化白板配置项，默认空对象(注：不提供给用户，自己内部使用)
    documentToolBarConfig: { //文档工具条配置(注：不提供给用户，自己内部使用)
        parentNode: undefined, //父节点
        isDrag: true, //是否拖拽
        isLoadFullScreen: true, //是否加载全屏，false
        isLoadRemark: false, //是否加载文档备注，false
        isLoadVolume: false, //是否加载动态ppt音量设置，false
        initDragPosition: { //初始化拖拽位置（百分比）
            left: 50,
            top: 98
        },
        fullScreenElementId: undefined //全屏元素的id
    },
    documentRemarkConfig: { //文档工具条配置(注：不提供给用户，自己内部使用)
        parentNode: undefined, //父节点
        isDrag: true, //是否拖拽
        initDragPosition: { //初始化拖拽位置（百分比）
            left: 50,
            top: 98
        }
    },
    whiteboardToolBarConfig: { //文档工具条配置(注：不提供给用户，自己内部使用)
        parentNode: undefined, //父节点
        isDrag: true, //是否拖拽
        pencilWidthScale: 1, //画笔宽度缩放比例
        eraserWidthScale: 2, //橡皮宽度缩放比例
        initDragPosition: { //初始化拖拽位置（百分比）
            left: 2,
            top: 2
        },
        loadWhiteboardTools: { //加载白板标注工具集合
            mouse: true, //鼠标
            laser: true, //激光笔
            pen: true, //画笔
            text: true, //文字
            shape: true, //图形
            eraser: true, //橡皮
            clear: true, //清除
            undo: true, //撤销操作
            redo: true, //恢复操作
            setting: true //更多设置
        }
    },
    isShowReloadFileTip: true, //是否显示重新加载文档的提示，默认true (注：不提供给用户，自己内部使用)
    pptVolumeSynchronization: false, //PPT音量是否同步，默认false(注：不提供给用户，自己内部使用)

    insertPictureRule: 'default', //图片展示规则 , 默认'default'，可以取值：'default'表示图片根据比例最大程度进行缩放，‘relativeOriginalSize’表示保持图片原大小，如果图片原大小超出容器大小则进行缩放
    languageType: 'ch', // 语言类型，默认ch ,  languageType的值有 ch / tw / en  , ch:简体中文，tw:繁体中文 ， en:英文
    rootBackgroundColor: 'transparent', //整个白板界面的背景颜色 ,默认 transparent
    primaryColor: '#000000', //画笔颜色 ,默认 #000000
    backgroundColor: '#ffffff', //背景颜色 ,默认 #ffffff
    pencilWidth: 5, //画笔大小 , 默认5
    shapeWidth: 5, //图形画笔大小 , 默认5
    eraserWidth: 15, //橡皮大小 ， 默认15
    fontSize: 18, //字体大小 ， 默认18
    fontFamily: "微软雅黑", //使用的字体 ，默认"微软雅黑"
    showShapeAuthor: false, //是否显示画笔的操作者name ，默认false
    synchronization: true, //是否同步给其它用户, 默认true
    isOnlyUndoRedoClearMyselfShape: false, //是否只撤销、恢复、清除自己的画笔,默认false
    canDraw: true, //可画权限,默认true
    canPage: true, //翻页权限，默认true
    addPage: true, //加页权限，默认true(注：加页权限和翻页权限同时为true时才能加页)
    actionClick: true, //动态PPT、H5文档等动作点击权限，默认true
    defaultWhiteboardScale: 16 / 9, //默认的纯白板比例 ， 默认为16/9
    isUseKeyboardPage: true, //是否启用键盘翻页，默认true ，键盘的方向键操作翻页（左箭头：上一页，右箭头：下一页，上箭头：上一步-只在动态ppt起效 ，下箭头：下一步-只在动态ppt起效 ）
    isLoadDocumentToolBar: true, //加载文档工具条 ， 默认true
    isLoadWhiteboardToolBar: true, //加载白板标注工具条 ， 默认true
    isDisconnectedClearWhiteboardData: false, //是否失去连接就清除白板画笔数据,默认false
    isNativePlayAudio: false, // 是否原生播放MP3
    audioPlayerConfig: { //音频播放器配置
        parentNode: undefined, //父节点(注：不提供给用户，自己内部使用)
        controlCallback: { //控制器操作的回调函数(注：不提供给用户，自己内部使用)
            play: undefined, //点击播放的回调函数 (注：不提供给用户，自己内部使用)
            pause: undefined //点击暂停的回调函数 (注：不提供给用户，自己内部使用)
        },
        isLoadControl: true, //是否加载控制器,默认true(注：不提供给用户，自己内部使用)
        controlPermissions: { //控制器的相关控制权限
            hasPlayOrPause: true, //播放暂停权限,默认true
            hasChangeProgress: true, //改变进度权限，默认true
            hasClose: true //关闭权限，默认true
        }
    },
    videoPlayerConfig: { //视频播放器配置
        parentNode: undefined, //父节点(注：不提供给用户，自己内部使用)
        controlCallback: { //控制器操作的回调函数(注：不提供给用户，自己内部使用)
            play: undefined, //点击播放的回调函数 (注：不提供给用户，自己内部使用)
            pause: undefined //点击暂停的回调函数 (注：不提供给用户，自己内部使用)
        },
        isLoadControl: true, //是否加载控制器,默认true(注：不提供给用户，自己内部使用)
        controlPermissions: { //控制器的相关控制权限
            hasPlayOrPause: true, //播放暂停权限,默认true
            hasChangeProgress: true, //改变进度权限，默认true
            hasClose: true //关闭权限，默认true
        }
    }
}; //白板默认配置项

exports.default = Configuration;
},{}],337:[function(require,module,exports){
/*sdk白板常量对象
 * @module Constant
 * @description  提供sdk白板所需的常量
 * @author 邱广生
 * @date 2018-04-22
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
window.WhiteboardGlobalShare = window.WhiteboardGlobalShare || {};
var Constant = {};
Constant.WHITEBOARD_SDK_VERSION = 'v2.1.0'; //白板sdk的版本号
Constant.WHITEBOARD_SDK_TIME = '2018102313'; //白板sdk更新时间
Constant.dynamicPptVersions = 2017091401; //动态ppt的版本
Constant.remoteDynamicPptUpdateTime = 2018042223; //远程动态PPT文件更新时间
Constant.dynamicPptDebugLog = false; //动态ppt是否debug log
console.info('[whiteboard-sdk]whiteboard sdk version is ' + Constant.WHITEBOARD_SDK_VERSION + ' , update time is ' + Constant.WHITEBOARD_SDK_TIME);
exports.default = Constant;
},{}],338:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*dom工具类
 * @module DomUtils
 * @description  dom操作工具类
 * @author 邱广生
 * @date 2018-04-18
 */

var DomUtils = function () {
    function DomUtils() {
        _classCallCheck(this, DomUtils);
    }

    _createClass(DomUtils, [{
        key: 'createElement',


        /*创建节点
        * @params elementName:节点name , String
        * @params id:节点id , String
        * @params className:节点className , String
        * @params styleJson:节点style样式对象 , Json
        * */
        value: function createElement(elementName, id, className, styleJson, attrsJson) {
            var ele = document.createElement(elementName);
            if (id !== undefined) {
                ele.setAttribute('id', id);
            }
            if (className !== undefined) {
                ele.className = className;
            }
            if (styleJson && (typeof styleJson === 'undefined' ? 'undefined' : _typeof(styleJson)) === 'object') {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = Object.entries(styleJson)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _ref = _step.value;

                        var _ref2 = _slicedToArray(_ref, 2);

                        var key = _ref2[0];
                        var value = _ref2[1];

                        ele.style[key] = value;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
            if (attrsJson && (typeof attrsJson === 'undefined' ? 'undefined' : _typeof(attrsJson)) === 'object') {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = Object.entries(attrsJson)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var _ref3 = _step2.value;

                        var _ref4 = _slicedToArray(_ref3, 2);

                        var _key = _ref4[0];
                        var _value = _ref4[1];

                        ele.setAttribute(_key, _value);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }
            return ele;
        }
    }, {
        key: 'appendChild',


        /*添加子节点*/
        value: function appendChild(fatherElement, childElement) {
            try {
                if (fatherElement && childElement && fatherElement.appendChild) {
                    fatherElement.appendChild(childElement);
                }
            } catch (error) {
                L.Logger.error('[sdk-whiteboard]DoomUtils.appendChild error ', error);
            }
        }

        /*删除子节点*/

    }, {
        key: 'removeChild',
        value: function removeChild(childElement, fatherElement) {
            try {
                if (childElement) {
                    if (fatherElement && fatherElement.removeChild) {
                        fatherElement.removeChild(childElement);
                    } else if (childElement.parentNode && childElement.parentNode.removeChild) {
                        childElement.parentNode.removeChild(childElement);
                    }
                }
            } catch (error) {
                L.Logger.error('[sdk-whiteboard]DoomUtils.removeChild error ', error);
            }
        }

        /*删除所有子节点*/

    }, {
        key: 'removeAllChild',
        value: function removeAllChild(fatherElement) {
            if (fatherElement) {
                fatherElement.innerHTML = '';
            }
        }
    }, {
        key: 'hasClass',
        value: function hasClass(element, className) {
            if (element && typeof className === 'string') {
                return new RegExp(' ' + className + ' ').test(element.className) || new RegExp(' ' + className).test(element.className) || new RegExp(className + ' ').test(element.className);
            } else {
                return false;
            }
        }

        /*重置样式*/

    }, {
        key: 'resetClass',
        value: function resetClass(element, className) {
            if (element && typeof className === 'string') {
                element.className = ' ' + className;
            }
        }

        /*添加样式*/

    }, {
        key: 'addClass',
        value: function addClass(element, className) {
            if (element) {
                if (typeof className === 'string') {
                    if (!element.className) {
                        element.className = ' ' + className;
                    } else {
                        element.className = element.className.replace(new RegExp(' ' + className, 'g'), '').replace(new RegExp(className + ' ', 'g'), '') + ' ' + className;
                    }
                } else if (Array.isArray(className)) {
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;

                    try {
                        for (var _iterator3 = className[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var cls = _step3.value;

                            if (!element.className) {
                                element.className = ' ';
                            } else {
                                element.className = element.className.replace(new RegExp(' ' + cls, 'g'), '').replace(new RegExp(cls + ' ', 'g'), '') + ' ' + cls;
                            }
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3;
                            }
                        }
                    }
                }
            }
        }

        /*添加样式*/

    }, {
        key: 'removeClass',
        value: function removeClass(element, className) {
            if (element) {
                if (typeof className === 'string') {
                    if (!element.className) {
                        element.className = ' ';
                    } else {
                        element.className = element.className.replace(new RegExp(' ' + className, 'g'), '').replace(new RegExp(className + ' ', 'g'), '');
                    }
                } else if (Array.isArray(className)) {
                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;

                    try {
                        for (var _iterator4 = className[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                            var cls = _step4.value;

                            if (!element.className) {
                                element.className = ' ';
                            } else {
                                element.className = element.className.replace(new RegExp(' ' + cls, 'g'), '').replace(new RegExp(cls + ' ', 'g'), '');
                            }
                        }
                    } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                _iterator4.return();
                            }
                        } finally {
                            if (_didIteratorError4) {
                                throw _iteratorError4;
                            }
                        }
                    }
                }
            }
        }

        /*更新style*/

    }, {
        key: 'updateStyle',
        value: function updateStyle(element, updateStyleJson) {
            if (element && updateStyleJson && (typeof updateStyleJson === 'undefined' ? 'undefined' : _typeof(updateStyleJson)) === 'object') {
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _iterator5 = Object.entries(updateStyleJson)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var _ref5 = _step5.value;

                        var _ref6 = _slicedToArray(_ref5, 2);

                        var key = _ref6[0];
                        var value = _ref6[1];

                        element.style[key] = value;
                    }
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                            _iterator5.return();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }
            }
        }
    }, {
        key: 'show',
        value: function show(element) {
            if (Array.isArray(element)) {
                var _iteratorNormalCompletion6 = true;
                var _didIteratorError6 = false;
                var _iteratorError6 = undefined;

                try {
                    for (var _iterator6 = element[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                        var ele = _step6.value;

                        this.updateStyle(ele, {
                            display: ''
                        });
                    }
                } catch (err) {
                    _didIteratorError6 = true;
                    _iteratorError6 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
                            _iterator6.return();
                        }
                    } finally {
                        if (_didIteratorError6) {
                            throw _iteratorError6;
                        }
                    }
                }
            } else {
                this.updateStyle(element, {
                    display: ''
                });
            }
        }
    }, {
        key: 'hide',
        value: function hide(element) {
            if (Array.isArray(element)) {
                var _iteratorNormalCompletion7 = true;
                var _didIteratorError7 = false;
                var _iteratorError7 = undefined;

                try {
                    for (var _iterator7 = element[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                        var ele = _step7.value;

                        this.updateStyle(ele, {
                            display: 'none'
                        });
                    }
                } catch (err) {
                    _didIteratorError7 = true;
                    _iteratorError7 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion7 && _iterator7.return) {
                            _iterator7.return();
                        }
                    } finally {
                        if (_didIteratorError7) {
                            throw _iteratorError7;
                        }
                    }
                }
            } else {
                this.updateStyle(element, {
                    display: 'none'
                });
            }
        }
    }]);

    return DomUtils;
}();

;

exports.default = new DomUtils();
},{}],339:[function(require,module,exports){
/*sdk白板全局对象
 * @module Global
 * @description  提供sdk白板所需的全局变量
 * @author 邱广生
 * @date 2018-04-18
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Utils = require('./Utils');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Global = {};
Global.newpptVersions = 2017091401; //动态ppt的版本
Global.remoteNewpptUpdateTime = 2018032113; //远程动态PPT文件更新时间
// Global.forceUseDocAddress = undefined ; //强制使用的文档加载地址
Global.isSkipPageing = false; //是否正在跳转翻页
Global.isPlayVideoing = false; //是否正在播放视频
Global.allDocumentRemarkInfoMap = new Map(); //所有文档备注的Map
Global.docAddress = /http:/.test(window.location.protocol) ? 'http://global.talk-cloud.net:80' : 'https://global.talk-cloud.net:443', //文档服务器地址
Global.laterAddressList = []; //不在sdk提供的文档地址列表里的地址列表
Global.backupDocAddressList = []; //备份文档地址列表
Global.docAddressList = []; //文档地址列表,下标0：正常文档地址 ，下标1：备份文档地址
Global.hasGetDocAddressIndexByLocalStorage = false; //是否从本地存储中获取过文档地址索引
Global.docAddressKey = ''; //文档地址列表索引值
Global.localStorageDocAddressKey = ''; //本地缓存的文档地址列表索引值
Global.nowUseDocAddress = _Utils2.default.getItem(Global.docAddressList, Global.docAddressKey); //现在使用的文档地址
Global.showPageFromId = undefined; //翻页者的id
Global.extendShowPageFromId = undefined; //扩展白板翻页者的id
Global.protocol = '';
Global.port = '';

window.WBGlobal = Global;
exports.default = Global;
},{"./Utils":343}],340:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * 拓课语言包
 * @module talkLanguage
 * @description   提供 拓课中文语言包
 * @author QiuShao
 * @date 2017/09/01
 */

var TalkLanguage = new Map();
var chLuanuage = {
    documentToolbar: {
        prevPage: '上一页',
        nextPage: '下一页',
        prevStep: '上一页',
        nextStep: '下一页',
        addPage: '加页',
        enlargeWhiteboard: '放大',
        narrowWhiteboard: '缩小',
        pptVolume: '音量',
        onRemark: '打开备注',
        offRemark: '关闭备注',
        onGeneralDocumentFullScreen: '绘制区域全屏',
        offGeneralDocumentFullScreen: '绘制区域取消全屏',
        onDynamicPPTFullScreen: 'PPT全屏',
        offDynamicPPTFullScreen: 'PPT取消全屏',
        onH5DocumentFullScreen: 'H5课件全屏',
        offH5DocumentFullScreen: 'H5课件取消全屏'
    },
    whiteboardToolbar: {
        fontFamily: {
            title: '文字样式',
            options: {
                Msyh: '微软雅黑',
                Ming: '宋体',
                Arial: 'Arial'
            }
        },
        fontSizeText: '号',
        pencilWidthTitle: '线条宽度',
        eraserWidthTitle: '橡皮擦大小',
        toolTextList: {
            tool_mouse: '鼠标',
            tool_laser: '激光笔',
            penList: '笔',
            tool_pencil: '铅笔',
            tool_highlighter: '荧光笔',
            tool_line: '线条',
            tool_arrow: '箭头',
            tool_text: '文字',
            shapeList: '形状',
            tool_rectangle_empty: '空心矩形',
            tool_rectangle: '矩形',
            tool_ellipse_empty: '空心椭圆',
            tool_ellipse: '椭圆',
            tool_eraser: '橡皮檫',
            action_undo: '撤销',
            action_redo: '恢复',
            action_clear: '清屏',
            settingList: '更多设置'
        }
    },
    documentRemark: {
        name: '备注',
        closeTitle: '关闭备注'
    }
};
var twLuanuage = {
    documentToolbar: {
        prevPage: '上壹頁',
        nextPage: '下壹頁',
        prevStep: '上壹頁',
        nextStep: '下壹頁',
        addPage: '加頁',
        enlargeWhiteboard: '放大',
        narrowWhiteboard: '縮小',
        pptVolume: '音量',
        onRemark: '打開備註',
        offRemark: '關閉備註',
        onGeneralDocumentFullScreen: '繪制區域全屏',
        offGeneralDocumentFullScreen: '繪制區域取消全屏',
        onDynamicPPTFullScreen: 'PPT全屏',
        offDynamicPPTFullScreen: 'PPT取消全屏',
        onH5DocumentFullScreen: 'H5課件全屏',
        offH5DocumentFullScreen: 'H5課件取消全屏'
    },
    whiteboardToolbar: {
        fontFamily: {
            title: '文字樣式',
            options: {
                Msyh: '微軟雅黑',
                Ming: '宋體',
                Arial: 'Arial'
            }
        },
        fontSizeText: '號',
        pencilWidthTitle: '線條寬度',
        eraserWidthTitle: '橡皮擦大小',
        toolTextList: {
            tool_mouse: '鼠標',
            tool_laser: '激光筆',
            penList: '筆',
            tool_pencil: '鉛筆',
            tool_highlighter: '熒光筆',
            tool_line: '線條',
            tool_arrow: '箭頭',
            tool_text: '文字',
            shapeList: '形狀',
            tool_rectangle_empty: '空心矩形',
            tool_rectangle: '矩形',
            tool_ellipse_empty: '空心橢圓',
            tool_ellipse: '橢圓',
            tool_eraser: '橡皮檫',
            action_undo: '撤銷',
            action_redo: '恢復',
            action_clear: '清屏',
            settingList: '更多設置'
        }
    },
    documentRemark: {
        name: '備註',
        closeTitle: '關閉備註'
    }
};
var enLuanuage = {
    documentToolbar: {
        prevPage: 'Previous Page',
        nextPage: 'Next Page',
        prevStep: 'Previous Page',
        nextStep: 'Next Page',
        addPage: 'Add Page',
        enlargeWhiteboard: 'Zoom In',
        narrowWhiteboard: 'Zoom Out',
        pptVolume: 'Volume',
        onRemark: 'Open Courseware Remarks',
        offRemark: 'Close Courseware Remarks',
        onGeneralDocumentFullScreen: 'Full Screen of Drawing Area',
        offGeneralDocumentFullScreen: 'Cancel Full Screen of Drawing Area',
        onDynamicPPTFullScreen: 'Full Screen  of PPT',
        offDynamicPPTFullScreen: 'Cancel Full Screen  of PPT',
        onH5DocumentFullScreen: 'Full Screen  of Courseware',
        offH5DocumentFullScreen: 'Cancel Full Screen  of Courseware'
    },
    whiteboardToolbar: {
        fontFamily: {
            title: 'Font Format',
            options: {
                Msyh: 'Microsoft YaHei',
                Ming: 'SimSun',
                Arial: 'Arial'
            }
        },
        fontSizeText: 'Font',
        pencilWidthTitle: 'Line Width',
        eraserWidthTitle: 'Eraser Size',
        toolTextList: {
            tool_mouse: 'Mouse',
            tool_laser: 'Laser Pen',
            penList: 'Pen',
            tool_pencil: 'Pencil',
            tool_highlighter: 'Highlighter',
            tool_line: 'Line',
            tool_arrow: 'Arrow',
            tool_text: 'Text Input',
            shapeList: 'Shape',
            tool_rectangle_empty: 'Square',
            tool_rectangle: 'Solid Square',
            tool_ellipse_empty: 'Circle',
            tool_ellipse: 'Solid Circle',
            tool_eraser: 'Eraser',
            action_undo: 'Undo',
            action_redo: 'Recover',
            action_clear: 'Clear Screen',
            settingList: 'More'
        }
    },
    documentRemark: {
        name: 'Courseware Remarks',
        closeTitle: 'Close Courseware Remarks'
    }
};
var jaLuanuage = {
    documentToolbar: {
        prevPage: '前のページ',
        nextPage: '次のページ',
        prevStep: '前のページ',
        nextStep: '次のページ',
        addPage: 'ページを追加する',
        enlargeWhiteboard: '拡大',
        narrowWhiteboard: '縮小',
        pptVolume: 'ボリューム',
        onRemark: '備考を開く',
        offRemark: '備考を閉じる',
        onGeneralDocumentFullScreen: '描画領域全画面',
        offGeneralDocumentFullScreen: '手書き部分全画面表示の終了',
        onDynamicPPTFullScreen: 'PPT全画面',
        offDynamicPPTFullScreen: 'PPT全画面表示の終了',
        onH5DocumentFullScreen: 'h5教材全画面',
        offH5DocumentFullScreen: 'H5教材全画面の終了'
    },
    whiteboardToolbar: {
        fontFamily: {
            title: 'フォント様式',
            options: {
                Msyh: 'Microsoft　Yahei',
                Ming: '宋体',
                Arial: 'Arial'
            }
        },
        fontSizeText: '番号',
        pencilWidthTitle: '線の太さ',
        eraserWidthTitle: '消しゴムの大きさ',
        toolTextList: {
            tool_mouse: 'マウス',
            tool_laser: 'レーザーペン',
            penList: '鉛筆',
            tool_pencil: '鉛筆',
            tool_highlighter: '蛍光ペン',
            tool_line: '線',
            tool_arrow: '矢印',
            tool_text: '文字',
            shapeList: '形状',
            tool_rectangle_empty: '長方形（塗りつぶしなし）',
            tool_rectangle: '長方形',
            tool_ellipse_empty: '楕円（塗りつぶしなし）',
            tool_ellipse: '楕円',
            tool_eraser: '消しゴム',
            action_undo: 'キャンセル',
            action_redo: '元に戻す',
            action_clear: 'クリア',
            settingList: '詳細設定'
        }
    },
    documentRemark: {
        name: '備考',
        closeTitle: '关闭备注'
    }
};
TalkLanguage.set('ch', chLuanuage);
TalkLanguage.set('tw', twLuanuage);
TalkLanguage.set('en', enLuanuage);
TalkLanguage.set('ja', jaLuanuage);

exports.default = TalkLanguage;
},{}],341:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * 拓课开发使用的日志类
                                                                                                                                                                                                                                                                               * @module LogDevelopment
                                                                                                                                                                                                                                                                               * @description   提供 拓课开发使用的日志类
                                                                                                                                                                                                                                                                               * @author QiuShao
                                                                                                                                                                                                                                                                               * @date 2017/7/20
                                                                                                                                                                                                                                                                               */


var _Utils = require('./Utils');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LogDevelopment = window.Log || {
    error: function error() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
        }
        if (L.Logger.panel !== undefined) {
            var tmp = '';
            for (var idx = 0; idx < args.length; idx++) {
                tmp = tmp + (_typeof(args[idx]) === 'object' ? _Utils2.default.toJsonStringify(args[idx]) : args[idx]);
            }
            L.Logger.panel.value = L.Logger.panel.value + '\n' + tmp;
        }
        console.error.apply(console, args);
    },
    log: function log() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
        }
        if (L.Logger.panel !== undefined) {
            var tmp = '';
            for (var idx = 0; idx < args.length; idx++) {
                tmp = tmp + (_typeof(args[idx]) === 'object' ? _Utils2.default.toJsonStringify(args[idx]) : args[idx]);
            }
            L.Logger.panel.value = L.Logger.panel.value + '\n' + tmp;
        }
        console.log.apply(console, args);
    },
    info: function info() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
        }
        if (L.Logger.panel !== undefined) {
            var tmp = '';
            for (var idx = 0; idx < args.length; idx++) {
                tmp = tmp + (_typeof(args[idx]) === 'object' ? _Utils2.default.toJsonStringify(args[idx]) : args[idx]);
            }
            L.Logger.panel.value = L.Logger.panel.value + '\n' + tmp;
        }
        console.info.apply(console, args);
    },
    warn: function warn() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
        }
        if (L.Logger.panel !== undefined) {
            var tmp = '';
            for (var idx = 0; idx < args.length; idx++) {
                tmp = tmp + (_typeof(args[idx]) === 'object' ? _Utils2.default.toJsonStringify(args[idx]) : args[idx]);
            }
            L.Logger.panel.value = L.Logger.panel.value + '\n' + tmp;
        }
        console.warn.apply(console, args);
    },
    warning: function warning() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
        }
        if (L.Logger.panel !== undefined) {
            var tmp = '';
            for (var idx = 0; idx < args.length; idx++) {
                tmp = tmp + (_typeof(args[idx]) === 'object' ? _Utils2.default.toJsonStringify(args[idx]) : args[idx]);
            }
            L.Logger.panel.value = L.Logger.panel.value + '\n' + tmp;
        }
        console.warn.apply(console, args);
    },
    trace: function trace() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
        }
        if (L.Logger.panel !== undefined) {
            var tmp = '';
            for (var idx = 0; idx < args.length; idx++) {
                tmp = tmp + (_typeof(args[idx]) === 'object' ? _Utils2.default.toJsonStringify(args[idx]) : args[idx]);
            }
            L.Logger.panel.value = L.Logger.panel.value + '\n' + tmp;
        }
        console.trace.apply(console, args);
    },
    debug: function debug() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
        }
        if (L.Logger.panel !== undefined) {
            var tmp = '';
            for (var idx = 0; idx < args.length; idx++) {
                tmp = tmp + (_typeof(args[idx]) === 'object' ? _Utils2.default.toJsonStringify(args[idx]) : args[idx]);
            }
            L.Logger.panel.value = L.Logger.panel.value + '\n' + tmp;
        }
        console.debug.apply(console, args);
    }
};
window.Log = LogDevelopment;
exports.default = LogDevelopment;
},{"./Utils":343}],342:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
  'use strict';
  /* istanbul ignore next */

  if (typeof define === 'function' && define.amd) {
    define('ajax', factory);
  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
    exports = module.exports = factory();
  } else {
    root.ajax = factory();
  }
})(undefined, function () {
  'use strict';

  function ajax(options) {
    var methods = ['get', 'post', 'put', 'delete'];
    options = options || {};
    options.baseUrl = options.baseUrl || '';
    if (options.method && options.url) {
      return xhrConnection(options.method, options.baseUrl + options.url, maybeData(options.data), options);
    }
    return methods.reduce(function (acc, method) {
      acc[method] = function (url, data) {
        return xhrConnection(method, options.baseUrl + url, maybeData(data), options);
      };
      return acc;
    }, {});
  }

  function maybeData(data) {
    return data || null;
  }

  function xhrConnection(type, url, data, options) {
    var returnMethods = ['then', 'catch', 'always'];
    var promiseMethods = returnMethods.reduce(function (promise, method) {
      promise[method] = function (callback) {
        promise[method] = callback;
        return promise;
      };
      return promise;
    }, {});
    var xhr = new XMLHttpRequest();
    var featuredUrl = getUrlWithData(url, data, type);
    xhr.open(type, featuredUrl, true);
    xhr.withCredentials = options.hasOwnProperty('withCredentials');
    setHeaders(xhr, options.headers);
    xhr.addEventListener('readystatechange', ready(promiseMethods, xhr), false);
    xhr.send(objectToQueryString(data));
    promiseMethods.abort = function () {
      return xhr.abort();
    };
    return promiseMethods;
  }

  function getUrlWithData(url, data, type) {
    if (type.toLowerCase() !== 'get' || !data) {
      return url;
    }
    var dataAsQueryString = objectToQueryString(data);
    var queryStringSeparator = url.indexOf('?') > -1 ? '&' : '?';
    return url + queryStringSeparator + dataAsQueryString;
  }

  function setHeaders(xhr, headers) {
    headers = headers || {};
    if (!hasContentType(headers)) {
      headers['Content-Type'] = 'application/x-www-form-urlencoded';
    }
    Object.keys(headers).forEach(function (name) {
      headers[name] && xhr.setRequestHeader(name, headers[name]);
    });
  }

  function hasContentType(headers) {
    return Object.keys(headers).some(function (name) {
      return name.toLowerCase() === 'content-type';
    });
  }

  function ready(promiseMethods, xhr) {
    return function handleReady() {
      if (xhr.readyState === xhr.DONE) {
        xhr.removeEventListener('readystatechange', handleReady, false);
        promiseMethods.always.apply(promiseMethods, parseResponse(xhr));

        if (xhr.status >= 200 && xhr.status < 300) {
          promiseMethods.then.apply(promiseMethods, parseResponse(xhr));
        } else {
          promiseMethods.catch.apply(promiseMethods, parseResponse(xhr));
        }
      }
    };
  }

  function parseResponse(xhr) {
    var result;
    try {
      result = JSON.parse(xhr.responseText);
    } catch (e) {
      result = xhr.responseText;
    }
    return [result, xhr];
  }

  function objectToQueryString(data) {
    return isObject(data) ? getQueryString(data) : data;
  }

  function isObject(data) {
    return Object.prototype.toString.call(data) === '[object Object]';
  }

  function getQueryString(object) {
    return Object.keys(object).reduce(function (acc, item) {
      var prefix = !acc ? '' : acc + '&';
      return prefix + encode(item) + '=' + encode(object[item]);
    }, '');
  }

  function encode(value) {
    return encodeURIComponent(value);
  }

  return ajax;
});
},{}],343:[function(require,module,exports){
/*sdk白板工具类
 * @module Utils
 * @description  提供sdk白板所需的工具
 * @author 邱广生
 * @date 2018-04-18
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _isJson = function _isJson(obj) {
    var isjson = (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" && Object.prototype.toString.call(obj).toLowerCase() === "[object object]" && !obj.length;
    return isjson;
};

if (!(Object && Object.shallowAssign) || !(Object && Object.customAssign)) {
    /*浅合并对象*/
    var shallowAssign = function shallowAssign(source) {
        try {
            return Object.assign.apply(Object.assign, arguments);
        } catch (err) {
            var copySource = source;
            for (var i = 1; i < arguments.length; i++) {
                var assignObj = arguments[i];
                if (assignObj && (typeof assignObj === "undefined" ? "undefined" : _typeof(assignObj)) === 'object') {
                    for (var key in assignObj) {
                        copySource[key] = assignObj[key];
                    }
                }
            }
            /* if(typeof copySource === 'object'){
                 for(let key in copySource){
                     source[key] = copySource[key];
                 }
             }*/
            return source;
        }
    };
    if (!(Object && Object.shallowAssign)) {
        Object.shallowAssign = shallowAssign;
    }
    if (!(Object && Object.customAssign)) {
        Object.customAssign = shallowAssign;
    }
}

if (!(Object && Object.deepAssign)) {
    /*深合并对象*/
    Object.deepAssign = function (source) {
        var copySource = source;
        for (var i = 1; i < arguments.length; i++) {
            var assignObj = arguments[i];
            if (assignObj && (typeof assignObj === "undefined" ? "undefined" : _typeof(assignObj)) === 'object') {
                for (var key in assignObj) {
                    if (copySource[key] === undefined) {
                        if (_typeof(assignObj[key]) === 'object' && (Array.isArray(assignObj[key]) || _isJson(assignObj[key]))) {
                            copySource[key] = Object.deepAssign(Array.isArray(assignObj[key]) ? [] : {}, assignObj[key]);
                        } else {
                            copySource[key] = assignObj[key];
                        }
                    } else {
                        if (_typeof(assignObj[key]) === 'object' && (Array.isArray(assignObj[key]) || _isJson(assignObj[key]))) {
                            copySource[key] = Object.deepAssign(Array.isArray(assignObj[key]) ? [] : {}, _typeof(copySource[key]) === 'object' ? copySource[key] : Array.isArray(assignObj[key]) ? [] : {}, assignObj[key]);
                        } else {
                            copySource[key] = assignObj[key];
                        }
                    }
                }
            }
        }
        /*if(typeof copySource === 'object'){
            for(let key in copySource){
                source[key] = copySource[key];
            }
        }*/
        return source;
    };
}

// scroll passive events
var passiveEvents = false;
try {
    var opts = Object.defineProperty({}, 'passive', {
        get: function get() {
            passiveEvents = { passive: true };
        }
    });
    window.addEventListener('test', null, opts);
} catch (err) {
    console.error('[whiteboarrd-sdk]passiveEvents err:', err);
}

var Utils = function () {
    function Utils() {
        _classCallCheck(this, Utils);
    }

    /**绑定事件
     @method addEvent
     @param   {element} element 添加事件元素
             {string} eType 事件类型
             {Function} handle 事件处理器
             {Bollean} bol false 表示在事件第三阶段（冒泡）触发，true表示在事件第一阶段（捕获）触发。
     */


    _createClass(Utils, [{
        key: "addEvent",
        value: function addEvent(element, eType, handle) {
            var bol = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            try {
                if (element.addEventListener) {
                    //如果支持addEventListener
                    element.addEventListener(eType, handle, bol);
                } else if (element.attachEvent) {
                    //如果支持attachEvent
                    element.attachEvent("on" + eType, handle);
                } else {
                    //否则使用兼容的onclick绑定
                    element["on" + eType] = handle;
                }
            } catch (e) {
                L.Logger.error('add dom event fail , event type is ' + eType + ' , element:', element);
            }
        }
    }, {
        key: "removeEvent",


        /**事件解绑
         @method removeEvent
         @param   {element} element 删除事件元素
             {string} eType 事件类型
             {Function} handle 事件处理器
             {Bollean} bol false 表示在事件第三阶段（冒泡）触发，true表示在事件第一阶段（捕获）触发。
         */
        value: function removeEvent(element, eType, handle, bol) {
            try {
                if (element.addEventListener) {
                    element.removeEventListener(eType, handle, bol);
                } else if (element.attachEvent) {
                    element.detachEvent("on" + eType, handle);
                } else {
                    element["on" + eType] = null;
                }
            } catch (e) {
                L.Logger.error('remove dom event fail , event type is ' + eType + ' , element:', element);
            }
        }
    }, {
        key: "isEmptyJson",


        /*是否是空的json*/
        value: function isEmptyJson(json) {
            var keys = Object.keys(json);
            return keys.length === 0;
        }
    }, {
        key: "isFullScreenStatus",


        /*是否处于全屏状态
         @return 返回是否全屏状态
         * */
        value: function isFullScreenStatus() {
            return document.fullscreen || document.mozFullScreen || document.webkitIsFullScreen || document.webkitFullScreen || document.msFullScreen || false;
        }
    }, {
        key: "launchFullscreen",


        /**启动全屏
         @param {element} element 全屏元素
         */
        value: function launchFullscreen(element) {
            if (element) {
                if (element.requestFullscreen) {
                    element.requestFullscreen();
                } else if (element.mozRequestFullScreen) {
                    element.mozRequestFullScreen();
                } else if (element.webkitRequestFullscreen) {
                    element.webkitRequestFullscreen();
                } else if (element.msRequestFullscreen) {
                    element.msRequestFullscreen();
                }
            }
        }
    }, {
        key: "exitFullscreen",


        /**退出全屏*/
        value: function exitFullscreen() {
            if (document.exitFullScreen) {
                document.exitFullScreen();
            } else if (document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            } else if (document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
            } else if (element.msExitFullscreen) {
                element.msExitFullscreen();
            }
        }
    }, {
        key: "getFullscreenElement",


        /**返回正处于全屏状态的Element节点，如果当前没有节点处于全屏状态，则返回null。*/
        value: function getFullscreenElement() {
            var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
            return fullscreenElement;
        }
    }, {
        key: "addFullscreenchange",


        /**为全屏添加全屏事件fullscreenchange
         @param {Function} handle 事件处理器
         */
        value: function addFullscreenchange(handle) {
            this.addEvent(document, "fullscreenchange", handle, false);
            this.addEvent(document, "webkitfullscreenchange", handle, false);
            this.addEvent(document, "mozfullscreenchange", handle, false);
            this.addEvent(document, "MSFullscreenChange", handle, false);
            this.addEvent(document, "msfullscreenchange", handle, false);
            this.addEvent(document, "fullscreeneventchange", handle, false);
        }
    }, {
        key: "removeFullscreenchange",


        /**移除全屏添加全屏事件fullscreenchange
         @param   {Function} handle 事件处理器
         */
        value: function removeFullscreenchange(handle) {
            this.removeEvent(document, "fullscreenchange", handle, false);
            this.removeEvent(document, "webkitfullscreenchange", handle, false);
            this.removeEvent(document, "mozfullscreenchange", handle, false);
            this.removeEvent(document, "MSFullscreenChange", handle, false);
            this.removeEvent(document, "msfullscreenchange", handle, false);
            this.removeEvent(document, "fullscreeneventchange", handle, false);
        }
    }, {
        key: "shallowCompareJson",


        /*浅比较对象
        * @params json1:比较第一个对象，Json
        * @params json2:比较第二个对象，Json
        * */
        value: function shallowCompareJson(json1, json2) {
            return json1 === json2;
        }

        /*深比较对象
         * @params json1:比较第一个对象，Json
         * @params json2:比较第二个对象，Json
         * */

    }, {
        key: "deepCompareJson",
        value: function deepCompareJson(json1, json2) {
            if ((typeof json1 === "undefined" ? "undefined" : _typeof(json1)) === 'object' && !Array.isArray(json1) && (typeof json1 === "undefined" ? "undefined" : _typeof(json1)) === 'object' && !Array.isArray(json1)) {
                var json2Copy = Object.deepAssign({}, json2);
                var isEqual = true;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = Object.entries(json1)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _ref = _step.value;

                        var _ref2 = _slicedToArray(_ref, 2);

                        var key = _ref2[0];
                        var value = _ref2[1];

                        if (json2Copy.hasOwnProperty(key)) {
                            if (value !== json2Copy[key]) {
                                isEqual = false;
                                delete json2Copy[key];
                                break;
                            } else {
                                delete json2Copy[key];
                            }
                        } else {
                            isEqual = false;
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                return isEqual && !Object.keys(json2Copy).length;
            } else {
                L.Logger.warning('deepCompareJson arguments must is json!');
                return json1 === json2;
            }
        }

        /*判断是否是一个方法*/

    }, {
        key: "isFunction",
        value: function isFunction(func) {
            return typeof func === 'function';
        }

        /*是否是一个json*/

    }, {
        key: "isJson",
        value: function isJson(obj) {
            return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" && Object.prototype.toString.call(obj).toLowerCase() === "[object object]" && !obj.length;
        }

        /*设置本地存储*/

    }, {
        key: "setLocalStorageItem",
        value: function setLocalStorageItem(key, value) {
            try {
                if (window.localStorage) {
                    if (window.localStorage.setItem) {
                        window.localStorage.setItem(key, value);
                    } else {
                        L.Logger.warning('[whiteboard-sdk]Browser does not support localStorage.setItem , key is ' + key + ' , value is ' + value + '!');
                    }
                } else {
                    if (!this.isPrintNotSupportLocalStorage) {
                        this.isPrintNotSupportLocalStorage = true;
                        L.Logger.warning('[whiteboard-sdk]Browser does not support localStorage!');
                    }
                }
            } catch (err) {
                if (!this.isPrintNotSupportLocalStorage) {
                    this.isPrintNotSupportLocalStorage = true;
                    L.Logger.warning('[whiteboard-sdk]Browser does not support localStorage , error info:', err);
                }
            }
        }

        /*获取本地存储*/

    }, {
        key: "getLocalStorageItem",
        value: function getLocalStorageItem(key) {
            try {
                if (window.localStorage) {
                    if (window.localStorage.getItem) {
                        return window.localStorage.getItem(key);
                    } else {
                        L.Logger.warning('[whiteboard-sdk]Browser does not support localStorage.getItem , key is ' + key + ' !');
                        return "";
                    }
                } else {
                    if (!this.isPrintNotSupportLocalStorage) {
                        this.isPrintNotSupportLocalStorage = true;
                        L.Logger.warning('[whiteboard-sdk]Browser does not support localStorage!');
                    }
                    return "";
                }
            } catch (err) {
                if (!this.isPrintNotSupportLocalStorage) {
                    this.isPrintNotSupportLocalStorage = true;
                    L.Logger.warning('[whiteboard-sdk]Browser does not support localStorage , error info:', err);
                }
                return "";
            }
        }

        /*转为json字符串*/

    }, {
        key: "toJsonStringify",
        value: function toJsonStringify(json) {
            if (!json) {
                return json;
            }
            try {
                if (!_isJson(json)) {
                    return json;
                }
                var jsonString = JSON.stringify(json);
                if (jsonString) {
                    json = jsonString;
                }
            } catch (e) {}
            return json;
        }

        /*json字符串转json*/

    }, {
        key: "toJsonParse",
        value: function toJsonParse(jsonStr) {
            if (!jsonStr) {
                return jsonStr;
            }
            try {
                if (typeof jsonStr !== 'string') {
                    return jsonStr;
                }
                var json = JSON.parse(jsonStr);
                if (json) {
                    jsonStr = json;
                }
            } catch (e) {}
            return jsonStr;
        }

        /*获取PC的sdk版本*/

    }, {
        key: "getPcSDKVersion",
        value: function getPcSDKVersion() {
            if (TK && TK.getSdkVersion && TK.getSdkVersion()) {
                return Number(TK.getSdkVersion().replace(/./g, '').replace(/v/g, ''));
            } else {
                return 0;
            }
        }

        /*拼接CDN地址*/

    }, {
        key: "getItem",
        value: function getItem(curArray, keyStr, add) {
            var item = void 0;
            var indexNum = void 0;
            var cdnConnect = function cdnConnect(a, b, c) {
                return a + '://' + b + ':' + c;
            };
            if (Array.isArray(curArray)) {
                item = curArray.find(function (item, index) {
                    if (index + 1 === curArray.length) {
                        indexNum = -1;
                    } else {
                        indexNum = index;
                    }
                    return item.hostname === keyStr;
                });
                if (add) {
                    if (indexNum && !isNaN(indexNum)) {
                        if (curArray[indexNum + 1]) {
                            return curArray[indexNum + 1].hostname;
                        } else {
                            return '';
                        }
                    } else {
                        return '';
                    }
                } else {
                    if (item && item.protocol && item.hostname && item.port) {
                        return cdnConnect(item.protocol, item.hostname, item.port);
                    } else {
                        return '';
                    }
                }
            }
        }
    }, {
        key: "onElementResize",


        /*元素大小改变的监听*/
        value: function onElementResize(el, handler) {
            try {
                if (!(el instanceof HTMLElement)) {
                    throw new TypeError("Parameter 1 is not instance of 'HTMLElement'.");
                }
                // https://www.w3.org/TR/html/syntax.html#writing-html-documents-elements
                if (/^(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr|script|style|textarea|title)$/i.test(el.tagName)) {
                    throw new TypeError('Unsupported tag type. Change the tag or wrap it in a supported tag(e.g. div).');
                }
                if (typeof handler !== 'function') {
                    throw new TypeError("Parameter 2 is not of type 'function'.");
                }

                var lastWidth = el.offsetWidth || 1;
                var lastHeight = el.offsetHeight || 1;
                var maxWidth = 10000 * lastWidth;
                var maxHeight = 10000 * lastHeight;

                var expand = document.createElement('div');
                expand.style.cssText = 'position:absolute;top:0;bottom:0;left:0;right:0;z-index=-10000;overflow:hidden;visibility:hidden;';
                var shrink = expand.cloneNode(false);

                var expandChild = document.createElement('div');
                expandChild.style.cssText = 'transition:0s;animation:none;';
                var shrinkChild = expandChild.cloneNode(false);

                expandChild.style.width = maxWidth + 'px';
                expandChild.style.height = maxHeight + 'px';
                shrinkChild.style.width = '250%';
                shrinkChild.style.height = '250%';

                expand.appendChild(expandChild);
                shrink.appendChild(shrinkChild);
                el.appendChild(expand);
                el.appendChild(shrink);

                if (expand.offsetParent !== el) {
                    el.style.position = 'relative';
                }

                expand.scrollTop = shrink.scrollTop = maxHeight;
                expand.scrollLeft = shrink.scrollLeft = maxWidth;

                var newWidth = 0;
                var newHeight = 0;
                var onResize = function onResize() {
                    if (newWidth !== lastWidth || newHeight !== lastHeight) {
                        lastWidth = newWidth;
                        lastHeight = newHeight;
                        handler();
                    }
                };

                var onScroll = function onScroll() {
                    newWidth = el.offsetWidth || 1;
                    newHeight = el.offsetHeight || 1;
                    if (newWidth !== lastWidth || newHeight !== lastHeight) {
                        requestAnimationFrame(onResize);
                    }
                    expand.scrollTop = shrink.scrollTop = maxHeight;
                    expand.scrollLeft = shrink.scrollLeft = maxWidth;
                };

                expand.addEventListener('scroll', onScroll, passiveEvents);
                shrink.addEventListener('scroll', onScroll, passiveEvents);
            } catch (err) {
                L.Logger.error('[whiteboarrd-sdk]onElementResize err:', err);
            }
        }
    }]);

    return Utils;
}();

;
exports.default = new Utils();
},{}],344:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('babel-polyfill');

require('./utils/Log');

var _TKWhiteBoardManager = require('./TKWhiteBoardManager');

var _TKWhiteBoardManager2 = _interopRequireDefault(_TKWhiteBoardManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _TKWhiteBoardManager2.default; /*白板sdk入口
                                                  * @description  白板sdk入口
                                                  * @author 邱广生
                                                  * @date 2018-04-18
                                                  */
},{"./TKWhiteBoardManager":332,"./utils/Log":341,"babel-polyfill":1}],345:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TalkcloudReact2 = require('../components/TalkcloudReact');

var _TalkcloudReact3 = _interopRequireDefault(_TalkcloudReact2);

var _DomUtils = require('../../utils/DomUtils');

var _DomUtils2 = _interopRequireDefault(_DomUtils);

var _Utils = require('../../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * MediaPlayerControllerDumb 媒体播放器控制器
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module MediaPlayerControllerDumb
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description   提供 媒体播放器的控制器
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author 邱广生
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @date 2018/05/011
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var MediaPlayerControllerDumb = function (_TalkcloudReact) {
    _inherits(MediaPlayerControllerDumb, _TalkcloudReact);

    function MediaPlayerControllerDumb() {
        var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
        var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
        var whiteBoardManagerInstance = arguments[2];
        var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        _classCallCheck(this, MediaPlayerControllerDumb);

        var _this = _possibleConstructorReturn(this, (MediaPlayerControllerDumb.__proto__ || Object.getPrototypeOf(MediaPlayerControllerDumb)).call(this, props));

        _this.parentNode = parentNode;
        _this.instanceId = instanceId;
        _this.whiteBoardManagerInstance = whiteBoardManagerInstance;
        _this.elements = {};
        _this.videoDumb = undefined;
        _this._createElements();
        _this._connectElements();
        _this.render();
        return _this;
    }

    _createClass(MediaPlayerControllerDumb, [{
        key: 'shouldComponentUpdateProps',
        value: function shouldComponentUpdateProps(prevProps) {
            if (prevProps.streamInfo !== this.props.streamInfo) {
                if (prevProps.streamInfo && this.props.streamInfo && prevProps.streamInfo.attributes && this.props.streamInfo.attributes) {
                    var isRender = false;
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = Object.entries(this.props.streamInfo.attributes)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var _ref = _step.value;

                            var _ref2 = _slicedToArray(_ref, 2);

                            var key = _ref2[0];
                            var value = _ref2[1];

                            if (key !== 'position' && value !== prevProps.streamInfo.attributes[key]) {
                                isRender = true;
                                break;
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    if (prevProps.streamInfo.attributes.position !== this.props.streamInfo.attributes.position && !isRender) {
                        return true;
                    }
                }
            }
            return false;
        }
    }, {
        key: 'componentDidUpdateProps',
        value: function componentDidUpdateProps(prevProps) {
            var _this2 = this;

            if (prevProps.streamInfo !== this.props.streamInfo) {
                var isStart = prevProps.streamInfo === undefined && this.props.streamInfo; //播放器刚开始播放
                var isEnd = !this.props.streamInfo; //播放器已停止播放
                var isChangePosition = prevProps.streamInfo && this.props.streamInfo && prevProps.streamInfo.attributes && this.props.streamInfo.attributes && prevProps.streamInfo.attributes.position !== this.props.streamInfo.attributes.position; //进度改变
                if (isStart || isEnd || isChangePosition) {
                    var nowTime = new Date().getTime();
                    if (!this.updateTime || nowTime - this.updateTime > 500) {
                        this.updateTime = nowTime;
                        clearTimeout(this._updateProgressTimer);
                        this._updateProgress();
                    } else {
                        clearTimeout(this._updateProgressTimer);
                        this._updateProgressTimer = setTimeout(function () {
                            nowTime = new Date().getTime();
                            _this2.updateTime = nowTime;
                            _this2._updateProgress();
                        }, 750);
                    }
                }
            }
            if (prevProps.volume !== this.props.volume) {
                if (this.volumeSlider && typeof this.volumeSlider.setProgress === 'function') {
                    _typeof(this.volumeSlider.setProgress(this.props.volume));
                }
            }
            if (prevProps.muteVolume !== this.props.muteVolume) {
                if (this.volumeSlider && typeof this.volumeSlider.setProgress === 'function') {
                    _typeof(this.volumeSlider.setProgress(this.props.muteVolume ? 0 : this.props.volume));
                }
            }
            if (prevProps.isPlayback !== this.props.isPlayback) {
                if (this.props.isPlayback) {
                    _DomUtils2.default.addClass(this.elements.mediaTotalControlElement, 'tk-playback');
                } else {
                    _DomUtils2.default.removeClass(this.elements.mediaTotalControlElement, 'tk-playback');
                }
            }

            if (prevProps.myUserId !== this.props.myUserId || prevProps.streamInfo !== this.props.streamInfo && !prevProps.streamInfo && this.props.streamInfo) {
                this._updateControlByPermissions();
            }

            if (_Utils2.default.deepCompareJson(prevProps.controlPermissions, this.props.controlPermissions)) {
                this._updateControlByPermissions();
            }
        }
    }, {
        key: 'destroyView',


        /*销毁视图*/
        value: function destroyView() {
            _DomUtils2.default.removeChild(this.elements.mediaTotalControlElement, this.parentNode);
            for (var key in this.elements) {
                this.elements[key] = undefined;
                delete this.elements[key];
            }
        }
    }, {
        key: 'playOrPauseClick',


        /*播放暂停*/
        value: function playOrPauseClick() {
            if (typeof this.props.onPlayOrPauseClick === 'function') {
                this.props.onPlayOrPauseClick();
            }
        }

        /*关闭点击事件处理*/

    }, {
        key: 'closeClick',
        value: function closeClick() {
            if (typeof this.props.onCloseClick === 'function') {
                this.props.onCloseClick();
            }
        }

        /*全屏点击事件处理*/

    }, {
        key: 'fullScreenClick',
        value: function fullScreenClick() {
            if (typeof this.props.onFullScreenClick === 'function') {
                this.props.onFullScreenClick();
            }
        }

        /*静音点击事件处理*/

    }, {
        key: 'volumeMuteClick',
        value: function volumeMuteClick() {
            if (typeof this.props.onVolumeMuteClick === 'function') {
                this.props.onVolumeMuteClick();
            }
        }
    }, {
        key: '_formatTime',


        /*将时间格式化为分:秒*/
        value: function _formatTime(data) {
            var minute = parseInt(data / 60);
            var second = Math.round(data % 60);
            if (second === 60) {
                minute += 1;
                second = 0;
            }
            if (parseInt(minute / 10) === 0) {
                //时间个位数转十位数
                minute = '0' + minute;
            }
            if (parseInt(second / 10) === 0) {
                //时间个位数转十位数
                second = '0' + second;
            }
            return minute + ':' + second;
        }

        /*创建所需节点*/

    }, {
        key: '_createElements',
        value: function _createElements() {
            this.elements.mediaTotalControlElement = _DomUtils2.default.createElement('article', this.instanceId + (this.props.isVideoPlayer ? 'VideoPlayer' : 'MediaPlayer') + 'TalkMediaPlayerTotalControl', 'talkcloud-sdk-whiteboard tk-media-player ' + ' tk-media-player-total-control ' + (this.props.isVideoPlayer ? 'video-player-control-container ' : 'audio-player-control-container ') + (this.props.isPlayback ? 'tk-playback ' : ' ')); //媒体播放器所有控件节点
        }
    }, {
        key: '_connectElements',


        /*连接所有节点*/
        value: function _connectElements() {
            var that = this;
            _DomUtils2.default.appendChild(this.parentNode, this.elements.mediaTotalControlElement);

            var _ref3 = this.props.streamInfo || {},
                _ref3$attributes = _ref3.attributes,
                attributes = _ref3$attributes === undefined ? {} : _ref3$attributes;

            var _attributes$filename = attributes.filename,
                filename = _attributes$filename === undefined ? '' : _attributes$filename,
                _attributes$position = attributes.position,
                position = _attributes$position === undefined ? 0 : _attributes$position,
                _attributes$duration = attributes.duration,
                duration = _attributes$duration === undefined ? 0 : _attributes$duration,
                pause = attributes.pause;

            if (this.elements.mediaTotalControlElement) {
                this.elements.mediaTotalControlElement.innerHTML = ' \n                <article class="media-player-box clear-float " >\n                    <span class="media-player-icon add-fl ' + (pause ? 'play' : 'pause') + '" ></span>\n                    <div class="media-player-control-container add-fl clear-float"> \n                        <button  class="play-pause-btn add-cursor-pointer add-fl ' + (pause ? 'play' : 'pause') + '"  ></button>\n                        <div class="media-player-info-container add-fl"> \n                            <div class="media-player-name-time-container clear-float"> \n                                <span class="media-player-name add-fl add-nowrap" >' + filename + '</span>\n                                <span class="media-player-time-container add-fr" > \n                                    <em class="curr-time" >' + this._formatTime(position / 1000) + '</em> / <em class="total-time" >' + this._formatTime(duration / 1000) + '</em>\n                                </span>\n                            </div>\n                            <div class="media-player-progress-container" id="' + (this.instanceId + (this.props.isVideoPlayer ? 'VideoPlayer' : 'MediaPlayer')) + 'MediaPlayerProgressBar" >                              \n                            </div>\n                        </div>\n                        <div class="volume-info-container add-fl clear-float" > \n                            <button  class="volume-icon add-cursor-pointer add-fl" ></button>\n                            <div class="volume-bar-container add-fl"  id="' + (this.instanceId + (this.props.isVideoPlayer ? 'VideoPlayer' : 'MediaPlayer')) + 'MediaPlayerVolumeBar" ></div>\n                        </div>\n                        <button  class="close-btn add-cursor-pointer add-fl" ></button>\n                        <button  class="full-screen-btn add-cursor-pointer add-fl" ></button>\n                    </div>\n                </article> \n            ';
                this.elements.playPauseBtnElement = this.elements.mediaTotalControlElement.getElementsByClassName('play-pause-btn')[0];
                this.elements.playPauseIconElement = this.elements.mediaTotalControlElement.getElementsByClassName('media-player-icon')[0];
                this.elements.volumeMuteBtnElement = this.elements.mediaTotalControlElement.getElementsByClassName('volume-icon')[0];
                this.elements.closeBtnElement = this.elements.mediaTotalControlElement.getElementsByClassName('close-btn')[0];
                this.elements.fullScreenBtnElement = this.elements.mediaTotalControlElement.getElementsByClassName('full-screen-btn')[0];
                this.elements.filenameElement = this.elements.mediaTotalControlElement.getElementsByClassName('media-player-name')[0];
                this.elements.currTimeElement = this.elements.mediaTotalControlElement.getElementsByClassName('curr-time')[0];
                this.elements.totalTimeElement = this.elements.mediaTotalControlElement.getElementsByClassName('total-time')[0];
                this.elements.mediaPlayerProgressElement = this.elements.mediaTotalControlElement.getElementsByClassName('media-player-progress-container')[0];
                this.elements.playPauseBtnElement.onclick = this.playOrPauseClick.bind(this);
                this.elements.volumeMuteBtnElement.onclick = this.volumeMuteClick.bind(this);
                this.elements.closeBtnElement.onclick = this.closeClick.bind(this);
                this.elements.fullScreenBtnElement.onclick = this.fullScreenClick.bind(this);

                if (window.TalkSlider) {
                    this.progressSlider = new window.TalkSlider({
                        sliderContainer: { //slider整个组件容器的的设置
                            id: that.instanceId + (that.props.isVideoPlayer ? 'VideoPlayer' : 'MediaPlayer') + 'MediaPlayerProgressBar', //必传!!!!
                            direction: 'horizontal' //方向（水平(默认：horizontal||垂直：vertikal）
                        },
                        onBeforeChange: function onBeforeChange(progress) {
                            that.mediaPlayerProgressSlidering = true;
                        },
                        onAfterChange: function onAfterChange(progress) {
                            that.mediaPlayerProgressSlidering = false;
                            if (typeof that.props.onChangeProgress === 'function') {
                                that.props.onChangeProgress(progress);
                            }
                            that._updateProgress();
                            that.tempStopUpdatePosition = true;
                            setTimeout(function () {
                                that.tempStopUpdatePosition = false;
                            }, 500);
                        }
                    });

                    this.volumeSlider = new window.TalkSlider({
                        sliderContainer: { //slider整个组件容器的的设置
                            id: that.instanceId + (that.props.isVideoPlayer ? 'VideoPlayer' : 'MediaPlayer') + 'MediaPlayerVolumeBar', //必传!!!!
                            direction: 'horizontal' //方向（水平(默认：horizontal||垂直：vertikal）
                        },
                        onAfterChange: function onAfterChange(volume) {
                            if (typeof that.props.onChangeVolume === 'function') {
                                that.props.onChangeVolume(volume);
                            }
                        }
                    });
                }

                this._updateControlByPermissions();
            }
        }

        /*根据权限更新控制器*/

    }, {
        key: '_updateControlByPermissions',
        value: function _updateControlByPermissions() {
            var isRemoteLocalShareMedia = false; //是否是远程的本地电影共享

            var _ref4 = this.props.streamInfo || {},
                streamType = _ref4.streamType,
                userid = _ref4.userid;

            if (streamType === 'file' && userid != this.props.myUserId) {
                isRemoteLocalShareMedia = true;
            }
            _DomUtils2.default.updateStyle(this.elements.playPauseBtnElement, {
                display: !this.props.controlPermissions.hasPlayOrPause || isRemoteLocalShareMedia ? 'none' : ''
            });
            this.elements.playPauseBtnElement.disabled = !this.props.controlPermissions.hasPlayOrPause || isRemoteLocalShareMedia;

            _DomUtils2.default.updateStyle(this.elements.closeBtnElement, {
                display: !this.props.controlPermissions.hasClose ? 'none' : ''
            });
            this.elements.closeBtnElement.disabled = !this.props.controlPermissions.hasClose;

            if (this.progressSlider && _Utils2.default.isFunction(this.progressSlider.updateDisabled)) {
                this.progressSlider.updateDisabled(!this.props.controlPermissions.hasChangeProgress || isRemoteLocalShareMedia);
            }
            if (!this.props.controlPermissions.hasChangeProgress || isRemoteLocalShareMedia) {
                _DomUtils2.default.addClass(this.elements.mediaPlayerProgressElement, 'disabled');
            } else {
                _DomUtils2.default.removeClass(this.elements.mediaPlayerProgressElement, 'disabled');
            }
        }

        /*更新进度*/

    }, {
        key: '_updateProgress',
        value: function _updateProgress() {
            if (this.props.streamInfo) {
                if (!this.mediaPlayerProgressSlidering && !this.tempStopUpdatePosition && this.progressSlider && typeof this.progressSlider.setProgress === 'function') {
                    var progress = 0;

                    var _ref5 = this.props.streamInfo && this.props.streamInfo.attributes ? this.props.streamInfo.attributes : {},
                        _ref5$position = _ref5.position,
                        position = _ref5$position === undefined ? 0 : _ref5$position,
                        _ref5$duration = _ref5.duration,
                        duration = _ref5$duration === undefined ? 0 : _ref5$duration;

                    if (duration !== 0) {
                        progress = position / duration * 100;
                        if (isNaN(progress)) {
                            progress = 0;
                        }
                    }
                    if (progress < 0) {
                        progress = 0;
                    } else if (progress > 100) {
                        progress = 100;
                    }
                    this.elements.currTimeElement.innerHTML = this._formatTime(position / 1000);
                    this.progressSlider.setProgress(progress);
                }
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                _props$streamInfo = _props.streamInfo,
                streamInfo = _props$streamInfo === undefined ? {} : _props$streamInfo,
                muteVolume = _props.muteVolume,
                isFullScreen = _props.isFullScreen;
            var _streamInfo$attribute = streamInfo.attributes,
                attributes = _streamInfo$attribute === undefined ? {} : _streamInfo$attribute;
            var _attributes$filename2 = attributes.filename,
                filename = _attributes$filename2 === undefined ? '' : _attributes$filename2,
                _attributes$position2 = attributes.position,
                position = _attributes$position2 === undefined ? 0 : _attributes$position2,
                _attributes$duration2 = attributes.duration,
                duration = _attributes$duration2 === undefined ? 0 : _attributes$duration2,
                pause = attributes.pause;

            this.elements.filenameElement.innerHTML = filename;
            this.elements.currTimeElement.innerHTML = this._formatTime(position / 1000);
            this.elements.totalTimeElement.innerHTML = this._formatTime(duration / 1000);
            if (pause) {
                _DomUtils2.default.removeClass(this.elements.playPauseBtnElement, 'pause');
                _DomUtils2.default.addClass(this.elements.playPauseBtnElement, 'play');
                _DomUtils2.default.removeClass(this.elements.playPauseIconElement, 'pause');
                _DomUtils2.default.addClass(this.elements.playPauseIconElement, 'play');
            } else {
                _DomUtils2.default.removeClass(this.elements.playPauseBtnElement, 'play');
                _DomUtils2.default.addClass(this.elements.playPauseBtnElement, 'pause');
                _DomUtils2.default.removeClass(this.elements.playPauseIconElement, 'play');
                _DomUtils2.default.addClass(this.elements.playPauseIconElement, 'pause');
            }
            if (muteVolume) {
                _DomUtils2.default.addClass(this.elements.volumeMuteBtnElement, 'mute');
            } else {
                _DomUtils2.default.removeClass(this.elements.volumeMuteBtnElement, 'mute');
            }
            if (isFullScreen) {
                _DomUtils2.default.addClass(this.elements.fullScreenBtnElement, 'yes');
            } else {
                _DomUtils2.default.removeClass(this.elements.fullScreenBtnElement, 'yes');
            }
        }
    }]);

    return MediaPlayerControllerDumb;
}(_TalkcloudReact3.default);

;

exports.default = MediaPlayerControllerDumb;
},{"../../utils/DomUtils":338,"../../utils/Utils":343,"../components/TalkcloudReact":347}],346:[function(require,module,exports){
/*Select下拉框组件
 * @module DocumentToolbarView
 * @description  sdk白板文档翻页等工具条
 * @author 邱广生
 * @date 2018-04-25
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TalkcloudReact2 = require('./TalkcloudReact');

var _TalkcloudReact3 = _interopRequireDefault(_TalkcloudReact2);

var _DomUtils = require('../../utils/DomUtils');

var _DomUtils2 = _interopRequireDefault(_DomUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SelectDumb = function (_TalkcloudReact) {
    _inherits(SelectDumb, _TalkcloudReact);

    function SelectDumb(parentNode) {
        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, SelectDumb);

        var _this = _possibleConstructorReturn(this, (SelectDumb.__proto__ || Object.getPrototypeOf(SelectDumb)).call(this, props));

        _this.parentNode = parentNode;
        _this.elements = {};
        _this.state = {
            extendShow: false
        };
        _this.listDirection = 'down'; //down , up
        _this._createConnectElements();
        _this.render();
        return _this;
    }

    _createClass(SelectDumb, [{
        key: 'componentDidUpdateState',
        value: function componentDidUpdateState(prevState) {
            if (prevState.extendShow !== this.state.extendShow) {
                this._noticeSelectExtendListShowOrHide(this.state.extendShow);
            }
        }
    }, {
        key: 'componentDidUpdateProps',
        value: function componentDidUpdateProps(prevProps) {
            if (prevProps.selectOptions !== this.state.selectOptions) {
                var _props = this.props,
                    optionClassName = _props.optionClassName,
                    _props$selectOptions = _props.selectOptions,
                    selectOptions = _props$selectOptions === undefined ? [] : _props$selectOptions,
                    disabled = _props.disabled,
                    currentValue = _props.currentValue;

                _DomUtils2.default.removeAllChild(this.elements.selectListViewElement);
                for (var index = 0; index < selectOptions.length; index++) {
                    var optionElement = _DomUtils2.default.createElement('li', undefined, "select-option " + (optionClassName || ' ') + (currentValue === selectOptions[index].value ? ' selected' : ' ')); //option 节点
                    optionElement.innerHTML = selectOptions[index].value;
                    if (!disabled) {
                        optionElement.onclick = this.optionOnClick.bind(this, selectOptions[index].value, index);
                    } else {
                        optionElement.onclick = undefined;
                    }
                    _DomUtils2.default.appendChild(this.elements.selectListViewElement, optionElement);
                }
            }
        }
    }, {
        key: 'destroyView',
        value: function destroyView() {
            _DomUtils2.default.removeChild(this.elements.selectViewRootElement, this.parentNode);
            for (var key in this.elements) {
                this.elements[key] = undefined;
                delete this.elements[key];
            }
        }
    }, {
        key: 'forceHideSelectExtendList',
        value: function forceHideSelectExtendList() {
            this.setState({ extendShow: false });
        }
    }, {
        key: 'currentTextOnClick',
        value: function currentTextOnClick(event) {
            if (this.props.disabled) {
                return false;
            }
            this.setState({ extendShow: !this.state.extendShow });
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }
    }, {
        key: 'optionOnClick',
        value: function optionOnClick(selectValue, index, event) {
            if (this.props.disabled) {
                return false;
            }
            if (selectValue !== this.props.currentValue) {
                if (this.props.onChange && typeof this.props.onChange === 'function') {
                    this.props.onChange(selectValue, index);
                }
            }
            this.setState({ extendShow: false });
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }
    }, {
        key: 'selectContainerOnMouseLeave',
        value: function selectContainerOnMouseLeave(event) {
            this.setState({ extendShow: false });
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }
    }, {
        key: '_noticeSelectExtendListShowOrHide',
        value: function _noticeSelectExtendListShowOrHide(extendShow) {
            if (this.props.noticeSelectExtendListShowOrHide && typeof this.props.noticeSelectExtendListShowOrHide === 'function') {
                this.props.noticeSelectExtendListShowOrHide(extendShow);
            }
        }
    }, {
        key: '_getRect',
        value: function _getRect(element) {
            var rect = element.getBoundingClientRect();
            var clientTop = document.documentElement.clientTop;
            var clientLeft = document.documentElement.clientLeft;
            return { // 兼容ie多出的两个px
                top: rect.top - clientTop, // 距离顶部的位置
                bottom: rect.bottom - clientTop, // 距离顶部加上元素本身的高度就等于bottom的位置
                left: rect.left - clientLeft, // 距离左边的位置
                right: rect.right - clientLeft, // 距离右边的位置就是 距离左边的位置加上元素本身的宽度
                width: rect.width, //元素宽度
                height: rect.height //元素高度
            };
        }
    }, {
        key: '_createConnectElements',


        /*创建连接节点*/
        value: function _createConnectElements() {
            this.elements.selectViewRootElement = _DomUtils2.default.createElement('article', this.props.id, undefined, {}); //select根节点
            this.elements.currentSelectTextElement = _DomUtils2.default.createElement('button', undefined, undefined, {}); //当前选中的文本节点
            this.elements.arrowElement = _DomUtils2.default.createElement('span'); //箭头
            this.elements.arrowElement.innerHTML = '<em class="arrow "></em>';
            this.elements.selectListViewElement = _DomUtils2.default.createElement('ol'); //select list 节点
            _DomUtils2.default.appendChild(this.elements.selectViewRootElement, this.elements.currentSelectTextElement);
            _DomUtils2.default.appendChild(this.elements.selectViewRootElement, this.elements.arrowElement);
            _DomUtils2.default.appendChild(this.elements.selectViewRootElement, this.elements.selectListViewElement);
            _DomUtils2.default.appendChild(this.parentNode, this.elements.selectViewRootElement);

            this.elements.currentSelectTextElement.onclick = this.currentTextOnClick.bind(this);
            this.elements.selectViewRootElement.onmouseleave = this.selectContainerOnMouseLeave.bind(this);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                className = _props2.className,
                disabled = _props2.disabled,
                _props2$currentValue = _props2.currentValue,
                currentValue = _props2$currentValue === undefined ? '' : _props2$currentValue;

            _DomUtils2.default.updateStyle(this.elements.selectListViewElement, {
                display: disabled ? 'none' : this.state.extendShow ? 'block' : 'none'
            });
            this.listDirection = this.props.listDirection || this.listDirection;
            _DomUtils2.default.resetClass(this.elements.selectViewRootElement, 'talkcloud-sdk-whiteboard ' + ' select-root tk-select-container clear-float ' + (disabled ? ' disabled ' : '  ') + (className || '') + (disabled ? ' hideExtendList' : this.state.extendShow ? ' showExtendList' : ' hideExtendList'));
            _DomUtils2.default.resetClass(this.elements.currentSelectTextElement, 'talkcloud-sdk-whiteboard ' + ' select-btn current-select-text-btn ' + "current-select-text " + (disabled ? 'disabled ' : ' '));
            _DomUtils2.default.resetClass(this.elements.arrowElement, "arrow-container " + (disabled ? 'disabled ' : ' '));
            _DomUtils2.default.resetClass(this.elements.selectListViewElement, "select-extend-list-container " + (this.props.isMobile ? ' ' : 'custom-scroll-bar') + (disabled ? ' disabled ' : '  ') + (disabled ? ' hide' : this.state.extendShow ? ' show' : ' hide'));
            if (disabled) {
                this.elements.currentSelectTextElement.setAttribute('disabled', 'true');
            } else {
                this.elements.currentSelectTextElement.removeAttribute('disabled');
            }
            this.elements.currentSelectTextElement.value = currentValue;
            this.elements.currentSelectTextElement.innerText = currentValue;
            if (this.props.parentNode && this.state.extendShow && !this.props.disabled && !this.props.listDirection) {
                var parentNodeRect = this._getRect(this.props.parentNode);
                var selectListViewElementRect = this._getRect(this.elements.selectListViewElement);
                if (selectListViewElementRect.top - parentNodeRect.top > parentNodeRect.height - selectListViewElementRect.height + 5) {
                    this.listDirection = 'up';
                } else {
                    this.listDirection = 'down';
                }
                _DomUtils2.default.removeClass(this.elements.selectViewRootElement, ['down', 'up']);
                _DomUtils2.default.removeClass(this.elements.selectListViewElement, ['down', 'up']);
                _DomUtils2.default.addClass(this.elements.selectViewRootElement, this.listDirection);
                _DomUtils2.default.addClass(this.elements.selectListViewElement, this.listDirection);
            } else {
                _DomUtils2.default.removeClass(this.elements.selectViewRootElement, ['down', 'up']);
                _DomUtils2.default.removeClass(this.elements.selectListViewElement, ['down', 'up']);
                _DomUtils2.default.addClass(this.elements.selectViewRootElement, this.listDirection);
                _DomUtils2.default.addClass(this.elements.selectListViewElement, this.listDirection);
            }
        }
    }]);

    return SelectDumb;
}(_TalkcloudReact3.default);

exports.default = SelectDumb;
},{"../../utils/DomUtils":338,"./TalkcloudReact":347}],347:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * 拓课虚拟React
 * @module VideoPlayerSmart
 * @description   提供 VideoPlayer播放器所需组件
 * @author 邱广生
 * @date 2018/05/01
 */

var TalkcloudReact = function () {
    function TalkcloudReact(props) {
        _classCallCheck(this, TalkcloudReact);

        if ((typeof props === 'undefined' ? 'undefined' : _typeof(props)) === 'object' && !Array.isArray(props)) {
            this.props = Object.shallowAssign({}, props);
        } else {
            this.props = {};
        }
        this.state = _typeof(this.state) === 'object' && !Array.isArray(this.state) ? this.state : {};
    }

    _createClass(TalkcloudReact, [{
        key: 'setState',
        value: function setState(state) {
            var prevState = Object.deepAssign({}, this.state);
            Object.shallowAssign(this.state, state);
            var isNotRender = false;
            if (this.shouldComponentUpdateState && typeof this.shouldComponentUpdateState === 'function') {
                isNotRender = this.shouldComponentUpdateState(prevState);
            }
            if (!isNotRender && this.render && typeof this.render === 'function') {
                this.render();
            }
            if (this.componentDidUpdateState && typeof this.componentDidUpdateState === 'function') {
                this.componentDidUpdateState(prevState);
            }
        }
    }, {
        key: 'setProps',
        value: function setProps(props) {
            var prevProps = Object.deepAssign({}, this.props);
            Object.shallowAssign(this.props, props);
            var isNotRender = false;
            if (this.shouldComponentUpdateProps && typeof this.shouldComponentUpdateProps === 'function') {
                isNotRender = this.shouldComponentUpdateProps(prevProps);
            }
            if (!isNotRender && this.render && typeof this.render === 'function') {
                this.render();
            }
            if (this.componentDidUpdateProps && typeof this.componentDidUpdateProps === 'function') {
                this.componentDidUpdateProps(prevProps);
            }
        }
    }]);

    return TalkcloudReact;
}();

exports.default = TalkcloudReact;
},{}],348:[function(require,module,exports){
/**
 * video Dumb组件
 * @module VideoDumb
 * @description   提供 Video显示区组件
 * @author xiagd
 * @date 2017/08/10
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TalkcloudReact2 = require('./TalkcloudReact');

var _TalkcloudReact3 = _interopRequireDefault(_TalkcloudReact2);

var _DomUtils = require('../../utils/DomUtils');

var _DomUtils2 = _interopRequireDefault(_DomUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VideoDumb = function (_TalkcloudReact) {
    _inherits(VideoDumb, _TalkcloudReact);

    function VideoDumb() {
        var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
        var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
        var whiteBoardManagerInstance = arguments[2];
        var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        _classCallCheck(this, VideoDumb);

        var _this = _possibleConstructorReturn(this, (VideoDumb.__proto__ || Object.getPrototypeOf(VideoDumb)).call(this, props));

        _this.parentNode = parentNode;
        _this.instanceId = instanceId;
        _this.whiteBoardManagerInstance = whiteBoardManagerInstance;
        _this.elements = {};
        _this.userid = _this.props.streamInfo ? _this.props.streamInfo.userid : undefined;
        _this.streamType = _this.props.streamInfo ? _this.props.streamInfo.streamType : undefined;
        _this._createElements();
        _this._connectElements();
        _this._playAV();
        return _this;
    }

    _createClass(VideoDumb, [{
        key: 'componentDidUpdateProps',


        /*props状态更新生命周期*/
        value: function componentDidUpdateProps(prevProps) {
            if (this.props.volume !== prevProps.volume || this.props.muteVolume !== prevProps.muteVolume) {
                this._changeVolume(this.props.muteVolume ? 0 : this.props.volume);
            }
        }
    }, {
        key: 'destroyView',


        /*销毁视图*/
        value: function destroyView() {
            this._unplayAV();
            _DomUtils2.default.removeChild(this.elements.rootElement, this.parentNode);
            for (var key in this.elements) {
                this.elements[key] = undefined;
                delete this.elements[key];
            }
        }
    }, {
        key: 'getElementId',
        value: function getElementId() {
            return this.elements.rootElement.id;
        }
    }, {
        key: '_changeVolume',
        value: function _changeVolume(volume) {
            if (volume !== undefined && typeof volume === 'number' && this.props.streamInfo && this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.getRoomDelegate()) {
                var _ref = this.props.streamInfo || {},
                    userid = _ref.userid,
                    streamType = _ref.streamType;

                if (this.whiteBoardManagerInstance.getRoomDelegate().setRemoteAudioVolume) {
                    this.whiteBoardManagerInstance.getRoomDelegate().setRemoteAudioVolume(volume, userid, undefined, streamType);
                }
            }
        }

        /*创建所需节点*/

    }, {
        key: '_createElements',
        value: function _createElements() {
            var _ref2 = this.props.streamInfo || {},
                userid = _ref2.userid;

            this.elements.rootElement = _DomUtils2.default.createElement('div', this.props.videoDumbElementIdPrefix + userid, 'tk-audio-or-video-player ' + ' tk-audio-player-video-dumb'); //根节点
        }
    }, {
        key: '_connectElements',


        /*连接所有节点*/
        value: function _connectElements() {
            _DomUtils2.default.appendChild(this.parentNode, this.elements.rootElement);
        }

        /*播放视频*/

    }, {
        key: '_playAV',
        value: function _playAV() {
            if (this.props.streamInfo && this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.getRoomDelegate() && this.elements.rootElement && this.elements.rootElement.id) {
                var _ref3 = this.props.streamInfo || {},
                    userid = _ref3.userid,
                    video = _ref3.video,
                    audio = _ref3.audio,
                    streamType = _ref3.streamType;

                switch (streamType) {
                    case 'media':
                        if (this.whiteBoardManagerInstance.getRoomDelegate().playRemoteMedia) {
                            var elementId = this.elements.rootElement.id;
                            this.whiteBoardManagerInstance.getRoomDelegate().playRemoteMedia(userid, elementId);
                        }
                        break;
                    case 'file':
                        if (this.whiteBoardManagerInstance.getRoomDelegate().playRemoteMediaFile) {
                            var _elementId = this.elements.rootElement.id;
                            this.whiteBoardManagerInstance.getRoomDelegate().playRemoteMediaFile(userid, _elementId);
                        }
                        break;
                }
            }
            this._changeVolume(this.props.muteVolume ? 0 : this.props.volume);
        }
    }, {
        key: '_unplayAV',


        /*取消播放视频*/
        value: function _unplayAV() {
            if (this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.getRoomDelegate()) {
                switch (this.streamType) {
                    case 'media':
                        if (this.whiteBoardManagerInstance.getRoomDelegate().unplayRemoteMedia) {
                            this.whiteBoardManagerInstance.getRoomDelegate().unplayRemoteMedia(this.userid);
                        }
                        break;
                    case 'file':
                        if (this.whiteBoardManagerInstance.getRoomDelegate().unplayRemoteMediaFile) {
                            this.whiteBoardManagerInstance.getRoomDelegate().unplayRemoteMediaFile(this.userid);
                        }
                        break;
                }
            }
        }
    }, {
        key: 'render',
        value: function render() {}
    }]);

    return VideoDumb;
}(_TalkcloudReact3.default);

;

exports.default = VideoDumb;
},{"../../utils/DomUtils":338,"./TalkcloudReact":347}],349:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TalkAudioPlayer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MediaPlayer = require('./MediaPlayer');

var _MediaPlayer2 = _interopRequireDefault(_MediaPlayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * AudioPlayerView组件(音频播放器)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module AudioPlayerView
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description   提供 AudioPlayer播放器所需组件
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author 邱广生
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @date 2018/05/01
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var TalkAudioPlayer = function (_TalkMediaPlayer) {
    _inherits(TalkAudioPlayer, _TalkMediaPlayer);

    function TalkAudioPlayer() {
        var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
        var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
        var whiteBoardManagerInstance = arguments[2];
        var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var configration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

        _classCallCheck(this, TalkAudioPlayer);

        var isVideoPlayer = false;
        return _possibleConstructorReturn(this, (TalkAudioPlayer.__proto__ || Object.getPrototypeOf(TalkAudioPlayer)).call(this, parentNode, instanceId, whiteBoardManagerInstance, props, configration, isVideoPlayer));
    }

    _createClass(TalkAudioPlayer, [{
        key: 'reveiveEventRoomUsermediaorfilestateChanged',
        value: function reveiveEventRoomUsermediaorfilestateChanged(recvEventData) {
            var _recvEventData$messag = recvEventData.message,
                type = _recvEventData$messag.type,
                userId = _recvEventData$messag.userId,
                _recvEventData$messag2 = _recvEventData$messag.attributes,
                attributes = _recvEventData$messag2 === undefined ? {} : _recvEventData$messag2,
                published = _recvEventData$messag.published;

            if ((type === 'media' || type === 'file') && attributes.audio && !attributes.video) {
                //只有mp3操作
                if (published) {
                    this.setState({
                        streamInfo: undefined
                    });
                    this.setState({
                        streamInfo: {
                            userid: userId,
                            streamType: type,
                            audio: attributes.audio,
                            video: attributes.video,
                            attributes: attributes
                        }
                    });
                    if (userId === this.props.myUserId) {
                        if (type === 'file') {
                            if (this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.getRoomDelegate() && this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface()) {
                                this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface().pauseShareMediaFile(false); //play
                                this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface().seekMediaFile(0);
                            }
                        }
                    }
                    var pause = attributes.pause;

                    this.sendMediaPlayerNoticeActionCommand('start', recvEventData);
                    this.sendMediaPlayerNoticeActionCommand(pause ? 'pause' : 'play', recvEventData);
                } else {
                    this.setState({
                        streamInfo: undefined
                    });
                    this.sendMediaPlayerNoticeActionCommand('end', recvEventData);
                }
            }
        }
    }, {
        key: 'reveiveEventRoomUsermediaorfileattributesUpdate',
        value: function reveiveEventRoomUsermediaorfileattributesUpdate(recvEventData) {
            var _recvEventData$messag3 = recvEventData.message,
                type = _recvEventData$messag3.type,
                _recvEventData$messag4 = _recvEventData$messag3.attributes,
                attributes = _recvEventData$messag4 === undefined ? {} : _recvEventData$messag4,
                _recvEventData$messag5 = _recvEventData$messag3.updateAttributes,
                updateAttributes = _recvEventData$messag5 === undefined ? {} : _recvEventData$messag5;

            if ((type === 'media' || type === 'file') && attributes.audio && !attributes.video) {
                //只有mp3操作
                if (this.state.streamInfo) {
                    this.setState({
                        streamInfo: Object.deepAssign({}, this.state.streamInfo, {
                            attributes: updateAttributes
                        })
                    });
                    if (updateAttributes.pause !== undefined) {
                        this.sendMediaPlayerNoticeActionCommand(updateAttributes.pause ? 'pause' : 'play', recvEventData);
                    }
                }
            }
        }
    }, {
        key: 'receiveEventRoomErrorNotice',
        value: function receiveEventRoomErrorNotice(recvEventData) {
            var errorCode = recvEventData.errorCode;

            switch (errorCode) {
                case TK.ERROR_NOTICE.SHARE_MEDIA_FAILURE: //共享媒体文件失败
                case TK.ERROR_NOTICE.SHARE_FILE_FAILURE:
                    //共享本地媒体文件失败
                    this.setState({
                        streamInfo: undefined
                    });
                    this.sendMediaPlayerNoticeActionCommand('startShareMediaFail', recvEventData);
                    break;
                case TK.ERROR_NOTICE.STOP_MEDIA_FAILURE: //停止共享媒体文件失败
                case TK.ERROR_NOTICE.STOP_FILE_FAILURE:
                    //停止共享本地媒体文件失败
                    this.sendMediaPlayerNoticeActionCommand('stopShareMediaFail', recvEventData);
                    break;
                case TK.ERROR_NOTICE.SUBSCRIBE_MEDIA_FAILURE: //订阅媒体文件失败
                case TK.ERROR_NOTICE.SUBSCRIBE_FILE_FAILURE:
                    //订阅本地媒体文件失败
                    this.setState({
                        streamInfo: undefined
                    });
                    this.sendMediaPlayerNoticeActionCommand('subscribeShareMediaFail', recvEventData);
                    break;
                case TK.ERROR_NOTICE.UNSUBSCRIBE_MEDIA_FAILURE: //取消订阅媒体文件失败
                case TK.ERROR_NOTICE.UNSUBSCRIBE_FILE_FAILURE:
                    //取消订阅本地媒体文件失败
                    this.sendMediaPlayerNoticeActionCommand('unsubscribeShareMediaFail', recvEventData);
                    break;
            }
        }
    }, {
        key: 'sendMediaPlayerNoticeActionCommand',


        /*发送动作指令
         * XXX 此处直接获取了主白板实例且直接操作了主白板的方法*/
        value: function sendMediaPlayerNoticeActionCommand(noticeType, recvEventData) {
            var _recvEventData$messag6 = recvEventData.message,
                type = _recvEventData$messag6.type,
                userId = _recvEventData$messag6.userId,
                _recvEventData$messag7 = _recvEventData$messag6.attributes,
                attributes = _recvEventData$messag7 === undefined ? {} : _recvEventData$messag7;

            if ((type === 'media' || type === 'file') && attributes.audio && !attributes.video) {
                //只有mp3操作
                if (this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.whiteboardViewMap && this.whiteBoardManagerInstance.whiteboardViewMap.has('default')) {
                    var whiteboardView = this.whiteBoardManagerInstance.whiteboardViewMap.get('default');
                    if (whiteboardView && whiteboardView.sendActionCommand) {
                        var action = 'mediaPlayerNotice',
                            cmd = void 0;
                        var audioPlayerStreamInfo = {
                            playerType: 'audioPlayer',
                            userid: userId,
                            streamType: type,
                            audio: attributes.audio,
                            video: attributes.video,
                            attributes: attributes
                        };
                        audioPlayerStreamInfo.isDynamicPptVideo = false;
                        cmd = Object.deepAssign({
                            type: noticeType,
                            fileid: audioPlayerStreamInfo.attributes.fileid
                        }, audioPlayerStreamInfo);
                        whiteboardView.sendActionCommand(action, cmd);
                    }
                }
            }
        }
    }]);

    return TalkAudioPlayer;
}(_MediaPlayer2.default);

window.TalkAudioPlayer = TalkAudioPlayer;
exports.TalkAudioPlayer = TalkAudioPlayer;
exports.default = TalkAudioPlayer;
},{"./MediaPlayer":352}],350:[function(require,module,exports){
/* 课件备注视图
 * @module remarkViewRootElement
 * @description  sdk课件备注
 * @author 邱广生
 * @date 2018-05-20
  * */

'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TalkDocumentRemark = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TalkcloudReact2 = require('../components/TalkcloudReact');

var _TalkcloudReact3 = _interopRequireDefault(_TalkcloudReact2);

var _DomUtils = require('../../utils/DomUtils');

var _DomUtils2 = _interopRequireDefault(_DomUtils);

var _Utils = require('../../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _Global = require('../../utils/Global');

var _Global2 = _interopRequireDefault(_Global);

var _Language = require('../../utils/Language');

var _Language2 = _interopRequireDefault(_Language);

var _TalkAjax = require('../../utils/TalkAjax');

var _TalkAjax2 = _interopRequireDefault(_TalkAjax);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TalkDocumentRemark = function (_TalkcloudReact) {
    _inherits(TalkDocumentRemark, _TalkcloudReact);

    function TalkDocumentRemark() {
        var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
        var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
        var whiteBoardManagerInstance = arguments[2];
        var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var configration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

        _classCallCheck(this, TalkDocumentRemark);

        var _this = _possibleConstructorReturn(this, (TalkDocumentRemark.__proto__ || Object.getPrototypeOf(TalkDocumentRemark)).call(this, props));

        _this.parentNode = parentNode;
        _this.instanceId = instanceId;
        _this.whiteBoardManagerInstance = whiteBoardManagerInstance;
        _this.configration = configration;
        _this.elements = {};
        _this.documentRemarkTalkDrag = undefined; //拖拽实例
        _this.ajaxRequestingList = {}; //ajax正在请求的列表
        _this.state = {
            autoOpenRemark: true, //是否自动打开remark
            updateState: false,
            viewState: {
                tool: {}, //白板标注工具信息
                action: {}, //撤销、恢复、清空信息
                zoom: {}, //方法缩小信息
                page: {}, //翻页信息
                documentType: 'generalDocument', //打开的文件类别，generalDocument（普通文档）、dynamicPPT（动态PPT）、h5Document(H5课件)
                fileid: 0, //打开的文档的文件id
                dynamicPptVolume: 100, //动态PPT文档的音量
                fullScreen: false, //是否全屏
                remark: false, //是否开启文档备注
                other: { //其它信息
                    primaryColor: _this.configration.primaryColor, //画笔颜色 ,默认 #000000
                    secondaryColor: _this.configration.secondaryColor, //填充颜色 ,默认 #ffffff
                    backgroundColor: _this.configration.backgroundColor, //背景颜色 ,默认 #ffffff
                    pencilWidth: _this.configration.pencilWidth, //画笔大小 , 默认5
                    shapeWidth: _this.configration.shapeWidth, //图形画笔大小 , 默认5
                    eraserWidth: _this.configration.eraserWidth, //橡皮大小 ， 默认15
                    fontSize: _this.configration.fontSize, //字体大小 ， 默认18
                    fontFamily: _this.configration.fontFamily //使用的字体 ，默认"微软雅黑"
                }
            }
        };
        _this._createConnectElements();
        _this._updateLanguage();
        _this.render();
        return _this;
    }

    _createClass(TalkDocumentRemark, [{
        key: 'componentDidUpdateState',
        value: function componentDidUpdateState(prevState) {
            if (this.state.autoOpenRemark && prevState.viewState.fileid == this.state.viewState.fileid && this.state.viewState.fileid != 0 && prevState.viewState.page.currentPage !== this.state.viewState.page.currentPage) {
                if (this.whiteBoardManagerInstance && _Utils2.default.isFunction(this.whiteBoardManagerInstance.openDocumentRemark)) {
                    this.whiteBoardManagerInstance.openDocumentRemark(this.instanceId);
                }
            }
            if (prevState.viewState.fileid != this.state.viewState.fileid) {
                if (this.state.autoOpenRemark && this.state.viewState.fileid != 0) {
                    if (this.whiteBoardManagerInstance && _Utils2.default.isFunction(this.whiteBoardManagerInstance.openDocumentRemark)) {
                        this.whiteBoardManagerInstance.openDocumentRemark(this.instanceId);
                    }
                }
                this._ajaxDocumentRemark();
            }
            if (prevState.viewState.remark !== this.state.viewState.remark) {
                this._ajaxDocumentRemark();
            }
        }
    }, {
        key: 'componentDidUpdateProps',
        value: function componentDidUpdateProps(prevProps) {
            if (prevProps.languageType !== this.props.languageType) {
                this._updateLanguage();
            }
            if (prevProps.isDrag !== this.props.isDrag) {
                if (this.props.isDrag) {
                    this._addTalkDrag();
                } else {
                    if (this.documentRemarkTalkDrag && typeof this.documentRemarkTalkDrag.destroy === 'function') {
                        this.documentRemarkTalkDrag.destroy();
                        this.documentRemarkTalkDrag = undefined;
                    }
                }
            }
            if (!_Utils2.default.deepCompareJson(prevProps.initDragPosition, this.props.initDragPosition)) {
                if (this.documentRemarkTalkDrag && typeof this.documentRemarkTalkDrag.setPosition === 'function') {
                    var _ref = this.props.initDragPosition || {},
                        _ref$left = _ref.left,
                        left = _ref$left === undefined ? 50 : _ref$left,
                        _ref$top = _ref.top,
                        top = _ref$top === undefined ? 100 : _ref$top;

                    this.documentRemarkTalkDrag.setPosition(left, top);
                }
            }
        }
    }, {
        key: 'changeParentNode',


        /*改变父亲节点*/
        value: function changeParentNode(parentNode) {
            if (parentNode) {
                _DomUtils2.default.removeChild(this.elements.remarkViewRootElement, this.parentNode);
                this.parentNode = parentNode;
                _DomUtils2.default.appendChild(this.parentNode, this.elements.remarkViewRootElement);
            }
        }

        /*销毁视图*/

    }, {
        key: 'destroyView',
        value: function destroyView() {
            _DomUtils2.default.removeChild(this.elements.remarkViewRootElement, this.parentNode);
            for (var key in this.elements) {
                this.elements[key] = undefined;
                delete this.elements[key];
            }
        }

        /*重新计算大小*/

    }, {
        key: 'resize',
        value: function resize() {
            if (this.documentRemarkTalkDrag && _Utils2.default.isFunction(this.documentRemarkTalkDrag.resizeCallback)) {
                this.documentRemarkTalkDrag.resizeCallback();
            }
        }

        /*接收动作指令*/

    }, {
        key: 'receiveActionCommand',
        value: function receiveActionCommand(action, cmd) {
            if ((typeof cmd === 'undefined' ? 'undefined' : _typeof(cmd)) === 'object' && !Array.isArray(cmd)) {
                cmd = Object.deepAssign({}, cmd);
            }
            L.Logger.debug('[DocumentRemark]receive whiteboard view action command（action,cmd）:', action, cmd);
            switch (action) {
                case 'viewStateUpdate':
                    this.setState({
                        viewState: cmd.viewState
                    });
                    break;
            }
        }

        /*关闭文档备注*/

    }, {
        key: 'closeDocumentRemarkOnClick',
        value: function closeDocumentRemarkOnClick() {
            if (this.whiteBoardManagerInstance && _Utils2.default.isFunction(this.whiteBoardManagerInstance.closeDocumentRemark)) {
                this.whiteBoardManagerInstance.closeDocumentRemark(this.instanceId);
            }
        }

        /*创建所需节点*/

    }, {
        key: '_createConnectElements',
        value: function _createConnectElements() {
            this.elements.remarkViewRootElement = _DomUtils2.default.createElement('div', this.instanceId + 'TalkcloudRemark', 'talkcloud-sdk-whiteboard ' + this.instanceId + ' talk-cloud-remark-container remark-container', {
                position: 'absolute',
                left: 0,
                top: 0,
                display: 'none',
                zIndex: 3
            }); //h5容器节点

            this.elements.remarkViewRootElement.innerHTML = '\n            <div class="remark-head"> \n                <span class="name"></span>\n                <button class="close"></button>\n            </div>\n            <div class="content-container"> \n                <span class="content-text  custom-scroll-bar" >  </span>\n            </div>\n        ';

            _DomUtils2.default.appendChild(this.parentNode, this.elements.remarkViewRootElement);

            this.elements.remarkNameElement = this.elements.remarkViewRootElement.getElementsByClassName('name')[0];
            this.elements.remarkCloseElement = this.elements.remarkViewRootElement.getElementsByClassName('close')[0];
            this.elements.remarkContentElement = this.elements.remarkViewRootElement.getElementsByClassName('content-text')[0];

            this.elements.remarkCloseElement.onclick = this.closeDocumentRemarkOnClick.bind(this);

            this._addTalkDrag();
        }

        /*更新语言*/

    }, {
        key: '_updateLanguage',
        value: function _updateLanguage() {
            var _props$languageType = this.props.languageType,
                languageType = _props$languageType === undefined ? 'ch' : _props$languageType;

            if (!(languageType === 'ch' || languageType === 'tw' || languageType === 'en' || languageType === 'ja')) {
                languageType = 'ch';
            }

            var _TalkLanguage$get$doc = _Language2.default.get(languageType).documentRemark,
                name = _TalkLanguage$get$doc.name,
                closeTitle = _TalkLanguage$get$doc.closeTitle;

            this.elements.remarkNameElement.innerHTML = name;
            this.elements.remarkCloseElement.setAttribute('title', closeTitle);
        }

        /*添加拖拽*/

    }, {
        key: '_addTalkDrag',
        value: function _addTalkDrag() {
            if (window.TalkDrag && this.elements.remarkViewRootElement) {
                if (this.documentRemarkTalkDrag && typeof this.documentRemarkTalkDrag.destroy === 'function') {
                    this.documentRemarkTalkDrag.destroy();
                    this.documentRemarkTalkDrag = undefined;
                }
                this.documentRemarkTalkDrag = new window.TalkDrag(this.elements.remarkViewRootElement, {
                    containerData: {
                        left: 50,
                        top: 90
                    }
                });
            }
        }

        /*ajax请求文档备注信息*/

    }, {
        key: '_ajaxDocumentRemark',
        value: function _ajaxDocumentRemark() {
            var _this2 = this;

            var _state$viewState = this.state.viewState,
                remark = _state$viewState.remark,
                fileid = _state$viewState.fileid;

            var that = this;
            var isRequesting = false;
            if (this.ajaxRequestingList['documentRemark_' + fileid] && new Date().getTime() - this.ajaxRequestingList['documentRemark_' + fileid].requestTime < 5000) {
                isRequesting = true;
            }
            if (this.props.isConnectedRoom && !isRequesting && this.props.canRemark && remark && fileid != 0 && !_Global2.default.allDocumentRemarkInfoMap.has('documentRemark_' + fileid)) {
                //开启课件备注且之前没有获取过该备注数据
                if (this.ajaxRequestingList['documentRemark_' + fileid] && this.ajaxRequestingList['documentRemark_' + fileid].ajaxXhr && _Utils2.default.isFunction(this.ajaxRequestingList['documentRemark_' + fileid].ajaxXhr.abort)) {
                    this.ajaxRequestingList['documentRemark_' + fileid].ajaxXhr.abort();
                }
                this.ajaxRequestingList['documentRemark_' + fileid] = { requestTime: new Date().getTime(), ajaxXhr: undefined };
                this.ajaxRequestingList['documentRemark_' + fileid].ajaxXhr = (0, _TalkAjax2.default)().post(this.props.webAddress + "/ClientAPI" + "/getfileremark" + "?ts=" + new Date().getTime(), { fileid: fileid }).then(function (response) {
                    _this2.ajaxRequestingList['documentRemark_' + fileid] = undefined;
                    delete _this2.ajaxRequestingList['documentRemark_' + fileid];
                    if (response && response.result === 0) {
                        for (var key in response) {
                            var remarkInfo = response[key];
                            if (key !== 'result' && remarkInfo && _Utils2.default.isJson(remarkInfo)) {
                                if (!_Global2.default.allDocumentRemarkInfoMap.has('documentRemark_' + remarkInfo.fileid)) {
                                    _Global2.default.allDocumentRemarkInfoMap.set('documentRemark_' + remarkInfo.fileid, {});
                                }
                                var documentRemarkInfoJson = _Global2.default.allDocumentRemarkInfoMap.get('documentRemark_' + remarkInfo.fileid);
                                if (documentRemarkInfoJson) {
                                    documentRemarkInfoJson[remarkInfo.fileid + '_' + remarkInfo.pageid] = remarkInfo.remark;
                                }
                                if (_this2.whiteBoardManagerInstance && _this2.whiteBoardManagerInstance.whiteboardViewMap && _this2.whiteBoardManagerInstance.whiteboardViewMap.get(that.instanceId) && _Utils2.default.isFunction(_this2.whiteBoardManagerInstance.whiteboardViewMap.get(that.instanceId).forceViewStateUpdate)) {
                                    _this2.whiteBoardManagerInstance.whiteboardViewMap.get(that.instanceId).forceViewStateUpdate();
                                }
                            }
                        }
                    }
                    _this2.setState({ updateState: !_this2.state.updateState });
                }).catch(function (response, xhr) {
                    L.Logger.error('ajax request fail  error info( response, xhr ):', response, xhr);
                    _this2.ajaxRequestingList['documentRemark_' + fileid] = undefined;
                    delete _this2.ajaxRequestingList['documentRemark_' + fileid];
                    _this2.setState({ updateState: !_this2.state.updateState });
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _state$viewState2 = this.state.viewState,
                remark = _state$viewState2.remark,
                fileid = _state$viewState2.fileid,
                _state$viewState2$pag = _state$viewState2.page,
                page = _state$viewState2$pag === undefined ? {} : _state$viewState2$pag;
            var _page$currentPage = page.currentPage,
                currentPage = _page$currentPage === undefined ? 1 : _page$currentPage;

            var documentRemarkInfoJson = _Global2.default.allDocumentRemarkInfoMap.get('documentRemark_' + fileid);
            var isShow = this.props.canRemark && remark && fileid != 0 && documentRemarkInfoJson && documentRemarkInfoJson[fileid + '_' + currentPage];
            var isNendResize = !this.isShow && isShow;
            this.isShow = isShow;
            _DomUtils2.default.updateStyle(this.elements.remarkViewRootElement, {
                display: isShow ? 'block' : 'none'
            });

            if (isShow && documentRemarkInfoJson && documentRemarkInfoJson[fileid + '_' + currentPage]) {
                this.elements.remarkContentElement.innerHTML = documentRemarkInfoJson[fileid + '_' + currentPage];
            }

            if (isNendResize && this.documentRemarkTalkDrag && _Utils2.default.isFunction(this.documentRemarkTalkDrag.resizeCallback)) {
                this.documentRemarkTalkDrag.resizeCallback();
            }
        }
    }]);

    return TalkDocumentRemark;
}(_TalkcloudReact3.default);

window.TalkDocumentRemark = TalkDocumentRemark;
exports.TalkDocumentRemark = TalkDocumentRemark;
exports.default = TalkDocumentRemark;
},{"../../utils/DomUtils":338,"../../utils/Global":339,"../../utils/Language":340,"../../utils/TalkAjax":342,"../../utils/Utils":343,"../components/TalkcloudReact":347}],351:[function(require,module,exports){
/* 文档翻页等工具条
 * @module TalkDocumentToolbar
 * @description  sdk白板文档翻页等工具条
 * @author 邱广生
 * @date 2018-04-25
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TalkDocumentToolbar = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TalkcloudReact2 = require('../components/TalkcloudReact');

var _TalkcloudReact3 = _interopRequireDefault(_TalkcloudReact2);

var _DomUtils = require('../../utils/DomUtils');

var _DomUtils2 = _interopRequireDefault(_DomUtils);

var _Utils = require('../../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _Select = require('../components/Select');

var _Select2 = _interopRequireDefault(_Select);

var _Language = require('../../utils/Language');

var _Language2 = _interopRequireDefault(_Language);

var _Global = require('../../utils/Global');

var _Global2 = _interopRequireDefault(_Global);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TalkDocumentToolbar = function (_TalkcloudReact) {
    _inherits(TalkDocumentToolbar, _TalkcloudReact);

    function TalkDocumentToolbar() {
        var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
        var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
        var whiteBoardManagerInstance = arguments[2];
        var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var configration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

        _classCallCheck(this, TalkDocumentToolbar);

        var _this = _possibleConstructorReturn(this, (TalkDocumentToolbar.__proto__ || Object.getPrototypeOf(TalkDocumentToolbar)).call(this, props));

        _this.parentNode = parentNode;
        _this.instanceId = instanceId;
        _this.whiteBoardManagerInstance = whiteBoardManagerInstance;
        _this.configration = configration;
        _this.elements = {};
        _this.elementsViewClass = {};
        _this.documentToolbarTalkDrag = undefined; //拖拽实例
        _this.state = {
            updateState: false,
            dynamicPptAVSize: 0, //动态PPT音视频的个数
            tempDisabledDrag: false, //是否临时禁用拖拽
            viewState: {
                tool: {}, //白板标注工具信息
                action: {}, //撤销、恢复、清空信息
                zoom: {}, //方法缩小信息
                page: {}, //翻页信息
                documentType: 'generalDocument', //打开的文件类别，generalDocument（普通文档）、dynamicPPT（动态PPT）、h5Document(H5课件)
                fileid: 0, //打开的文档的文件id
                dynamicPptVolume: 100, //动态PPT文档的音量
                fullScreen: false, //是否全屏
                remark: false, //是否开启文档备注
                remarkText: '', //当前页文档备注的文本内容
                other: { //其它信息
                    primaryColor: _this.configration.primaryColor, //画笔颜色 ,默认 #000000
                    secondaryColor: _this.configration.secondaryColor, //填充颜色 ,默认 #ffffff
                    backgroundColor: _this.configration.backgroundColor, //背景颜色 ,默认 #ffffff
                    pencilWidth: _this.configration.pencilWidth, //画笔大小 , 默认5
                    shapeWidth: _this.configration.shapeWidth, //图形画笔大小 , 默认5
                    eraserWidth: _this.configration.eraserWidth, //橡皮大小 ， 默认15
                    fontSize: _this.configration.fontSize, //字体大小 ， 默认18
                    fontFamily: _this.configration.fontFamily //使用的字体 ，默认"微软雅黑"
                }
            }
        };
        _this._createConnectElements();
        _this._updateSelectInfo();
        _this._updateLanguage();
        _this.render();
        return _this;
    }

    _createClass(TalkDocumentToolbar, [{
        key: 'componentDidUpdateState',
        value: function componentDidUpdateState(prevState) {
            if (prevState.viewState !== this.state.viewState) {
                var currentPageCompare = prevState.viewState.page.currentPage === this.state.viewState.page.currentPage;
                var totalPageCompare = prevState.viewState.page.totalPage === this.state.viewState.page.totalPage;
                var skipPageCompare = prevState.viewState.page.skipPage && this.state.viewState.page.skipPage ? _Utils2.default.deepCompareJson(prevState.viewState.page.skipPage, this.state.viewState.page.skipPage) : prevState.viewState.page.skipPage === this.state.viewState.page.skipPage;

                if (!currentPageCompare || !totalPageCompare || !skipPageCompare) {
                    this._isShowRemarkBtn();
                    this._updateSelectInfo();
                }

                if (prevState.viewState.fileid != this.state.viewState.fileid || prevState.viewState.remarkText !== this.state.viewState.remarkText) {
                    this._isShowRemarkBtn();
                }

                if (prevState.viewState.dynamicPptVolume !== this.state.viewState.dynamicPptVolume) {
                    if (!this.pageVolumeSlidering && this.pageVolumeSlider && typeof this.pageVolumeSlider.setProgress === 'function') {
                        this.pageVolumeSlider.setProgress(this.state.viewState.dynamicPptVolume);
                    }
                }
            }
            if (prevState.tempDisabledDrag !== this.state.tempDisabledDrag) {
                if (this.documentToolbarTalkDrag && _typeof(this.documentToolbarTalkDrag.updateDisabled)) {
                    this.documentToolbarTalkDrag.updateDisabled(this.state.tempDisabledDrag);
                }
            }

            if (prevState.viewState.documentType !== this.state.viewState.documentType || prevState.viewState.fullScreen !== this.state.viewState.fullScreen || prevState.viewState.remark !== this.state.viewState.remark) {
                this._updateLanguage();
            }

            if (prevState.updateState !== this.state.updateState) {
                this._isShowRemarkBtn();
            }
        }
    }, {
        key: 'componentDidUpdateProps',
        value: function componentDidUpdateProps(prevProps) {
            if (prevProps.languageType !== this.props.languageType) {
                this._updateLanguage();
            }
            if (prevProps.isMobile !== this.props.isMobile) {
                this.elements.skipPageCurrpageElement.setAttribute('contenteditable', !this.props.isMobile);
                if (this.props.isMobile) {
                    _DomUtils2.default.addClass(this.elements.documentToolbarViewRootElement, 'app-mobile');
                } else {
                    _DomUtils2.default.removeClass(this.elements.documentToolbarViewRootElement, 'app-mobile');
                }
                if (this.elementsViewClass.selectPageView) {
                    this.elementsViewClass.selectPageView.setProps({
                        isMobile: this.props.isMobile
                    });
                }
            }
            if (prevProps.isDrag !== this.props.isDrag) {
                if (this.props.isDrag) {
                    this._addTalkDrag();
                } else {
                    if (this.documentToolbarTalkDrag && typeof this.documentToolbarTalkDrag.destroy === 'function') {
                        this.documentToolbarTalkDrag.destroy();
                        this.documentToolbarTalkDrag = undefined;
                    }
                }
            }
            if (!_Utils2.default.deepCompareJson(prevProps.initDragPosition, this.props.initDragPosition)) {
                if (this.documentToolbarTalkDrag && typeof this.documentToolbarTalkDrag.setPosition === 'function') {
                    var _ref = this.props.initDragPosition || {},
                        _ref$left = _ref.left,
                        left = _ref$left === undefined ? 50 : _ref$left,
                        _ref$top = _ref.top,
                        top = _ref$top === undefined ? 100 : _ref$top;

                    this.documentToolbarTalkDrag.setPosition(left, top);
                }
            }

            if ((prevProps.isLoadRemark !== this.props.isLoadRemark || prevProps.canRemark !== this.props.canRemark) && this.elements.remarkElement) {
                this._isShowRemarkBtn();
            }

            if (prevProps.isLoadFullScreen !== this.props.isLoadFullScreen && this.elements.fullScreenElement) {
                _DomUtils2.default.updateStyle(this.elements.fullScreenElement, {
                    display: !this.props.isLoadFullScreen ? 'none' : ''
                });
            }
        }
    }, {
        key: 'resize',


        /*重新计算大小*/
        value: function resize() {
            if (this.documentToolbarTalkDrag && _Utils2.default.isFunction(this.documentToolbarTalkDrag.resizeCallback)) {
                this.documentToolbarTalkDrag.resizeCallback();
            }
        }

        /*强制render*/

    }, {
        key: 'forceRender',
        value: function forceRender() {
            this.setState({
                updateState: !this.state.updateState
            });
        }

        /*改变父亲节点*/

    }, {
        key: 'changeParentNode',
        value: function changeParentNode(parentNode) {
            if (parentNode) {
                _DomUtils2.default.removeChild(this.elements.documentToolbarViewRootElement, this.parentNode);
                this.parentNode = parentNode;
                _DomUtils2.default.appendChild(this.parentNode, this.elements.documentToolbarViewRootElement);
            }
        }

        /*销毁视图*/

    }, {
        key: 'destroyView',
        value: function destroyView() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.values(this.elementsViewClass)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var view = _step.value;

                    if (view && view.destroyView) {
                        view.destroyView();
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.elementsViewClass = {};
            _DomUtils2.default.removeChild(this.elements.documentToolbarViewRootElement, this.parentNode);
            for (var key in this.elements) {
                this.elements[key] = undefined;
                delete this.elements[key];
            }
        }

        /*接收动作指令*/

    }, {
        key: 'receiveActionCommand',
        value: function receiveActionCommand(action, cmd) {
            if ((typeof cmd === 'undefined' ? 'undefined' : _typeof(cmd)) === 'object' && !Array.isArray(cmd)) {
                cmd = Object.deepAssign({}, cmd);
            }
            L.Logger.debug('[DocumentToolbar]receive whiteboard view action command（action,cmd）:', action, cmd);
            switch (action) {
                case 'closeAllSelectBox':
                    _DomUtils2.default.removeClass(this.elements.volumeElement, 'open');
                    break;
                case 'viewStateUpdate':
                    this.setState({
                        viewState: cmd.viewState
                    });
                    break;
            }
        }

        /*改变选中的页数*/

    }, {
        key: 'changeSelectPageOnChange',
        value: function changeSelectPageOnChange(currpage) {
            this.skipPage(currpage);
        }

        /*Select是否显示下拉框*/

    }, {
        key: 'changeSelectPageNoticeSelectExtendListShowOrHide',
        value: function changeSelectPageNoticeSelectExtendListShowOrHide(show) {
            this.setState({
                tempDisabledDrag: show //临时禁止拖拽
            });
        }
    }, {
        key: 'prevPage',


        /*上一页或者上一帧*/
        value: function prevPage() {
            var documentType = this.state.viewState.documentType;

            switch (documentType) {
                case 'dynamicPPT':
                    if (this.whiteBoardManagerInstance) {
                        this.whiteBoardManagerInstance.prevStep(this.instanceId);
                    }
                    break;
                default:
                    if (this.whiteBoardManagerInstance) {
                        this.whiteBoardManagerInstance.prevPage(this.instanceId);
                    }
                    break;
            }
            return false;
        }
    }, {
        key: 'nextPage',


        /*下一页或者下一帧*/
        value: function nextPage() {
            var documentType = this.state.viewState.documentType;

            switch (documentType) {
                case 'dynamicPPT':
                    if (this.whiteBoardManagerInstance) {
                        this.whiteBoardManagerInstance.nextStep(this.instanceId);
                    }
                    break;
                default:
                    if (this.whiteBoardManagerInstance) {
                        this.whiteBoardManagerInstance.nextPage(this.instanceId);
                    }
                    break;
            }
            return false;
        }
    }, {
        key: 'addPage',


        /*白板加页*/
        value: function addPage() {
            if (this.whiteBoardManagerInstance) {
                this.whiteBoardManagerInstance.addPage(this.instanceId);
            }
            return false;
        }
    }, {
        key: 'fullScreen',


        /*全屏功能*/
        value: function fullScreen() {
            if (this.whiteBoardManagerInstance) {
                if (!this.state.viewState.fullScreen) {
                    this.whiteBoardManagerInstance.fullScreen(this.instanceId);
                } else {
                    this.whiteBoardManagerInstance.exitFullScreen(this.instanceId);
                }
            }
            return false;
        }
    }, {
        key: 'openDynamicPptVolumeOnClick',
        value: function openDynamicPptVolumeOnClick() {
            if (_DomUtils2.default.hasClass(this.elements.volumeElement, 'open')) {
                _DomUtils2.default.removeClass(this.elements.volumeElement, 'open');
            } else {
                _DomUtils2.default.addClass(this.elements.volumeElement, 'open');
            }
            return false;
        }
    }, {
        key: 'closeDynamicPptVolumeOnMouseLeave',
        value: function closeDynamicPptVolumeOnMouseLeave() {
            _DomUtils2.default.removeClass(this.elements.volumeElement, 'open');
            return false;
        }

        /*开启或者关闭课件备注*/

    }, {
        key: 'openOrCloseRemarkOnClick',
        value: function openOrCloseRemarkOnClick() {
            var remark = this.state.viewState.remark;

            if (this.whiteBoardManagerInstance) {
                if (!remark) {
                    this.whiteBoardManagerInstance.openDocumentRemark(this.instanceId);
                } else {
                    this.whiteBoardManagerInstance.closeDocumentRemark(this.instanceId);
                }
            }
        }

        /*动态PPT音量改变*/

    }, {
        key: 'changeDynamicPptVolume',
        value: function changeDynamicPptVolume(volume) {
            if (this.whiteBoardManagerInstance && typeof this.whiteBoardManagerInstance.changeDynamicPptVolume === 'function') {
                this.whiteBoardManagerInstance.changeDynamicPptVolume(volume, this.instanceId);
            }
        }
    }, {
        key: 'skipPage',


        /*跳到指定页*/
        value: function skipPage(toPage) {
            toPage = Number(toPage);
            if (typeof toPage === 'number') {
                if (this.whiteBoardManagerInstance) {
                    this.whiteBoardManagerInstance.skipPage(toPage, this.instanceId);
                }
            }
            return false;
        }
    }, {
        key: 'sendActionCommand',


        /*发送动作指令
        * XXX 此处直接获取了主白板实例且直接操作了主白板的方法*/
        value: function sendActionCommand(action, cmd) {
            if (this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.whiteboardViewMap && this.whiteBoardManagerInstance.whiteboardViewMap.has(this.instanceId)) {
                var whiteboardView = this.whiteBoardManagerInstance.whiteboardViewMap.get(this.instanceId);
                if (whiteboardView && whiteboardView.sendActionCommand) {
                    whiteboardView.sendActionCommand(action, cmd);
                }
            }
        }
    }, {
        key: 'changePageOnFocus',


        /*正在跳转页数中*/
        value: function changePageOnFocus(event) {
            _Global2.default.isSkipPageing = true;
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }
    }, {
        key: 'changePageOnClick',
        value: function changePageOnClick() {
            this.elements.skipPageCurrpageElement.setAttribute('contenteditable', !this.props.isMobile);
            this.elements.skipPageCurrpageElement.focus(); //TODO 支详为什么要加上失去焦点？
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }

        /*失去焦点执行翻页*/

    }, {
        key: 'changePageOnBlur',
        value: function changePageOnBlur(event) {
            _Global2.default.isSkipPageing = false;
            this._changePage();
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }
    }, {
        key: 'changePageOnKeyDown',


        /*回车键执行翻页*/
        value: function changePageOnKeyDown(event) {
            switch (event.keyCode) {
                case 13:
                    if (this.elements.skipPageCurrpageElement && typeof this.elements.skipPageCurrpageElement.blur === 'function') {
                        this.elements.skipPageCurrpageElement.setAttribute('contenteditable', false);
                        this.elements.skipPageCurrpageElement.blur();
                    } else {
                        this._changePage();
                    }
                    if (event) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    return false;
                    break;
            }
        }

        /*放大文档*/

    }, {
        key: 'enlargeWhiteboard',
        value: function enlargeWhiteboard() {
            if (this.whiteBoardManagerInstance) {
                this.whiteBoardManagerInstance.enlargeWhiteboard(this.instanceId);
            }
            return false;
        }
    }, {
        key: 'narrowWhiteboard',


        /*缩小文档*/
        value: function narrowWhiteboard() {
            if (this.whiteBoardManagerInstance) {
                this.whiteBoardManagerInstance.narrowWhiteboard(this.instanceId);
            }
            return false;
        }
    }, {
        key: 'receiveWindowMessageEvent',


        /*接收动态PPT的iframe消息*/
        value: function receiveWindowMessageEvent(event) {
            // 通过origin属性判断消息来源地址
            var whiteboardView = {};
            if (this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.whiteboardViewMap.has(this.instanceId)) {
                whiteboardView = this.whiteBoardManagerInstance.whiteboardViewMap.get(this.instanceId);
            }
            if (event.data) {
                var data = undefined;
                var recvData = undefined;
                try {
                    recvData = JSON.parse(event.data);
                    data = recvData.data;
                } catch (e) {
                    L.Logger.warning("document tool bar receive iframe message data can't be converted to JSON , iframe data:", event.data);
                    return;
                }
                if (recvData.source === "tk_dynamicPPT" && whiteboardView.getDynamicPptInstanceByID && typeof whiteboardView.getDynamicPptInstanceByID === "function") {
                    //判断消息来源是否是当前实例id对应的iframe
                    if (whiteboardView.getDynamicPptInstanceByID().dynamicPptIframeElement && event.source === whiteboardView.getDynamicPptInstanceByID().dynamicPptIframeElement.contentWindow) {
                        L.Logger.debug("[document tool bar]receive remote iframe data form " + event.origin + ":", event);
                        var ALLVIDEOANDAUDIO = "allVideoAndAudio";
                        switch (data.action) {
                            case ALLVIDEOANDAUDIO:
                                this.setState({
                                    dynamicPptAVSize: data.allVideoAndAudioLength !== undefined ? data.allVideoAndAudioLength : 0
                                });
                                break;
                        };
                    }
                }
            }
        }

        /*停止事件*/

    }, {
        key: 'stopEvent',
        value: function stopEvent(event) {
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }

        /*改变页数*/

    }, {
        key: '_changePage',
        value: function _changePage() {
            var toPage = Number(this.elements.skipPageCurrpageElement.innerHTML);
            var _state$viewState$page = this.state.viewState.page,
                page = _state$viewState$page === undefined ? {} : _state$viewState$page;
            var _page$totalPage = page.totalPage,
                totalPage = _page$totalPage === undefined ? 1 : _page$totalPage,
                _page$currentPage = page.currentPage,
                currentPage = _page$currentPage === undefined ? 1 : _page$currentPage;

            if (typeof toPage === 'number' && !isNaN(toPage)) {
                if (toPage === currentPage) {
                    return;
                }
                if (toPage < 1 || toPage > totalPage) {
                    var action = 'skipPageFailureBouncedNotice';
                    var cmd = {
                        type: 'overPageRange',
                        currentPage: currentPage,
                        totalPage: totalPage,
                        toPage: toPage
                    };
                    this.sendActionCommand(action, cmd);
                    this.elements.skipPageCurrpageElement.innerHTML = currentPage;
                } else {
                    this.skipPage(toPage);
                }
            } else {
                var _action = 'skipPageFailureBouncedNotice';
                var _cmd = {
                    type: 'pageTypeNotNumber',
                    currentPage: currentPage,
                    totalPage: totalPage,
                    toPage: this.elements.skipPageCurrpageElement.innerHTML
                };
                this.sendActionCommand(_action, _cmd);
                this.elements.skipPageCurrpageElement.innerHTML = currentPage;
            }
        }

        /*创建所需节点*/

    }, {
        key: '_createConnectElements',
        value: function _createConnectElements() {
            var that = this;
            this.elements.documentToolbarViewRootElement = _DomUtils2.default.createElement('article', this.instanceId + 'DocumentToolViewRoot', 'talkcloud-sdk-whiteboard ' + this.instanceId + ' document-toolbar-root ' + (this.props.isMobile ? 'app-mobile ' : ' '), {
                zIndex: 5
            }); //翻页工具根节点

            this.elements.previousPageElement = _DomUtils2.default.createElement('button', this.instanceId + 'TalkcloudPreviousPage', 'talkcloud-sdk-whiteboard  ' + this.instanceId + ' document-toolbar-btn previous-page-btn', {}); //上一页或者上一帧节点

            this.elements.skipPageElement = _DomUtils2.default.createElement('div', this.instanceId + 'TalkcloudSkipPage', 'talkcloud-sdk-whiteboard  ' + this.instanceId + ' document-toolbar-select skip-page-select', {}); //skip到某一页的容器节点

            this.elements.nextPageElement = _DomUtils2.default.createElement('button', this.instanceId + 'TalkcloudNextPage', 'talkcloud-sdk-whiteboard  ' + this.instanceId + ' document-toolbar-btn next-page-btn', {}); //下一页或者下一帧节点

            this.elements.addPageElement = _DomUtils2.default.createElement('button', this.instanceId + 'TalkcloudAddPage', 'talkcloud-sdk-whiteboard  ' + this.instanceId + ' document-toolbar-btn add-page-btn', {
                display: 'none'
            }); //加页节点

            this.elements.fullScreenElement = _DomUtils2.default.createElement('button', this.instanceId + 'TalkcloudFullScreen', 'talkcloud-sdk-whiteboard  ' + this.instanceId + ' document-toolbar-btn full-screen-btn', {
                display: !this.props.isLoadFullScreen ? 'none' : ''
            }); //全屏节点

            this.elements.volumeElement = _DomUtils2.default.createElement('button', this.instanceId + 'TalkcloudVolume', 'talkcloud-sdk-whiteboard ' + this.instanceId + ' document-toolbar-btn volume-btn', {
                display: !this.props.isLoadVolume ? 'none' : ''
            }); //音量节点

            this.elements.remarkElement = _DomUtils2.default.createElement('button', this.instanceId + 'TalkcloudRemark', 'talkcloud-sdk-whiteboard ' + this.instanceId + ' document-toolbar-btn remark-btn', {
                display: !this.props.isLoadRemark || !this.props.canRemark ? 'none' : ''
            }); //备注节点

            this.elements.enlargeWhiteboardElement = _DomUtils2.default.createElement('button', this.instanceId + 'TalkcloudZoomBig', 'talkcloud-sdk-whiteboard  ' + this.instanceId + ' document-toolbar-btn zoom-big-btn', {}); //放大节点

            this.elements.narrowWhiteboardElement = _DomUtils2.default.createElement('button', this.instanceId + 'TalkcloudZoomSmall', 'talkcloud-sdk-whiteboard  ' + this.instanceId + ' document-toolbar-btn zoom-small-btn', {}); //缩小节点

            this.elements.volumeElement.innerHTML = '\n            <span class="volume-slider-container" onclick="return false;" id="' + this.instanceId + 'PageVolumeSlider" ></span>\n        ';

            this.elements.skipPageElement.innerHTML = '\n            <div class="page-info-container" > \n                <span contenteditable="' + !this.props.isMobile + '" class="curr-page">1</span><em>/</em><span class="total-page">1</span>\n            </div>\n        ';

            this.elements.skipPageCurrpageElement = this.elements.skipPageElement.getElementsByClassName('curr-page')[0];
            this.elements.skipPageTotalpageElement = this.elements.skipPageElement.getElementsByClassName('total-page')[0];
            /*修复bug talk-5246,输入框做限制,徐志宏 2018-10-31*/
            this.elements.skipPageCurrpageElement.oninput = function (e) {
                var value = e.target.innerHTML;
                if (!Number(value) || value.length > 5) {
                    e.target.innerHTML = value.substr(0, 5);
                    return;
                }
            };
            this.elements.skipPageCurrpageElement.onclick = this.changePageOnClick.bind(this);
            this.elements.skipPageCurrpageElement.onfocus = this.changePageOnFocus.bind(this);
            this.elements.skipPageCurrpageElement.onblur = this.changePageOnBlur.bind(this);
            this.elements.skipPageCurrpageElement.onkeydown = this.changePageOnKeyDown.bind(this);
            this.elements.previousPageElement.onclick = this.prevPage.bind(this);
            this.elements.nextPageElement.onclick = this.nextPage.bind(this);
            this.elements.addPageElement.onclick = this.addPage.bind(this);
            this.elements.fullScreenElement.onclick = this.fullScreen.bind(this);
            this.elements.volumeElement.onclick = this.openDynamicPptVolumeOnClick.bind(this);
            this.elements.volumeElement.getElementsByClassName('volume-slider-container')[0].onclick = this.stopEvent.bind(this);
            this.elements.volumeElement.onmouseleave = this.closeDynamicPptVolumeOnMouseLeave.bind(this);
            this.elements.remarkElement.onclick = this.openOrCloseRemarkOnClick.bind(this);
            this.elements.enlargeWhiteboardElement.onclick = this.enlargeWhiteboard.bind(this);
            this.elements.narrowWhiteboardElement.onclick = this.narrowWhiteboard.bind(this);

            this.elementsViewClass.selectPageView = new _Select2.default(this.elements.skipPageElement, {
                parentNode: this.parentNode,
                isMobile: this.props.isMobile,
                onChange: this.changeSelectPageOnChange.bind(this),
                noticeSelectExtendListShowOrHide: this.changeSelectPageNoticeSelectExtendListShowOrHide.bind(this)
            });

            _DomUtils2.default.appendChild(this.elements.documentToolbarViewRootElement, this.elements.previousPageElement);
            _DomUtils2.default.appendChild(this.elements.documentToolbarViewRootElement, this.elements.skipPageElement);
            _DomUtils2.default.appendChild(this.elements.documentToolbarViewRootElement, this.elements.nextPageElement);
            _DomUtils2.default.appendChild(this.elements.documentToolbarViewRootElement, this.elements.addPageElement);
            _DomUtils2.default.appendChild(this.elements.documentToolbarViewRootElement, this.elements.enlargeWhiteboardElement);
            _DomUtils2.default.appendChild(this.elements.documentToolbarViewRootElement, this.elements.narrowWhiteboardElement);
            _DomUtils2.default.appendChild(this.elements.documentToolbarViewRootElement, this.elements.fullScreenElement);
            _DomUtils2.default.appendChild(this.elements.documentToolbarViewRootElement, this.elements.volumeElement);
            _DomUtils2.default.appendChild(this.elements.documentToolbarViewRootElement, this.elements.remarkElement);
            _DomUtils2.default.appendChild(this.parentNode, this.elements.documentToolbarViewRootElement);

            if (window.TalkSlider) {
                this.pageVolumeSlider = new window.TalkSlider({
                    sliderContainer: { //slider整个组件容器的的设置
                        id: that.instanceId + 'PageVolumeSlider', //必传!!!!
                        direction: 'vertikal' //方向（水平(默认：horizontal||垂直：vertikal）
                    },
                    onBeforeChange: function onBeforeChange(value) {
                        that.pageVolumeSlidering = true;
                    },
                    onAfterChange: function onAfterChange(value) {
                        that.pageVolumeSlidering = false;
                        that.changeDynamicPptVolume(value);
                    }
                });
            }

            this._addTalkDrag();
        }
    }, {
        key: '_addTalkDrag',


        /*添加拖拽*/
        value: function _addTalkDrag() {
            if (this.props.isDrag && window.TalkDrag && this.elements.documentToolbarViewRootElement) {
                if (this.documentToolbarTalkDrag && typeof this.documentToolbarTalkDrag.destroy === 'function') {
                    this.documentToolbarTalkDrag.destroy();
                    this.documentToolbarTalkDrag = undefined;
                }

                var _ref2 = this.props.initDragPosition || {},
                    _ref2$left = _ref2.left,
                    left = _ref2$left === undefined ? 50 : _ref2$left,
                    _ref2$top = _ref2.top,
                    top = _ref2$top === undefined ? 100 : _ref2$top;

                this.documentToolbarTalkDrag = new window.TalkDrag(this.elements.documentToolbarViewRootElement, {
                    containerData: {
                        left: left,
                        top: top
                    }
                });
            }
        }

        /*更新语言*/

    }, {
        key: '_updateLanguage',
        value: function _updateLanguage() {
            var _props$languageType = this.props.languageType,
                languageType = _props$languageType === undefined ? 'ch' : _props$languageType;
            var _state$viewState = this.state.viewState,
                remark = _state$viewState.remark,
                fullScreen = _state$viewState.fullScreen,
                documentType = _state$viewState.documentType;


            if (!(languageType === 'ch' || languageType === 'tw' || languageType === 'en' || languageType === 'ja')) {
                languageType = 'ch';
            }

            var _TalkLanguage$get$doc = _Language2.default.get(languageType).documentToolbar,
                prevPage = _TalkLanguage$get$doc.prevPage,
                nextPage = _TalkLanguage$get$doc.nextPage,
                prevStep = _TalkLanguage$get$doc.prevStep,
                nextStep = _TalkLanguage$get$doc.nextStep,
                addPage = _TalkLanguage$get$doc.addPage,
                enlargeWhiteboard = _TalkLanguage$get$doc.enlargeWhiteboard,
                narrowWhiteboard = _TalkLanguage$get$doc.narrowWhiteboard,
                pptVolume = _TalkLanguage$get$doc.pptVolume,
                onRemark = _TalkLanguage$get$doc.onRemark,
                offRemark = _TalkLanguage$get$doc.offRemark,
                onGeneralDocumentFullScreen = _TalkLanguage$get$doc.onGeneralDocumentFullScreen,
                offGeneralDocumentFullScreen = _TalkLanguage$get$doc.offGeneralDocumentFullScreen,
                onDynamicPPTFullScreen = _TalkLanguage$get$doc.onDynamicPPTFullScreen,
                offDynamicPPTFullScreen = _TalkLanguage$get$doc.offDynamicPPTFullScreen,
                onH5DocumentFullScreen = _TalkLanguage$get$doc.onH5DocumentFullScreen,
                offH5DocumentFullScreen = _TalkLanguage$get$doc.offH5DocumentFullScreen;

            var fullScreenTitle = fullScreen ? offGeneralDocumentFullScreen : onGeneralDocumentFullScreen;
            if (documentType === 'dynamicPPT') {
                fullScreenTitle = fullScreen ? offDynamicPPTFullScreen : onDynamicPPTFullScreen;
            } else if (documentType === 'h5Document') {
                fullScreenTitle = fullScreen ? offH5DocumentFullScreen : onH5DocumentFullScreen;
            }
            this.elements.previousPageElement.title = documentType === 'dynamicPPT' ? prevStep : prevPage;
            this.elements.nextPageElement.title = documentType === 'dynamicPPT' ? nextStep : nextPage;
            this.elements.addPageElement.title = addPage;
            this.elements.fullScreenElement.title = fullScreenTitle;
            this.elements.volumeElement.title = pptVolume;
            this.elements.remarkElement.title = remark ? offRemark : onRemark;
            this.elements.enlargeWhiteboardElement.title = enlargeWhiteboard;
            this.elements.narrowWhiteboardElement.title = narrowWhiteboard;
        }

        /*更新select选择框信息*/

    }, {
        key: '_updateSelectInfo',
        value: function _updateSelectInfo() {
            if (this.elementsViewClass.selectPageView) {
                var _state$viewState$page2 = this.state.viewState.page,
                    page = _state$viewState$page2 === undefined ? {} : _state$viewState$page2;
                var _page$totalPage2 = page.totalPage,
                    totalPage = _page$totalPage2 === undefined ? 1 : _page$totalPage2,
                    _page$currentPage2 = page.currentPage,
                    currentPage = _page$currentPage2 === undefined ? 1 : _page$currentPage2,
                    _page$skipPage = page.skipPage,
                    skipPage = _page$skipPage === undefined ? {} : _page$skipPage;

                var selectOptions = [];
                if (totalPage < 1) {
                    totalPage = 1;
                }
                if (currentPage < 1) {
                    currentPage = 1;
                }
                for (var index = 1; index <= totalPage; index++) {
                    selectOptions.push({
                        label: index,
                        value: index
                    });
                }
                this.elementsViewClass.selectPageView.setProps({
                    selectOptions: selectOptions,
                    currentValue: currentPage,
                    disabled: skipPage.disabled,
                    isMobile: this.props.isMobile
                });
                this.elements.skipPageCurrpageElement.innerHTML = currentPage;
                this.elements.skipPageTotalpageElement.innerHTML = totalPage;
            }
        }

        /*是否显示课件备注btn*/

    }, {
        key: '_isShowRemarkBtn',
        value: function _isShowRemarkBtn() {
            if (this.elements.remarkElement) {
                var isShowRemark = this.props.isLoadRemark && this.props.canRemark && this.state.viewState.remarkText;
                _DomUtils2.default.updateStyle(this.elements.remarkElement, {
                    display: !isShowRemark ? 'none' : ''
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _state$viewState2 = this.state.viewState,
                _state$viewState2$pag = _state$viewState2.page,
                page = _state$viewState2$pag === undefined ? {} : _state$viewState2$pag,
                _state$viewState2$zoo = _state$viewState2.zoom,
                zoom = _state$viewState2$zoo === undefined ? {} : _state$viewState2$zoo,
                documentType = _state$viewState2.documentType,
                fullScreen = _state$viewState2.fullScreen,
                remark = _state$viewState2.remark,
                fileid = _state$viewState2.fileid;
            var _page$prevPage = page.prevPage,
                prevPage = _page$prevPage === undefined ? {} : _page$prevPage,
                _page$nextPage = page.nextPage,
                nextPage = _page$nextPage === undefined ? {} : _page$nextPage,
                _page$prevStep = page.prevStep,
                prevStep = _page$prevStep === undefined ? {} : _page$prevStep,
                _page$nextStep = page.nextStep,
                nextStep = _page$nextStep === undefined ? {} : _page$nextStep,
                _page$addPage = page.addPage,
                addPage = _page$addPage === undefined ? {} : _page$addPage,
                _page$skipPage2 = page.skipPage,
                skipPage = _page$skipPage2 === undefined ? {} : _page$skipPage2,
                _page$currentPage3 = page.currentPage,
                currentPage = _page$currentPage3 === undefined ? 1 : _page$currentPage3;
            var _zoom$zoom_big = zoom.zoom_big,
                zoom_big = _zoom$zoom_big === undefined ? {} : _zoom$zoom_big,
                _zoom$zoom_small = zoom.zoom_small,
                zoom_small = _zoom$zoom_small === undefined ? {} : _zoom$zoom_small;

            this.elements.previousPageElement.disabled = documentType === 'dynamicPPT' ? prevStep.disabled : prevPage.disabled;
            this.elements.nextPageElement.disabled = documentType === 'dynamicPPT' ? nextStep.disabled : nextPage.disabled;
            this.elements.addPageElement.disabled = addPage.disabled;
            this.elements.enlargeWhiteboardElement.disabled = zoom_big.disabled;
            this.elements.narrowWhiteboardElement.disabled = zoom_small.disabled;

            if (skipPage.disabled) {
                _DomUtils2.default.addClass(this.elements.skipPageElement, 'disabled');
            } else {
                _DomUtils2.default.removeClass(this.elements.skipPageElement, 'disabled');
            }

            _DomUtils2.default.updateStyle(this.elements.nextPageElement, {
                display: !addPage.disabled ? 'none' : ''
            });
            _DomUtils2.default.updateStyle(this.elements.addPageElement, {
                display: addPage.disabled ? 'none' : ''
            });
            if (fullScreen) {
                _DomUtils2.default.addClass(this.elements.fullScreenElement, 'yes');
            } else {
                _DomUtils2.default.removeClass(this.elements.fullScreenElement, 'yes');
            }
            _DomUtils2.default.updateStyle(this.elements.volumeElement, {
                display: this.props.isLoadVolume && documentType === 'dynamicPPT' && this.state.dynamicPptAVSize > 0 ? '' : 'none'
            });

            if (remark) {
                _DomUtils2.default.addClass(this.elements.remarkElement, 'yes');
            } else {
                _DomUtils2.default.removeClass(this.elements.remarkElement, 'yes');
            }
        }
    }]);

    return TalkDocumentToolbar;
}(_TalkcloudReact3.default);

window.TalkDocumentToolbar = TalkDocumentToolbar;
exports.TalkDocumentToolbar = TalkDocumentToolbar;
exports.default = TalkDocumentToolbar;
},{"../../utils/DomUtils":338,"../../utils/Global":339,"../../utils/Language":340,"../../utils/Utils":343,"../components/Select":346,"../components/TalkcloudReact":347}],352:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TalkcloudReact2 = require('../components/TalkcloudReact');

var _TalkcloudReact3 = _interopRequireDefault(_TalkcloudReact2);

var _DomUtils = require('../../utils/DomUtils');

var _DomUtils2 = _interopRequireDefault(_DomUtils);

var _Utils = require('../../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _VideoDumb = require('../components/VideoDumb');

var _VideoDumb2 = _interopRequireDefault(_VideoDumb);

var _MediaPlayerController = require('../components/MediaPlayerController');

var _MediaPlayerController2 = _interopRequireDefault(_MediaPlayerController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * MediaPlayerSmart组件(媒体播放器)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module MediaPlayerSmart
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description   提供 MediaPlayer播放器所需组件
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author 邱广生
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @date 2018/05/01
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var TalkMediaPlayer = function (_TalkcloudReact) {
    _inherits(TalkMediaPlayer, _TalkcloudReact);

    function TalkMediaPlayer() {
        var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
        var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
        var whiteBoardManagerInstance = arguments[2];
        var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var configration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
        var isVideoPlayer = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

        _classCallCheck(this, TalkMediaPlayer);

        var _this = _possibleConstructorReturn(this, (TalkMediaPlayer.__proto__ || Object.getPrototypeOf(TalkMediaPlayer)).call(this, props));

        _this.isVideoPlayer = isVideoPlayer;
        _this.parentNode = parentNode;
        _this.instanceId = instanceId;
        _this.whiteBoardManagerInstance = whiteBoardManagerInstance;
        _this.configration = configration;
        _this.state = {
            streamInfo: undefined,
            volume: 100,
            muteVolume: false, isFullScreen: false //是否全屏
        };
        _this.progressIntervalDuration = 1000; //设置进度条定时器时间间隔为1000ms
        _this.elements = {};
        _this.videoDumb = undefined;
        _this._createElements();
        _this._connectElements();
        _this.render();
        return _this;
    }

    _createClass(TalkMediaPlayer, [{
        key: 'shouldComponentUpdateState',
        value: function shouldComponentUpdateState(prevState) {
            if (prevState.streamInfo !== this.state.streamInfo) {
                if (prevState.streamInfo && this.state.streamInfo && prevState.streamInfo.attributes && this.state.streamInfo.attributes) {
                    var isRender = false;
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = Object.entries(this.state.streamInfo.attributes)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var _ref = _step.value;

                            var _ref2 = _slicedToArray(_ref, 2);

                            var key = _ref2[0];
                            var value = _ref2[1];

                            if (key !== 'position' && value !== prevState.streamInfo.attributes[key]) {
                                isRender = true;
                                break;
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    if (prevState.streamInfo.attributes.position !== this.state.streamInfo.attributes.position && !isRender) {
                        //FIXME 如果同時更新position和其它狀態，會導致不render
                        return true;
                    }
                }
            }
            return false;
        }
    }, {
        key: 'componentDidUpdateState',
        value: function componentDidUpdateState(prevState) {
            if (prevState.streamInfo && !this.state.streamInfo) {
                var fullScreenElement = this.elements.rootElement;
                if (_Utils2.default.getFullscreenElement() && _Utils2.default.getFullscreenElement().id === fullScreenElement.id) {
                    _Utils2.default.exitFullscreen();
                }
            }
            if (this.elements.closeVideoPlayerElement && !prevState.streamInfo && this.state.streamInfo) {
                var isRemoteLocalShareMedia = false; //是否是远程的本地电影共享

                var _ref3 = this.state.streamInfo || {},
                    streamType = _ref3.streamType,
                    userid = _ref3.userid;

                if (streamType === 'file' && userid != this.props.myUserId) {
                    isRemoteLocalShareMedia = true;
                }
                _DomUtils2.default.updateStyle(this.elements.closeVideoPlayerElement, {
                    display: !this.props.controlPermissions.hasClose || isRemoteLocalShareMedia ? 'none' : ''
                });
                this.elements.closeVideoPlayerElement.disabled = !this.props.controlPermissions.hasClose || isRemoteLocalShareMedia;
            }

            if (this.state.streamInfo && this.state.streamInfo.attributes) {
                if (this.progressTimer && this.state.streamInfo.streamType === 'media' && (this.state.streamInfo.userid == this.props.myUserId || this.props.myRole == 0 || this.props.myRole == 1)) {
                    //如果是媒体文件共享且是发起者/老师/助教则不设置定时器（由服务器给进度信息）
                    this._stopProgressTimer();
                } else {
                    if (this.progressTimer && this.state.streamInfo.attributes.pause) {
                        this._stopProgressTimer();
                    } else if (!this.progressTimer && !this.state.streamInfo.attributes.pause) {
                        this._startProgressTimer();
                    }
                }
            } else {
                if (this.progressTimer) {
                    this._stopProgressTimer();
                }
            }
            if (this.videoDumb) {
                if (prevState.volume !== this.state.volume) {
                    this.videoDumb.setProps({
                        volume: this.state.volume
                    });
                }
                if (prevState.muteVolume !== this.state.muteVolume) {
                    this.videoDumb.setProps({
                        muteVolume: this.state.muteVolume
                    });
                }
                if (prevState.streamInfo !== this.state.streamInfo) {
                    this.videoDumb.setProps({
                        streamInfo: this.state.streamInfo
                    });
                }
            }

            if (this.mediaPlayerControllerDumb) {
                if (prevState.streamInfo !== this.state.streamInfo) {
                    this.mediaPlayerControllerDumb.setProps({
                        streamInfo: this.state.streamInfo
                    });
                }
                if (prevState.volume !== this.state.volume) {
                    this.mediaPlayerControllerDumb.setProps({
                        volume: this.state.volume
                    });
                }
                if (prevState.muteVolume !== this.state.muteVolume) {
                    this.mediaPlayerControllerDumb.setProps({
                        muteVolume: this.state.muteVolume
                    });
                }
                if (prevState.isFullScreen !== this.state.isFullScreen) {
                    this.mediaPlayerControllerDumb.setProps({
                        isFullScreen: this.state.isFullScreen
                    });
                }
            }
        }
    }, {
        key: 'componentDidUpdateProps',
        value: function componentDidUpdateProps(prevProps) {
            if (prevProps.isLoadControl !== this.props.isLoadControl) {
                if (!this.mediaPlayerControllerDumb && this.props.isLoadControl) {
                    this._loadMediaPlayerController();
                } else if (this.mediaPlayerControllerDumb && !this.props.isLoadControl) {
                    this.mediaPlayerControllerDumb.destroyView();
                    this.mediaPlayerControllerDumb = undefined;
                }
            }
            if (this.elements.closeVideoPlayerElement && prevProps.controlPermissions.hasClose !== this.props.controlPermissions.hasClose) {
                var isRemoteLocalShareMedia = false; //是否是远程的本地电影共享

                var _ref4 = this.state.streamInfo || {},
                    streamType = _ref4.streamType,
                    userid = _ref4.userid;

                if (streamType === 'file' && userid != this.props.myUserId) {
                    isRemoteLocalShareMedia = true;
                }
                _DomUtils2.default.updateStyle(this.elements.closeVideoPlayerElement, {
                    display: !this.props.controlPermissions.hasClose || isRemoteLocalShareMedia ? 'none' : ''
                });
                this.elements.closeVideoPlayerElement.disabled = !this.props.controlPermissions.hasClose || isRemoteLocalShareMedia;
            }
            if (this.mediaPlayerControllerDumb) {
                if (prevProps.myUserId !== this.props.myUserId) {
                    this.mediaPlayerControllerDumb.setProps({
                        myUserId: this.props.myUserId
                    });
                }
                if (prevProps.isPlayback !== this.props.isPlayback) {
                    if (this.props.isPlayback) {
                        _DomUtils2.default.addClass(this.elements.rootElement, 'tk-playback');
                    } else {
                        _DomUtils2.default.removeClass(this.elements.rootElement, 'tk-playback');
                    }
                    this.mediaPlayerControllerDumb.setProps({
                        isPlayback: this.props.isPlayback
                    });
                }
                if (prevProps.controlPermissions !== this.props.controlPermissions) {
                    this.mediaPlayerControllerDumb.setProps({
                        controlPermissions: this.props.controlPermissions
                    });
                }
            }

            if (this.videoDumb) {
                if (prevProps.myUserId !== this.props.myUserId) {
                    this.videoDumb.setProps({
                        myUserId: this.props.myUserId
                    });
                }
            }
        }
    }, {
        key: 'destroyView',


        /*销毁视图*/
        value: function destroyView() {
            _DomUtils2.default.removeChild(this.elements.rootElement, this.parentNode);
            for (var key in this.elements) {
                this.elements[key] = undefined;
                delete this.elements[key];
            }
        }
    }, {
        key: 'receiveEventFullScreenChange',


        /*接受全屏改变事件*/
        value: function receiveEventFullScreenChange(event) {
            if (_Utils2.default.isFullScreenStatus()) {
                var fullScreenElement = this.elements.rootElement;
                if (_Utils2.default.getFullscreenElement() && _Utils2.default.getFullscreenElement().id === fullScreenElement.id) {
                    this._changeFullScreenState(true);
                } else {
                    this._changeFullScreenState(false);
                }
            } else {
                this._changeFullScreenState(false);
            }
        }

        /*暂停和播放控制*/

    }, {
        key: 'onPlayOrPauseClick',
        value: function onPlayOrPauseClick() {
            var _this2 = this;

            if (TK.SDKTYPE !== 'pc') {
                return;
            }
            if (this.state.streamInfo && this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.getRoomDelegate()) {
                var room = this.whiteBoardManagerInstance.getRoomDelegate();
                switch (this.state.streamInfo.streamType) {
                    case 'media':
                        if (this.state.streamInfo.attributes.pause) {
                            var _state$streamInfo$att = this.state.streamInfo.attributes,
                                _state$streamInfo$att2 = _state$streamInfo$att.position,
                                position = _state$streamInfo$att2 === undefined ? 0 : _state$streamInfo$att2,
                                _state$streamInfo$att3 = _state$streamInfo$att.duration,
                                duration = _state$streamInfo$att3 === undefined ? 0 : _state$streamInfo$att3;

                            if (position >= duration) {
                                room.seekMedia(0);
                            }
                            room.pauseShareMedia(false); //play
                            _DomUtils2.default.updateStyle(this.elements.closeVideoPlayerElement, {
                                display: ''
                            });
                            if (this.props.controlCallback && this.props.controlCallback.play && _Utils2.default.isFunction(this.props.controlCallback.play)) {
                                this.props.controlCallback.play();
                            }
                        } else {
                            room.pauseShareMedia(true); //pause
                            _DomUtils2.default.updateStyle(this.elements.closeVideoPlayerElement, {
                                display: 'none'
                            });
                            if (this.props.controlCallback && this.props.controlCallback.pause && _Utils2.default.isFunction(this.props.controlCallback.pause)) {
                                this.props.controlCallback.pause();
                            }
                        }
                        break;
                    case 'file':
                        if (this.state.streamInfo.userid === this.props.myUserId && room.getNativeInterface()) {
                            var nativeInterface = room.getNativeInterface();
                            if (this.state.streamInfo.attributes.pause) {
                                var _state$streamInfo$att4 = this.state.streamInfo.attributes,
                                    _state$streamInfo$att5 = _state$streamInfo$att4.position,
                                    _position = _state$streamInfo$att5 === undefined ? 0 : _state$streamInfo$att5,
                                    _state$streamInfo$att6 = _state$streamInfo$att4.duration,
                                    _duration = _state$streamInfo$att6 === undefined ? 0 : _state$streamInfo$att6;

                                this._updateLocalFileStreamInfoPlayerPosition(function () {
                                    if (_position + 1000 >= _duration) {
                                        //FIXME position比duration少几百毫秒，需要c++查一下，暂时做+1000处理
                                        nativeInterface.seekMediaFile(0);
                                    }
                                    nativeInterface.pauseShareMediaFile(false); //play
                                    if (_this2.props.controlCallback && _this2.props.controlCallback.play && _Utils2.default.isFunction(_this2.props.controlCallback.play)) {
                                        _this2.props.controlCallback.play();
                                        _DomUtils2.default.updateStyle(_this2.elements.closeVideoPlayerElement, {
                                            display: ''
                                        });
                                    }
                                });
                            } else {
                                nativeInterface.pauseShareMediaFile(true); //pause
                                if (this.props.controlCallback && this.props.controlCallback.pause && _Utils2.default.isFunction(this.props.controlCallback.pause)) {
                                    this.props.controlCallback.pause();
                                    _DomUtils2.default.updateStyle(this.elements.closeVideoPlayerElement, {
                                        display: 'none'
                                    });
                                }
                            }
                        }
                        break;
                }
            }
        }

        /*改变音量*/

    }, {
        key: 'onChangeVolume',
        value: function onChangeVolume(volume) {
            var changeState = {
                volume: volume
            };
            if (volume === 0 && !this.state.muteVolume) {
                changeState.muteVolume = true;
            } else if (volume !== 0 && this.state.muteVolume) {
                changeState.muteVolume = false;
            }
            this.setState(changeState);
        }

        /*改变播放的进度*/

    }, {
        key: 'onChangeProgress',
        value: function onChangeProgress(progress) {
            if (TK.SDKTYPE === 'mobile') {
                return;
            }
            if (this.state.streamInfo && this.state.streamInfo.attributes && this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.getRoomDelegate()) {
                switch (this.state.streamInfo.streamType) {
                    case 'media':
                        var positionPercentage = progress / 100;
                        if (positionPercentage < 0) {
                            positionPercentage = 0;
                        }
                        if (positionPercentage > 1) {
                            positionPercentage = 1;
                        }
                        var position = this.state.streamInfo.attributes.duration * positionPercentage;
                        this._updateStreamInfoAttributes('position', position);
                        this.whiteBoardManagerInstance.getRoomDelegate().seekMedia(positionPercentage);
                        break;
                    case 'file':
                        if (this.state.streamInfo.userid === this.props.myUserId && this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface()) {
                            var _positionPercentage = progress / 100;
                            if (_positionPercentage < 0) {
                                _positionPercentage = 0;
                            }
                            if (_positionPercentage > 1) {
                                _positionPercentage = 1;
                            }
                            var _position2 = this.state.streamInfo.attributes.duration * _positionPercentage;
                            this._updateStreamInfoAttributes('position', _position2);
                            this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface().seekMediaFile(_positionPercentage);
                        }
                        break;
                }
            }
        }

        /*改变静音*/

    }, {
        key: 'onVolumeMuteClick',
        value: function onVolumeMuteClick() {
            var changeState = {
                muteVolume: !this.state.muteVolume
            };
            if (!changeState.muteVolume && this.state.volume <= 0) {
                changeState.volume = 100;
            } else {
                changeState.volume = 0;
            }
            this.setState(changeState);
        }
    }, {
        key: 'onCloseClick',


        /*关闭点击事件处理*/
        value: function onCloseClick() {
            if (this.state.streamInfo && this.whiteBoardManagerInstance) {
                switch (this.state.streamInfo.streamType) {
                    case 'media':
                        this.whiteBoardManagerInstance.stopShareMedia();
                        break;
                    case 'file':
                        this.whiteBoardManagerInstance.stopShareLocalMedia();
                        break;
                }
            }
        }

        /*全屏点击处理*/

    }, {
        key: 'onFullScreenClick',
        value: function onFullScreenClick() {
            if (!this.state.isFullScreen) {
                if (_Utils2.default.isFullScreenStatus()) {
                    _Utils2.default.exitFullscreen();
                }
                var fullScreenElement = this.elements.rootElement;
                _Utils2.default.launchFullscreen(fullScreenElement);
            } else {
                _Utils2.default.exitFullscreen();
            }
        }

        /*创建所需节点*/

    }, {
        key: '_createElements',
        value: function _createElements() {
            this.elements.rootElement = _DomUtils2.default.createElement('section', this.instanceId + (this.isVideoPlayer ? 'VideoPlayer' : 'AudioPlayer') + 'TalkMediaPlayerBox', 'talkcloud-sdk-whiteboard tk-media-player ' + ' tk-media-player-container ' + (this.isVideoPlayer ? 'tk-video-player-container ' : 'tk-audio-player-container ') + (this.props.isPlayback ? 'tk-playback ' : ' '), {
                display: !this.state.streamInfo ? 'none' : ''
            }); //根节点

            this.elements.mediaSourceElement = _DomUtils2.default.createElement('article', this.instanceId + (this.isVideoPlayer ? 'VideoPlayer' : 'AudioPlayer') + 'TalkMediaPlayerSourceBox', 'talkcloud-sdk-whiteboard tk-media-player ' + ' tk-media-player-source', {
                display: !this.isVideoPlayer ? 'none' : ''
            }); //音频播放器来源节点
            var isRemoteLocalShareMedia = false; //是否是远程的本地电影共享

            var _ref5 = this.state.streamInfo || {},
                streamType = _ref5.streamType,
                userid = _ref5.userid;

            if (streamType === 'file' && userid != this.props.myUserId) {
                isRemoteLocalShareMedia = true;
            }
            if (this.isVideoPlayer) {
                this.elements.closeVideoPlayerElement = _DomUtils2.default.createElement('button', undefined, 'talkcloud-sdk-whiteboard add-cursor-pointer tk-video-player-close-btn ', {
                    display: !this.props.controlPermissions.hasClose || isRemoteLocalShareMedia ? 'none' : ''
                }); //视频播放器关闭按钮
            }

            this.elements.mediaTotalControlElement = _DomUtils2.default.createElement('article', this.instanceId + (this.isVideoPlayer ? 'VideoPlayer' : 'AudioPlayer') + 'TalkMediaPlayerTotalControlBox', 'talkcloud-sdk-whiteboard tk-media-player ' + ' tk-media-player-total-control-box', {}); //音频播放器所有控件节点
            if (this.isVideoPlayer) {
                this.elements.rootElement.onmouseover = this._videoMouseover.bind(this);
                this.elements.rootElement.onmouseout = this._videoMouseout.bind(this);
                this.elements.rootElement.onclick = this._videoClick.bind(this);
                this.elements.mediaTotalControlElement.onmouseover = this._videoControlMouseover.bind(this);
                this.elements.mediaTotalControlElement.onclick = this._videoControlClick.bind(this);
            }
        }
    }, {
        key: '_videoMouseover',
        value: function _videoMouseover() {
            var _this3 = this;

            _DomUtils2.default.addClass(this.elements.rootElement, 'show-controller');
            clearTimeout(this.showControllerTimer);
            this.showControllerTimer = setTimeout(function () {
                _DomUtils2.default.removeClass(_this3.elements.rootElement, 'show-controller');
            }, 2000);
        }
    }, {
        key: '_videoMouseout',
        value: function _videoMouseout() {
            _DomUtils2.default.removeClass(this.elements.rootElement, 'show-controller');
        }
    }, {
        key: '_videoClick',
        value: function _videoClick(event) {
            var _this4 = this;

            var isAdd = this.elements.rootElement.classList.toggle('show-controller');
            if (isAdd) {
                clearTimeout(this.showControllerTimer);
                this.showControllerTimer = setTimeout(function () {
                    _DomUtils2.default.removeClass(_this4.elements.rootElement, 'show-controller');
                }, 2000);
            }
        }
    }, {
        key: '_videoControlMouseover',
        value: function _videoControlMouseover(event) {
            clearTimeout(this.showControllerTimer);
            _DomUtils2.default.addClass(this.elements.rootElement, 'show-controller');
            event.stopPropagation();
        }
    }, {
        key: '_videoControlClick',
        value: function _videoControlClick(event) {
            event.stopPropagation();
        }
    }, {
        key: '_connectElements',


        /*连接所有节点*/
        value: function _connectElements() {
            _DomUtils2.default.appendChild(this.elements.rootElement, this.elements.mediaSourceElement);
            _DomUtils2.default.appendChild(this.elements.rootElement, this.elements.mediaTotalControlElement);
            if (this.elements.closeVideoPlayerElement) {
                _DomUtils2.default.appendChild(this.elements.rootElement, this.elements.closeVideoPlayerElement);
            }
            _DomUtils2.default.appendChild(this.parentNode, this.elements.rootElement);
            if (this.props.isLoadControl) {
                this._loadMediaPlayerController();
            }
            if (this.elements.closeVideoPlayerElement) {
                this.elements.closeVideoPlayerElement.onclick = this.onCloseClick.bind(this);
            }
        }

        /*加载媒体播放控制器*/

    }, {
        key: '_loadMediaPlayerController',
        value: function _loadMediaPlayerController() {
            if (this.props.isLoadControl) {
                if (this.mediaPlayerControllerDumb) {
                    this.mediaPlayerControllerDumb.destroyView();
                }
                this.mediaPlayerControllerDumb = new _MediaPlayerController2.default(this.elements.mediaTotalControlElement, this.instanceId, this.whiteBoardManagerInstance, {
                    streamInfo: this.state.streamInfo,
                    volume: this.state.volume,
                    muteVolume: this.state.muteVolume,
                    isFullScreen: this.state.isFullScreen,
                    isPlayback: this.props.isPlayback,
                    myUserId: this.props.myUserId,
                    controlPermissions: this.props.controlPermissions,
                    isVideoPlayer: this.isVideoPlayer,
                    onCloseClick: this.onCloseClick.bind(this),
                    onPlayOrPauseClick: this.onPlayOrPauseClick.bind(this),
                    onChangeVolume: this.onChangeVolume.bind(this),
                    onVolumeMuteClick: this.onVolumeMuteClick.bind(this),
                    onChangeProgress: this.onChangeProgress.bind(this),
                    onFullScreenClick: this.onFullScreenClick.bind(this)
                });
            } else {
                if (this.mediaPlayerControllerDumb) {
                    this.mediaPlayerControllerDumb.destroyView();
                }
            }
        }

        /*将时间格式化为分:秒*/

    }, {
        key: '_formatTime',
        value: function _formatTime(data) {
            var minute = parseInt(data / 60);
            var second = Math.round(data % 60);
            if (second === 60) {
                minute += 1;
                second = 0;
            }
            if (parseInt(minute / 10) === 0) {
                //时间个位数转十位数
                minute = '0' + minute;
            }
            if (parseInt(second / 10) === 0) {
                //时间个位数转十位数
                second = '0' + second;
            }
            return minute + ':' + second;
        }

        /*开始定时设置进度*/

    }, {
        key: '_startProgressTimer',
        value: function _startProgressTimer() {
            var _this5 = this;

            if (this.props.isPlayback) {
                //回放没有进度
                this._stopProgressTimer();
                return;
            }
            this._stopProgressTimer();
            if (this.state.streamInfo) {
                if (this.state.streamInfo.streamType === 'media' && (this.state.streamInfo.userid == this.props.myUserId || this.props.myRole == 0 || this.props.myRole == 1)) {
                    //如果是媒体文件共享且是发起者/老师/助教则不设置定时器（由服务器给进度信息）
                    this._stopProgressTimer();
                    return;
                }
                this.progressTimer = setInterval(function () {
                    if (_this5.state.streamInfo) {
                        var _state$streamInfo = _this5.state.streamInfo,
                            userid = _state$streamInfo.userid,
                            streamType = _state$streamInfo.streamType,
                            _state$streamInfo$att7 = _state$streamInfo.attributes,
                            attributes = _state$streamInfo$att7 === undefined ? {} : _state$streamInfo$att7;

                        switch (streamType) {
                            case 'media':
                                if (_this5.state.streamInfo.streamType === 'media' && (_this5.state.streamInfo.userid == _this5.props.myUserId || _this5.props.myRole == 0 || _this5.props.myRole == 1)) {
                                    //如果是媒体文件共享且是发起者/老师/助教则不设置定时器（由服务器给进度信息）
                                    _this5._stopProgressTimer();
                                    return;
                                }
                                var _attributes$position = attributes.position,
                                    position = _attributes$position === undefined ? 0 : _attributes$position,
                                    _attributes$duration = attributes.duration,
                                    duration = _attributes$duration === undefined ? 0 : _attributes$duration;

                                position += _this5.progressIntervalDuration;
                                if (position > duration) {
                                    position = duration;
                                    _this5._stopProgressTimer();
                                }
                                _this5._updateStreamInfoAttributes('position', position);
                                break;
                            case 'file':
                                if (userid !== _this5.props.myUserId) {
                                    var _attributes$position2 = attributes.position,
                                        _position3 = _attributes$position2 === undefined ? 0 : _attributes$position2,
                                        _attributes$duration2 = attributes.duration,
                                        _duration2 = _attributes$duration2 === undefined ? 0 : _attributes$duration2;

                                    _position3 += _this5.progressIntervalDuration;
                                    if (_position3 > _duration2) {
                                        _position3 = _duration2;
                                        _this5._stopProgressTimer();
                                    }
                                    _this5._updateStreamInfoAttributes('position', _position3);
                                } else {
                                    _this5._updateLocalFileStreamInfoPlayerPosition();
                                }
                                break;
                        }
                    } else {
                        _this5._stopProgressTimer();
                    }
                }, this.progressIntervalDuration);
            }
        }
    }, {
        key: '_stopProgressTimer',


        /*停止定时设置进度*/
        value: function _stopProgressTimer() {
            clearInterval(this.progressTimer);
            this.progressTimer = null;
        }
    }, {
        key: '_updateStreamInfoAttributes',


        /*更新流的attributes*/
        value: function _updateStreamInfoAttributes(key, value) {
            if (this.state.streamInfo) {
                var updateAttributes = {};
                updateAttributes[key] = value;
                this.setState({
                    streamInfo: Object.deepAssign({}, this.state.streamInfo, {
                        attributes: updateAttributes
                    })
                });
            }
        }

        /*更新本地媒体文件的播放进度(发起者的进度)*/

    }, {
        key: '_updateLocalFileStreamInfoPlayerPosition',
        value: function _updateLocalFileStreamInfoPlayerPosition(callback) {
            var _this6 = this;

            if (this.state.streamInfo && this.state.streamInfo.streamType === 'file') {
                if (this.state.streamInfo.userid === this.props.myUserId && this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.getRoomDelegate() && this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface()) {
                    this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface().getMediaFileProgress(function (param) {
                        if ((typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object') {
                            var _param$position = param.position,
                                position = _param$position === undefined ? 0 : _param$position,
                                _param$duration = param.duration,
                                duration = _param$duration === undefined ? 0 : _param$duration;

                            if (position > duration) {
                                position = duration;
                                _this6._stopProgressTimer();
                            }
                            _this6._updateStreamInfoAttributes('position', position);
                            if (_Utils2.default.isFunction(callback)) {
                                callback(param);
                            }
                        }
                    });
                }
            }
        }

        /*改变全屏状态*/

    }, {
        key: '_changeFullScreenState',
        value: function _changeFullScreenState(isFullScreen) {
            this.setState({
                isFullScreen: isFullScreen
            });
        }

        /**/

    }, {
        key: 'getVideoDumbElementId',
        value: function getVideoDumbElementId() {
            if (this.videoDumb) {
                return this.videoDumb.getElementId();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            if (this.state.streamInfo && !this.videoDumb) {
                this.videoDumb = new _VideoDumb2.default(this.elements.mediaSourceElement, this.instanceId, this.whiteBoardManagerInstance, {
                    videoDumbElementIdPrefix: this.instanceId,
                    streamInfo: this.state.streamInfo,
                    volume: this.state.volume,
                    muteVolume: this.state.muteVolume,
                    myUserId: this.props.myUserId
                });
            } else if (!this.state.streamInfo && this.videoDumb) {
                this.videoDumb.destroyView();
                this.videoDumb = undefined;
            }
            _DomUtils2.default.updateStyle(this.elements.rootElement, {
                display: !this.state.streamInfo ? 'none' : ''
            });
        }
    }]);

    return TalkMediaPlayer;
}(_TalkcloudReact3.default);

exports.default = TalkMediaPlayer;
},{"../../utils/DomUtils":338,"../../utils/Utils":343,"../components/MediaPlayerController":345,"../components/TalkcloudReact":347,"../components/VideoDumb":348}],353:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TalkVideoPlayer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Global = require('../../utils/Global');

var _Global2 = _interopRequireDefault(_Global);

var _Utils = require('../../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _MediaPlayer = require('./MediaPlayer');

var _MediaPlayer2 = _interopRequireDefault(_MediaPlayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * VideoPlayerView组件(视频播放器)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module VideoPlayerView
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description   提供 VideoPlayer播放器所需组件
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author 邱广生
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @date 2018/05/01
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var TalkVideoPlayer = function (_TalkMediaPlayer) {
    _inherits(TalkVideoPlayer, _TalkMediaPlayer);

    function TalkVideoPlayer() {
        var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
        var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
        var whiteBoardManagerInstance = arguments[2];
        var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var configration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

        _classCallCheck(this, TalkVideoPlayer);

        var isVideoPlayer = true;

        var _this = _possibleConstructorReturn(this, (TalkVideoPlayer.__proto__ || Object.getPrototypeOf(TalkVideoPlayer)).call(this, parentNode, instanceId, whiteBoardManagerInstance, props, configration, isVideoPlayer));

        _this.configration = configration;
        return _this;
    }

    _createClass(TalkVideoPlayer, [{
        key: 'reveiveEventRoomUsermediaorfilestateChanged',
        value: function reveiveEventRoomUsermediaorfilestateChanged(recvEventData) {
            var _recvEventData$messag = recvEventData.message,
                type = _recvEventData$messag.type,
                userId = _recvEventData$messag.userId,
                _recvEventData$messag2 = _recvEventData$messag.attributes,
                attributes = _recvEventData$messag2 === undefined ? {} : _recvEventData$messag2,
                published = _recvEventData$messag.published;

            if ((type === 'media' || type === 'file') && attributes.audio && attributes.video) {
                //只有mp4操作
                if (published) {
                    _Global2.default.isPlayVideoing = true;
                    this.setState({
                        streamInfo: undefined
                    });
                    this.setState({
                        streamInfo: {
                            userid: userId,
                            streamType: type,
                            audio: attributes.audio,
                            video: attributes.video,
                            attributes: attributes
                        }
                    });
                    if (userId === this.props.myUserId) {
                        if (type === 'file') {
                            if (this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.getRoomDelegate() && this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface()) {
                                this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface().pauseShareMediaFile(false); //play
                                this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface().seekMediaFile(0);
                            }
                        }
                    }
                    var pause = attributes.pause;

                    this.sendMediaPlayerNoticeActionCommand('start', recvEventData);
                    this.sendMediaPlayerNoticeActionCommand(pause ? 'pause' : 'play', recvEventData);
                    if (this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.reveiveEventRoomReceiveActionCommand) {
                        this.whiteBoardManagerInstance.reveiveEventRoomReceiveActionCommand({
                            type: 'room-receiveActionCommand',
                            message: {
                                action: 'closeDynamicPptWebPlay'
                            }
                        });
                    }
                } else {
                    _Global2.default.isPlayVideoing = false;
                    this.setState({
                        streamInfo: undefined
                    });
                    this.sendMediaPlayerNoticeActionCommand('end', recvEventData);
                }
            }
        }
    }, {
        key: 'reveiveEventRoomUsermediaorfileattributesUpdate',
        value: function reveiveEventRoomUsermediaorfileattributesUpdate(recvEventData) {
            var _recvEventData$messag3 = recvEventData.message,
                type = _recvEventData$messag3.type,
                _recvEventData$messag4 = _recvEventData$messag3.attributes,
                attributes = _recvEventData$messag4 === undefined ? {} : _recvEventData$messag4,
                _recvEventData$messag5 = _recvEventData$messag3.updateAttributes,
                updateAttributes = _recvEventData$messag5 === undefined ? {} : _recvEventData$messag5;

            if ((type === 'media' || type === 'file') && attributes.audio && attributes.video) {
                //只有mp4操作
                if (this.state.streamInfo) {
                    this.setState({
                        streamInfo: Object.deepAssign({}, this.state.streamInfo, {
                            attributes: updateAttributes
                        })
                    });
                    if (updateAttributes.pause !== undefined) {
                        this.sendMediaPlayerNoticeActionCommand(updateAttributes.pause ? 'pause' : 'play', recvEventData);
                    }
                }
            }
        }
    }, {
        key: 'receiveEventRoomErrorNotice',
        value: function receiveEventRoomErrorNotice(recvEventData) {
            var errorCode = recvEventData.errorCode;

            switch (errorCode) {
                case TK.ERROR_NOTICE.SHARE_MEDIA_FAILURE: //共享媒体文件失败
                case TK.ERROR_NOTICE.SHARE_FILE_FAILURE:
                    //共享本地媒体文件失败
                    _Global2.default.isPlayVideoing = false;
                    this.setState({
                        streamInfo: undefined
                    });
                    this.sendMediaPlayerNoticeActionCommand('startShareMediaFail', recvEventData);
                    break;
                case TK.ERROR_NOTICE.STOP_MEDIA_FAILURE: //停止共享媒体文件失败
                case TK.ERROR_NOTICE.STOP_FILE_FAILURE:
                    //停止共享本地媒体文件失败
                    this.sendMediaPlayerNoticeActionCommand('stopShareMediaFail', recvEventData);
                    break;
                case TK.ERROR_NOTICE.SUBSCRIBE_MEDIA_FAILURE: //订阅媒体文件失败
                case TK.ERROR_NOTICE.SUBSCRIBE_FILE_FAILURE:
                    //订阅本地媒体文件失败
                    _Global2.default.isPlayVideoing = false;
                    this.setState({
                        streamInfo: undefined
                    });
                    this.sendMediaPlayerNoticeActionCommand('subscribeShareMediaFail', recvEventData);
                    break;
                case TK.ERROR_NOTICE.UNSUBSCRIBE_MEDIA_FAILURE: //取消订阅媒体文件失败
                case TK.ERROR_NOTICE.UNSUBSCRIBE_FILE_FAILURE:
                    //取消订阅本地媒体文件失败
                    this.sendMediaPlayerNoticeActionCommand('unsubscribeShareMediaFail', recvEventData);
                    break;
            }
        }
    }, {
        key: 'sendMediaPlayerNoticeActionCommand',


        /*发送动作指令
         * XXX 此处直接获取了主白板实例且直接操作了主白板的方法*/
        value: function sendMediaPlayerNoticeActionCommand(noticeType, recvEventData) {
            var _recvEventData$messag6 = recvEventData.message,
                type = _recvEventData$messag6.type,
                userId = _recvEventData$messag6.userId,
                _recvEventData$messag7 = _recvEventData$messag6.attributes,
                attributes = _recvEventData$messag7 === undefined ? {} : _recvEventData$messag7;

            if ((type === 'media' || type === 'file') && attributes.audio && attributes.video) {
                //只有mp4操作
                if (this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.whiteboardViewMap && this.whiteBoardManagerInstance.whiteboardViewMap.has('default')) {
                    var whiteboardView = this.whiteBoardManagerInstance.whiteboardViewMap.get('default');
                    if (whiteboardView && whiteboardView.sendActionCommand) {
                        var action = 'mediaPlayerNotice',
                            cmd = void 0;
                        var videoPlayerStreamInfo = {
                            playerType: 'videoPlayer',
                            userid: userId,
                            streamType: type,
                            audio: attributes.audio,
                            video: attributes.video,
                            attributes: attributes
                        };
                        videoPlayerStreamInfo.isDynamicPptVideo = videoPlayerStreamInfo.attributes.source === 'dynamicPPT' || videoPlayerStreamInfo.playerType === 'videoPlayer' && videoPlayerStreamInfo.attributes.filename === '';
                        cmd = Object.deepAssign({
                            type: noticeType,
                            fileid: videoPlayerStreamInfo.attributes.fileid
                        }, videoPlayerStreamInfo);
                        whiteboardView.sendActionCommand(action, cmd);
                        if (_Utils2.default.isFunction(whiteboardView.forceViewStateUpdate)) {
                            whiteboardView.forceViewStateUpdate();
                        }
                    }
                }
            }
        }
    }]);

    return TalkVideoPlayer;
}(_MediaPlayer2.default);

window.TalkVideoPlayer = TalkVideoPlayer;
exports.TalkVideoPlayer = TalkVideoPlayer;
exports.default = TalkVideoPlayer;
},{"../../utils/Global":339,"../../utils/Utils":343,"./MediaPlayer":352}],354:[function(require,module,exports){
/* 白板标注工具条
 * @module WhiteboardToolBar
 * @description  sdk白板标注工具条
 * @author 邱广生
 * @date 2018-05-06
  * */

'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TalkWhiteboardToolbar = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TalkcloudReact2 = require('../components/TalkcloudReact');

var _TalkcloudReact3 = _interopRequireDefault(_TalkcloudReact2);

var _DomUtils = require('../../utils/DomUtils');

var _DomUtils2 = _interopRequireDefault(_DomUtils);

var _Utils = require('../../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _Language = require('../../utils/Language');

var _Language2 = _interopRequireDefault(_Language);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// let cursorStyle;

var TalkWhiteboardToolbar = function (_TalkcloudReact) {
    _inherits(TalkWhiteboardToolbar, _TalkcloudReact);

    function TalkWhiteboardToolbar() {
        var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
        var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
        var whiteBoardManagerInstance = arguments[2];
        var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var configration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

        _classCallCheck(this, TalkWhiteboardToolbar);

        var _this = _possibleConstructorReturn(this, (TalkWhiteboardToolbar.__proto__ || Object.getPrototypeOf(TalkWhiteboardToolbar)).call(this, props));

        _this.parentNode = parentNode;
        _this.instanceId = instanceId;
        _this.whiteBoardManagerInstance = whiteBoardManagerInstance;
        _this.configration = configration;
        _this.elements = {};
        _this.whiteboardToolbarTalkDrag = undefined; //拖拽实例
        _this.state = {
            tempDisabledDrag: false, //是否临时禁用拖拽
            viewState: {
                tool: {}, //白板标注工具信息
                action: {}, //撤销、恢复、清空信息
                zoom: {}, //方法缩小信息
                page: {}, //翻页信息
                documentType: 'generalDocument', //打开的文件类别，generalDocument（普通文档）、dynamicPPT（动态PPT）、h5Document(H5课件)
                fileid: 0, //打开的文档的文件id
                dynamicPptVolume: 100, //动态PPT文档的音量
                fullScreen: false, //是否全屏
                remark: false, //是否开启文档备注
                other: { //其它信息
                    primaryColor: _this.configration.primaryColor, //画笔颜色 ,默认 #000000
                    secondaryColor: _this.configration.secondaryColor, //填充颜色 ,默认 #ffffff
                    backgroundColor: _this.configration.backgroundColor, //背景颜色 ,默认 #ffffff
                    pencilWidth: _this.configration.pencilWidth, //画笔大小 , 默认5
                    shapeWidth: _this.configration.shapeWidth, //图形画笔大小 , 默认5
                    eraserWidth: _this.configration.eraserWidth, //橡皮大小 ， 默认15
                    fontSize: _this.configration.fontSize, //字体大小 ， 默认18
                    fontFamily: _this.configration.fontFamily //使用的字体 ，默认"微软雅黑"
                }
            },
            useColor: ''
        };
        _this.fileTypeMark = 'general'; //general 、 dynamicPPT 、 h5document
        _this._createConnectElements();
        _this._addEvent();
        _this._updateLanguage();
        _this.render();
        return _this;
    }

    _createClass(TalkWhiteboardToolbar, [{
        key: 'componentDidUpdateState',
        value: function componentDidUpdateState(prevState) {
            if (prevState.tempDisabledDrag !== this.state.tempDisabledDrag) {
                if (this.whiteboardToolbarTalkDrag && _typeof(this.whiteboardToolbarTalkDrag.updateDisabled)) {
                    this.whiteboardToolbarTalkDrag.updateDisabled(this.state.tempDisabledDrag);
                }
            }
            if (prevState.viewState.other.pencilWidth !== this.state.viewState.other.pencilWidth) {
                this._setPencilWidthToSlider();
            }

            if (prevState.viewState.other.eraserWidth !== this.state.viewState.other.eraserWidth) {
                this._setEraserWidthToSlider();
            }
        }
    }, {
        key: 'componentDidUpdateProps',
        value: function componentDidUpdateProps(prevProps) {
            if (prevProps.languageType !== this.props.languageType) {
                this._updateLanguage();
            }
            if (prevProps.isDrag !== this.props.isDrag) {
                if (this.props.isDrag) {
                    this._addTalkDrag();
                } else {
                    if (this.whiteboardToolbarTalkDrag && typeof this.whiteboardToolbarTalkDrag.destroy === 'function') {
                        this.whiteboardToolbarTalkDrag.destroy();
                        this.whiteboardToolbarTalkDrag = undefined;
                    }
                }
            }
            if (!_Utils2.default.deepCompareJson(prevProps.initDragPosition, this.props.initDragPosition)) {
                if (this.whiteboardToolbarTalkDrag && typeof this.whiteboardToolbarTalkDrag.setPosition === 'function') {
                    var _ref = this.props.initDragPosition || {},
                        _ref$left = _ref.left,
                        left = _ref$left === undefined ? 0 : _ref$left,
                        _ref$top = _ref.top,
                        top = _ref$top === undefined ? 0 : _ref$top;

                    this.whiteboardToolbarTalkDrag.setPosition(left, top);
                }
            }

            if (this.elements && (!_Utils2.default.deepCompareJson(prevProps.loadWhiteboardTools, this.props.loadWhiteboardTools) || prevProps.isMobile !== this.props.isMobile)) {
                var _ref2 = this.props.loadWhiteboardTools || {},
                    mouse = _ref2.mouse,
                    laser = _ref2.laser,
                    pen = _ref2.pen,
                    text = _ref2.text,
                    shape = _ref2.shape,
                    eraser = _ref2.eraser,
                    clear = _ref2.clear,
                    undo = _ref2.undo,
                    redo = _ref2.redo,
                    setting = _ref2.setting;

                _DomUtils2.default.updateStyle(this.elements.tool_mouse, {
                    display: !mouse ? 'none' : ''
                });
                _DomUtils2.default.updateStyle(this.elements.tool_laser, {
                    display: !laser || this.props.isMobile ? 'none' : ''
                });
                _DomUtils2.default.updateStyle(this.elements.penList, {
                    display: !pen ? 'none' : ''
                });
                _DomUtils2.default.updateStyle(this.elements.tool_text, {
                    display: !text ? 'none' : ''
                });
                _DomUtils2.default.updateStyle(this.elements.shapeList, {
                    display: !shape ? 'none' : ''
                });
                _DomUtils2.default.updateStyle(this.elements.tool_eraser, {
                    display: !eraser ? 'none' : ''
                });
                _DomUtils2.default.updateStyle(this.elements.action_clear, {
                    display: !clear ? 'none' : ''
                });
                _DomUtils2.default.updateStyle(this.elements.action_undo, {
                    display: !undo ? 'none' : ''
                });
                _DomUtils2.default.updateStyle(this.elements.action_redo, {
                    display: !redo ? 'none' : ''
                });
                _DomUtils2.default.updateStyle(this.elements.settingList, {
                    display: !setting ? 'none' : ''
                });
            }

            if (prevProps.pencilWidthScale !== this.props.pencilWidthScale) {
                this._setPencilWidthToSlider();
            }

            if (prevProps.eraserWidthScale !== this.props.eraserWidthScale) {
                this._setEraserWidthToSlider();
            }
        }
    }, {
        key: 'changeParentNode',


        /*改变父亲节点*/
        value: function changeParentNode(parentNode) {
            if (parentNode) {
                _DomUtils2.default.removeChild(this.elements.whiteboardToolbarViewRootElement, this.parentNode);
                this.parentNode = parentNode;
                _DomUtils2.default.appendChild(this.parentNode, this.elements.whiteboardToolbarViewRootElement);
            }
        }

        /*销毁视图*/

    }, {
        key: 'destroyView',
        value: function destroyView() {
            _DomUtils2.default.removeChild(this.elements.whiteboardToolbarViewRootElement, this.parentNode);
            for (var key in this.elements) {
                this.elements[key] = undefined;
                delete this.elements[key];
            }
        }

        /*接收动作指令*/

    }, {
        key: 'receiveActionCommand',
        value: function receiveActionCommand(action, cmd) {
            if ((typeof cmd === 'undefined' ? 'undefined' : _typeof(cmd)) === 'object' && !Array.isArray(cmd)) {
                cmd = Object.deepAssign({}, cmd);
            }
            L.Logger.debug('[WhiteboardToolbar]receive whiteboard view action command（action,cmd）:', action, cmd);
            switch (action) {
                case 'closeAllSelectBox':
                    this._closeList();
                    break;
                case 'viewStateUpdate':
                    this.setState({
                        viewState: cmd.viewState
                    });
                    break;
            }
        }

        /*鼠标离开白板标注工具容器*/

    }, {
        key: 'whiteboardToolbarViewRootMouseLeave',
        value: function whiteboardToolbarViewRootMouseLeave(event) {
            this._closeList();
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }

        /*列表的打开和关闭*/

    }, {
        key: 'listOpenOrCloseOnClick',
        value: function listOpenOrCloseOnClick(elementKey, event) {
            if (this.elements[elementKey]) {
                this._closeList(elementKey);
                if (_DomUtils2.default.hasClass(this.elements[elementKey], 'open')) {
                    _DomUtils2.default.removeClass(this.elements[elementKey], 'open');
                    _DomUtils2.default.removeClass(this.elements[elementKey], 'left-show-list');
                } else {
                    _DomUtils2.default.addClass(this.elements[elementKey], 'open');
                    var toolKey = undefined;
                    var listParemtElementRect = undefined;
                    switch (elementKey) {
                        case 'penList':
                            toolKey = this.elements.penList.getAttribute('data-current-pen');
                            if (toolKey && this.whiteBoardManagerInstance) {
                                this.whiteBoardManagerInstance.useWhiteboardTool(toolKey, this.instanceId);
                            }
                            listParemtElementRect = this._getRect(this.elements.penListExtend);
                            break;
                        case 'shapeList':
                            toolKey = this.elements.shapeList.getAttribute('data-current-shape');
                            if (toolKey && this.whiteBoardManagerInstance) {
                                this.whiteBoardManagerInstance.useWhiteboardTool(toolKey, this.instanceId);
                            }
                            listParemtElementRect = this._getRect(this.elements.shapeListExtend);
                            break;
                        case 'settingList':
                            listParemtElementRect = this._getRect(this.elements.settingListExtend);
                            break;
                    }
                    if (listParemtElementRect) {
                        var elementRect = this._getRect(this.elements.whiteboardToolbarViewRootElement);
                        var paremtElementRect = this._getRect(this.parentNode);
                        if (elementRect.left - paremtElementRect.left > paremtElementRect.width - (elementRect.width + listParemtElementRect.width + 5)) {
                            _DomUtils2.default.addClass(this.elements[elementKey], 'left-show-list');
                        } else {
                            _DomUtils2.default.removeClass(this.elements[elementKey], 'left-show-list');
                        }
                    }
                }
            }
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }

        /*鼠标离开列表项关闭*/

    }, {
        key: 'listOpenOrCloseOnMouseLeave',
        value: function listOpenOrCloseOnMouseLeave(elementKey, event) {
            if (this.elements[elementKey]) {
                _DomUtils2.default.removeClass(this.elements[elementKey], 'open');
            }
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }

        /*使用标注工具*/

    }, {
        key: 'useWhiteboardToolOnClick',
        value: function useWhiteboardToolOnClick(toolKey, event) {
            if (this.whiteBoardManagerInstance && toolKey) {
                this.whiteBoardManagerInstance.useWhiteboardTool(toolKey, this.instanceId);
            }
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }

        /*执行白板的动作*/

    }, {
        key: 'executeWhiteboardAction',
        value: function executeWhiteboardAction(actionKey, event) {
            if (this.whiteBoardManagerInstance) {
                this.whiteBoardManagerInstance.executeWhiteboardAction(actionKey, this.instanceId);
            }
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }
    }, {
        key: 'changeColorOnClick',


        /*改变画笔颜色*/
        value: function changeColorOnClick(colorValue, event) {
            this._changeWhiteBoardConfigration('primaryColor', colorValue);
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }

        /*改变字体*/

    }, {
        key: 'changeFontFamilyOnClick',
        value: function changeFontFamilyOnClick(fontFamilyValue, fontFamilyKey, event) {
            this._changeWhiteBoardConfigration('fontFamily', fontFamilyValue);
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }

        /*改变字号*/

    }, {
        key: 'changeFontSizeOnClick',
        value: function changeFontSizeOnClick(fontSize, event) {
            this._changeWhiteBoardConfigration('fontSize', fontSize);
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            return false;
        }

        /*发送动作指令
         * XXX 此处直接获取了主白板实例且直接操作了主白板的方法*/

    }, {
        key: 'sendActionCommand',
        value: function sendActionCommand(action, cmd) {
            if (this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.whiteboardViewMap && this.whiteBoardManagerInstance.whiteboardViewMap.has(this.instanceId)) {
                var whiteboardView = this.whiteBoardManagerInstance.whiteboardViewMap.get(this.instanceId);
                if (whiteboardView && whiteboardView.sendActionCommand) {
                    whiteboardView.sendActionCommand(action, cmd);
                }
            }
        }
    }, {
        key: 'resize',


        /*重新计算大小*/
        value: function resize() {
            if (this.whiteboardToolbarTalkDrag && _Utils2.default.isFunction(this.whiteboardToolbarTalkDrag.resizeCallback)) {
                this.whiteboardToolbarTalkDrag.resizeCallback();
            }
        }

        /*获取节点的位置信息*/

    }, {
        key: '_getRect',
        value: function _getRect(element) {
            var rect = element.getBoundingClientRect();
            var clientTop = document.documentElement.clientTop;
            var clientLeft = document.documentElement.clientLeft;
            return { // 兼容ie多出的两个px
                top: rect.top - clientTop, // 距离顶部的位置
                bottom: rect.bottom - clientTop, // 距离顶部加上元素本身的高度就等于bottom的位置
                left: rect.left - clientLeft, // 距离左边的位置
                right: rect.right - clientLeft, // 距离右边的位置就是 距离左边的位置加上元素本身的宽度
                width: rect.width, //元素宽度
                height: rect.height //元素高度
            };
        }
    }, {
        key: '_createConnectElements',


        /*创建并连接节点*/
        value: function _createConnectElements() {
            var that = this;

            var _ref3 = this.props.loadWhiteboardTools || {},
                mouse = _ref3.mouse,
                laser = _ref3.laser,
                pen = _ref3.pen,
                text = _ref3.text,
                shape = _ref3.shape,
                eraser = _ref3.eraser,
                clear = _ref3.clear,
                undo = _ref3.undo,
                redo = _ref3.redo,
                setting = _ref3.setting;

            this.elements.whiteboardToolbarViewRootElement = _DomUtils2.default.createElement('article', this.instanceId + 'WhiteboardToolViewRoot', 'talkcloud-sdk-whiteboard ' + this.instanceId + ' whiteboard-toolbar-root', {
                zIndex: 6
            }); //白板标注工具根节点
            _DomUtils2.default.appendChild(this.parentNode, this.elements.whiteboardToolbarViewRootElement);
            this.elements.whiteboardToolbarViewRootElement.innerHTML = '\n            <ul class="whiteboard-tool-list-container" > \n                <li class="tool-option tool_mouse"  style="display:' + (!mouse ? 'none' : '') + '" >\n                    <em class="icon"></em>\n                </li>\n                <li class="tool-option tool_laser" style="display:' + (!laser || this.props.isMobile ? 'none' : '') + '" >\n                    <em class="icon"></em>\n                </li>\n                <li class="tool-option pen-list"  data-current-pen=\'tool_pencil\' style="display:' + (!pen ? 'none' : '') + '" > \n                    <em class="icon"></em>\n                    <div class="tool-pen-list-extend" >\n                         <ol class="tool-pen-container" > \n                             <em class="arrow" ></em>\n                            <li class="pen-option tool_pencil" >\n                                <em class="pen-icon "></em>\n                            </li>\n                            <li class="pen-option tool_highlighter" >\n                                <em class="pen-icon"></em>\n                            </li>\n                            <li class="pen-option tool_line" >\n                                 <em class="pen-icon"></em>\n                            </li>\n                            <li class="pen-option tool_arrow" >\n                                 <em class="pen-icon"></em>\n                            </li>\n                        </ol>\n                    </div>                \n                </li>\n                <li class="tool-option tool_text" style="display:' + (!text ? 'none' : '') + '" >\n                    <em class="icon"></em>\n                </li>\n                <li class="tool-option shape-list" data-current-shape=\'tool_rectangle_empty\'  style="display:' + (!shape ? 'none' : '') + '"  > \n                    <em class="icon"></em>\n                     <div class="tool-shape-list-extend" >\n                         <ol class="tool-shape-container" > \n                            <em class="arrow" ></em>\n                            <li class="shape-option tool_rectangle_empty" >\n                                <em class="shape-icon"></em>\n                            </li>\n                            <li class="shape-option tool_rectangle" >\n                                <em class="shape-icon"></em>\n                            </li>\n                            <li class="shape-option tool_ellipse_empty" >\n                                <em class="shape-icon"></em>\n                            </li>\n                            <li class="shape-option tool_ellipse" >\n                                <em class="shape-icon"></em>\n                            </li>\n                        </ol>\n                     </div>\n                </li>\n                <li class="tool-option tool_eraser"  style="display:' + (!eraser ? 'none' : '') + '" >\n                    <em class="icon"></em>\n                </li>\n                <li class="tool-option tool_undo" style="display:' + (!undo ? 'none' : '') + '"  >\n                    <em class="icon"></em>\n                </li>\n                <li class="tool-option tool_redo" style="display:' + (!redo ? 'none' : '') + '" >\n                    <em class="icon"></em>\n                </li>\n                <li class="tool-option tool_clear" style="display:' + (!clear ? 'none' : '') + '"  >\n                    <em class="icon"></em>\n                </li>\n                <li class="tool-option setting-list" style="display:' + (!setting ? 'none' : '') + '" > \n                    <em class="icon"></em>\n                    <div class="setting-list-extend" title=""  >\n                        <div class="setting-container" > \n                            <em class="arrow" ></em>\n                            <div class="colors-container" >                         \n                            </div>\n                            <div class="font-container">\n                                <span class="font-title title"></span>\n                                <div class="font-content-container" > \n                                    <div class="font-family-container"> \n                                    </div>\n                                    <div class="font-size-container" >\n                                    </div>\n                                </div>\n                            </div>\n                            <div class="pencil-width-container" >\n                                <span class="pencil-width-title title"  ></span>\n                                <div class="slider-container pencil-slider-container" id="' + this.instanceId + 'PencilWidthSlider" ></div>\n                            </div> \n                            <div class="eraser-width-container" >\n                                <span class="eraser-width-title title"></span>\n                                <div class="slider-container eraser-slider-container"  id="' + this.instanceId + 'EraserWidthSlider" ></div>\n                            </div> \n                        </div>\n                    </div>\n                  \n                </li>\n            </ul>\n        ';

            this.elements.tool_mouse = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_mouse')[0];
            this.elements.tool_laser = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_laser')[0];
            this.elements.tool_text = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_text')[0];
            this.elements.tool_eraser = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_eraser')[0];
            this.elements.tool_pencil = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_pencil')[0];
            this.elements.tool_highlighter = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_highlighter')[0];
            this.elements.tool_line = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_line')[0];
            this.elements.tool_arrow = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_arrow')[0];
            this.elements.tool_ellipse = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_ellipse')[0];
            this.elements.tool_ellipse_empty = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_ellipse_empty')[0];
            this.elements.tool_rectangle = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_rectangle')[0];
            this.elements.tool_rectangle_empty = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_rectangle_empty')[0];

            this.elements.action_undo = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_undo')[0];
            this.elements.action_redo = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_redo')[0];
            this.elements.action_clear = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool_clear')[0];

            this.elements.penList = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('pen-list')[0];
            this.elements.shapeList = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('shape-list')[0];
            this.elements.settingList = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('setting-list')[0];
            this.elements.penListExtend = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool-pen-list-extend')[0];
            this.elements.shapeListExtend = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('tool-shape-list-extend')[0];
            this.elements.settingListExtend = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('setting-list-extend')[0];

            this.elements.colorsContainer = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('colors-container')[0];
            this.elements.fontTitle = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('font-title')[0];
            this.elements.fontFamilyContainer = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('font-family-container')[0];
            this.elements.fontSizeContainer = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('font-size-container')[0];
            this.elements.pencilWidthTitle = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('pencil-width-title')[0];
            this.elements.eraserWidthTitle = document.getElementById(this.instanceId + 'WhiteboardToolViewRoot').getElementsByClassName('eraser-width-title')[0];

            if (window.TalkSlider) {
                this.pencilWidthSlider = new window.TalkSlider({
                    sliderContainer: { //slider整个组件容器的的设置
                        id: that.instanceId + 'PencilWidthSlider', //必传!!!!
                        direction: 'horizontal' //方向（水平(默认：horizontal||垂直：vertikal）
                    },
                    onChange: function onChange(value) {
                        var _that$props$pencilWid = that.props.pencilWidthScale,
                            pencilWidthScale = _that$props$pencilWid === undefined ? 1 : _that$props$pencilWid;

                        that.sendActionCommand('pencilWidthChange', {
                            pencilWidthPercentage: value,
                            pencilWidth: value * pencilWidthScale
                        });
                    },
                    onAfterChange: function onAfterChange(value) {
                        //拖拽音量条获取的音量值
                        value = value < 1 ? 1 : value;
                        var _that$props$pencilWid2 = that.props.pencilWidthScale,
                            pencilWidthScale = _that$props$pencilWid2 === undefined ? 1 : _that$props$pencilWid2;

                        that._changeWhiteBoardConfigration('pencilWidth', value * pencilWidthScale);
                        that._changeWhiteBoardConfigration('shapeWidth', value * pencilWidthScale);
                        that.sendActionCommand('pencilWidthChange', {
                            pencilWidthPercentage: value,
                            pencilWidth: value * pencilWidthScale
                        });
                    }
                });
                this.eraserWidthSlider = new window.TalkSlider({
                    sliderContainer: { //slider整个组件容器的的设置
                        id: that.instanceId + 'EraserWidthSlider', //必传!!!!
                        direction: 'horizontal' //方向（水平(默认：horizontal||垂直：vertikal）
                    },
                    onChange: function onChange(value) {
                        var _that$props$eraserWid = that.props.eraserWidthScale,
                            eraserWidthScale = _that$props$eraserWid === undefined ? 1 : _that$props$eraserWid;

                        that.sendActionCommand('eraserWidthChange', {
                            eraserWidth: value * eraserWidthScale,
                            eraserWidthPercentage: value / 100
                        });
                    },
                    onAfterChange: function onAfterChange(value) {
                        //拖拽音量条获取的音量值
                        value = value < 1 ? 1 : value;
                        var _that$props$eraserWid2 = that.props.eraserWidthScale,
                            eraserWidthScale = _that$props$eraserWid2 === undefined ? 1 : _that$props$eraserWid2;

                        that._changeWhiteBoardConfigration('eraserWidth', value * eraserWidthScale);
                        that.sendActionCommand('eraserWidthChange', {
                            eraserWidth: value * eraserWidthScale,
                            eraserWidthPercentage: value / 100
                        });
                    }
                });
                this._setPencilWidthToSlider();
                this._setEraserWidthToSlider();
            }

            this._addTalkDrag();
        }
    }, {
        key: '_addTalkDrag',


        /*添加拖拽*/
        value: function _addTalkDrag() {
            if (this.props.isDrag && window.TalkDrag && this.elements.whiteboardToolbarViewRootElement) {
                if (this.whiteboardToolbarTalkDrag && typeof this.whiteboardToolbarTalkDrag.destroy === 'function') {
                    this.whiteboardToolbarTalkDrag.destroy();
                    this.whiteboardToolbarTalkDrag = undefined;
                }

                var _ref4 = this.props.initDragPosition || {},
                    _ref4$left = _ref4.left,
                    left = _ref4$left === undefined ? 0 : _ref4$left,
                    _ref4$top = _ref4.top,
                    top = _ref4$top === undefined ? 0 : _ref4$top;

                this.whiteboardToolbarTalkDrag = new window.TalkDrag(this.elements.whiteboardToolbarViewRootElement, {
                    containerData: {
                        left: left,
                        top: top
                    }
                });
            }
        }

        /*更新语言*/

    }, {
        key: '_updateLanguage',
        value: function _updateLanguage() {
            var _props$languageType = this.props.languageType,
                languageType = _props$languageType === undefined ? 'ch' : _props$languageType;

            if (!(languageType === 'ch' || languageType === 'tw' || languageType === 'en' || languageType === 'ja')) {
                languageType = 'ch';
            }

            var _TalkLanguage$get$whi = _Language2.default.get(languageType).whiteboardToolbar,
                fontSizeText = _TalkLanguage$get$whi.fontSizeText,
                _TalkLanguage$get$whi2 = _TalkLanguage$get$whi.fontFamily,
                fontFamily = _TalkLanguage$get$whi2 === undefined ? {} : _TalkLanguage$get$whi2,
                pencilWidthTitle = _TalkLanguage$get$whi.pencilWidthTitle,
                eraserWidthTitle = _TalkLanguage$get$whi.eraserWidthTitle,
                _TalkLanguage$get$whi3 = _TalkLanguage$get$whi.toolTextList,
                toolTextList = _TalkLanguage$get$whi3 === undefined ? {} : _TalkLanguage$get$whi3;

            var title = fontFamily.title,
                _fontFamily$options = fontFamily.options,
                options = _fontFamily$options === undefined ? {} : _fontFamily$options;

            this.elements.fontTitle.innerHTML = title;
            this.elements.pencilWidthTitle.innerHTML = pencilWidthTitle;
            this.elements.eraserWidthTitle.innerHTML = eraserWidthTitle;
            _DomUtils2.default.removeAllChild(this.elements.fontFamilyContainer);
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.entries(options)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _ref5 = _step.value;

                    var _ref6 = _slicedToArray(_ref5, 2);

                    var key = _ref6[0];
                    var value = _ref6[1];

                    var button = _DomUtils2.default.createElement('button', undefined, "font-family-option " + key);
                    button.innerHTML = value;
                    button.setAttribute('data-font-family-key', key);
                    button.setAttribute('data-font-family-value', value);
                    button.onclick = this.changeFontFamilyOnClick.bind(this, value, key);
                    _DomUtils2.default.appendChild(this.elements.fontFamilyContainer, button);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            _DomUtils2.default.removeAllChild(this.elements.fontSizeContainer);
            var fontSizeArray = [12, 14, 18, 24, 26, 36, 48, 72];
            var num = 0;
            var spanElement = undefined;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = fontSizeArray[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var fontSize = _step2.value;

                    var button = _DomUtils2.default.createElement('button', undefined, "font-size-option font-size-" + fontSize);
                    button.innerHTML = fontSize + fontSizeText;
                    button.setAttribute('data-font-size', fontSize);
                    button.onclick = this.changeFontSizeOnClick.bind(this, fontSize);
                    if (num > 2) {
                        num = 0;
                    }
                    if (num === 0) {
                        spanElement = _DomUtils2.default.createElement('span', undefined, "font-size-list");
                        _DomUtils2.default.appendChild(this.elements.fontSizeContainer, spanElement);
                    }
                    if (spanElement) {
                        _DomUtils2.default.appendChild(spanElement, button);
                    }
                    ++num;
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = Object.entries(toolTextList)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _ref7 = _step3.value;

                    var _ref8 = _slicedToArray(_ref7, 2);

                    var _key = _ref8[0];
                    var _value = _ref8[1];

                    if (this.elements[_key]) {
                        this.elements[_key].title = _value;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            this.render();
        }
    }, {
        key: '_changeWhiteBoardConfigration',


        /*改变白板配置项*/
        value: function _changeWhiteBoardConfigration(key, value) {
            if (this.whiteBoardManagerInstance) {
                var updateConfigration = {};
                updateConfigration[key] = value;
                this.whiteBoardManagerInstance.changeWhiteBoardConfigration(updateConfigration, this.instanceId);
            }
        }

        /*关闭所有未排除的列表*/

    }, {
        key: '_closeList',
        value: function _closeList(excludeElementKey) {
            if (excludeElementKey !== 'penList') {
                _DomUtils2.default.removeClass(this.elements.penList, 'open');
            }
            if (excludeElementKey !== 'shapeList') {
                _DomUtils2.default.removeClass(this.elements.shapeList, 'open');
            }
            if (excludeElementKey !== 'settingList') {
                _DomUtils2.default.removeClass(this.elements.settingList, 'open');
            }
        }

        /*添加事件*/

    }, {
        key: '_addEvent',
        value: function _addEvent() {
            var listElementKeyArray = ['penList', 'shapeList', 'settingList'];
            var toolKeyArray = ['tool_mouse', 'tool_laser', 'tool_text', 'tool_eraser', 'tool_pencil', 'tool_highlighter', 'tool_line', 'tool_arrow', 'tool_ellipse', 'tool_ellipse_empty', 'tool_rectangle', 'tool_rectangle_empty'];
            var actionKeyArray = ['action_clear', 'action_redo', 'action_undo'];
            var colorsArray = ['#5AC9FA', '#FFCC00', '#ED3E3A', '#4740D2', '#007BFF', '#09C62B', '#000000', '#EDEDED'];

            _DomUtils2.default.removeAllChild(this.elements.colorsContainer);
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = colorsArray[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var colorKey = _step4.value;

                    var button = _DomUtils2.default.createElement('button', undefined, "color-option color-" + colorKey.replace(/#/g, ''), {
                        backgroundColor: colorKey
                    });
                    button.innerHTML = '<span style="border-color: ' + colorKey + '"></span>';
                    button.setAttribute('data-color', colorKey);
                    button.onclick = this.changeColorOnClick.bind(this, colorKey);
                    _DomUtils2.default.appendChild(this.elements.colorsContainer, button);
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            this.elements.whiteboardToolbarViewRootElement.onmouseleave = this.whiteboardToolbarViewRootMouseLeave.bind(this);
            this.elements.settingListExtend.onclick = function (event) {
                if (event) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                return false;
            };
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = listElementKeyArray[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var elementKey = _step5.value;

                    if (this.elements[elementKey]) {
                        this.elements[elementKey].onclick = this.listOpenOrCloseOnClick.bind(this, elementKey);
                        this.elements[elementKey].onmouseleave = this.listOpenOrCloseOnMouseLeave.bind(this, elementKey);
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = toolKeyArray[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var toolKey = _step6.value;

                    if (this.elements[toolKey]) {
                        this.elements[toolKey].onclick = this.useWhiteboardToolOnClick.bind(this, toolKey);
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = actionKeyArray[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var actionKey = _step7.value;

                    if (this.elements[actionKey]) {
                        this.elements[actionKey].onclick = this.executeWhiteboardAction.bind(this, actionKey);
                    }
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }
        }

        /*设置画笔宽度给slider*/

    }, {
        key: '_setPencilWidthToSlider',
        value: function _setPencilWidthToSlider() {
            if (this.pencilWidthSlider && this.pencilWidthSlider.setProgress) {
                var _props$pencilWidthSca = this.props.pencilWidthScale,
                    pencilWidthScale = _props$pencilWidthSca === undefined ? 1 : _props$pencilWidthSca;

                this.pencilWidthSlider.setProgress(this.state.viewState.other.pencilWidth / pencilWidthScale);
                this.sendActionCommand('pencilWidthChange', {
                    pencilWidth: this.state.viewState.other.pencilWidth,
                    pencilWidthPercentage: this.state.viewState.other.pencilWidth / pencilWidthScale / 100
                });
            }
        }

        /*设置橡皮宽度给slider*/

    }, {
        key: '_setEraserWidthToSlider',
        value: function _setEraserWidthToSlider() {
            if (this.eraserWidthSlider && this.eraserWidthSlider.setProgress) {
                var _props$eraserWidthSca = this.props.eraserWidthScale,
                    eraserWidthScale = _props$eraserWidthSca === undefined ? 1 : _props$eraserWidthSca;

                this.eraserWidthSlider.setProgress(this.state.viewState.other.eraserWidth / eraserWidthScale);
                this.sendActionCommand('eraserWidthChange', {
                    eraserWidth: this.state.viewState.other.eraserWidth,
                    eraserWidthPercentage: this.state.viewState.other.eraserWidth / eraserWidthScale / 100
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _state$viewState = this.state.viewState,
                _state$viewState$tool = _state$viewState.tool,
                tool = _state$viewState$tool === undefined ? {} : _state$viewState$tool,
                _state$viewState$acti = _state$viewState.action,
                action = _state$viewState$acti === undefined ? {} : _state$viewState$acti,
                _state$viewState$othe = _state$viewState.other,
                other = _state$viewState$othe === undefined ? {} : _state$viewState$othe;
            var primaryColor = other.primaryColor,
                fontFamily = other.fontFamily,
                fontSize = other.fontSize;

            var penList = {};
            var shapeList = {};
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = Object.entries(tool)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var _ref9 = _step8.value;

                    var _ref10 = _slicedToArray(_ref9, 2);

                    var key = _ref10[0];
                    var value = _ref10[1];

                    if (this.elements[key]) {
                        switch (key) {
                            case 'tool_pencil':
                            case 'tool_highlighter':
                            case 'tool_line':
                            case 'tool_arrow':
                                if (value.isUse) {
                                    penList[key] = value;
                                }
                                break;
                            case 'tool_rectangle':
                            case 'tool_rectangle_empty':
                            case 'tool_ellipse_empty':
                            case 'tool_ellipse':
                                if (value.isUse) {
                                    shapeList[key] = value;
                                }
                                break;
                        }
                        if (value.isUse) {
                            _DomUtils2.default.addClass(this.elements[key], 'active');
                        } else {
                            _DomUtils2.default.removeClass(this.elements[key], 'active');
                        }
                        if (value.disabled) {
                            _DomUtils2.default.addClass(this.elements[key], 'disabled');
                        } else {
                            _DomUtils2.default.removeClass(this.elements[key], 'disabled');
                        }
                        this.elements[key].disabled = value.disabled;
                    }
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            if (Object.keys(penList).length) {
                var _iteratorNormalCompletion9 = true;
                var _didIteratorError9 = false;
                var _iteratorError9 = undefined;

                try {
                    for (var _iterator9 = Object.keys(penList)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                        var _key2 = _step9.value;

                        this.elements.penList.setAttribute('data-current-pen', _key2);
                        _DomUtils2.default.addClass(this.elements.penList, 'active');
                    }
                } catch (err) {
                    _didIteratorError9 = true;
                    _iteratorError9 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion9 && _iterator9.return) {
                            _iterator9.return();
                        }
                    } finally {
                        if (_didIteratorError9) {
                            throw _iteratorError9;
                        }
                    }
                }
            } else {
                _DomUtils2.default.removeClass(this.elements.penList, 'active');
            }
            if (Object.keys(shapeList).length) {
                var _iteratorNormalCompletion10 = true;
                var _didIteratorError10 = false;
                var _iteratorError10 = undefined;

                try {
                    for (var _iterator10 = Object.keys(shapeList)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                        var _key3 = _step10.value;

                        this.elements.shapeList.setAttribute('data-current-shape', _key3);
                        _DomUtils2.default.addClass(this.elements.shapeList, 'active');
                    }
                } catch (err) {
                    _didIteratorError10 = true;
                    _iteratorError10 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion10 && _iterator10.return) {
                            _iterator10.return();
                        }
                    } finally {
                        if (_didIteratorError10) {
                            throw _iteratorError10;
                        }
                    }
                }
            } else {
                _DomUtils2.default.removeClass(this.elements.shapeList, 'active');
            }

            var _iteratorNormalCompletion11 = true;
            var _didIteratorError11 = false;
            var _iteratorError11 = undefined;

            try {
                for (var _iterator11 = Object.entries(action)[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                    var _ref11 = _step11.value;

                    var _ref12 = _slicedToArray(_ref11, 2);

                    var _key4 = _ref12[0];
                    var _value2 = _ref12[1];

                    if (this.elements[_key4]) {
                        if (_value2.disabled) {
                            _DomUtils2.default.addClass(this.elements[_key4], 'disabled');
                        } else {
                            _DomUtils2.default.removeClass(this.elements[_key4], 'disabled');
                        }
                        this.elements[_key4].disabled = _value2.disabled;
                    }
                }
            } catch (err) {
                _didIteratorError11 = true;
                _iteratorError11 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion11 && _iterator11.return) {
                        _iterator11.return();
                    }
                } finally {
                    if (_didIteratorError11) {
                        throw _iteratorError11;
                    }
                }
            }

            var colorOptions = this.elements.colorsContainer.getElementsByClassName('color-option');
            var _iteratorNormalCompletion12 = true;
            var _didIteratorError12 = false;
            var _iteratorError12 = undefined;

            try {
                for (var _iterator12 = colorOptions[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                    var colorOption = _step12.value;

                    if (colorOption.getAttribute('data-color') === primaryColor) {
                        _DomUtils2.default.addClass(colorOption, 'active');
                    } else {
                        _DomUtils2.default.removeClass(colorOption, 'active');
                    }
                }
            } catch (err) {
                _didIteratorError12 = true;
                _iteratorError12 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion12 && _iterator12.return) {
                        _iterator12.return();
                    }
                } finally {
                    if (_didIteratorError12) {
                        throw _iteratorError12;
                    }
                }
            }

            var fontFamilyOptions = this.elements.fontFamilyContainer.getElementsByClassName('font-family-option');
            var _iteratorNormalCompletion13 = true;
            var _didIteratorError13 = false;
            var _iteratorError13 = undefined;

            try {
                for (var _iterator13 = fontFamilyOptions[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                    var fontFamilyOption = _step13.value;

                    var selectFamilyKey = undefined;
                    var _arr = ['ch', 'tw', 'en'];
                    for (var _i = 0; _i < _arr.length; _i++) {
                        var languageType = _arr[_i];
                        var _TalkLanguage$get$whi4 = _Language2.default.get(languageType).whiteboardToolbar.fontFamily.options,
                            options = _TalkLanguage$get$whi4 === undefined ? {} : _TalkLanguage$get$whi4;

                        var _iteratorNormalCompletion15 = true;
                        var _didIteratorError15 = false;
                        var _iteratorError15 = undefined;

                        try {
                            for (var _iterator15 = Object.entries(options)[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                                var _ref13 = _step15.value;

                                var _ref14 = _slicedToArray(_ref13, 2);

                                var _key5 = _ref14[0];
                                var _value3 = _ref14[1];

                                if (_value3 === fontFamily) {
                                    selectFamilyKey = _key5;
                                    break;
                                }
                            }
                        } catch (err) {
                            _didIteratorError15 = true;
                            _iteratorError15 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion15 && _iterator15.return) {
                                    _iterator15.return();
                                }
                            } finally {
                                if (_didIteratorError15) {
                                    throw _iteratorError15;
                                }
                            }
                        }

                        if (selectFamilyKey) {
                            break;
                        }
                    }
                    if (fontFamilyOption.getAttribute('data-font-family-key') === selectFamilyKey) {
                        _DomUtils2.default.addClass(fontFamilyOption, 'active');
                    } else {
                        _DomUtils2.default.removeClass(fontFamilyOption, 'active');
                    }
                }
            } catch (err) {
                _didIteratorError13 = true;
                _iteratorError13 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion13 && _iterator13.return) {
                        _iterator13.return();
                    }
                } finally {
                    if (_didIteratorError13) {
                        throw _iteratorError13;
                    }
                }
            }

            var fontSizeOptions = this.elements.fontSizeContainer.getElementsByClassName('font-size-option');
            var _iteratorNormalCompletion14 = true;
            var _didIteratorError14 = false;
            var _iteratorError14 = undefined;

            try {
                for (var _iterator14 = fontSizeOptions[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                    var fontSizeOption = _step14.value;

                    if (fontSizeOption.getAttribute('data-font-size') === '' + fontSize) {
                        _DomUtils2.default.addClass(fontSizeOption, 'active');
                    } else {
                        _DomUtils2.default.removeClass(fontSizeOption, 'active');
                    }
                }
            } catch (err) {
                _didIteratorError14 = true;
                _iteratorError14 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion14 && _iterator14.return) {
                        _iterator14.return();
                    }
                } finally {
                    if (_didIteratorError14) {
                        throw _iteratorError14;
                    }
                }
            }
        }
    }]);

    return TalkWhiteboardToolbar;
}(_TalkcloudReact3.default);

window.TalkWhiteboardToolbar = TalkWhiteboardToolbar;
exports.TalkWhiteboardToolbar = TalkWhiteboardToolbar;
exports.default = TalkWhiteboardToolbar;
},{"../../utils/DomUtils":338,"../../utils/Language":340,"../../utils/Utils":343,"../components/TalkcloudReact":347}],355:[function(require,module,exports){
/* 白板视图（视图入口）
 * @module WhiteboardView
 * @description  sdk白板视图入口
 * @author 邱广生
 * @date 2018-04-18
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DomUtils = require('../../utils/DomUtils');

var _DomUtils2 = _interopRequireDefault(_DomUtils);

var _Configuration = require('../../utils/Configuration');

var _Configuration2 = _interopRequireDefault(_Configuration);

var _Constant = require('../../utils/Constant');

var _Constant2 = _interopRequireDefault(_Constant);

var _Global = require('../../utils/Global');

var _Global2 = _interopRequireDefault(_Global);

var _Utils = require('../../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _WhiteboardIntermediateLayer = require('../../intermediateLayer/WhiteboardIntermediateLayer');

var _WhiteboardIntermediateLayer2 = _interopRequireDefault(_WhiteboardIntermediateLayer);

var _DynamicPptIntermediateLayer = require('../../intermediateLayer/DynamicPptIntermediateLayer');

var _DynamicPptIntermediateLayer2 = _interopRequireDefault(_DynamicPptIntermediateLayer);

var _H5DocumentPptIntermediateLayer = require('../../intermediateLayer/H5DocumentPptIntermediateLayer');

var _H5DocumentPptIntermediateLayer2 = _interopRequireDefault(_H5DocumentPptIntermediateLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WhiteboardView = function () {
    function WhiteboardView() {
        var parentNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
        var instanceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
        var configration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Object.deepAssign({}, _Configuration2.default.defaultWhiteboard, _Configuration2.default.commonWhiteboard);
        var receiveActionCommand = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
        var whiteBoardManagerInstance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

        _classCallCheck(this, WhiteboardView);

        this.parentNode = parentNode; //节点
        this.instanceId = instanceId; //白板实例id
        this.configration = configration; //配置项
        this.receiveActionCommand = receiveActionCommand; //接受白板动作指令函数
        this.whiteBoardManagerInstance = whiteBoardManagerInstance; //白板管理器
        this.elements = {};
        this.fileid = 0;
        this.fullScreen = false; //是否全屏
        this.remark = false; //是否开启文档备注
        this.scale = this.configration.defaultWhiteboardScale; // 课件比例
        this.remarkText = ''; //当前页文档备注的文本内容
        this.fileTypeMark = 'generalDocument'; //generalDocument 、 dynamicPPT 、 h5Document
        this.cacheMaxPageNum = 1; //当前打开文档的缓存的最大页数，缺省为1
        this.cacheMinPageNum = 1; //当前打开文档的缓存的最小页数，缺省为1
        this.filePreLoadCurrPage = 1; //当前打开文档的缓存的当前页，缺省为1
        this.filePreLoadStep = 2; //普通文档预加载步长，缺省为2
        this.dynamicPptVolume = 100; //动态PPT音量大小
        this.maxGeneralFileForceReloadNumber = 10; //普通文件最大重新加载次数
        this.generalDocumentFileForceReloadNumber = 0; //普通文件重新加载次数
        this.whiteboardViewState = {
            tool: {}, //白板标注工具信息
            action: {}, //撤销、恢复、清空信息
            zoom: {}, //方法缩小信息
            page: {}, //翻页信息
            documentType: this.fileTypeMark, //打开的文件类别，generalDocument（普通文档）、dynamicPPT（动态PPT）、h5Document(H5课件)
            fileid: this.fileid, //打开的文档的文件id
            dynamicPptVolume: this.dynamicPptVolume, //动态PPT文档的音量
            fullScreen: this.fullScreen, //是否全屏
            remark: this.remark, //是否开启文档备注
            scale: this.scale, //课件比例
            remarkText: this.remarkText, //当前页文档备注的文本内容
            other: { //其它信息
                primaryColor: this.configration.primaryColor, //画笔颜色 ,默认 #000000
                secondaryColor: this.configration.secondaryColor, //填充颜色 ,默认 #ffffff
                backgroundColor: this.configration.backgroundColor, //背景颜色 ,默认 #ffffff
                pencilWidth: this.configration.pencilWidth, //画笔大小 , 默认5
                shapeWidth: this.configration.shapeWidth, //图形画笔大小 , 默认5
                eraserWidth: this.configration.eraserWidth, //橡皮大小 ， 默认15
                fontSize: this.configration.fontSize, //字体大小 ， 默认18
                fontFamily: this.configration.fontFamily //使用的字体 ，默认"微软雅黑"
            }
        };
        this._createElements();
        this._connectElements();
    }

    /*获取配置项*/


    _createClass(WhiteboardView, [{
        key: 'getConfigration',
        value: function getConfigration() {
            return this.configration;
        }

        /*保存白板数据且加载当前页的白板数据*/

    }, {
        key: 'saveFiledataAndLoadCurrpageWhiteboardData',
        value: function saveFiledataAndLoadCurrpageWhiteboardData() {
            var updateFiledata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            this._saveFiledataAndLoadCurrpageWhiteboardData(updateFiledata);
        }

        /*通知白板sdk执行动作指令*/

    }, {
        key: 'noticeWhiteboardActionCommand',
        value: function noticeWhiteboardActionCommand(action, cmd) {
            if (this.instanceId === 'default') {
                switch (action) {
                    case 'playOrPauseDynamicPpt':
                        if (this.fileTypeMark === 'dynamicPPT') {
                            _DynamicPptIntermediateLayer2.default.postMessage(this.instanceId, {
                                action: !cmd.pause ? "playDynamicPpt" : "stopDynamicPpt"
                            });
                        }
                        break;
                    case 'updateMute':
                        if (this.fileTypeMark === 'dynamicPPT') {
                            _DynamicPptIntermediateLayer2.default.postMessage(this.instanceId, {
                                action: 'ExtendedNotice',
                                extendedData: {
                                    type: "updateMute",
                                    data: { mute: cmd.isMute }
                                }
                            });
                        }
                        break;
                    case 'ExtendedNotice':
                        if (this.fileTypeMark === 'dynamicPPT') {
                            _DynamicPptIntermediateLayer2.default.postMessage(this.instanceId, {
                                action: 'ExtendedNotice',
                                extendedData: cmd.extendedData
                            });
                        }
                        break;
                    case 'closeDynamicPptAutoVideo':
                        if (this.fileTypeMark === 'dynamicPPT') {
                            _DynamicPptIntermediateLayer2.default.postMessage(this.instanceId, {
                                action: 'closeDynamicPptAutoVideo'
                            });
                        }
                        break;
                }
            }
        }

        /*重新加载文档*/

    }, {
        key: 'reloadCurrentDocument',
        value: function reloadCurrentDocument() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            if (this.instanceId === 'default' || this.configration.hasExtendDocument) {
                switch (this.fileTypeMark) {
                    case 'generalDocument':
                        var _WhiteboardIntermedia = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId),
                            cospdfpath = _WhiteboardIntermedia.cospdfpath,
                            swfpath = _WhiteboardIntermedia.swfpath,
                            isContentDocument = _WhiteboardIntermedia.isContentDocument,
                            fileid = _WhiteboardIntermedia.fileid,
                            filetype = _WhiteboardIntermedia.filetype,
                            currpage = _WhiteboardIntermedia.currpage;

                        if (cospdfpath) {
                            swfpath = cospdfpath;
                        }
                        if (swfpath && filetype !== 'whiteboard' && fileid != 0) {
                            var src = void 0;
                            if (Number(isContentDocument)) {
                                if (swfpath) {
                                    src = swfpath;
                                }
                            } else {
                                var index = swfpath.lastIndexOf(".");
                                var imgType = swfpath.substring(index);
                                var fileUrl = swfpath.replace(imgType, "-" + currpage + imgType);
                                src = _Global2.default.nowUseDocAddress + fileUrl;
                            }
                            _WhiteboardIntermediateLayer2.default.setWhiteboardWatermarkImage(this.instanceId, src, { resetDedaultWhiteboardMagnification: false });
                        }
                        break;
                    case 'dynamicPPT':
                        if (!options.isAgainreconnect) {
                            this.forceReloadTimestampFromPpt = new Date().getTime();
                        }
                        this._loadCurrentDynamicPpt({}, { isAgainreconnect: options.isAgainreconnect });
                        break;
                    case 'h5Document':
                        this._loadCurrentH5Document({
                            forceReloadTimestamp: new Date().getTime()
                        });
                        break;
                }
            }
        }

        /*改变文档备注的开启状态*/

    }, {
        key: 'changeDocumentRemarkState',
        value: function changeDocumentRemarkState(isRemark) {
            this.remark = isRemark && this.configration.canRemark;
            this._viewStateUpdate();
        }

        /*改变全屏状态*/

    }, {
        key: 'changeFullScreenState',
        value: function changeFullScreenState(isFullScreen) {
            this.fullScreen = isFullScreen;
            this._viewStateUpdate();
            this.resizeWhiteboardHandler();
        }

        /*销毁白板视图*/

    }, {
        key: 'destroyWhiteboardView',
        value: function destroyWhiteboardView() {
            if (_WhiteboardIntermediateLayer2.default.hasWhiteboardById(this.instanceId)) {
                _WhiteboardIntermediateLayer2.default.destroyWhiteboardInstance(this.instanceId);
            }
            if (_DynamicPptIntermediateLayer2.default.hasDynamicPptById(this.instanceId)) {
                _DynamicPptIntermediateLayer2.default.destroyDynamicPptInstance(this.instanceId);
            }
            if (_H5DocumentPptIntermediateLayer2.default.hasH5DocumentById(this.instanceId)) {
                _H5DocumentPptIntermediateLayer2.default.destroyH5DocumentInstance(this.instanceId);
            }
            _DomUtils2.default.removeChild(this.elements.whiteboardViewRootElement, this.parentNode);
            for (var key in this.elements) {
                this.elements[key] = undefined;
                delete this.elements[key];
            }
        }
    }, {
        key: 'changeWhiteBoardConfigration',


        /*改变白板相关配置*/
        value: function changeWhiteBoardConfigration(configration) {
            Object.deepAssign(this.configration, configration);
            var whiteboardConfigrationCopy = {},
                dynamicPptConfigrationCopy = {},
                h5DocumentConfigrationCopy = {};
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.entries(configration)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _ref = _step.value;

                    var _ref2 = _slicedToArray(_ref, 2);

                    var key = _ref2[0];
                    var value = _ref2[1];

                    if (key === 'canDraw') {
                        whiteboardConfigrationCopy['deawPermission'] = this.configration.canDraw && this.configration.synchronization && this.configration.isConnectedRoom;
                    } else if (key === 'myUserId') {
                        whiteboardConfigrationCopy['myselfId'] = value;
                    } else if (key === 'myName') {
                        whiteboardConfigrationCopy['nickname'] = value;
                    } else if (key === 'primaryColor' || key === 'secondaryColor' || key === 'primaryColor') {
                        whiteboardConfigrationCopy[key.replace(/Color/g, '')] = value;
                    } else if (key === 'synchronization') {
                        whiteboardConfigrationCopy['synchronizationWhiteboard'] = this.configration.synchronization && this.configration.isConnectedRoom;
                    } else {
                        whiteboardConfigrationCopy[key] = value;
                    }
                    if (key === 'synchronization') {
                        dynamicPptConfigrationCopy['synchronizationDynamicPpt'] = this.configration.synchronization && this.configration.isConnectedRoom;
                    } else if (key === 'actionClick') {
                        dynamicPptConfigrationCopy['dynamicPptActionClick'] = this.configration.actionClick && this.configration.isConnectedRoom;
                    } else {
                        dynamicPptConfigrationCopy[key] = value;
                    }
                    if (key === 'synchronization') {
                        h5DocumentConfigrationCopy['synchronizationH5Document'] = this.configration.synchronization && this.configration.isConnectedRoom;
                    } else if (key === 'actionClick') {
                        h5DocumentConfigrationCopy['h5DocumentActionClick'] = this.configration.actionClick && this.configration.isConnectedRoom;
                    } else {
                        h5DocumentConfigrationCopy[key] = value;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (configration['isConnectedRoom'] !== undefined) {
                whiteboardConfigrationCopy['synchronizationWhiteboard'] = this.configration.synchronization && this.configration.isConnectedRoom;
                dynamicPptConfigrationCopy['synchronizationDynamicPpt'] = this.configration.synchronization && this.configration.isConnectedRoom;
                h5DocumentConfigrationCopy['synchronizationH5Document'] = this.configration.synchronization && this.configration.isConnectedRoom;
                dynamicPptConfigrationCopy['dynamicPptActionClick'] = this.configration.actionClick && this.configration.isConnectedRoom;
                h5DocumentConfigrationCopy['h5DocumentActionClick'] = this.configration.actionClick && this.configration.isConnectedRoom;
                whiteboardConfigrationCopy['deawPermission'] = this.configration.canDraw && this.configration.synchronization && this.configration.isConnectedRoom;
            }
            if (configration['synchronization'] !== undefined) {
                whiteboardConfigrationCopy['deawPermission'] = this.configration.canDraw && this.configration.synchronization && this.configration.isConnectedRoom;
            }

            _WhiteboardIntermediateLayer2.default.updateWhiteboardProperty(this.instanceId, whiteboardConfigrationCopy);
            if (this.configration.loadDynamicPptView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                _DynamicPptIntermediateLayer2.default.updateDynamicPptProperty(this.instanceId, dynamicPptConfigrationCopy);
            }
            if (this.configration.loadH5DocumentView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                _H5DocumentPptIntermediateLayer2.default.updateH5DocumentProperty(this.instanceId, h5DocumentConfigrationCopy);
            }
            if (configration.loadDynamicPptView !== undefined && this.elements.dynamicPptViewElement) {
                if (configration.loadDynamicPptView && !document.getElementById(this.elements.dynamicPptViewElement.getAttribute('id'))) {
                    _DomUtils2.default.appendChild(this.elements.documentViewElement, this.elements.dynamicPptViewElement);
                    this._productionDynamicPpt(); //生产动态PPT
                } else if (!configration.loadDynamicPptView && document.getElementById(this.elements.dynamicPptViewElement.getAttribute('id'))) {
                    if (_DynamicPptIntermediateLayer2.default.hasDynamicPptById(this.instanceId)) {
                        _DynamicPptIntermediateLayer2.default.destroyDynamicPptInstance(this.instanceId);
                    }
                    _DomUtils2.default.removeChild(this.elements.dynamicPptViewElement, this.elements.documentViewElement);
                }
            }
            if (configration.loadH5DocumentView !== undefined && this.elements.h5DocumentViewElement) {
                if (configration.loadH5DocumentView && !document.getElementById(this.elements.h5DocumentViewElement.getAttribute('id'))) {
                    _DomUtils2.default.appendChild(this.elements.documentViewElement, this.elements.h5DocumentViewElement);
                    this._productionH5Document(); //生产H5课件
                } else if (!configration.loadH5DocumentView && document.getElementById(this.elements.h5DocumentViewElement.getAttribute('id'))) {
                    if (_H5DocumentPptIntermediateLayer2.default.hasH5DocumentById(this.instanceId)) {
                        _H5DocumentPptIntermediateLayer2.default.destroyH5DocumentInstance(this.instanceId);
                    }
                    _DomUtils2.default.removeChild(this.elements.h5DocumentViewElement, this.elements.documentViewElement);
                }
            }
            if (configration.rootBackgroundColor !== undefined) {
                _DomUtils2.default.updateStyle(this.elements.whiteboardViewRootElement, {
                    backgroundColor: configration.rootBackgroundColor
                });
            }
            if (configration.isMobile !== undefined) {
                if (configration.isMobile) {
                    _DomUtils2.default.addClass(this.elements.whiteboardViewRootElement, 'app-mobile');
                } else {
                    _DomUtils2.default.removeClass(this.elements.whiteboardViewRootElement, 'app-mobile');
                }
            }
            if (configration.canPage !== undefined || configration.addPage !== undefined || configration.isConnectedRoom !== undefined) {
                this._viewStateUpdate();
            }
        }
    }, {
        key: 'receiveEventRoomPubmsg',


        /*处理room-pubmsg*/
        value: function receiveEventRoomPubmsg(recvEventData) {
            if (recvEventData && typeof recvEventData === 'string') {
                recvEventData = JSON.parse(recvEventData);
            }
            if ((typeof recvEventData === 'undefined' ? 'undefined' : _typeof(recvEventData)) === 'object' && recvEventData.message && typeof recvEventData.message === 'string') {
                recvEventData.message = JSON.parse(recvEventData.message);
            }
            if (_typeof(recvEventData.message) === 'object' && recvEventData.message.data && typeof recvEventData.message.data === 'string') {
                recvEventData.message.data = JSON.parse(recvEventData.message.data);
            }
            var pubmsgData = recvEventData.message;
            switch (pubmsgData.name) {
                case "ShowPage":
                case "ExtendShowPage":
                    pubmsgData.source = 'room-pubmsg';
                    this._handleShowPageSignalling(pubmsgData, recvEventData.local);
                    break;
                case "whiteboardMarkTool":
                case "ExtendWhiteboardMarkTool":
                    if (pubmsgData.data && pubmsgData.data.selectMouse) {
                        _WhiteboardIntermediateLayer2.default.activeWhiteboardTool('tool_mouse', this.instanceId);
                    } else {
                        _WhiteboardIntermediateLayer2.default.useHistoryPenTool(this.instanceId);
                    }
                    break;
                case "NewPptTriggerActionClick":
                case "ExtendNewPptTriggerActionClick":
                    if (this.configration.loadDynamicPptView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                        _DynamicPptIntermediateLayer2.default.postMessageDynamicPptTriggerAction(this.instanceId, pubmsgData.data);
                    }
                    break;
                case "H5DocumentAction":
                case "ExtendH5DocumentAction":
                    if (this.configration.loadH5DocumentView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                        _H5DocumentPptIntermediateLayer2.default.postMessageH5DocumentTriggerAction(this.instanceId, pubmsgData.data);
                    }
                    break;
                case "PptVolumeControl":
                case "ExtendPptVolumeControl":
                    this._updatedynamicPptVolume(pubmsgData.data.volume * 100);
                    break;
            }
        }
    }, {
        key: 'receiveEventRoomDelmsg',


        /*处理room-delmsg*/
        value: function receiveEventRoomDelmsg(recvEventData) {}
    }, {
        key: 'receiveEventRoomMsglist',


        /*处理room-msglist*/
        value: function receiveEventRoomMsglist(name, signallingData) {
            switch (name) {
                case 'ShowPage':
                case "ExtendShowPage":
                    signallingData.source = 'room-msglist';
                    this._handleShowPageSignalling(signallingData);
                    break;
                case 'whiteboardMarkTool':
                case 'ExtendWhiteboardMarkTool':
                    if (signallingData.data && signallingData.data.selectMouse) {
                        _WhiteboardIntermediateLayer2.default.activeWhiteboardTool('tool_mouse', this.instanceId);
                    } else {
                        _WhiteboardIntermediateLayer2.default.useHistoryPenTool(this.instanceId);
                    }
                    break;
                case "NewPptTriggerActionClick":
                case "ExtendNewPptTriggerActionClick":
                    if (this.configration.loadDynamicPptView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                        _DynamicPptIntermediateLayer2.default.postMessageDynamicPptTriggerAction(this.instanceId, signallingData.data);
                    }
                    break;
                case "H5DocumentAction":
                case "ExtendH5DocumentAction":
                    if (this.configration.loadH5DocumentView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                        _H5DocumentPptIntermediateLayer2.default.postMessageH5DocumentTriggerAction(this.instanceId, signallingData.data);
                    }
                    break;
                case "PptVolumeControl":
                case "ExtendPptVolumeControl":
                    this._updatedynamicPptVolume(signallingData.data.volume * 100);
                    break;
            }
        }
    }, {
        key: 'reveiveEventRoomReceiveActionCommand',


        /*处理room-receiveActionCommand*/
        value: function reveiveEventRoomReceiveActionCommand(action, cmd) {
            switch (action) {
                case 'fullScreenChangeCallback':
                    //接收全屏的状态通知
                    this.changeFullScreenState(cmd.isFullScreen);
                    break;
                case 'changeDynamicPptSize':
                    //改变动态ppt的大小
                    if (this.configration.isMobile && this.fileTypeMark === 'dynamicPPT') {
                        _DynamicPptIntermediateLayer2.default.changeDynamicPptSize(this.instanceId);
                    }
                    break;
                case 'closeDynamicPptWebPlay':
                    //关闭动态PPT界面里的视频播放
                    if (this.fileTypeMark === 'dynamicPPT') {
                        var postMessageData = {
                            action: "closeDynamicPptAutoVideo"
                        };
                        _DynamicPptIntermediateLayer2.default.postMessage(this.instanceId, postMessageData);
                    }
                    break;
            }
        }

        /*发送动作指定
        * @params action：执行的动作
              action目前有：
                closeAllSelectBox：选择框的关闭通知消息
                viewStateUpdate：视图状态更新
        * @params cmd:动作描述
        * */

    }, {
        key: 'sendActionCommand',
        value: function sendActionCommand(action, cmd) {
            if (this.receiveActionCommand && typeof this.receiveActionCommand === 'function') {
                if ((typeof cmd === 'undefined' ? 'undefined' : _typeof(cmd)) === 'object' && !Array.isArray(cmd)) {
                    cmd = Object.deepAssign({}, cmd);
                }
                this.receiveActionCommand(action, cmd);
            }
        }

        /*发送PubMsg信令 */

    }, {
        key: 'pubMsg',
        value: function pubMsg(params) {
            if (this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.pubMsg) {
                this.whiteBoardManagerInstance.pubMsg(params);
            }
        }

        /*发送DelMsg信令功能函数,删除之前发送的信令
         * @allParams params:delMsg需要的所有参数承接对象
             * @params name:信令名字 , String
             * @params id:信令ID , String
             * @params toID:发送给谁(默认发给所有人) , String
                 __all（所有人，包括自己） ,
                 __allExceptSender （除了自己以外的所有人）,
                 userid（指定id发给某人） ,
                 __none （谁也不发，只有服务器会收到）,
                 __allSuperUsers（只发给助教和老师）,
                 __group:groupA:groupB(发送给指定组，组id不能包含冒号),
                 __groupExceptSender:groupA（发给指定组，不包括自己）
             * @params data:信令携带的数据 , Json/JsonString
         *备注：指定用户会收到事件room-delmsg
         * */

    }, {
        key: 'delMsg',
        value: function delMsg(params) {
            if (this.whiteBoardManagerInstance && this.whiteBoardManagerInstance.delMsg) {
                this.whiteBoardManagerInstance.delMsg(params);
            }
        }

        /*获取白板视图状态*/

    }, {
        key: 'getWhiteboardViewState',
        value: function getWhiteboardViewState() {
            return this.whiteboardViewState;
        }
    }, {
        key: 'forceViewStateUpdate',


        /*强制更新视图状态*/
        value: function forceViewStateUpdate() {
            this._viewStateUpdate();
        }

        /*使用标注工具
         * @params toolKey:工具的key
         * */

    }, {
        key: 'useWhiteboardTool',
        value: function useWhiteboardTool(toolKey) {
            if (this.whiteboardViewState.tool[toolKey] && this.whiteboardViewState.tool[toolKey].disabled) {
                L.Logger.warning('whiteboard tool(' + toolKey + ') state is disabled , cannot use ' + toolKey + ' tool!');
                return;
            }
            if ((this.instanceId === 'default' || this.configration.hasExtendDocument) && this.configration.synchronization && this.configration.isConnectedRoom && toolKey !== _WhiteboardIntermediateLayer2.default.getActiveTool(this.instanceId) && (toolKey !== 'tool_mouse' && _WhiteboardIntermediateLayer2.default.getActiveTool(this.instanceId) === 'tool_mouse' || toolKey === 'tool_mouse' && _WhiteboardIntermediateLayer2.default.getActiveTool(this.instanceId) !== 'tool_mouse')) {
                var pubmsgData = {
                    name: this.instanceId === 'default' ? 'whiteboardMarkTool' : 'ExtendWhiteboardMarkTool',
                    id: this.instanceId === 'default' ? 'whiteboardMarkTool' : 'ExtendWhiteboardMarkTool_' + this.instanceId,
                    toID: '__allExceptSender',
                    data: {
                        sourceInstanceId: this.instanceId,
                        selectMouse: toolKey === 'tool_mouse'
                    },
                    save: true
                };
                this.pubMsg(pubmsgData);
            }
            _WhiteboardIntermediateLayer2.default.activeWhiteboardTool(toolKey, this.instanceId);
        }

        /*执行撤销操作
         * @params actionKey:动作的key
        * */

    }, {
        key: 'executeWhiteboardAction',
        value: function executeWhiteboardAction(actionKey) {
            if (this.whiteboardViewState.action[actionKey] && this.whiteboardViewState.action[actionKey].disabled) {
                L.Logger.warning('whiteboard action(' + actionKey + ') state is disabled , cannot execute ' + actionKey + ' action!');
                return;
            }
            _WhiteboardIntermediateLayer2.default.activeWhiteboardTool(actionKey, this.instanceId);
        }

        /*执行缩放白板
         * @params zoomKey:白板缩放的key ， key值描述如下：
         * */

    }, {
        key: 'executeZoomWhiteaord',
        value: function executeZoomWhiteaord(zoomKey) {
            if (this.whiteboardViewState.zoom[zoomKey] && this.whiteboardViewState.zoom[zoomKey].disabled) {
                L.Logger.warning('whiteboard zoom(' + zoomKey + ') state is disabled , cannot execute ' + zoomKey + ' zoom!');
                return;
            }
            _WhiteboardIntermediateLayer2.default.activeWhiteboardTool(zoomKey, this.instanceId);
        }

        /*加页*/

    }, {
        key: 'addPage',
        value: function addPage() {
            var _WhiteboardIntermedia2 = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId),
                fileid = _WhiteboardIntermedia2.fileid,
                pagenum = _WhiteboardIntermedia2.pagenum;

            if (this.fileTypeMark !== 'generalDocument' && Number(fileid) === 0) {
                L.Logger.warning('whiteboard addPage method can only be used in pure whiteboard.');
                return;
            }
            pagenum++;
            _WhiteboardIntermediateLayer2.default.updateWhiteboardFiledata(this.instanceId, {
                pagenum: pagenum
            });
            if (this.configration.synchronization && this.configration.isConnectedRoom) {
                var pubmsgData = {
                    name: this.instanceId === 'default' ? 'WBPageCount' : 'ExtendWBPageCount',
                    id: this.instanceId === 'default' ? 'WBPageCount' : 'WBPageCount_' + this.instanceId,
                    toID: '__allExceptSender',
                    data: {
                        sourceInstanceId: this.instanceId,
                        totalPage: pagenum,
                        fileid: fileid
                    },
                    save: true
                };
                this.pubMsg(pubmsgData);
            }
            this.nextPage();
        }
    }, {
        key: 'nextPage',


        /*下一页*/
        value: function nextPage() {
            var _this = this;

            if (this.whiteboardViewState.page.nextPage && this.whiteboardViewState.page.nextPage.disabled) {
                L.Logger.warning('whiteboard nexPage state is disabled , cannot execute nextPage method!');
                return;
            }
            switch (this.fileTypeMark) {
                case 'generalDocument':
                    var _WhiteboardIntermedia3 = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId),
                        currpage = _WhiteboardIntermedia3.currpage,
                        pagenum = _WhiteboardIntermedia3.pagenum;

                    currpage++;
                    if (currpage > pagenum) {
                        currpage = pagenum;
                    }
                    var updatePubmsgData = {
                        data: {
                            filedata: {
                                currpage: currpage
                            }
                        }
                    };
                    this._sendSignalling_ShowPage(updatePubmsgData, function (pubmsgData) {
                        _this.receiveEventRoomPubmsg({
                            type: 'room-pubmsg',
                            message: pubmsgData,
                            local: true
                        });
                    });
                    break;
                case 'h5Document':
                    _H5DocumentPptIntermediateLayer2.default.nextPage(this.instanceId);
                    break;
                case 'dynamicPPT':
                    _DynamicPptIntermediateLayer2.default.nextSlide(this.instanceId);
                    break;
            }
        }

        /*上一页*/

    }, {
        key: 'prevPage',
        value: function prevPage() {
            var _this2 = this;

            if (this.whiteboardViewState.page.prevPage && this.whiteboardViewState.page.prevPage.disabled) {
                L.Logger.warning('whiteboard prevPage state is disabled , cannot execute prevPage method!');
                return;
            }
            switch (this.fileTypeMark) {
                case 'generalDocument':
                    var _WhiteboardIntermedia4 = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId),
                        currpage = _WhiteboardIntermedia4.currpage;

                    currpage--;
                    if (currpage < 1) {
                        currpage = 1;
                    }
                    var updatePubmsgData = {
                        data: {
                            filedata: {
                                currpage: currpage
                            }
                        }
                    };
                    this._sendSignalling_ShowPage(updatePubmsgData, function (pubmsgData) {
                        _this2.receiveEventRoomPubmsg({
                            type: 'room-pubmsg',
                            message: pubmsgData,
                            local: true
                        });
                    });
                    break;
                case 'h5Document':
                    _H5DocumentPptIntermediateLayer2.default.prevPage(this.instanceId);
                    break;
                case 'dynamicPPT':
                    _DynamicPptIntermediateLayer2.default.prevSlide(this.instanceId);
                    break;
            }
        }

        /*跳转到某一页*/

    }, {
        key: 'skipPage',
        value: function skipPage(page) {
            var _this3 = this;

            switch (this.fileTypeMark) {
                case 'generalDocument':
                    var _WhiteboardIntermedia5 = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId),
                        pagenum = _WhiteboardIntermedia5.pagenum;

                    if (page > pagenum) {
                        page = pagenum;
                    }
                    if (page < 1) {
                        page = 1;
                    }
                    var updatePubmsgData = {
                        data: {
                            filedata: {
                                currpage: page
                            }
                        }
                    };
                    this._sendSignalling_ShowPage(updatePubmsgData, function (pubmsgData) {
                        _this3.receiveEventRoomPubmsg({
                            type: 'room-pubmsg',
                            message: pubmsgData,
                            local: true
                        });
                    });
                    break;
                case 'h5Document':
                    _H5DocumentPptIntermediateLayer2.default.skipPage(this.instanceId, page);
                    break;
                case 'dynamicPPT':
                    var slide = page,
                        step = 0,
                        initiative = true;
                    _DynamicPptIntermediateLayer2.default.jumpToAnimation(this.instanceId, slide, step, initiative);
                    break;
            }
        }

        /*下一步，用于动态ppt*/

    }, {
        key: 'nextStep',
        value: function nextStep() {
            if (this.fileTypeMark !== 'dynamicPPT') {
                L.Logger.warning('whiteboard nextStep method can only be used in dynamic PPT files.');
                return;
            }
            if (this.whiteboardViewState.page.nextStep && this.whiteboardViewState.page.nextStep.disabled) {
                L.Logger.warning('whiteboard nextStep state is disabled , cannot execute nextStep method!');
                return;
            }
            switch (this.fileTypeMark) {
                case 'dynamicPPT':
                    _DynamicPptIntermediateLayer2.default.nextStep(this.instanceId);
                    break;
            }
        }

        /*上一步，用于动态ppt*/

    }, {
        key: 'prevStep',
        value: function prevStep() {
            if (this.fileTypeMark !== 'dynamicPPT') {
                L.Logger.warning('whiteboard prevStep method can only be used in dynamic PPT files.');
                return;
            }
            if (this.whiteboardViewState.page.prevStep && this.whiteboardViewState.page.prevStep.disabled) {
                L.Logger.warning('whiteboard prevStep state is disabled , cannot execute prevStep method!');
                return;
            }
            switch (this.fileTypeMark) {
                case 'dynamicPPT':
                    _DynamicPptIntermediateLayer2.default.prevStep(this.instanceId);
                    break;
            }
        }

        /*白板大小改变的回调函数*/

    }, {
        key: 'resizeWhiteboardSizeCallback',
        value: function resizeWhiteboardSizeCallback(fatherContainerConfiguration) {
            if (fatherContainerConfiguration.loadScrollBar) {
                _DomUtils2.default.addClass(this.elements.totalDocumentViewElement, 'custom-scroll-bar');
            } else {
                _DomUtils2.default.removeClass(this.elements.totalDocumentViewElement, 'custom-scroll-bar');
            }
            _DomUtils2.default.updateStyle(this.elements.documentViewElement, {
                width: fatherContainerConfiguration.style.width,
                height: fatherContainerConfiguration.style.height
            });
            _DomUtils2.default.updateStyle(this.elements.totalDocumentViewElement, {
                width: fatherContainerConfiguration.style.width,
                height: fatherContainerConfiguration.style.height,
                top: '50%',
                left: '50%'
            });
            _DomUtils2.default.updateStyle(this.elements.totalDocumentViewElement, {
                marginLeft: '-' + this.elements.totalDocumentViewElement.offsetWidth / 2 + 'px',
                marginTop: '-' + this.elements.totalDocumentViewElement.offsetHeight / 2 + 'px'
            });
        }
    }, {
        key: 'noticeUpdateToolDescCallback',


        /*工具状态更新的回调函数*/
        value: function noticeUpdateToolDescCallback() {
            this._viewStateUpdate();
        }
    }, {
        key: 'noticeUpdateWhiteboardFiledataCallback',
        value: function noticeUpdateWhiteboardFiledataCallback() {
            this._viewStateUpdate();
        }
    }, {
        key: 'receiveActionCommandCallback',


        /*接收动作指令回调函数*/
        value: function receiveActionCommandCallback(action, cmd) {
            if (cmd.id !== this.instanceId) {
                return;
            }
            switch (action) {
                case 'closeAllSelectBox':
                    //关闭所有的选择框
                    this.sendActionCommand('closeAllSelectBox'); //选择框的关闭通知消息
                    break;
                case 'changeWhiteboardActiveTool':
                    //改变白板使用的标注工具
                    this._updateViewShowAndHide();
                    break;
                case 'updateWhiteboardWatermarkImageScale':
                    //更新白板的scale
                    _WhiteboardIntermediateLayer2.default.updateWhiteboardWatermarkImageScale(this.instanceId, cmd.scale);
                    break;
                case 'dynamicPptLoadEnd': //动态ppt加载结束
                case 'h5DocumentLoadEnd':
                    //h5文档加载结束
                    this.scale = cmd.scale;
                    this._viewStateUpdate();
                    _DomUtils2.default.removeClass(this.elements.disableClickViewElement, 'loading');
                    break;
                case 'sendSignalling_ShowPage':
                    this._sendSignalling_ShowPage(cmd.updatePubmsgData);
                    break;
                case 'saveFiledataAndLoadCurrpageWhiteboardData':
                    //保存白板数据且加载当前页的白板数据
                    this._saveFiledataAndLoadCurrpageWhiteboardData(cmd.updateFileData);
                    break;
                case 'dynamicPptSlideChange':
                    //动态ppt的slide改变
                    this._saveFiledataAndLoadCurrpageWhiteboardData(cmd.updateFileData);
                    break;
                case 'dynamicPptStepChange':
                    //动态ppt的step改变
                    _WhiteboardIntermediateLayer2.default.updateWhiteboardFiledata(this.instanceId, cmd.updateFileData);
                    break;
                case 'publishDymanicPptNetworkMedia':
                    if (this.instanceId === 'default') {
                        //TODO 只有主白板才能播放视频
                        var postMessageData = {
                            action: "closeDynamicPptAutoVideo"
                        };
                        _DynamicPptIntermediateLayer2.default.postMessage(this.instanceId, postMessageData);
                        var filedata = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId);
                        var swfpath = filedata.swfpath,
                            isContentDocument = filedata.isContentDocument;

                        var src = void 0;
                        if (Number(isContentDocument)) {
                            if (swfpath) {
                                src = swfpath.replace(/\/newppt.html/g, '');
                            }
                        } else {
                            src = _Global2.default.nowUseDocAddress + swfpath;
                        }
                        cmd.url = src + '/' + cmd.url;
                        if (this.whiteBoardManagerInstance) {
                            if (this.configration.clientMediaShare && this.whiteBoardManagerInstance.getRoomDelegate() && this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface && this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface() && this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface().startShareMediaFile) {
                                this.whiteBoardManagerInstance.getRoomDelegate().getNativeInterface().startShareMediaFile(cmd.url, undefined, undefined, {
                                    IgnoreElementId: true,
                                    toID: this.configration.mediaShareToID,
                                    attrs: cmd.attributes
                                });
                            } else {
                                this.whiteBoardManagerInstance.startShareMedia(cmd.url, cmd.video, this.configration.mediaShareToID, cmd.attributes);
                            }
                        }
                    }
                    break;
                case 'publishDymanicPptNetworkAudio':
                    if (this.configration.isNativePlayAudio) {
                        //ios 播放
                        var _filedata = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId);
                        var _swfpath = _filedata.swfpath,
                            _isContentDocument = _filedata.isContentDocument;

                        var _src = void 0;
                        if (Number(_isContentDocument)) {
                            if (_swfpath) {
                                _src = _swfpath.replace(/\/newppt.html/g, '');
                            }
                        } else {
                            _src = _Global2.default.nowUseDocAddress + _swfpath;
                        }
                        _src = _src.replace(/^https/, "http");
                        _src = _src.replace(/443/g, "80");
                        cmd.url = _src + '/' + cmd.url;
                        if (this.whiteBoardManagerInstance) {
                            if (this.whiteBoardManagerInstance.getRoomDelegate()) {
                                this.whiteBoardManagerInstance.getRoomDelegate().isPlayAudio(cmd.url, cmd.isPlay, cmd.attributes);
                            }
                        }
                    }
                    break;
                case 'updateWhiteboardFiledata':
                    _WhiteboardIntermediateLayer2.default.updateWhiteboardFiledata(this.instanceId, cmd.updateFileData);
                    break;
                case 'getWhiteboardFiledata':
                    if (cmd && cmd.callback && typeof cmd.callback === 'function') {
                        cmd.callback(_WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId));
                    }
                    break;
                case 'reloadCurrentDocument':
                    this.reloadCurrentDocument({ isAgainreconnect: cmd.isAgainreconnect });
                    break;
                case 'reloadDynamicPptIframeSrc':
                    if (cmd.iframeSrc && this.fileTypeMark === 'dynamicPPT' && new RegExp(_WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId).swfpath + '/newppt.html', 'g').test(cmd.iframeSrc)) {
                        var oldForceUseDocAddress = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || this.configration.docAddress;
                        _Global2.default.docAddressKey = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey, true);
                        if (this.whiteBoardManagerInstance && _Utils2.default.isFunction(this.whiteBoardManagerInstance.setLocalStorageItem)) {
                            this.whiteBoardManagerInstance.setLocalStorageItem('tkDocAddressKey', _Global2.default.docAddressKey);
                            this.sendActionCommand('docAddressUpdate', {
                                docAddressList: [].concat(_toConsumableArray(_Global2.default.docAddressList)),
                                docAddressIndex: _Global2.default.docAddressKey,
                                oldDocAddress: oldForceUseDocAddress,
                                nowDocAddress: _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || this.configration.docAddress
                            }); //文档加载地址更新
                        }
                        _Global2.default.nowUseDocAddress = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || this.configration.docAddress;
                        L.Logger.info('[reload dynamic ppt]change doc address , old address is ' + oldForceUseDocAddress + ' , now address is ' + _Global2.default.nowUseDocAddress);
                        if (cmd.forceReloadNumber !== undefined) {
                            this.forceReloadNumberFromPpt = cmd.forceReloadNumber;
                        }
                        this._loadCurrentDynamicPpt();
                        L.Logger.info('[' + cmd.source + ']load dynamic ppt failure , reload file , old url is ' + cmd.iframeSrc + ' , now url is ' + _DynamicPptIntermediateLayer2.default.getIframeSrc(this.instanceId) + ' , reload number is ' + cmd.forceReloadNumber);
                    }
                    break;
                case 'reloadH5DocumentIframeSrc':
                    if (cmd.iframeSrc && this.fileTypeMark === 'h5Document' && new RegExp(_WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId).swfpath, 'g').test(cmd.iframeSrc)) {
                        var _oldForceUseDocAddress = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || this.configration.docAddress;
                        _Global2.default.docAddressKey = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey, true);
                        if (this.whiteBoardManagerInstance && _Utils2.default.isFunction(this.whiteBoardManagerInstance.setLocalStorageItem)) {
                            this.whiteBoardManagerInstance.setLocalStorageItem('tkDocAddressKey', _Global2.default.docAddressKey);
                            this.sendActionCommand('docAddressUpdate', {
                                docAddressList: [].concat(_toConsumableArray(_Global2.default.docAddressList)),
                                docAddressIndex: _Global2.default.docAddressKey,
                                oldDocAddress: _oldForceUseDocAddress,
                                nowDocAddress: _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || this.configration.docAddress
                            }); //文档加载地址更新
                        }
                        _Global2.default.nowUseDocAddress = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || this.configration.docAddress;
                        L.Logger.info('[reload h5 document]change doc address , old address is ' + _oldForceUseDocAddress + ' , now address is ' + _Global2.default.nowUseDocAddress);

                        var parameters = {};
                        if (cmd.forceReloadNumber) {
                            parameters.forceReloadNumber = cmd.forceReloadNumber;
                        }
                        this._loadCurrentH5Document(parameters, {
                            forceReloadNumber: cmd.forceReloadNumber
                        });
                        L.Logger.info('[' + cmd.source + ']load h5 document failure , reload file , old url is ' + cmd.iframeSrc + ' , now url is ' + _DynamicPptIntermediateLayer2.default.getIframeSrc(this.instanceId) + ' , reload number is ' + cmd.forceReloadNumber);
                    }
                    break;
                case 'updateWhiteboardToolsInfo':
                    this._viewStateUpdate(); //更新白板工具信息
                    break;
                case 'h5DocumentOnJumpPage':
                    //H5课件跳转到某页
                    this.whiteBoardManagerInstance.skipPage(cmd.toPage, this.instanceId);
                    break;
            }
        }
    }, {
        key: 'whiteboardWatermarkImageOnFailureCallback',


        /*普通文档加载失败*/
        value: function whiteboardWatermarkImageOnFailureCallback(failureImgUrl) {
            var _WhiteboardIntermedia6 = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId),
                cospdfpath = _WhiteboardIntermedia6.cospdfpath,
                swfpath = _WhiteboardIntermedia6.swfpath,
                currpage = _WhiteboardIntermedia6.currpage,
                filetype = _WhiteboardIntermedia6.filetype,
                isContentDocument = _WhiteboardIntermedia6.isContentDocument;

            if (cospdfpath) {
                swfpath = cospdfpath;
            }
            if (this.fileTypeMark === 'generalDocument' && swfpath && failureImgUrl && filetype !== 'whiteboard' && this.generalDocumentFileForceReloadNumber < this.maxGeneralFileForceReloadNumber) {
                var fileUrl = undefined;
                if (Number(isContentDocument)) {
                    fileUrl = swfpath;
                } else {
                    var index = swfpath.lastIndexOf(".");
                    var imgType = swfpath.substring(index);
                    fileUrl = swfpath.replace(imgType, "-" + currpage + imgType);
                }
                if (new RegExp(fileUrl, 'g').test(failureImgUrl)) {
                    if (!Number(isContentDocument)) {
                        var oldForceUseDocAddress = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || this.configration.docAddress;
                        _Global2.default.docAddressKey = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey, true);
                        if (this.whiteBoardManagerInstance && _Utils2.default.isFunction(this.whiteBoardManagerInstance.setLocalStorageItem)) {
                            this.whiteBoardManagerInstance.setLocalStorageItem('tkDocAddressKey', _Global2.default.docAddressKey);
                            this.sendActionCommand('docAddressUpdate', {
                                docAddressList: [].concat(_toConsumableArray(_Global2.default.docAddressList)),
                                docAddressIndex: _Global2.default.docAddressKey,
                                oldDocAddress: oldForceUseDocAddress,
                                nowDocAddress: _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || this.configration.docAddress
                            }); //文档加载地址更新
                        }
                        _Global2.default.nowUseDocAddress = _Utils2.default.getItem(_Global2.default.docAddressList, _Global2.default.docAddressKey) || this.configration.docAddress;
                        L.Logger.info('[reload general document]change doc address , old address is ' + oldForceUseDocAddress + ' , now address is ' + _Global2.default.nowUseDocAddress);

                        this.generalDocumentFileForceReloadNumber++;
                        L.Logger.info('[general document]load general document failure , reload file , old url is ' + (oldForceUseDocAddress + fileUrl) + ' , now url is ' + (_Global2.default.nowUseDocAddress + fileUrl) + ' , reload number is ' + this.generalDocumentFileForceReloadNumber);
                    } else {
                        this.generalDocumentFileForceReloadNumber++;
                        L.Logger.info('[general document]load general document failure , reload file ,  url is ' + fileUrl + ' , reload number is ' + this.generalDocumentFileForceReloadNumber);
                    }

                    var src = void 0;
                    if (Number(isContentDocument)) {
                        if (fileUrl) {
                            src = fileUrl;
                        }
                    } else {
                        src = _Global2.default.nowUseDocAddress + fileUrl;
                    }
                    _WhiteboardIntermediateLayer2.default.setWhiteboardWatermarkImage(this.instanceId, src, { resetDedaultWhiteboardMagnification: false });
                } else {
                    this.generalDocumentFileForceReloadNumber = 0;
                }
            }
        }
    }, {
        key: 'whiteboardWatermarkImageOnloadCallback',


        /*普通文档加载完成*/
        value: function whiteboardWatermarkImageOnloadCallback(data) {
            var width = data.width,
                height = data.height;

            this.scale = width / height;
            this._viewStateUpdate();
        }
        /*更新白板大小*/

    }, {
        key: 'resizeWhiteboardHandler',
        value: function resizeWhiteboardHandler() {
            _WhiteboardIntermediateLayer2.default.resizeWhiteboardHandler(this.instanceId);
            if (this.fileTypeMark === 'dynamicPPT' && this.configration.clientType === 'ios') {
                _DynamicPptIntermediateLayer2.default.changeDynamicPptSize(this.instanceId);
            }
        }

        /*白板是否处于文本点击状态*/

    }, {
        key: 'isWhiteboardTextEditing',
        value: function isWhiteboardTextEditing() {
            return _WhiteboardIntermediateLayer2.default.isWhiteboardTextEditing(this.instanceId);
        }

        /*重置白板所有的数据*/

    }, {
        key: 'resetWhiteboardData',
        value: function resetWhiteboardData() {
            _WhiteboardIntermediateLayer2.default.clearWhiteboardAllDataById(this.instanceId);
        }

        /*接收iframe的message消息*/

    }, {
        key: 'receiveWindowMessageEvent',
        value: function receiveWindowMessageEvent(event) {
            if (this.configration.loadDynamicPptView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                _DynamicPptIntermediateLayer2.default.receiveWindowMessageEvent(this.instanceId, event);
            }
            if (this.configration.loadH5DocumentView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                _H5DocumentPptIntermediateLayer2.default.receiveWindowMessageEvent(this.instanceId, event);
            }
        }
    }, {
        key: 'getWhiteboardRootElement',


        /*获取白板的根节点*/
        value: function getWhiteboardRootElement() {
            return this.elements.whiteboardViewRootElement;
        }

        /*重置纯白板总页数*/

    }, {
        key: 'resetPureWhiteboardTotalPage',
        value: function resetPureWhiteboardTotalPage(oldTotalPage) {
            if (oldTotalPage > 1) {
                for (var currpage = 2; currpage <= oldTotalPage; currpage++) {
                    _WhiteboardIntermediateLayer2.default.clearWhiteboardDataByFileidAndCurrpage(this.instanceId, 0, currpage);
                }
            }
            var filedata = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId);
            if (filedata.fileid == 0) {
                var open = false;
                filedata.currpage = 1;
                filedata.pagenum = 1;
                this._saveFiledataAndLoadCurrpageWhiteboardData(filedata);
                this._generalDocumentFileShowPage(open);
            }
        }
        /*获取动态PPT实例,根据id获取*/

    }, {
        key: 'getDynamicPptInstanceByID',
        value: function getDynamicPptInstanceByID() {
            return _DynamicPptIntermediateLayer2.default.getDynamicPptInstanceByID(this.instanceId);
        }
        /*获取h5文档实例,根据id获取*/

    }, {
        key: 'getH5DocumentInstanceByID',
        value: function getH5DocumentInstanceByID() {
            return _H5DocumentPptIntermediateLayer2.default.getH5DocumentInstanceByID(this.instanceId);
        }

        /*创建所需节点*/

    }, {
        key: '_createElements',
        value: function _createElements() {
            this.elements.whiteboardViewRootElement = _DomUtils2.default.createElement('section', this.instanceId + 'TalkcloudSdkWhiteboardRoot', (this.configration.isMobile ? 'app-mobile ' : ' ') + 'talkcloud-sdk-whiteboard ' + this.instanceId + ' sdkwhiteboard-root', {
                width: '100%',
                height: '100%',
                position: 'relative',
                left: 0,
                top: 0,
                backgroundColor: this.configration.rootBackgroundColor
            }); //白板根节点

            this.elements.totalDocumentViewElement = _DomUtils2.default.createElement('section', this.instanceId + 'TalkcloudTotalDocument', 'talkcloud-sdk-whiteboard ' + this.instanceId + ' total-document-container', {
                width: '100%',
                height: '100%',
                position: 'absolute',
                left: 0,
                top: 0,
                maxWidth: '100%',
                maxHeight: '100%'
            }); //文档总容器节点（滚动条在该容器上）

            this.elements.documentViewElement = _DomUtils2.default.createElement('section', this.instanceId + 'TalkcloudDocument', 'talkcloud-sdk-whiteboard ' + this.instanceId + ' document-container', {
                width: '100%',
                height: '100%',
                position: 'absolute',
                left: 0,
                top: 0
            }); //包裹所有的文档的节点，宽高为文档的宽高

            this.elements.whiteboardViewElement = _DomUtils2.default.createElement('article', this.instanceId + 'TalkcloudWhiteboard', 'talkcloud-sdk-whiteboard ' + this.instanceId + ' whiteboard-container', {
                width: '100%',
                height: '100%',
                position: 'absolute',
                left: 0,
                top: 0,
                zIndex: 2
            }); //白板容器节点

            this.elements.dynamicPptViewElement = _DomUtils2.default.createElement('article', this.instanceId + 'TalkcloudDynamicPpt', 'talkcloud-sdk-whiteboard ' + this.instanceId + ' dynamic-ppt-container', {
                width: '100%',
                height: '100%',
                position: 'absolute',
                left: 0,
                top: 0,
                display: 'none',
                zIndex: 1
            }); //动态ppt容器节点

            this.elements.h5DocumentViewElement = _DomUtils2.default.createElement('article', this.instanceId + 'TalkcloudH5Document', 'talkcloud-sdk-whiteboard ' + this.instanceId + ' h5-document-container', {
                width: '100%',
                height: '100%',
                position: 'absolute',
                left: 0,
                top: 0,
                display: 'none',
                zIndex: 1
            }); //h5容器节点

            this.elements.disableClickViewElement = _DomUtils2.default.createElement('div', undefined, 'talkcloud-sdk-whiteboard ' + this.instanceId + ' disable-clock-container', {
                width: '100%',
                height: '100%',
                position: 'absolute',
                left: 0,
                top: 0,
                display: 'none',
                zIndex: 4
            }); //h5容器节点
        }
    }, {
        key: '_connectElements',


        /*连接所有节点*/
        value: function _connectElements() {
            if (this.configration.loadDynamicPptView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                _DomUtils2.default.appendChild(this.elements.documentViewElement, this.elements.dynamicPptViewElement);
            }
            if (this.configration.loadH5DocumentView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                _DomUtils2.default.appendChild(this.elements.documentViewElement, this.elements.h5DocumentViewElement);
            }

            _DomUtils2.default.appendChild(this.elements.documentViewElement, this.elements.whiteboardViewElement);
            _DomUtils2.default.appendChild(this.elements.documentViewElement, this.elements.disableClickViewElement);
            _DomUtils2.default.appendChild(this.elements.totalDocumentViewElement, this.elements.documentViewElement);
            _DomUtils2.default.appendChild(this.elements.whiteboardViewRootElement, this.elements.totalDocumentViewElement);
            _DomUtils2.default.appendChild(this.parentNode, this.elements.whiteboardViewRootElement);

            this._productionWhiteboard(); //生产白板
            // if(this.configration.loadDynamicPptView && this.instanceId === 'default'){
            this._productionDynamicPpt(); //生产动态PPT
            // };
            // if(this.configration.loadH5DocumentView && this.instanceId === 'default'){
            this._productionH5Document(); //生产H5课件
            // };
        }

        /*实例化白板*/

    }, {
        key: '_productionWhiteboard',
        value: function _productionWhiteboard() {
            var _this4 = this;

            if (_WhiteboardIntermediateLayer2.default.hasWhiteboardById(this.instanceId)) {
                _WhiteboardIntermediateLayer2.default.destroyWhiteboardInstance(this.instanceId);
            }
            var whiteboardInstanceData = {
                whiteboardElementId: this.elements.whiteboardViewElement.getAttribute('id'),
                id: this.instanceId,
                handler: {
                    sendSignallingToServer: function sendSignallingToServer(name, id, toID, data, do_not_save, expiresabs, associatedMsgID, associatedUserID) {
                        /*添加白板画笔数据，发送给服务器*/
                        if (_this4.configration.synchronization && _this4.configration.isConnectedRoom) {
                            _this4.pubMsg({ name: name, id: id, toID: toID, data: data, save: !do_not_save, expiresabs: expiresabs, associatedMsgID: associatedMsgID, associatedUserID: associatedUserID });
                        }
                    },
                    delSignallingToServer: function delSignallingToServer(name, id, toID, data) {
                        /*删除白板画笔数据，发送给服务器*/
                        if (_this4.configration.synchronization && _this4.configration.isConnectedRoom) {
                            _this4.delMsg({ name: name, id: id, toID: toID, data: data });
                        }
                    },
                    resizeWhiteboardSizeCallback: this.resizeWhiteboardSizeCallback.bind(this),
                    noticeUpdateToolDescCallback: this.noticeUpdateToolDescCallback.bind(this),
                    noticeUpdateWhiteboardFiledataCallback: this.noticeUpdateWhiteboardFiledataCallback.bind(this),
                    receiveActionCommandCallback: this.receiveActionCommandCallback.bind(this),
                    whiteboardWatermarkImageOnFailureCallback: this.whiteboardWatermarkImageOnFailureCallback.bind(this),
                    whiteboardWatermarkImageOnloadCallback: this.whiteboardWatermarkImageOnloadCallback.bind(this)
                },
                productionOptions: Object.deepAssign({
                    deawPermission: this.configration.canDraw && this.configration.synchronization && this.configration.isConnectedRoom,
                    showShapeAuthor: this.configration.showShapeAuthor,
                    myselfId: this.configration.myUserId,
                    nickname: this.configration.myName,
                    synchronizationWhiteboard: this.configration.synchronization && this.configration.isConnectedRoom,
                    primaryColor: this.configration.primaryColor,
                    secondaryColor: this.configration.secondaryColor,
                    backgroundColor: this.configration.backgroundColor,
                    pencilWidth: this.configration.pencilWidth, //笔的大小
                    shapeWidth: this.configration.shapeWidth, //图形画笔大小
                    eraserWidth: this.configration.eraserWidth, //橡皮大小
                    fontSize: this.configration.fontSize, //字体大小
                    fontFamily: this.configration.fontFamily, //使用的字体 ，默认"微软雅黑"
                    parcelAncestorElementId: this.elements.whiteboardViewRootElement.getAttribute('id'),
                    defaultWhiteboardScale: this.configration.defaultWhiteboardScale,
                    associatedMsgID: this.configration.associatedMsgID,
                    associatedUserID: this.configration.associatedUserID,
                    isOnlyUndoRedoClearMyselfShape: this.configration.isOnlyUndoRedoClearMyselfShape,
                    insertPictureRule: this.configration.insertPictureRule
                }, this.configration.initWhiteboardProductionOptions || {})
            };
            var toolsDesc = {
                tool_pencil: {},
                tool_highlighter: {},
                tool_line: {},
                tool_arrow: {},
                tool_eraser: {},
                tool_text: {},
                tool_rectangle: {},
                tool_rectangle_empty: {},
                tool_ellipse: {},
                tool_ellipse_empty: {},
                tool_mouse: {},
                tool_laser: {},
                action_undo: {},
                action_redo: {},
                action_clear: {},
                zoom_big: {},
                zoom_small: {}
            };
            _WhiteboardIntermediateLayer2.default.productionWhiteboard(whiteboardInstanceData);
            _WhiteboardIntermediateLayer2.default.registerWhiteboardTools(this.instanceId, toolsDesc);
            _WhiteboardIntermediateLayer2.default.clearRedoAndUndoStack(this.instanceId);
            _WhiteboardIntermediateLayer2.default.loadCurrpageWhiteboard(this.instanceId);
            if (this.instanceId === 'default' || this.configration.hasExtendDocument) {
                _WhiteboardIntermediateLayer2.default.activeWhiteboardTool('tool_mouse', this.instanceId);
            }
        }

        /*实例化动态PPT*/

    }, {
        key: '_productionDynamicPpt',
        value: function _productionDynamicPpt() {
            var _this5 = this;

            if (this.configration.loadDynamicPptView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                if (_DynamicPptIntermediateLayer2.default.hasDynamicPptById(this.instanceId)) {
                    _DynamicPptIntermediateLayer2.default.destroyDynamicPptInstance(this.instanceId);
                }
                var dynamicPptInstanceData = {
                    dynamicPptElementId: this.elements.dynamicPptViewElement.getAttribute('id'),
                    id: this.instanceId,
                    handler: {
                        sendSignallingToServer: function sendSignallingToServer(name, id, toID, data, do_not_save, expiresabs, associatedMsgID, associatedUserID) {
                            if (_this5.configration.synchronization && _this5.configration.isConnectedRoom) {
                                _this5.pubMsg({ name: name, id: id, toID: toID, data: data, save: !do_not_save, expiresabs: expiresabs, associatedMsgID: associatedMsgID, associatedUserID: associatedUserID });
                            }
                        },
                        receiveActionCommandCallback: this.receiveActionCommandCallback.bind(this)
                    },
                    productionOptions: {
                        synchronizationDynamicPpt: this.configration.synchronization && this.configration.isConnectedRoom,
                        associatedMsgID: this.configration.associatedMsgID,
                        associatedUserID: this.configration.associatedUserID,
                        isShowReloadFileTip: this.configration.isShowReloadFileTip,
                        languageType: this.configration.languageType,
                        againreconnectElementParentNode: this.elements.documentViewElement,
                        dynamicPptActionClick: this.configration.actionClick
                    }
                };
                _DynamicPptIntermediateLayer2.default.productionDynamicPpt(dynamicPptInstanceData);
            }
        }
    }, {
        key: '_productionH5Document',


        /*实例化H5课件*/
        value: function _productionH5Document() {
            var _this6 = this;

            if (this.configration.loadH5DocumentView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                if (_H5DocumentPptIntermediateLayer2.default.hasH5DocumentById(this.instanceId)) {
                    _H5DocumentPptIntermediateLayer2.default.destroyH5DocumentInstance(this.instanceId);
                }
                var h5DocumentInstanceData = {
                    h5DocumentElementId: this.elements.h5DocumentViewElement.getAttribute('id'),
                    id: this.instanceId,
                    handler: {
                        sendSignallingToServer: function sendSignallingToServer(name, id, toID, data, do_not_save, expiresabs, associatedMsgID, associatedUserID) {
                            if (_this6.configration.synchronization && _this6.configration.isConnectedRoom) {
                                _this6.pubMsg({ name: name, id: id, toID: toID, data: data, save: !do_not_save, expiresabs: expiresabs, associatedMsgID: associatedMsgID, associatedUserID: associatedUserID });
                            }
                        },
                        receiveActionCommandCallback: this.receiveActionCommandCallback.bind(this)
                    },
                    productionOptions: {
                        synchronizationH5Document: this.configration.synchronization && this.configration.isConnectedRoom,
                        associatedMsgID: this.configration.associatedMsgID,
                        associatedUserID: this.configration.associatedUserID,
                        isShowReloadFileTip: this.configration.isShowReloadFileTip,
                        languageType: this.configration.languageType,
                        h5DocumentActionClick: this.configration.actionClick
                    }
                };
                _H5DocumentPptIntermediateLayer2.default.productionH5Document(h5DocumentInstanceData);
            }
        }
    }, {
        key: '_handleShowPageSignalling',


        /*处理ShowPage信令*/
        value: function _handleShowPageSignalling(signallingData) {
            var local = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var source = signallingData.source,
                data = signallingData.data;

            var open = this.fileid != data.filedata.fileid;
            this.fileid = data.filedata.fileid;
            if (!this.configration.isPlayback) {
                if (local) {
                    if (signallingData.name === 'ShowPage') {
                        _Global2.default.showPageFromId = this.configration.myUserId;
                    } else if (signallingData.name === 'ExtendShowPage') {
                        _Global2.default.extendShowPageFromId = this.configration.myUserId;
                    }
                } else {
                    var isReturn = true;
                    if (signallingData.name === 'ShowPage') {
                        if (open || !signallingData.fromID || _Global2.default.showPageFromId !== this.configration.myUserId && signallingData.fromID === this.configration.myUserId || signallingData.fromID !== this.configration.myUserId) {
                            //上一次翻页的用户不是我自己且本次翻页是我自己，或者本次翻页不是我自己，则能够翻页
                            isReturn = false;
                        }
                        _Global2.default.showPageFromId = signallingData.fromID;
                    } else if (signallingData.name === 'ExtendShowPage') {
                        if (open || !signallingData.fromID || _Global2.default.extendShowPageFromId !== this.configration.myUserId && signallingData.fromID === this.configration.myUserId || signallingData.fromID !== this.configration.myUserId) {
                            //上一次翻页的用户不是我自己且本次翻页是我自己，或者本次翻页不是我自己，则能够翻页
                            isReturn = false;
                        }
                        _Global2.default.extendShowPageFromId = signallingData.fromID;
                    }
                    if (isReturn) {
                        return;
                    }
                }
            }
            this.fileTypeMark = data.isDynamicPPT ? 'dynamicPPT' : data.isH5Document ? 'h5Document' : 'generalDocument';
            if (data.isDynamicPPT || data.isH5Document) {
                data.filedata.pagenum = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId).pagenum;
            }
            if (data.isGeneralFile || !open && data.isDynamicPPT && (this.configration.loadDynamicPptView && this.instanceId === 'default' || this.configration.hasExtendDocument) && _DynamicPptIntermediateLayer2.default.isLoadFinished(this.instanceId) || !open && data.isH5Document && (this.configration.loadH5DocumentView && this.instanceId === 'default' || this.configration.hasExtendDocument) && _H5DocumentPptIntermediateLayer2.default.isLoadFinished(this.instanceId)) {
                //如果是普通文档，则限制ShowPage页数范围 , 或者是动态PPT和H5课件且已打开（加载完毕）则限制ShowPage页数范围
                var filedata = data.filedata;
                if (filedata.currpage > filedata.pagenum) {
                    filedata.currpage = filedata.pagenum;
                }
                if (filedata.currpage < 1) {
                    filedata.currpage = 1;
                }
                if (data.isDynamicPPT) {
                    filedata.pptslide = filedata.currpage;
                }
            }
            this._updateViewShowAndHide();
            this._viewStateUpdate(); // 更新文件fileid
            if (data.isGeneralFile) {
                //普通文档
                if (source === 'room-pubmsg' && !open && Number(data.filedata.currpage) === _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId).currpage) {
                    return;
                }
                this._saveFiledataAndLoadCurrpageWhiteboardData(data.filedata);
                this._generalDocumentFileShowPage(open);
            } else if (data.isDynamicPPT) {
                /*if(source==='room-pubmsg' && !open
                    &&  Number(data.filedata.currpage) === WhiteboardIntermediateLayerInstance.getWhiteboardFiledata(this.instanceId).currpage
                    &&  Number(data.filedata.pptslide) === WhiteboardIntermediateLayerInstance.getWhiteboardFiledata(this.instanceId).pptslide
                    &&  Number(data.filedata.pptstep) === WhiteboardIntermediateLayerInstance.getWhiteboardFiledata(this.instanceId).pptstep ){
                    return ;
                }*/
                _WhiteboardIntermediateLayer2.default.setWhiteboardWatermarkImage(this.instanceId, "");
                this._dynamicPPTFileShowPage(open, signallingData);
            } else if (data.isH5Document) {
                if (source === 'room-pubmsg' && !open && Number(data.filedata.currpage) === _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId).currpage) {
                    return;
                }
                _WhiteboardIntermediateLayer2.default.setWhiteboardWatermarkImage(this.instanceId, "");
                this._saveFiledataAndLoadCurrpageWhiteboardData(data.filedata);
                this._h5DocumentFileShowPage(open);
            }
        }
    }, {
        key: '_generalDocumentFileShowPage',


        /*普通文档的ShowPage*/
        value: function _generalDocumentFileShowPage(open) {
            this.generalDocumentFileForceReloadNumber = 0;
            if (this.configration.loadDynamicPptView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                _DynamicPptIntermediateLayer2.default.setDynamicPptIframeSrc(this.instanceId, '');
            }
            if (this.configration.loadH5DocumentView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                _H5DocumentPptIntermediateLayer2.default.setH5DocumentIframeSrc(this.instanceId, '');
            }
            _WhiteboardIntermediateLayer2.default.resetDedaultWhiteboardMagnification(this.instanceId); //重置白板的缩放比

            var _WhiteboardIntermedia7 = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId),
                cospdfpath = _WhiteboardIntermedia7.cospdfpath,
                swfpath = _WhiteboardIntermedia7.swfpath,
                currpage = _WhiteboardIntermedia7.currpage,
                pagenum = _WhiteboardIntermedia7.pagenum,
                filetype = _WhiteboardIntermedia7.filetype,
                isContentDocument = _WhiteboardIntermedia7.isContentDocument;

            if (cospdfpath) {
                swfpath = cospdfpath;
            }
            _DomUtils2.default.removeClass(this.elements.disableClickViewElement, 'loading');
            if (filetype === 'whiteboard') {
                this.scale = this.configration.defaultWhiteboardScale;
                this._viewStateUpdate();
                _WhiteboardIntermediateLayer2.default.updateWhiteboardWatermarkImageScale(this.instanceId, this.configration.defaultWhiteboardScale);
                _WhiteboardIntermediateLayer2.default.setWhiteboardWatermarkImage(this.instanceId, "", { resetDedaultWhiteboardMagnification: false });
            } else {
                var src = void 0;
                if (Number(isContentDocument)) {
                    if (swfpath) {
                        src = swfpath;
                    }
                } else {
                    var index = swfpath.lastIndexOf(".");
                    var imgType = swfpath.substring(index);
                    var fileUrl = swfpath.replace(imgType, "-" + currpage + imgType);
                    var serviceUrl = _Global2.default.nowUseDocAddress;
                    src = serviceUrl + fileUrl;
                }
                _WhiteboardIntermediateLayer2.default.setWhiteboardWatermarkImage(this.instanceId, src, { resetDedaultWhiteboardMagnification: false });
                if (!Number(isContentDocument)) {
                    var startInt = 1;
                    var endInt = 1;
                    if (open) {
                        this.cacheMaxPageNum = currpage; //当前打开文档的缓存的最大页数，缺省为1
                        this.cacheMinPageNum = currpage; //当前打开文档的缓存的最小页数，缺省为1
                        this.filePreLoadCurrPage = currpage; //当前打开文档的缓存的当前页，缺省为1
                        if (this.cacheMaxPageNum + this.filePreLoadStep <= pagenum) {
                            this.cacheMaxPageNum += this.filePreLoadStep;
                        } else if (this.cacheMaxPageNum < pagenum) {
                            this.cacheMaxPageNum += pagenum - this.cacheMaxPageNum;
                        }

                        if (this.cacheMinPageNum - this.filePreLoadStep >= 1) {
                            this.cacheMinPageNum -= this.filePreLoadStep;
                        } else {
                            this.cacheMinPageNum = 1;
                        }
                        endInt = this.cacheMaxPageNum;
                        startInt = this.cacheMinPageNum;
                    } else {
                        if (this.filePreLoadCurrPage < currpage) {
                            startInt = this.cacheMaxPageNum + 1;
                            if (currpage > this.cacheMaxPageNum) {
                                this.cacheMaxPageNum = currpage;
                            }
                            if (this.cacheMaxPageNum + this.filePreLoadStep <= pagenum) {
                                this.cacheMaxPageNum += this.filePreLoadStep;
                            } else if (this.cacheMaxPageNum < pagenum) {
                                this.cacheMaxPageNum += pagenum - this.cacheMaxPageNum;
                            }
                            endInt = this.cacheMaxPageNum;
                        } else if (this.filePreLoadCurrPage > currpage) {
                            endInt = this.cacheMinPageNum - 1;
                            if (currpage < this.cacheMinPageNum) {
                                this.cacheMinPageNum = currpage;
                            }
                            if (this.cacheMinPageNum - this.filePreLoadStep >= 1) {
                                this.cacheMinPageNum -= this.filePreLoadStep;
                            } else {
                                this.cacheMinPageNum = 1;
                            }
                            startInt = this.cacheMinPageNum;
                        }
                        this.filePreLoadCurrPage = currpage;
                    }

                    for (var i = startInt; i <= endInt; i++) {
                        // 普通文档预加载代码
                        if (i !== currpage) {
                            var _index = swfpath.lastIndexOf(".");
                            var _imgType = swfpath.substring(_index);
                            var _fileUrl = swfpath.replace(_imgType, "-" + i + _imgType);
                            var _serviceUrl = _Global2.default.nowUseDocAddress;
                            var _src2 = _serviceUrl + _fileUrl;
                            _WhiteboardIntermediateLayer2.default.preloadWhiteboardImg(_src2);
                        }
                    }
                }
            }
        }
    }, {
        key: '_dynamicPPTFileShowPage',


        /*动态ppt的ShowPage*/
        value: function _dynamicPPTFileShowPage(open, signallingData) {
            if (this.configration.loadDynamicPptView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                if (this.configration.loadH5DocumentView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                    _H5DocumentPptIntermediateLayer2.default.setH5DocumentIframeSrc(this.instanceId, '');
                }
                if (open) {
                    _WhiteboardIntermediateLayer2.default.updateWhiteboardWatermarkImageScale(this.instanceId, this.configration.defaultWhiteboardScale);
                    this._saveFiledataAndLoadCurrpageWhiteboardData(signallingData.data.filedata);
                    _DomUtils2.default.addClass(this.elements.disableClickViewElement, 'loading');
                    this.forceReloadNumberFromPpt = undefined;
                    this.forceReloadTimestampFromPpt = undefined;
                    this._loadCurrentDynamicPpt();
                } else {
                    var _signallingData$data$ = signallingData.data.filedata,
                        currpage = _signallingData$data$.currpage,
                        pptstep = _signallingData$data$.pptstep;

                    _DynamicPptIntermediateLayer2.default.jumpToAnimation(this.instanceId, currpage, pptstep);
                }
            }
        }
    }, {
        key: '_h5DocumentFileShowPage',


        /*h5文档的ShowPage*/
        value: function _h5DocumentFileShowPage(open) {
            if (this.configration.loadH5DocumentView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                if (this.configration.loadDynamicPptView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                    _DynamicPptIntermediateLayer2.default.setDynamicPptIframeSrc(this.instanceId, '');
                }
                var filedata = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId);
                var swfpath = filedata.swfpath,
                    currpage = filedata.currpage;

                if (open) {
                    _WhiteboardIntermediateLayer2.default.updateWhiteboardWatermarkImageScale(this.instanceId, this.configration.defaultWhiteboardScale);
                    _DomUtils2.default.addClass(this.elements.disableClickViewElement, 'loading');
                    this._loadCurrentH5Document();
                } else {
                    _H5DocumentPptIntermediateLayer2.default.jumpToPage(this.instanceId, currpage);
                }
            }
        }
    }, {
        key: '_saveFiledataAndLoadCurrpageWhiteboardData',


        /*保存白板数据且加载当前页的白板数据*/
        value: function _saveFiledataAndLoadCurrpageWhiteboardData() {
            var updateFiledata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            _WhiteboardIntermediateLayer2.default.saveWhiteboardStackToStorage(this.instanceId);
            _WhiteboardIntermediateLayer2.default.updateWhiteboardFiledata(this.instanceId, updateFiledata);
            _WhiteboardIntermediateLayer2.default.loadCurrpageWhiteboard(this.instanceId);
        }

        /*更新白板的显示和隐藏*/

    }, {
        key: '_updateViewShowAndHide',
        value: function _updateViewShowAndHide() {
            switch (this.fileTypeMark) {
                case 'generalDocument':
                    _DomUtils2.default.show(this.elements.whiteboardViewElement);
                    _DomUtils2.default.hide([this.elements.h5DocumentViewElement, this.elements.dynamicPptViewElement]);
                    break;
                case 'h5Document':
                    _DomUtils2.default.show(this.elements.h5DocumentViewElement);
                    _DomUtils2.default.hide(this.elements.dynamicPptViewElement);
                    if (_WhiteboardIntermediateLayer2.default.getActiveTool(this.instanceId) !== 'tool_mouse') {
                        _DomUtils2.default.show(this.elements.whiteboardViewElement);
                    } else {
                        _DomUtils2.default.hide(this.elements.whiteboardViewElement);
                    }
                    break;
                case 'dynamicPPT':
                    _DomUtils2.default.show(this.elements.dynamicPptViewElement);
                    _DomUtils2.default.hide(this.elements.h5DocumentViewElement);
                    if (_WhiteboardIntermediateLayer2.default.getActiveTool(this.instanceId) !== 'tool_mouse') {
                        _DomUtils2.default.show(this.elements.whiteboardViewElement);
                    } else {
                        _DomUtils2.default.hide(this.elements.whiteboardViewElement);
                    }
                    break;
            }
            _DomUtils2.default.removeClass(this.elements.documentViewElement, ['talkcloud-filetype-generalDocument', 'talkcloud-filetype-h5Document', 'talkcloud-filetype-dynamicPPT']);
            _DomUtils2.default.addClass(this.elements.documentViewElement, 'talkcloud-filetype-' + this.fileTypeMark);
            this.resizeWhiteboardHandler();
        }
    }, {
        key: '_updatedynamicPptVolume',


        /*动态PPT音量的更新*/
        value: function _updatedynamicPptVolume(volume) {
            if (volume < 0) {
                volume = 0;
            } else if (volume > 100) {
                volume = 100;
            }
            this.dynamicPptVolume = volume;
            if (this.configration.loadDynamicPptView && this.instanceId === 'default' || this.configration.hasExtendDocument) {
                _DynamicPptIntermediateLayer2.default.postMessage(this.instanceId, {
                    action: "PptVolumeControl",
                    volumeValue: this.dynamicPptVolume / 100
                });
            }
            this._viewStateUpdate(); // 动态ppt文档音频音量的更新
        }

        /*视图状态更新*/

    }, {
        key: '_viewStateUpdate',
        value: function _viewStateUpdate() {
            if (!_WhiteboardIntermediateLayer2.default.hasWhiteboardById(this.instanceId)) {
                return;
            }
            var tempWhiteboardViewState = {};

            var _WhiteboardIntermedia8 = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId),
                currpage = _WhiteboardIntermedia8.currpage,
                pagenum = _WhiteboardIntermedia8.pagenum,
                pptslide = _WhiteboardIntermedia8.pptslide,
                pptstep = _WhiteboardIntermedia8.pptstep,
                steptotal = _WhiteboardIntermedia8.steptotal,
                fileid = _WhiteboardIntermedia8.fileid;

            var registerWhiteboardToolsList = _WhiteboardIntermediateLayer2.default.getRegisterWhiteboardToolsList(this.instanceId);
            var pageState = {
                nextPage: {
                    disabled: _Global2.default.isPlayVideoing && this.instanceId === 'default' || !(this.configration.canPage && this.configration.isConnectedRoom && currpage < pagenum)
                },
                prevPage: {
                    disabled: _Global2.default.isPlayVideoing && this.instanceId === 'default' || !(this.configration.canPage && this.configration.isConnectedRoom && currpage > 1)
                },
                skipPage: {
                    disabled: _Global2.default.isPlayVideoing && this.instanceId === 'default' || !(this.configration.canPage && this.configration.isConnectedRoom)
                },
                addPage: {
                    disabled: _Global2.default.isPlayVideoing && this.instanceId === 'default' || this.fileTypeMark !== 'generalDocument' || !(this.configration.canPage && this.configration.addPage && this.configration.isConnectedRoom) ? true : !(currpage >= pagenum && Number(fileid) === 0)
                },
                nextStep: {
                    disabled: _Global2.default.isPlayVideoing && this.instanceId === 'default' || this.fileTypeMark !== 'dynamicPPT' || !(this.configration.canPage && this.configration.isConnectedRoom) ? true : pptslide >= pagenum && pptstep >= steptotal - 1
                },
                prevStep: {
                    disabled: _Global2.default.isPlayVideoing && this.instanceId === 'default' || this.fileTypeMark !== 'dynamicPPT' || !(this.configration.canPage && this.configration.isConnectedRoom) ? true : pptslide <= 1 && pptstep <= 0
                },
                currentPage: currpage < 1 ? 1 : currpage, //当前页
                totalPage: pagenum < 1 ? 1 : pagenum //总页数
            };
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = Object.entries(registerWhiteboardToolsList)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _ref3 = _step2.value;

                    var _ref4 = _slicedToArray(_ref3, 2);

                    var key = _ref4[0];
                    var value = _ref4[1];

                    if (/tool_/g.test(key)) {
                        if (this.whiteboardViewState.tool[key] !== value) {
                            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && !Array.isArray(value)) {
                                var _iteratorNormalCompletion5 = true;
                                var _didIteratorError5 = false;
                                var _iteratorError5 = undefined;

                                try {
                                    for (var _iterator5 = Object.entries(value)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                                        var _ref9 = _step5.value;

                                        var _ref10 = _slicedToArray(_ref9, 2);

                                        var innerKey = _ref10[0];
                                        var innerValue = _ref10[1];

                                        this.whiteboardViewState.tool[key] = this.whiteboardViewState.tool[key] || {};
                                        if (innerValue !== this.whiteboardViewState.tool[key][innerKey]) {
                                            tempWhiteboardViewState.tool = tempWhiteboardViewState.tool || {};
                                            tempWhiteboardViewState.tool[key] = tempWhiteboardViewState.tool[key] || {};
                                            tempWhiteboardViewState.tool[key][innerKey] = innerValue;
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError5 = true;
                                    _iteratorError5 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                                            _iterator5.return();
                                        }
                                    } finally {
                                        if (_didIteratorError5) {
                                            throw _iteratorError5;
                                        }
                                    }
                                }
                            } else {
                                tempWhiteboardViewState.tool = tempWhiteboardViewState.tool || {};
                                tempWhiteboardViewState.tool[key] = value;
                            }
                        }
                    } else if (/action_/g.test(key)) {
                        if (this.whiteboardViewState.action[key] !== value) {
                            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && !Array.isArray(value)) {
                                var _iteratorNormalCompletion6 = true;
                                var _didIteratorError6 = false;
                                var _iteratorError6 = undefined;

                                try {
                                    for (var _iterator6 = Object.entries(value)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                        var _ref11 = _step6.value;

                                        var _ref12 = _slicedToArray(_ref11, 2);

                                        var _innerKey = _ref12[0];
                                        var _innerValue = _ref12[1];

                                        this.whiteboardViewState.action[key] = this.whiteboardViewState.action[key] || {};
                                        if (_innerValue !== this.whiteboardViewState.action[key][_innerKey]) {
                                            tempWhiteboardViewState.action = tempWhiteboardViewState.action || {};
                                            tempWhiteboardViewState.action[key] = tempWhiteboardViewState.action[key] || {};
                                            tempWhiteboardViewState.action[key][_innerKey] = _innerValue;
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError6 = true;
                                    _iteratorError6 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                            _iterator6.return();
                                        }
                                    } finally {
                                        if (_didIteratorError6) {
                                            throw _iteratorError6;
                                        }
                                    }
                                }
                            } else {
                                tempWhiteboardViewState.action = tempWhiteboardViewState.action || {};
                                tempWhiteboardViewState.action[key] = value;
                            }
                        }
                    } else if (/zoom_/g.test(key)) {
                        if (this.whiteboardViewState.zoom[key] !== value) {
                            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && !Array.isArray(value)) {
                                var _iteratorNormalCompletion7 = true;
                                var _didIteratorError7 = false;
                                var _iteratorError7 = undefined;

                                try {
                                    for (var _iterator7 = Object.entries(value)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                                        var _ref13 = _step7.value;

                                        var _ref14 = _slicedToArray(_ref13, 2);

                                        var _innerKey2 = _ref14[0];
                                        var _innerValue2 = _ref14[1];

                                        this.whiteboardViewState.zoom[key] = this.whiteboardViewState.zoom[key] || {};
                                        if (_innerValue2 !== this.whiteboardViewState.zoom[key][_innerKey2]) {
                                            tempWhiteboardViewState.zoom = tempWhiteboardViewState.zoom || {};
                                            tempWhiteboardViewState.zoom[key] = tempWhiteboardViewState.zoom[key] || {};
                                            tempWhiteboardViewState.zoom[key][_innerKey2] = _innerValue2;
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError7 = true;
                                    _iteratorError7 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                            _iterator7.return();
                                        }
                                    } finally {
                                        if (_didIteratorError7) {
                                            throw _iteratorError7;
                                        }
                                    }
                                }
                            } else {
                                tempWhiteboardViewState.zoom = tempWhiteboardViewState.zoom || {};
                                tempWhiteboardViewState.zoom[key] = value;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = Object.entries(pageState)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _ref5 = _step3.value;

                    var _ref6 = _slicedToArray(_ref5, 2);

                    var _key = _ref6[0];
                    var _value = _ref6[1];

                    this.whiteboardViewState.page[_key] = this.whiteboardViewState.page[_key] || {};
                    if ((typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) === 'object') {
                        var _iteratorNormalCompletion8 = true;
                        var _didIteratorError8 = false;
                        var _iteratorError8 = undefined;

                        try {
                            for (var _iterator8 = Object.entries(_value)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                                var _ref15 = _step8.value;

                                var _ref16 = _slicedToArray(_ref15, 2);

                                var _innerKey3 = _ref16[0];
                                var _innerValue3 = _ref16[1];

                                if (this.whiteboardViewState.page[_key][_innerKey3] !== _innerValue3) {
                                    tempWhiteboardViewState.page = tempWhiteboardViewState.page || {};
                                    tempWhiteboardViewState.page[_key] = tempWhiteboardViewState.page[_key] || {};
                                    tempWhiteboardViewState.page[_key][_innerKey3] = _innerValue3;
                                }
                            }
                        } catch (err) {
                            _didIteratorError8 = true;
                            _iteratorError8 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion8 && _iterator8.return) {
                                    _iterator8.return();
                                }
                            } finally {
                                if (_didIteratorError8) {
                                    throw _iteratorError8;
                                }
                            }
                        }
                    } else {
                        if (this.whiteboardViewState.page[_key] !== _value) {
                            tempWhiteboardViewState.page = tempWhiteboardViewState.page || {};
                            tempWhiteboardViewState.page[_key] = _value;
                        }
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            if (this.fileTypeMark !== this.whiteboardViewState.documentType) {
                tempWhiteboardViewState.documentType = this.fileTypeMark;
            }
            if (this.fileid != this.whiteboardViewState.fileid) {
                tempWhiteboardViewState.fileid = this.fileid; //打开的文档的文件id
            }
            if (this.dynamicPptVolume !== this.whiteboardViewState.dynamicPptVolume) {
                tempWhiteboardViewState.dynamicPptVolume = this.dynamicPptVolume; //动态ppt的音量
            }
            if (this.fullScreen !== this.whiteboardViewState.fullScreen) {
                tempWhiteboardViewState.fullScreen = this.fullScreen; //是否全屏
            }
            if (this.remark !== this.whiteboardViewState.remark) {
                tempWhiteboardViewState.remark = this.remark; //是否开启文档备注
            }
            if (this.scale !== this.whiteboardViewState.scale) {
                tempWhiteboardViewState.scale = this.scale; //文档比例
            }
            var documentRemarkInfoJson = _Global2.default.allDocumentRemarkInfoMap.get('documentRemark_' + this.fileid);
            this.remarkText = this.fileid != 0 && documentRemarkInfoJson && documentRemarkInfoJson[this.fileid + '_' + pageState.currentPage] ? documentRemarkInfoJson[fileid + '_' + pageState.currentPage] : '';
            if (this.remarkText !== this.whiteboardViewState.remarkText) {
                tempWhiteboardViewState.remarkText = this.remarkText; //当前页文档备注文本内容
            }
            var whiteboardToolsInfo = _WhiteboardIntermediateLayer2.default.getWhiteboardToolsInfo(this.instanceId);
            if (whiteboardToolsInfo && (typeof whiteboardToolsInfo === 'undefined' ? 'undefined' : _typeof(whiteboardToolsInfo)) === 'object') {
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = Object.entries(whiteboardToolsInfo)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var _ref7 = _step4.value;

                        var _ref8 = _slicedToArray(_ref7, 2);

                        var _key2 = _ref8[0];
                        var _value2 = _ref8[1];

                        if (this.whiteboardViewState.other[_key2] !== undefined && this.whiteboardViewState.other[_key2] !== _value2) {
                            tempWhiteboardViewState.other = tempWhiteboardViewState.other || {};
                            tempWhiteboardViewState.other[_key2] = _value2;
                        }
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }
            }

            if (Object.keys(tempWhiteboardViewState).length) {
                if (tempWhiteboardViewState.tool !== undefined) {
                    this._updateViewShowAndHide();
                }
                Object.deepAssign(this.whiteboardViewState, tempWhiteboardViewState);
                if (Object.keys(this.whiteboardViewState.tool).length && Object.keys(this.whiteboardViewState.action).length && Object.keys(this.whiteboardViewState.zoom).length && Object.keys(this.whiteboardViewState.page).length) {
                    var cmd = {
                        viewState: this.whiteboardViewState,
                        updateViewState: tempWhiteboardViewState
                    };
                    this.sendActionCommand('viewStateUpdate', cmd); //视图状态更新
                }
            }
        }

        /*发送ShowPage信令*/

    }, {
        key: '_sendSignalling_ShowPage',
        value: function _sendSignalling_ShowPage(updatePubmsgData, callback) {
            if (this.instanceId === 'default' || this.configration.hasExtendDocument) {
                var filedata = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId);
                var pubmsgData = {
                    name: this.instanceId === 'default' ? 'ShowPage' : 'ExtendShowPage',
                    id: this.instanceId === 'default' ? 'DocumentFilePage_ShowPage' : 'DocumentFilePage_ExtendShowPage_' + this.instanceId,
                    toID: '__all',
                    data: {
                        sourceInstanceId: this.instanceId,
                        isGeneralFile: this.fileTypeMark === 'generalDocument',
                        isMedia: false,
                        isDynamicPPT: this.fileTypeMark === 'dynamicPPT',
                        isH5Document: this.fileTypeMark === 'h5Document',
                        action: '',
                        mediaType: '',
                        filedata: filedata
                    },
                    save: true
                };
                if (updatePubmsgData) {
                    Object.deepAssign(pubmsgData, updatePubmsgData);
                }
                if (this.configration.synchronization && this.configration.isConnectedRoom) {
                    this.pubMsg(pubmsgData);
                }
                if (callback && typeof callback === 'function') {
                    callback(pubmsgData);
                }
            };
        }
    }, {
        key: '_loadCurrentDynamicPpt',


        /*加载动态PPT*/
        value: function _loadCurrentDynamicPpt(otherParameters) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (this.fileTypeMark !== 'dynamicPPT') {
                return;
            }
            var filedata = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId);
            var fileid = filedata.fileid,
                swfpath = filedata.swfpath,
                isContentDocument = filedata.isContentDocument;

            var src = !Number(isContentDocument) ? _Global2.default.nowUseDocAddress + swfpath + '/newppt.html' : swfpath;
            var parameters = {
                versions: _Constant2.default.dynamicPptVersions,
                fileid: fileid,
                playback: this.configration.isPlayback,
                classbegin: true,
                // classbegin:( this.configration.synchronization && this.configration.isConnectedRoom ) ,
                publishDynamicPptMediaPermission_video: this.configration.synchronization && this.configration.isConnectedRoom,
                remoteNewpptUpdateTime: _Constant2.default.remoteDynamicPptUpdateTime,
                role: this.configration.myRole,
                dynamicPptActionClick: this.configration.actionClick && this.configration.isConnectedRoom,
                newpptPagingPage: this.configration.canPage && this.configration.isConnectedRoom,
                dynamicPptDebug: _Constant2.default.dynamicPptDebugLog,
                PptVolumeValue: this.dynamicPptVolume / 100,
                deviceType: this.configration.deviceType === 'phone' ? 0 : undefined,
                isBackEvent: this.configration.isBackEvent,
                isClientPlayAudio: this.configration.isNativePlayAudio
          };
            if (this.forceReloadTimestampFromPpt !== undefined) {
                parameters.forceReloadTimestamp = this.forceReloadTimestampFromPpt;
            }
            if (this.forceReloadNumberFromPpt !== undefined) {
                parameters.forceReloadNumber = this.forceReloadNumberFromPpt;
                options.forceReloadNumber = this.forceReloadNumberFromPpt;
            }
            if (otherParameters && _Utils2.default.isJson(otherParameters)) {
                var _iteratorNormalCompletion9 = true;
                var _didIteratorError9 = false;
                var _iteratorError9 = undefined;

                try {
                    for (var _iterator9 = Object.entries(otherParameters)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                        var _ref17 = _step9.value;

                        var _ref18 = _slicedToArray(_ref17, 2);

                        var key = _ref18[0];
                        var value = _ref18[1];

                        parameters[key] = value;
                    }
                } catch (err) {
                    _didIteratorError9 = true;
                    _iteratorError9 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion9 && _iterator9.return) {
                            _iterator9.return();
                        }
                    } finally {
                        if (_didIteratorError9) {
                            throw _iteratorError9;
                        }
                    }
                }
            }
            options.playback = this.configration.isPlayback;
            _DynamicPptIntermediateLayer2.default.setDynamicPptIframeSrc(this.instanceId, src, parameters, filedata, options);
        }
    }, {
        key: '_loadCurrentH5Document',


        /*加载动态H5文档*/
        value: function _loadCurrentH5Document(otherParameters) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (this.fileTypeMark !== 'h5Document') {
                return;
            }
            var filedata = _WhiteboardIntermediateLayer2.default.getWhiteboardFiledata(this.instanceId);
            var swfpath = filedata.swfpath,
                isContentDocument = filedata.isContentDocument;

            var src = void 0;
            L.Logger.info('Document swfpath：', swfpath, 'isContentDocument:', isContentDocument);
            if (Number(isContentDocument)) {
                if (swfpath) {
                    src = swfpath;
                }
            } else {
                src = _Global2.default.nowUseDocAddress + swfpath;
            }

            var parameters = {
                role: this.configration.myRole
            };
            if (otherParameters && _Utils2.default.isJson(otherParameters)) {
                var _iteratorNormalCompletion10 = true;
                var _didIteratorError10 = false;
                var _iteratorError10 = undefined;

                try {
                    for (var _iterator10 = Object.entries(otherParameters)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                        var _ref19 = _step10.value;

                        var _ref20 = _slicedToArray(_ref19, 2);

                        var key = _ref20[0];
                        var value = _ref20[1];

                        parameters[key] = value;
                    }
                } catch (err) {
                    _didIteratorError10 = true;
                    _iteratorError10 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion10 && _iterator10.return) {
                            _iterator10.return();
                        }
                    } finally {
                        if (_didIteratorError10) {
                            throw _iteratorError10;
                        }
                    }
                }
            }
            _H5DocumentPptIntermediateLayer2.default.setH5DocumentIframeSrc(this.instanceId, src, parameters, filedata, options);
        }
    }]);

    return WhiteboardView;
}();

exports.default = WhiteboardView;
},{"../../intermediateLayer/DynamicPptIntermediateLayer":333,"../../intermediateLayer/H5DocumentPptIntermediateLayer":334,"../../intermediateLayer/WhiteboardIntermediateLayer":335,"../../utils/Configuration":336,"../../utils/Constant":337,"../../utils/DomUtils":338,"../../utils/Global":339,"../../utils/Utils":343}]},{},[344])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWNvcHktd2l0aGluLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZyb20taXRlcmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLWlzby1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWZyb3VuZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNjYWxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1mb3JjZWQtcGFtLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLWZyb20uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5tYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNicnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5leHBtMS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaW11bC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWctcGVyLXJhZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pYWRkaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5yYWQtcGVyLWRlZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9ic2VydmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0Lm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAuZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qcyIsIm5vZGVfbW9kdWxlcy9wZGZvYmplY3QvcGRmb2JqZWN0LmpzIiwic3JjLWVzNS9US1doaXRlQm9hcmRNYW5hZ2VyLmpzIiwic3JjLWVzNS9pbnRlcm1lZGlhdGVMYXllci9EeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXIuanMiLCJzcmMtZXM1L2ludGVybWVkaWF0ZUxheWVyL0g1RG9jdW1lbnRQcHRJbnRlcm1lZGlhdGVMYXllci5qcyIsInNyYy1lczUvaW50ZXJtZWRpYXRlTGF5ZXIvV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyLmpzIiwic3JjLWVzNS91dGlscy9Db25maWd1cmF0aW9uLmpzIiwic3JjLWVzNS91dGlscy9Db25zdGFudC5qcyIsInNyYy1lczUvdXRpbHMvRG9tVXRpbHMuanMiLCJzcmMtZXM1L3V0aWxzL0dsb2JhbC5qcyIsInNyYy1lczUvdXRpbHMvTGFuZ3VhZ2UuanMiLCJzcmMtZXM1L3V0aWxzL0xvZy5qcyIsInNyYy1lczUvdXRpbHMvVGFsa0FqYXguanMiLCJzcmMtZXM1L3V0aWxzL1V0aWxzLmpzIiwic3JjLWVzNS92aWV3SW5kZXguanMiLCJzcmMtZXM1L3ZpZXcvY29tcG9uZW50cy9NZWRpYVBsYXllckNvbnRyb2xsZXIuanMiLCJzcmMtZXM1L3ZpZXcvY29tcG9uZW50cy9TZWxlY3QuanMiLCJzcmMtZXM1L3ZpZXcvY29tcG9uZW50cy9UYWxrY2xvdWRSZWFjdC5qcyIsInNyYy1lczUvdmlldy9jb21wb25lbnRzL1ZpZGVvRHVtYi5qcyIsInNyYy1lczUvdmlldy9jb250YWluZXJzL0F1ZGlvUGxheWVyLmpzIiwic3JjLWVzNS92aWV3L2NvbnRhaW5lcnMvRG9jdW1lbnRSZW1hcmsuanMiLCJzcmMtZXM1L3ZpZXcvY29udGFpbmVycy9Eb2N1bWVudFRvb2xiYXIuanMiLCJzcmMtZXM1L3ZpZXcvY29udGFpbmVycy9NZWRpYVBsYXllci5qcyIsInNyYy1lczUvdmlldy9jb250YWluZXJzL1ZpZGVvUGxheWVyLmpzIiwic3JjLWVzNS92aWV3L2NvbnRhaW5lcnMvV2hpdGVib2FyZFRvb2xiYXIuanMiLCJzcmMtZXM1L3ZpZXcvY29udGFpbmVycy9XaGl0ZWJvYXJkVmlldy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2h1QkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBOztBQ0RBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaGVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7O0FDREE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3UkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1MUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcm5DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOXNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeFhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdGpCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDamJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbE9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM1dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdjVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqeUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMXNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvc2hpbVwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vcmVnZXhwL2VzY2FwZVwiKTtcblxuaWYgKGdsb2JhbC5fYmFiZWxQb2x5ZmlsbCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC1wb2x5ZmlsbCBpcyBhbGxvd2VkXCIpO1xufVxuZ2xvYmFsLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTtcblxudmFyIERFRklORV9QUk9QRVJUWSA9IFwiZGVmaW5lUHJvcGVydHlcIjtcbmZ1bmN0aW9uIGRlZmluZShPLCBrZXksIHZhbHVlKSB7XG4gIE9ba2V5XSB8fCBPYmplY3RbREVGSU5FX1BST1BFUlRZXShPLCBrZXksIHtcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pO1xufVxuXG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRMZWZ0XCIsIFwiXCIucGFkU3RhcnQpO1xuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkUmlnaHRcIiwgXCJcIi5wYWRFbmQpO1xuXG5cInBvcCxyZXZlcnNlLHNoaWZ0LGtleXMsdmFsdWVzLGVudHJpZXMsaW5kZXhPZixldmVyeSxzb21lLGZvckVhY2gsbWFwLGZpbHRlcixmaW5kLGZpbmRJbmRleCxpbmNsdWRlcyxqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YscmVkdWNlLHJlZHVjZVJpZ2h0LGNvcHlXaXRoaW4sZmlsbFwiLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgW11ba2V5XSAmJiBkZWZpbmUoQXJyYXksIGtleSwgRnVuY3Rpb24uY2FsbC5iaW5kKFtdW2tleV0pKTtcbn0pOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW5cbiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpblxuICogdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZ2xvYmFsLnByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgZ2xvYmFsLnByb2Nlc3MuZG9tYWluKSB7XG4gICAgICBpbnZva2UgPSBnbG9iYWwucHJvY2Vzcy5kb21haW4uYmluZChpbnZva2UpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gQW1vbmcgdGhlIHZhcmlvdXMgdHJpY2tzIGZvciBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbFxuICAvLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3RcbiAgLy8gdXNlIGluZGlyZWN0IGV2YWwgKHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KS5cbiAgdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6XG4gIHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgPyB3aW5kb3cgOlxuICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0aGlzXG4pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlJlZ0V4cC5lc2NhcGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXIsIElURVJBVE9SKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgaWYgKGNsYXNzb2YodGhpcykgIT0gTkFNRSkgdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcbiAgICByZXR1cm4gZnJvbSh0aGlzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi4xJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmV4ZWMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcblxudmFyIFNQRUNJRVMgPSB3a3MoJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDIgJiYgcmVzdWx0WzBdID09PSAnYScgJiYgcmVzdWx0WzFdID09PSAnYic7XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCA/ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgIH1cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pIDogdW5kZWZpbmVkO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIGZucyA9IGV4ZWMoXG4gICAgICBkZWZpbmVkLFxuICAgICAgU1lNQk9MLFxuICAgICAgJydbS0VZXSxcbiAgICAgIGZ1bmN0aW9uIG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAgIC8vIFRoZSBuYXRpdmUgU3RyaW5nIG1ldGhvZCBhbHJlYWR5IGRlbGVnYXRlcyB0byBAQG1ldGhvZCAodGhpc1xuICAgICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVSZWdFeHBNZXRob2QuY2FsbChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgICB9XG4gICAgKTtcbiAgICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gICAgdmFyIHJ4Zm4gPSBmbnNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IHggIT0geFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dExvdyAhPSBvdXRMb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxuICApIHJldHVybiBOYU47XG4gIGlmICh4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkpIHJldHVybiB4O1xuICByZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93O1xufTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9lczYubWFwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpO1xudmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEZvcmNlZCByZXBsYWNlbWVudCBwcm90b3R5cGUgYWNjZXNzb3JzIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fbGlicmFyeScpIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEsgPSBNYXRoLnJhbmRvbSgpO1xuICAvLyBJbiBGRiB0aHJvd3Mgb25seSBkZWZpbmUgbWV0aG9kc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYsIG5vLXVzZWxlc3MtY2FsbFxuICBfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCwgSywgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgZGVsZXRlIHJlcXVpcmUoJy4vX2dsb2JhbCcpW0tdO1xufSk7XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCJ2YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKSB7XG4gICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRnVuY3Rpb25bVE9fU1RSSU5HXTtcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBidWlsdGluRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcblxuIC8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmICh0eXBlb2YgZXhlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG4gIH1cbiAgcmV0dXJuIGJ1aWx0aW5FeGVjLmNhbGwoUiwgUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07XG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IGZyb206IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwRm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwRm4gPSBhcmd1bWVudHNbMV07XG4gICAgdmFyIG1hcHBpbmcsIEEsIG4sIGNiO1xuICAgIGFGdW5jdGlvbih0aGlzKTtcbiAgICBtYXBwaW5nID0gbWFwRm4gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFwcGluZykgYUZ1bmN0aW9uKG1hcEZuKTtcbiAgICBpZiAoc291cmNlID09IHVuZGVmaW5lZCkgcmV0dXJuIG5ldyB0aGlzKCk7XG4gICAgQSA9IFtdO1xuICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICBuID0gMDtcbiAgICAgIGNiID0gY3R4KG1hcEZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XG4gICAgICAgIEEucHVzaChjYihuZXh0SXRlbSwgbisrKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgQS5wdXNoLCBBKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpIHtcbiAgdmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG4gIHZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbiAgdmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbiAgdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiAgdmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG4gIHZhciAkYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG4gIHZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbiAgdmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xuICB2YXIgcHJvcGVydHlEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuICB2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiAgdmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG4gIHZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG4gIHZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuICB2YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG4gIHZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xuICB2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbiAgdmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xuICB2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbiAgdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4gIHZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xuICB2YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG4gIHZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG4gIHZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbiAgdmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG4gIHZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuICB2YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG4gIHZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbiAgdmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xuICB2YXIgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJyk7XG4gIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG4gIHZhciBBcnJheUl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG4gIHZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbiAgdmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbiAgdmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xuICB2YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKTtcbiAgdmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuICB2YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xuICB2YXIgZFAgPSAkRFAuZjtcbiAgdmFyIGdPUEQgPSAkR09QRC5mO1xuICB2YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuICB2YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbiAgdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbiAgdmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG4gIHZhciBTSEFSRURfQlVGRkVSID0gJ1NoYXJlZCcgKyBBUlJBWV9CVUZGRVI7XG4gIHZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG4gIHZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheVtQUk9UT1RZUEVdO1xuICB2YXIgJEFycmF5QnVmZmVyID0gJGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbiAgdmFyICREYXRhVmlldyA9ICRidWZmZXIuRGF0YVZpZXc7XG4gIHZhciBhcnJheUZvckVhY2ggPSBjcmVhdGVBcnJheU1ldGhvZCgwKTtcbiAgdmFyIGFycmF5RmlsdGVyID0gY3JlYXRlQXJyYXlNZXRob2QoMik7XG4gIHZhciBhcnJheVNvbWUgPSBjcmVhdGVBcnJheU1ldGhvZCgzKTtcbiAgdmFyIGFycmF5RXZlcnkgPSBjcmVhdGVBcnJheU1ldGhvZCg0KTtcbiAgdmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xuICB2YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbiAgdmFyIGFycmF5SW5jbHVkZXMgPSBjcmVhdGVBcnJheUluY2x1ZGVzKHRydWUpO1xuICB2YXIgYXJyYXlJbmRleE9mID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSk7XG4gIHZhciBhcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcztcbiAgdmFyIGFycmF5S2V5cyA9IEFycmF5SXRlcmF0b3JzLmtleXM7XG4gIHZhciBhcnJheUVudHJpZXMgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzO1xuICB2YXIgYXJyYXlMYXN0SW5kZXhPZiA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2Y7XG4gIHZhciBhcnJheVJlZHVjZSA9IEFycmF5UHJvdG8ucmVkdWNlO1xuICB2YXIgYXJyYXlSZWR1Y2VSaWdodCA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQ7XG4gIHZhciBhcnJheUpvaW4gPSBBcnJheVByb3RvLmpvaW47XG4gIHZhciBhcnJheVNvcnQgPSBBcnJheVByb3RvLnNvcnQ7XG4gIHZhciBhcnJheVNsaWNlID0gQXJyYXlQcm90by5zbGljZTtcbiAgdmFyIGFycmF5VG9TdHJpbmcgPSBBcnJheVByb3RvLnRvU3RyaW5nO1xuICB2YXIgYXJyYXlUb0xvY2FsZVN0cmluZyA9IEFycmF5UHJvdG8udG9Mb2NhbGVTdHJpbmc7XG4gIHZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbiAgdmFyIFRBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbiAgdmFyIFRZUEVEX0NPTlNUUlVDVE9SID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpO1xuICB2YXIgREVGX0NPTlNUUlVDVE9SID0gdWlkKCdkZWZfY29uc3RydWN0b3InKTtcbiAgdmFyIEFMTF9DT05TVFJVQ1RPUlMgPSAkdHlwZWQuQ09OU1RSO1xuICB2YXIgVFlQRURfQVJSQVkgPSAkdHlwZWQuVFlQRUQ7XG4gIHZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG4gIHZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG5cbiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xuICB9KTtcblxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA9PT0gMTtcbiAgfSk7XG5cbiAgdmFyIEZPUkNFRF9TRVQgPSAhIVVpbnQ4QXJyYXkgJiYgISFVaW50OEFycmF5W1BST1RPVFlQRV0uc2V0ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xuICB9KTtcblxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIGlmIChpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpIHJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uIChDLCBsZW5ndGgpIHtcbiAgICBpZiAoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcbiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbiAoTywgbGlzdCkge1xuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XG4gIH07XG5cbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24gKEMsIGxpc3QpIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChpdCwga2V5LCBpbnRlcm5hbCkge1xuICAgIGRQKGl0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfSB9KTtcbiAgfTtcblxuICB2YXIgJGZyb20gPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChzb3VyY2UpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKykge1xuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcbiAgICAgIH0gTyA9IHZhbHVlcztcbiAgICB9XG4gICAgaWYgKG1hcHBpbmcgJiYgYUxlbiA+IDIpIG1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxuICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xuXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpIHtcbiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHZhciBwcm90byA9IHtcbiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5RmlsbC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoO1xuICAgICAgdmFyIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMik7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XG4gICAgICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH0sXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcbiAgICB9LFxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgTyA9IHZhbGlkYXRlKHRoaXMpO1xuICAgICAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoO1xuICAgICAgdmFyICRiZWdpbiA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcbiAgICAgICAgTy5idWZmZXIsXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyICRzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xuICB9O1xuXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICAgIHZhbGlkYXRlKHRoaXMpO1xuICAgIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHNbMV0sIDEpO1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICB2YXIgc3JjID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoc3JjLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBpZiAobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuKSB0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KVxuICAgICAgJiYgdGFyZ2V0W1RZUEVEX0FSUkFZXVxuICAgICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJ1xuICAgICAgJiYga2V5IGluIHRhcmdldFxuICAgICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xuICB9O1xuICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcbiAgfTtcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICBpZiAoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgICYmIGlzT2JqZWN0KGRlc2MpXG4gICAgICAmJiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpXG4gICAgICAmJiAhaGFzKGRlc2MsICdzZXQnKVxuICAgICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ3dyaXRhYmxlJykgfHwgZGVzYy53cml0YWJsZSlcbiAgICAgICYmICghaGFzKGRlc2MsICdlbnVtZXJhYmxlJykgfHwgZGVzYy5lbnVtZXJhYmxlKVxuICAgICkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9IHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYgKCFBTExfQ09OU1RSVUNUT1JTKSB7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHtcbiAgICBzbGljZTogJHNsaWNlLFxuICAgIHNldDogJHNldCxcbiAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gKCkgeyAvKiBub29wICovIH0sXG4gICAgdG9TdHJpbmc6IGFycmF5VG9TdHJpbmcsXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xuICB9KTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldOyB9XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50c1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKSB7XG4gICAgQ0xBTVBFRCA9ICEhQ0xBTVBFRDtcbiAgICB2YXIgTkFNRSA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBLRVk7XG4gICAgdmFyIFNFVFRFUiA9ICdzZXQnICsgS0VZO1xuICAgIHZhciBUeXBlZEFycmF5ID0gZ2xvYmFsW05BTUVdO1xuICAgIHZhciBCYXNlID0gVHlwZWRBcnJheSB8fCB7fTtcbiAgICB2YXIgVEFDID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KTtcbiAgICB2YXIgRk9SQ0VEID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlY7XG4gICAgdmFyIE8gPSB7fTtcbiAgICB2YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdO1xuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhmZiA/IDB4ZmYgOiB2YWx1ZSAmIDB4ZmY7XG4gICAgICBkYXRhLnZbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCB2YWx1ZSwgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICB2YXIgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5KDEpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSkgfHwgISRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheSgxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgcmV0dXJuIG5ldyBCYXNlKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5KSkgaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XG4gICAgICBpZiAoIUxJQlJBUlkpIFR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xuICAgIH1cbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl07XG4gICAgdmFyIENPUlJFQ1RfSVRFUl9OQU1FID0gISEkbmF0aXZlSXRlcmF0b3JcbiAgICAgICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpO1xuICAgIHZhciAkaXRlcmF0b3IgPSAkaXRlcmF0b3JzLnZhbHVlcztcbiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTtcblxuICAgIGlmIChDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIHtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5BTUU7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xuICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTXG4gICAgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgQmFzZS5vZi5jYWxsKFR5cGVkQXJyYXksIDEpOyB9KSwgTkFNRSwge1xuICAgICAgZnJvbTogJGZyb20sXG4gICAgICBvZjogJG9mXG4gICAgfSk7XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTtcblxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRF9TRVQsIE5BTUUsIHsgc2V0OiAkc2V0IH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xuXG4gICAgaWYgKCFMSUJSQVJZICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZykgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyA9IGFycmF5VG9TdHJpbmc7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7XG4gICAgfSksIE5BTUUsIHsgc2xpY2U6ICRzbGljZSB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xuICAgIH0pKSwgTkFNRSwgeyB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nIH0pO1xuXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7XG4gICAgaWYgKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4ISc7XG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xudmFyICRPRkZTRVQgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUgKGkgPCBsKSB7XG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmUgPSByZXF1aXJlKCcuL19yZXBsYWNlcicpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZ0V4cCcsIHsgZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpIHsgcmV0dXJuICRyZShpdCk7IH0gfSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsIi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywgeyBub3c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9IH0pO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIEhBU19JTlNUQU5DRSA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSkgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59IH0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xuIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xuIiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIEJhc2UgPSAkTnVtYmVyO1xudmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbnZhciBCUk9LRU5fQ09GID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSkge1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufVxuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbiAoJGlzRXh0ZW5zaWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxuICAgICAgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAgIC8vIHdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9fYmluZCcpO1xudmFyIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW107ICAgICAgLy8ga2V5c1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBpdGVyYXRlZCkga2V5cy5wdXNoKGtleSk7XG59O1xucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGtleXMgPSB0aGF0Ll9rO1xuICB2YXIga2V5O1xuICBkbyB7XG4gICAgaWYgKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfSB3aGlsZSAoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XG4gIHJldHVybiB7IHZhbHVlOiBrZXksIGRvbmU6IGZhbHNlIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuIiwiLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoJHByZXZlbnRFeHRlbnNpb25zKSAkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRtYXRjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkcmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICBmdW5jdGlvbiBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRzZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG52YXIgJG1pbiA9IE1hdGgubWluO1xudmFyICRwdXNoID0gW10ucHVzaDtcbnZhciAkU1BMSVQgPSAnc3BsaXQnO1xudmFyIExFTkdUSCA9ICdsZW5ndGgnO1xudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG52YXIgU1VQUE9SVFNfWSA9ICEhKGZ1bmN0aW9uICgpIHsgdHJ5IHsgcmV0dXJuIG5ldyBSZWdFeHAoJ3gnLCAneScpOyB9IGNhdGNoIChlKSB7fSB9KSgpO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiAkc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiAkc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGludGVybmFsU3BsaXQgPSAkc3BsaXQ7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gJHNwbGl0KTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAoU1VQUE9SVFNfWSA/ICd5JyA6ICdnJyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gMHhmZmZmZmZmZiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBTVVBQT1JUU19ZID8gcSA6IDA7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFNVUFBPUlRTX1kgPyBTIDogUy5zbGljZShxKSk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gJG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEEucHVzaChTLnNsaWNlKHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIEEucHVzaCh6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBLnB1c2goUy5zbGljZShwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcbnZhciAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aCk7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgdG1wID0ge307XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3OyB9KSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBXRUFLX1NFVCA9ICdXZWFrU2V0JztcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX1NFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19TRVQpLCB2YWx1ZSwgdHJ1ZSk7XG4gIH1cbn0sIHdlYWssIGZhbHNlLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4sIEE7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXRNYXAnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0dGVuJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgcHJvY2VzcyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnByb2Nlc3M7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge1xuICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKSB7XG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpIHtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnTWFwJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJykgfSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsYW1wOiBmdW5jdGlvbiBjbGFtcCh4LCBsb3dlciwgdXBwZXIpIHtcbiAgICByZXR1cm4gTWF0aC5taW4odXBwZXIsIE1hdGgubWF4KGxvd2VyLCB4KSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBERUdfUEVSX1JBRDogTWF0aC5QSSAvIDE4MCB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogUkFEX1BFUl9ERUc7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzY2FsZSA9IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKTtcbnZhciBmcm91bmQgPSByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZzY2FsZTogZnVuY3Rpb24gZnNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaWFkZGg6IGZ1bmN0aW9uIGlhZGRoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSArICh5MSA+Pj4gMCkgKyAoKCR4MCAmICR5MCB8ICgkeDAgfCAkeTApICYgfigkeDAgKyAkeTAgPj4+IDApKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaXN1Ymg6IGZ1bmN0aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSAtICh5MSA+Pj4gMCkgLSAoKH4keDAgJiAkeTAgfCB+KCR4MCBeICR5MCkgJiAkeDAgLSAkeTAgPj4+IDApID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgUkFEX1BFUl9ERUc6IDE4MCAvIE1hdGguUEkgfSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIERFR19QRVJfUkFEID0gTWF0aC5QSSAvIDE4MDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICByYWRpYW5zOiBmdW5jdGlvbiByYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIERFR19QRVJfUkFEO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2NhbGU6IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKSB9KTtcbiIsIi8vIGh0dHA6Ly9qZmJhc3RpZW4uZ2l0aHViLmlvL3BhcGVycy9NYXRoLnNpZ25iaXQuaHRtbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduYml0OiBmdW5jdGlvbiBzaWduYml0KHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgIT0geCA/IHggOiB4ID09IDAgPyAxIC8geCA9PSBJbmZpbml0eSA6IHggPiAwO1xufSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+Pj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjMgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5zZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIE9CU0VSVkFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIFJFVFVSTiA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSkgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKSByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gbmV3IEFycmF5KGwpOyBpIDwgbDspIGl0ZW1zW2ldID0gYXJndW1lbnRzW2krK107XG4gICAgcmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbal0pO1xuICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IE9ic2VydmFibGU6ICRPYnNlcnZhYmxlIH0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdPYnNlcnZhYmxlJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1Byb21pc2UnLCB7ICd0cnknOiBmdW5jdGlvbiAoY2FsbGJhY2tmbikge1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gcGVyZm9ybShjYWxsYmFja2ZuKTtcbiAgKHJlc3VsdC5lID8gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0IDogcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkocmVzdWx0LnYpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcDtcbnZhciBzdG9yZSA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoeyBkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICB2YXIgdGFyZ2V0S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgaWYgKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKG1ldGFkYXRhTWFwLnNpemUpIHJldHVybiB0cnVlO1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG59IH0pO1xuIiwidmFyIFNldCA9IHJlcXVpcmUoJy4vZXM2LnNldCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG52YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGhhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgJG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b01ldGFLZXkgPSAkbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSAkbWV0YWRhdGEuc2V0O1xuXG4kbWV0YWRhdGEuZXhwKHsgbWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn0gfSk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnU2V0Jyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1NldCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAocmVnZXhwLCBzdHJpbmcpIHtcbiAgdGhpcy5fciA9IHJlZ2V4cDtcbiAgdGhpcy5fcyA9IHN0cmluZztcbn07XG5cbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbCB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZiAoIWlzUmVnRXhwKHJlZ2V4cCkpIHRocm93IFR5cGVFcnJvcihyZWdleHAgKyAnIGlzIG5vdCBhIHJlZ2V4cCEnKTtcbiAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICB2YXIgZmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cFByb3RvID8gU3RyaW5nKHJlZ2V4cC5mbGFncykgOiBnZXRGbGFncy5jYWxsKHJlZ2V4cCk7XG4gICAgdmFyIHJ4ID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KSwgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCksICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N5c3RlbScsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0LmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnV2Vha1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha1NldCcpO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuIiwicmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaWFkZGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pc3ViaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmltdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UudHJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFzYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTtcbiIsIi8qZ2xvYmFsIEFjdGl2ZVhPYmplY3QsIHdpbmRvdywgY29uc29sZSwgZGVmaW5lLCBtb2R1bGUsIGpRdWVyeSAqL1xuLy9qc2hpbnQgdW51c2VkOmZhbHNlLCBzdHJpY3Q6IGZhbHNlXG5cbi8qXG4gICAgUERGT2JqZWN0IHYyLjEuMVxuICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9waXB3ZXJrcy9QREZPYmplY3RcbiAgICBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxOCBQaGlsaXAgSHV0Y2hpc29uXG4gICAgTUlULXN0eWxlIGxpY2Vuc2U6IGh0dHA6Ly9waXB3ZXJrcy5taXQtbGljZW5zZS5vcmcvXG4gICAgVU1EIG1vZHVsZSBwYXR0ZXJuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci90ZW1wbGF0ZXMvcmV0dXJuRXhwb3J0cy5qc1xuKi9cblxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXRcbiAgICAgICAgLy8gb25seSBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG4gICAgICAgIC8vIGxpa2UgTm9kZS5cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICAgICAgcm9vdC5QREZPYmplY3QgPSBmYWN0b3J5KCk7XG4gIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgLy9qc2hpbnQgdW51c2VkOnRydWVcblxuICAgIC8vUERGT2JqZWN0IGlzIGRlc2lnbmVkIGZvciBjbGllbnQtc2lkZSAoYnJvd3NlcnMpLCBub3Qgc2VydmVyLXNpZGUgKG5vZGUpXG4gICAgLy9XaWxsIGNob2tlIG9uIHVuZGVmaW5lZCBuYXZpZ2F0b3IgYW5kIHdpbmRvdyB2YXJzIHdoZW4gcnVuIG9uIHNlcnZlclxuICAgIC8vUmV0dXJuIGJvb2xlYW4gZmFsc2UgYW5kIGV4aXQgZnVuY3Rpb24gd2hlbiBydW5uaW5nIHNlcnZlci1zaWRlXG5cbiAgICBpZih0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiBuYXZpZ2F0b3IgPT09IFwidW5kZWZpbmVkXCIpeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIHZhciBwZGZvYmplY3R2ZXJzaW9uID0gXCIyLjEuMVwiLFxuICAgICAgICB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LFxuXG4gICAgICAgIC8vZGVjbGFyZSBib29sZWFuc1xuICAgICAgICBzdXBwb3J0c1BERnMsXG4gICAgICAgIGlzSUUsXG4gICAgICAgIHN1cHBvcnRzUGRmTWltZVR5cGUgPSAodHlwZW9mIG5hdmlnYXRvci5taW1lVHlwZXNbJ2FwcGxpY2F0aW9uL3BkZiddICE9PSBcInVuZGVmaW5lZFwiKSxcbiAgICAgICAgc3VwcG9ydHNQZGZBY3RpdmVYLFxuICAgICAgICBpc01vZGVybkJyb3dzZXIgPSAoZnVuY3Rpb24gKCl7IHJldHVybiAodHlwZW9mIHdpbmRvdy5Qcm9taXNlICE9PSBcInVuZGVmaW5lZFwiKTsgfSkoKSxcbiAgICAgICAgaXNGaXJlZm94ID0gKGZ1bmN0aW9uICgpeyByZXR1cm4gKHVhLmluZGV4T2YoXCJpcmVmb3hcIikgIT09IC0xKTsgfSApKCksXG4gICAgICAgIGlzRmlyZWZveFdpdGhQREZKUyA9IChmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgIC8vRmlyZWZveCBzdGFydGVkIHNoaXBwaW5nIFBERi5qcyBpbiBGaXJlZm94IDE5LlxuICAgICAgICAgICAgLy9JZiB0aGlzIGlzIEZpcmVmb3ggMTkgb3IgZ3JlYXRlciwgYXNzdW1lIFBERi5qcyBpcyBhdmFpbGFibGVcbiAgICAgICAgICAgIGlmKCFpc0ZpcmVmb3gpeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgIC8vcGFyc2UgdXNlckFnZW50IHN0cmluZyB0byBnZXQgcmVsZWFzZSB2ZXJzaW9uIChcInJ2XCIpXG4gICAgICAgICAgICAvL2V4OiBNb3ppbGxhLzUuMCAoTWFjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAxMC4xMjsgcnY6NTcuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC81Ny4wXG4gICAgICAgICAgICByZXR1cm4gKHBhcnNlSW50KHVhLnNwbGl0KFwicnY6XCIpWzFdLnNwbGl0KFwiLlwiKVswXSwgMTApID4gMTgpO1xuICAgICAgICB9KSgpLFxuICAgICAgICBpc0lPUyA9IChmdW5jdGlvbiAoKXsgcmV0dXJuICgvaXBob25lfGlwYWR8aXBvZC9pLnRlc3QodWEudG9Mb3dlckNhc2UoKSkpOyB9KSgpLFxuXG4gICAgICAgIC8vZGVjbGFyZSBmdW5jdGlvbnNcbiAgICAgICAgY3JlYXRlQVhPLFxuICAgICAgICBidWlsZEZyYWdtZW50U3RyaW5nLFxuICAgICAgICBsb2csXG4gICAgICAgIGVtYmVkRXJyb3IsXG4gICAgICAgIGVtYmVkLFxuICAgICAgICBnZXRUYXJnZXRFbGVtZW50LFxuICAgICAgICBnZW5lcmF0ZVBERkpTaWZyYW1lLFxuICAgICAgICBnZW5lcmF0ZUVtYmVkRWxlbWVudDtcblxuXG4gICAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgIFN1cHBvcnRpbmcgZnVuY3Rpb25zXG4gICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gICAgY3JlYXRlQVhPID0gZnVuY3Rpb24gKHR5cGUpe1xuICAgICAgICB2YXIgYXg7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBheCA9IG5ldyBBY3RpdmVYT2JqZWN0KHR5cGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBheCA9IG51bGw7IC8vZW5zdXJlIGF4IHJlbWFpbnMgbnVsbFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBheDtcbiAgICB9O1xuXG4gICAgLy9JRTExIHN0aWxsIHVzZXMgQWN0aXZlWCBmb3IgQWRvYmUgUmVhZGVyLCBidXQgSUUgMTEgZG9lc24ndCBleHBvc2VcbiAgICAvL3dpbmRvdy5BY3RpdmVYT2JqZWN0IHRoZSBzYW1lIHdheSBwcmV2aW91cyB2ZXJzaW9ucyBvZiBJRSBkaWRcbiAgICAvL3dpbmRvdy5BY3RpdmVYT2JqZWN0IHdpbGwgZXZhbHVhdGUgdG8gZmFsc2UgaW4gSUUgMTEsIGJ1dCBcIkFjdGl2ZVhPYmplY3RcIiBpbiB3aW5kb3cgZXZhbHVhdGVzIHRvIHRydWVcbiAgICAvL3NvIGNoZWNrIHRoZSBmaXJzdCBvbmUgZm9yIG9sZGVyIElFLCBhbmQgdGhlIHNlY29uZCBmb3IgSUUxMVxuICAgIC8vRldJVywgTVMgRWRnZSAocmVwbGFjaW5nIElFMTEpIGRvZXMgbm90IHN1cHBvcnQgQWN0aXZlWCBhdCBhbGwsIGJvdGggd2lsbCBldmFsdWF0ZSBmYWxzZVxuICAgIC8vQ29uc3RydWN0ZWQgYXMgYSBtZXRob2QgKG5vdCBhIHByb3ApIHRvIGF2b2lkIHVubmVjY2VzYXJyeSBvdmVyaGVhZCAtLSB3aWxsIG9ubHkgYmUgZXZhbHVhdGVkIGlmIG5lZWRlZFxuICAgIGlzSUUgPSBmdW5jdGlvbiAoKXsgcmV0dXJuICEhKHdpbmRvdy5BY3RpdmVYT2JqZWN0IHx8IFwiQWN0aXZlWE9iamVjdFwiIGluIHdpbmRvdyk7IH07XG5cbiAgICAvL0lmIGVpdGhlciBBY3RpdmVYIHN1cHBvcnQgZm9yIFwiQWNyb1BERi5QREZcIiBvciBcIlBERi5QZGZDdHJsXCIgYXJlIGZvdW5kLCByZXR1cm4gdHJ1ZVxuICAgIC8vQ29uc3RydWN0ZWQgYXMgYSBtZXRob2QgKG5vdCBhIHByb3ApIHRvIGF2b2lkIHVubmVjY2VzYXJyeSBvdmVyaGVhZCAtLSB3aWxsIG9ubHkgYmUgZXZhbHVhdGVkIGlmIG5lZWRlZFxuICAgIHN1cHBvcnRzUGRmQWN0aXZlWCA9IGZ1bmN0aW9uICgpeyByZXR1cm4gISEoY3JlYXRlQVhPKFwiQWNyb1BERi5QREZcIikgfHwgY3JlYXRlQVhPKFwiUERGLlBkZkN0cmxcIikpOyB9O1xuXG4gICAgLy9EZXRlcm1pbmVzIHdoZXRoZXIgUERGIHN1cHBvcnQgaXMgYXZhaWxhYmxlXG4gICAgc3VwcG9ydHNQREZzID0gKFxuICAgICAgICAvL2FzIG9mIGlPUyAxMiwgaW5saW5lIFBERiByZW5kZXJpbmcgaXMgc3RpbGwgbm90IHN1cHBvcnRlZCBpbiBTYWZhcmkgb3IgbmF0aXZlIHdlYnZpZXdcbiAgICAgICAgLy8zcmQtcGFydHkgYnJvd3NlcnMgKGVnIENocm9tZSwgRmlyZWZveCkgdXNlIEFwcGxlJ3Mgd2VidmlldyBmb3IgcmVuZGVyaW5nLCBhbmQgdGh1cyB0aGUgc2FtZSByZXN1bHQgYXMgU2FmYXJpXG4gICAgICAgIC8vVGhlcmVmb3JlIGlmIGlPUywgd2Ugc2hhbGwgYXNzdW1lIHRoYXQgUERGIHN1cHBvcnQgaXMgbm90IGF2YWlsYWJsZVxuICAgICAgICAhaXNJT1MgJiYgKFxuICAgICAgICAgICAgLy9Nb2Rlcm4gdmVyc2lvbnMgb2YgRmlyZWZveCBjb21lIGJ1bmRsZWQgd2l0aCBQREZKU1xuICAgICAgICAgICAgaXNGaXJlZm94V2l0aFBERkpTIHx8IFxuICAgICAgICAgICAgLy9Ccm93c2VycyB0aGF0IHN0aWxsIHN1cHBvcnQgdGhlIG9yaWdpbmFsIE1JTUUgdHlwZSBjaGVja1xuICAgICAgICAgICAgc3VwcG9ydHNQZGZNaW1lVHlwZSB8fCAoXG4gICAgICAgICAgICAgICAgLy9QaXR5IHRoZSBwb29yIHNvdWxzIHN0aWxsIHVzaW5nIElFXG4gICAgICAgICAgICAgICAgaXNJRSgpICYmIHN1cHBvcnRzUGRmQWN0aXZlWCgpXG4gICAgICAgICAgICApXG4gICAgICAgIClcbiAgICApO1xuXG4gICAgLy9DcmVhdGUgYSBmcmFnbWVudCBpZGVudGlmaWVyIGZvciB1c2luZyBQREYgT3BlbiBwYXJhbWV0ZXJzIHdoZW4gZW1iZWRkaW5nIFBERlxuICAgIGJ1aWxkRnJhZ21lbnRTdHJpbmcgPSBmdW5jdGlvbihwZGZQYXJhbXMpe1xuXG4gICAgICAgIHZhciBzdHJpbmcgPSBcIlwiLFxuICAgICAgICAgICAgcHJvcDtcblxuICAgICAgICBpZihwZGZQYXJhbXMpe1xuXG4gICAgICAgICAgICBmb3IgKHByb3AgaW4gcGRmUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBkZlBhcmFtcy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gZW5jb2RlVVJJQ29tcG9uZW50KHByb3ApICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQocGRmUGFyYW1zW3Byb3BdKSArIFwiJlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9UaGUgc3RyaW5nIHdpbGwgYmUgZW1wdHkgaWYgbm8gUERGIFBhcmFtcyBmb3VuZFxuICAgICAgICAgICAgaWYoc3RyaW5nKXtcblxuICAgICAgICAgICAgICAgIHN0cmluZyA9IFwiI1wiICsgc3RyaW5nO1xuXG4gICAgICAgICAgICAgICAgLy9SZW1vdmUgbGFzdCBhbXBlcnNhbmRcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMCwgc3RyaW5nLmxlbmd0aCAtIDEpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHJpbmc7XG5cbiAgICB9O1xuXG4gICAgbG9nID0gZnVuY3Rpb24gKG1zZyl7XG4gICAgICAgIGlmKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUubG9nKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1BERk9iamVjdF0gXCIgKyBtc2cpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGVtYmVkRXJyb3IgPSBmdW5jdGlvbiAobXNnKXtcbiAgICAgICAgbG9nKG1zZyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgZ2V0VGFyZ2V0RWxlbWVudCA9IGZ1bmN0aW9uICh0YXJnZXRTZWxlY3Rvcil7XG5cbiAgICAgICAgLy9EZWZhdWx0IHRvIGJvZHkgZm9yIGZ1bGwtYnJvd3NlciBQREZcbiAgICAgICAgdmFyIHRhcmdldE5vZGUgPSBkb2N1bWVudC5ib2R5O1xuXG4gICAgICAgIC8vSWYgYSB0YXJnZXRTZWxlY3RvciBpcyBzcGVjaWZpZWQsIGNoZWNrIHRvIHNlZSB3aGV0aGVyXG4gICAgICAgIC8vaXQncyBwYXNzaW5nIGEgc2VsZWN0b3IsIGpRdWVyeSBvYmplY3QsIG9yIGFuIEhUTUwgZWxlbWVudFxuXG4gICAgICAgIGlmKHR5cGVvZiB0YXJnZXRTZWxlY3RvciA9PT0gXCJzdHJpbmdcIil7XG5cbiAgICAgICAgICAgIC8vSXMgQ1NTIHNlbGVjdG9yXG4gICAgICAgICAgICB0YXJnZXROb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRTZWxlY3Rvcik7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIHRhcmdldFNlbGVjdG9yIGluc3RhbmNlb2YgalF1ZXJ5ICYmIHRhcmdldFNlbGVjdG9yLmxlbmd0aCkge1xuXG4gICAgICAgICAgICAvL0lzIGpRdWVyeSBlbGVtZW50LiBFeHRyYWN0IEhUTUwgbm9kZVxuICAgICAgICAgICAgdGFyZ2V0Tm9kZSA9IHRhcmdldFNlbGVjdG9yLmdldCgwKTtcblxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0YXJnZXRTZWxlY3Rvci5ub2RlVHlwZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0YXJnZXRTZWxlY3Rvci5ub2RlVHlwZSA9PT0gMSl7XG5cbiAgICAgICAgICAgIC8vSXMgSFRNTCBlbGVtZW50XG4gICAgICAgICAgICB0YXJnZXROb2RlID0gdGFyZ2V0U2VsZWN0b3I7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXROb2RlO1xuXG4gICAgfTtcblxuICAgIGdlbmVyYXRlUERGSlNpZnJhbWUgPSBmdW5jdGlvbiAodGFyZ2V0Tm9kZSwgdXJsLCBwZGZPcGVuRnJhZ21lbnQsIFBERkpTX1VSTCwgaWQpe1xuXG4gICAgICAgIHZhciBmdWxsVVJMID0gUERGSlNfVVJMICsgXCI/ZmlsZT1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpICsgcGRmT3BlbkZyYWdtZW50O1xuICAgICAgICB2YXIgc2Nyb2xsZml4ID0gKGlzSU9TKSA/IFwiLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoOyBvdmVyZmxvdy15OiBzY3JvbGw7IFwiIDogXCJvdmVyZmxvdzogaGlkZGVuOyBcIjtcbiAgICAgICAgdmFyIGlmcmFtZSA9IFwiPGRpdiBzdHlsZT0nXCIgKyBzY3JvbGxmaXggKyBcInBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyByaWdodDogMDsgYm90dG9tOiAwOyBsZWZ0OiAwOyc+PGlmcmFtZSAgXCIgKyBpZCArIFwiIHNyYz0nXCIgKyBmdWxsVVJMICsgXCInIHN0eWxlPSdib3JkZXI6IG5vbmU7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7JyBmcmFtZWJvcmRlcj0nMCc+PC9pZnJhbWU+PC9kaXY+XCI7XG4gICAgICAgIHRhcmdldE5vZGUuY2xhc3NOYW1lICs9IFwiIHBkZm9iamVjdC1jb250YWluZXJcIjtcbiAgICAgICAgdGFyZ2V0Tm9kZS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgICAgICAgdGFyZ2V0Tm9kZS5zdHlsZS5vdmVyZmxvdyA9IFwiYXV0b1wiO1xuICAgICAgICB0YXJnZXROb2RlLmlubmVySFRNTCA9IGlmcmFtZTtcbiAgICAgICAgcmV0dXJuIHRhcmdldE5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpZnJhbWVcIilbMF07XG5cbiAgICB9O1xuXG4gICAgZ2VuZXJhdGVFbWJlZEVsZW1lbnQgPSBmdW5jdGlvbiAodGFyZ2V0Tm9kZSwgdGFyZ2V0U2VsZWN0b3IsIHVybCwgcGRmT3BlbkZyYWdtZW50LCB3aWR0aCwgaGVpZ2h0LCBpZCl7XG5cbiAgICAgICAgdmFyIHN0eWxlID0gXCJcIjtcblxuICAgICAgICBpZih0YXJnZXRTZWxlY3RvciAmJiB0YXJnZXRTZWxlY3RvciAhPT0gZG9jdW1lbnQuYm9keSl7XG4gICAgICAgICAgICBzdHlsZSA9IFwid2lkdGg6IFwiICsgd2lkdGggKyBcIjsgaGVpZ2h0OiBcIiArIGhlaWdodCArIFwiO1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3R5bGUgPSBcInBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyByaWdodDogMDsgYm90dG9tOiAwOyBsZWZ0OiAwOyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlO1wiO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0Tm9kZS5jbGFzc05hbWUgKz0gXCIgcGRmb2JqZWN0LWNvbnRhaW5lclwiO1xuICAgICAgICB0YXJnZXROb2RlLmlubmVySFRNTCA9IFwiPGVtYmVkIFwiICsgaWQgKyBcIiBjbGFzcz0ncGRmb2JqZWN0JyBzcmM9J1wiICsgdXJsICsgcGRmT3BlbkZyYWdtZW50ICsgXCInIHR5cGU9J2FwcGxpY2F0aW9uL3BkZicgc3R5bGU9J292ZXJmbG93OiBhdXRvOyBcIiArIHN0eWxlICsgXCInLz5cIjtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0Tm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImVtYmVkXCIpWzBdO1xuXG4gICAgfTtcblxuICAgIGVtYmVkID0gZnVuY3Rpb24odXJsLCB0YXJnZXRTZWxlY3Rvciwgb3B0aW9ucyl7XG5cbiAgICAgICAgLy9FbnN1cmUgVVJMIGlzIGF2YWlsYWJsZS4gSWYgbm90LCBleGl0IG5vdy5cbiAgICAgICAgaWYodHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIil7IHJldHVybiBlbWJlZEVycm9yKFwiVVJMIGlzIG5vdCB2YWxpZFwiKTsgfVxuXG4gICAgICAgIC8vSWYgdGFyZ2V0U2VsZWN0b3IgaXMgbm90IGRlZmluZWQsIGNvbnZlcnQgdG8gYm9vbGVhblxuICAgICAgICB0YXJnZXRTZWxlY3RvciA9ICh0eXBlb2YgdGFyZ2V0U2VsZWN0b3IgIT09IFwidW5kZWZpbmVkXCIpID8gdGFyZ2V0U2VsZWN0b3IgOiBmYWxzZTtcblxuICAgICAgICAvL0Vuc3VyZSBvcHRpb25zIG9iamVjdCBpcyBub3QgdW5kZWZpbmVkIC0tIGVuYWJsZXMgZWFzaWVyIGVycm9yIGNoZWNraW5nIGJlbG93XG4gICAgICAgIG9wdGlvbnMgPSAodHlwZW9mIG9wdGlvbnMgIT09IFwidW5kZWZpbmVkXCIpID8gb3B0aW9ucyA6IHt9O1xuXG4gICAgICAgIC8vR2V0IHBhc3NlZCBvcHRpb25zLCBvciBzZXQgcmVhc29uYWJsZSBkZWZhdWx0c1xuICAgICAgICB2YXIgaWQgPSAob3B0aW9ucy5pZCAmJiB0eXBlb2Ygb3B0aW9ucy5pZCA9PT0gXCJzdHJpbmdcIikgPyBcImlkPSdcIiArIG9wdGlvbnMuaWQgKyBcIidcIiA6IFwiXCIsXG4gICAgICAgICAgICBwYWdlID0gKG9wdGlvbnMucGFnZSkgPyBvcHRpb25zLnBhZ2UgOiBmYWxzZSxcbiAgICAgICAgICAgIHBkZk9wZW5QYXJhbXMgPSAob3B0aW9ucy5wZGZPcGVuUGFyYW1zKSA/IG9wdGlvbnMucGRmT3BlblBhcmFtcyA6IHt9LFxuICAgICAgICAgICAgZmFsbGJhY2tMaW5rID0gKHR5cGVvZiBvcHRpb25zLmZhbGxiYWNrTGluayAhPT0gXCJ1bmRlZmluZWRcIikgPyBvcHRpb25zLmZhbGxiYWNrTGluayA6IHRydWUsXG4gICAgICAgICAgICB3aWR0aCA9IChvcHRpb25zLndpZHRoKSA/IG9wdGlvbnMud2lkdGggOiBcIjEwMCVcIixcbiAgICAgICAgICAgIGhlaWdodCA9IChvcHRpb25zLmhlaWdodCkgPyBvcHRpb25zLmhlaWdodCA6IFwiMTAwJVwiLFxuICAgICAgICAgICAgYXNzdW1wdGlvbk1vZGUgPSAodHlwZW9mIG9wdGlvbnMuYXNzdW1wdGlvbk1vZGUgPT09IFwiYm9vbGVhblwiKSA/IG9wdGlvbnMuYXNzdW1wdGlvbk1vZGUgOiB0cnVlLFxuICAgICAgICAgICAgZm9yY2VQREZKUyA9ICh0eXBlb2Ygb3B0aW9ucy5mb3JjZVBERkpTID09PSBcImJvb2xlYW5cIikgPyBvcHRpb25zLmZvcmNlUERGSlMgOiBmYWxzZSxcbiAgICAgICAgICAgIFBERkpTX1VSTCA9IChvcHRpb25zLlBERkpTX1VSTCkgPyBvcHRpb25zLlBERkpTX1VSTCA6IGZhbHNlLFxuICAgICAgICAgICAgdGFyZ2V0Tm9kZSA9IGdldFRhcmdldEVsZW1lbnQodGFyZ2V0U2VsZWN0b3IpLFxuICAgICAgICAgICAgZmFsbGJhY2tIVE1MID0gXCJcIixcbiAgICAgICAgICAgIHBkZk9wZW5GcmFnbWVudCA9IFwiXCIsXG4gICAgICAgICAgICBmYWxsYmFja0hUTUxfZGVmYXVsdCA9IFwiPHA+VGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgaW5saW5lIFBERnMuIFBsZWFzZSBkb3dubG9hZCB0aGUgUERGIHRvIHZpZXcgaXQ6IDxhIGhyZWY9J1t1cmxdJz5Eb3dubG9hZCBQREY8L2E+PC9wPlwiO1xuXG4gICAgICAgIC8vSWYgdGFyZ2V0IGVsZW1lbnQgaXMgc3BlY2lmaWVkIGJ1dCBpcyBub3QgdmFsaWQsIGV4aXQgd2l0aG91dCBkb2luZyBhbnl0aGluZ1xuICAgICAgICBpZighdGFyZ2V0Tm9kZSl7IHJldHVybiBlbWJlZEVycm9yKFwiVGFyZ2V0IGVsZW1lbnQgY2Fubm90IGJlIGRldGVybWluZWRcIik7IH1cblxuXG4gICAgICAgIC8vcGFnZSBvcHRpb24gb3ZlcnJpZGVzIHBkZk9wZW5QYXJhbXMsIGlmIGZvdW5kXG4gICAgICAgIGlmKHBhZ2Upe1xuICAgICAgICAgICAgcGRmT3BlblBhcmFtcy5wYWdlID0gcGFnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vU3RyaW5naWZ5IG9wdGlvbmFsIEFkb2JlIHBhcmFtcyBmb3Igb3BlbmluZyBkb2N1bWVudCAoYXMgZnJhZ21lbnQgaWRlbnRpZmllcilcbiAgICAgICAgcGRmT3BlbkZyYWdtZW50ID0gYnVpbGRGcmFnbWVudFN0cmluZyhwZGZPcGVuUGFyYW1zKTtcblxuICAgICAgICAvL0RvIHRoZSBkYW5jZVxuXG4gICAgICAgIC8vSWYgdGhlIGZvcmNlUERGSlMgb3B0aW9uIGlzIGludm9rZWQsIHNraXAgZXZlcnl0aGluZyBlbHNlIGFuZCBlbWJlZCBhcyBkaXJlY3RlZFxuICAgICAgICBpZihmb3JjZVBERkpTICYmIFBERkpTX1VSTCl7XG5cbiAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZVBERkpTaWZyYW1lKHRhcmdldE5vZGUsIHVybCwgcGRmT3BlbkZyYWdtZW50LCBQREZKU19VUkwsIGlkKTtcblxuICAgICAgICAvL0lmIHRyYWRpdGlvbmFsIHN1cHBvcnQgaXMgcHJvdmlkZWQsIG9yIGlmIHRoaXMgaXMgYSBtb2Rlcm4gYnJvd3NlciBhbmQgbm90IGlPUyAoc2VlIGNvbW1lbnQgZm9yIHN1cHBvcnRzUERGcyBkZWNsYXJhdGlvbilcbiAgICAgICAgfSBlbHNlIGlmKHN1cHBvcnRzUERGcyB8fCAoYXNzdW1wdGlvbk1vZGUgJiYgaXNNb2Rlcm5Ccm93c2VyICYmICFpc0lPUykpe1xuXG4gICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVFbWJlZEVsZW1lbnQodGFyZ2V0Tm9kZSwgdGFyZ2V0U2VsZWN0b3IsIHVybCwgcGRmT3BlbkZyYWdtZW50LCB3aWR0aCwgaGVpZ2h0LCBpZCk7XG5cbiAgICAgICAgLy9JZiBldmVyeXRoaW5nIGVsc2UgaGFzIGZhaWxlZCBhbmQgYSBQREZKUyBmYWxsYmFjayBpcyBwcm92aWRlZCwgdHJ5IHRvIHVzZSBpdFxuICAgICAgICB9IGVsc2UgaWYoUERGSlNfVVJMKXtcblxuICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlUERGSlNpZnJhbWUodGFyZ2V0Tm9kZSwgdXJsLCBwZGZPcGVuRnJhZ21lbnQsIFBERkpTX1VSTCwgaWQpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIC8vRGlzcGxheSB0aGUgZmFsbGJhY2sgbGluayBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgIGlmKGZhbGxiYWNrTGluayl7XG5cbiAgICAgICAgICAgICAgICBmYWxsYmFja0hUTUwgPSAodHlwZW9mIGZhbGxiYWNrTGluayA9PT0gXCJzdHJpbmdcIikgPyBmYWxsYmFja0xpbmsgOiBmYWxsYmFja0hUTUxfZGVmYXVsdDtcbiAgICAgICAgICAgICAgICB0YXJnZXROb2RlLmlubmVySFRNTCA9IGZhbGxiYWNrSFRNTC5yZXBsYWNlKC9cXFt1cmxcXF0vZywgdXJsKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZW1iZWRFcnJvcihcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGVtYmVkZGVkIFBERnNcIik7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGVtYmVkOiBmdW5jdGlvbiAoYSxiLGMpeyByZXR1cm4gZW1iZWQoYSxiLGMpOyB9LFxuICAgICAgICBwZGZvYmplY3R2ZXJzaW9uOiAoZnVuY3Rpb24gKCkgeyByZXR1cm4gcGRmb2JqZWN0dmVyc2lvbjsgfSkoKSxcbiAgICAgICAgc3VwcG9ydHNQREZzOiAoZnVuY3Rpb24gKCl7IHJldHVybiBzdXBwb3J0c1BERnM7IH0pKClcbiAgICB9O1xuXG59KSk7IiwiLypzZGvnmb3mnb/nmoTnrqHnkIbnsbtcclxuICogQG1vZHVsZSBUS1doaXRlQm9hcmRNYW5hZ2VyXHJcbiAqIEBkZXNjcmlwdGlvbiAgc2Rr5LiO55m95p2/55qE6YCa5L+h566h55CG57G7XHJcbiAqIEBhdXRob3Ig6YKx5bm/55SfXHJcbiAqIEBkYXRlIDIwMTgtMDQtMThcclxuICovXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVEtXaGl0ZUJvYXJkTWFuYWdlciA9IHVuZGVmaW5lZDtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfR2xvYmFsID0gcmVxdWlyZSgnLi91dGlscy9HbG9iYWwnKTtcblxudmFyIF9HbG9iYWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfR2xvYmFsKTtcblxudmFyIF9Db25zdGFudCA9IHJlcXVpcmUoJy4vdXRpbHMvQ29uc3RhbnQnKTtcblxudmFyIF9Db25zdGFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db25zdGFudCk7XG5cbnZhciBfVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL1V0aWxzJyk7XG5cbnZhciBfVXRpbHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXRpbHMpO1xuXG52YXIgX0NvbmZpZ3VyYXRpb24gPSByZXF1aXJlKCcuL3V0aWxzL0NvbmZpZ3VyYXRpb24nKTtcblxudmFyIF9Db25maWd1cmF0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbmZpZ3VyYXRpb24pO1xuXG52YXIgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllciA9IHJlcXVpcmUoJy4vaW50ZXJtZWRpYXRlTGF5ZXIvV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyJyk7XG5cbnZhciBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcik7XG5cbnZhciBfV2hpdGVib2FyZFZpZXcgPSByZXF1aXJlKCcuL3ZpZXcvY29udGFpbmVycy9XaGl0ZWJvYXJkVmlldycpO1xuXG52YXIgX1doaXRlYm9hcmRWaWV3MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1doaXRlYm9hcmRWaWV3KTtcblxudmFyIF9BdWRpb1BsYXllciA9IHJlcXVpcmUoJy4vdmlldy9jb250YWluZXJzL0F1ZGlvUGxheWVyJyk7XG5cbnZhciBfQXVkaW9QbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQXVkaW9QbGF5ZXIpO1xuXG52YXIgX1ZpZGVvUGxheWVyID0gcmVxdWlyZSgnLi92aWV3L2NvbnRhaW5lcnMvVmlkZW9QbGF5ZXInKTtcblxudmFyIF9WaWRlb1BsYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9WaWRlb1BsYXllcik7XG5cbnZhciBfRG9jdW1lbnRUb29sYmFyID0gcmVxdWlyZSgnLi92aWV3L2NvbnRhaW5lcnMvRG9jdW1lbnRUb29sYmFyJyk7XG5cbnZhciBfRG9jdW1lbnRUb29sYmFyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RvY3VtZW50VG9vbGJhcik7XG5cbnZhciBfV2hpdGVib2FyZFRvb2xiYXIgPSByZXF1aXJlKCcuL3ZpZXcvY29udGFpbmVycy9XaGl0ZWJvYXJkVG9vbGJhcicpO1xuXG52YXIgX1doaXRlYm9hcmRUb29sYmFyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1doaXRlYm9hcmRUb29sYmFyKTtcblxudmFyIF9Eb2N1bWVudFJlbWFyayA9IHJlcXVpcmUoJy4vdmlldy9jb250YWluZXJzL0RvY3VtZW50UmVtYXJrJyk7XG5cbnZhciBfRG9jdW1lbnRSZW1hcmsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRG9jdW1lbnRSZW1hcmspO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFRLV2hpdGVCb2FyZE1hbmFnZXJJbm5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKuaehOmAoOWZqCovXG4gICAgZnVuY3Rpb24gVEtXaGl0ZUJvYXJkTWFuYWdlcklubmVyKHJvb20sIHNka1JlY2VpdmVBY3Rpb25Db21tYW5kLCBpc0lubmVyKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUS1doaXRlQm9hcmRNYW5hZ2VySW5uZXIpO1xuXG4gICAgICAgIHRoaXMuY2xhc3NOYW1lID0gJ1RLV2hpdGVCb2FyZE1hbmFnZXJJbm5lcic7IC8v57G755qE5ZCN5a2XXG4gICAgICAgIHRoaXMuaXNJbm5lciA9IGlzSW5uZXI7XG4gICAgICAgIHRoaXMucm9vbSA9IHJvb207XG4gICAgICAgIHRoaXMuc2RrUmVjZWl2ZUFjdGlvbkNvbW1hbmQgPSBzZGtSZWNlaXZlQWN0aW9uQ29tbWFuZDtcbiAgICAgICAgdGhpcy53aGl0ZWJvYXJkVmlld01hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5hd2l0V2hpdGVib2FyZENvbmZpZ3JhdGlvbk1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5yYW5kb21DcmVhdGVFeHRlbmRXaGl0ZWJvYXJkTnVtYmVyID0gMDtcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllclZpZXcgPSB1bmRlZmluZWQ7IC8v6Z+z6aKR5pKt5pS+5ZmoXG4gICAgICAgIHRoaXMudmlkZW9QbGF5ZXJWaWV3ID0gdW5kZWZpbmVkOyAvL+inhumikeaSreaUvuWZqFxuICAgICAgICB0aGlzLmRvY3VtZW50UmVtYXJrVmlld0xpc3QgPSB7fTsgLy/mlofmoaPlpIfms6jop4blm77liJfooahcbiAgICAgICAgdGhpcy5kb2N1bWVudFRvb2xiYXJWaWV3TGlzdCA9IHt9OyAvL+aWh+aho+W3peWFt+adoeWIl+ihqFxuICAgICAgICB0aGlzLndoaXRlYm9hcmRUb29sYmFyVmlld0xpc3QgPSB7fTsgLy/mlofmoaPmoIfms6jlt6XlhbfmnaHliJfooahcbiAgICAgICAgdGhpcy5saXN0ZXJuZXJCYWNrdXBpZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgJ18nICsgTWF0aC5yYW5kb20oKTtcbiAgICAgICAgdGhpcy5wdXJlV2hpdGVib2FyZEZpbGVpbmZvTGlzdCA9IHt9O1xuICAgICAgICB0aGlzLnNhdmVNc2dsaXN0RGF0YSA9IHt9OyAvL+eUqOS6juaUtuWIsG1zZ2xpc3Tmtojmga/ml7blrp7kvovov5jmsqHliJvlu7rvvIzkv53lrZjmlbDmja5cbiAgICAgICAgdGhpcy5zYXZlUHVibXNnRGF0YSA9IHt9OyAvL+eUqOS6juaUtuWIsFB1Ym1zZ+a2iOaBr+aXtuWunuS+i+i/mOayoeWIm+W7uu+8jOS/neWtmOaVsOaNrlxuICAgICAgICB0aGlzLl9yZWdpc3RlckV2ZW50KCk7XG4gICAgICAgIHRoaXMuX2FkZFJvb21FdmVudCgpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhUS1doaXRlQm9hcmRNYW5hZ2VySW5uZXIsIFt7XG4gICAgICAgIGtleTogJ2dldFZlcnNpb24nLFxuXG5cbiAgICAgICAgLyrojrflj5bniYjmnKzlj7cqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmVyc2lvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfQ29uc3RhbnQyLmRlZmF1bHQuV0hJVEVCT0FSRF9TREtfVkVSU0lPTjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5Yib5bu65Li755m95p2/XHJcbiAgICAgICAgKiBAcGFyYW1zIHBhcmVudE5vZGU655m95p2/5a655Zmo6IqC54K5IO+8jCBOb2RlXHJcbiAgICAgICAgKiBAcGFyYW1zIGNvbmZpZ3JhdGlvbjrnmb3mnb/phY3nva7pobkg77yMIEpzb25cclxuICAgICAgICAqIEBwYXJhbXMgcmVjZWl2ZUFjdGlvbkNvbW1hbmQ65o6l5pS255m95p2/6YCa55+l5raI5oGv5Ye95pWwIO+8jCBGdW5jdGlvblxyXG4gICAgICAgICogKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY3JlYXRlTWFpbldoaXRlYm9hcmQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlTWFpbldoaXRlYm9hcmQoKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZG9jdW1lbnQuYm9keTtcblxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIGNvbmZpZ3JhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICAgICAgICB2YXIgcmVjZWl2ZUFjdGlvbkNvbW1hbmQgPSBhcmd1bWVudHNbMl07XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyZW50Tm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50Tm9kZVN0ciA9IHBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhcmVudE5vZGVTdHIpO1xuICAgICAgICAgICAgICAgIGlmICghcGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBMLkxvZ2dlci53YXJuaW5nKCdUaGUgbm9kZSBpZCBjYW5ub3QgYmUgZm91bmQgYnkgbm9kZSBpZCwgYW5kIGNyZWF0ZU1haW5XaGl0ZWJvYXJkIG1ldGhvZCBjYW5ub3QgYmUgcGVyZm9ybWVkICwgZWxlbWVudCBpZCBpcyAnICsgcGFyZW50Tm9kZVN0ciArICcuJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9ICdkZWZhdWx0JztcbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWNyZWF0ZU1haW5XaGl0ZWJvYXJkICBwYXJlbnROb2RlIGFuZCBjb25maWdyYXRpb24gYW5kIHJlY2VpdmVBY3Rpb25Db21tYW5kOicsIHBhcmVudE5vZGUsIGNvbmZpZ3JhdGlvbiwgcmVjZWl2ZUFjdGlvbkNvbW1hbmQpO1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlV2hpdGVib2FyZChwYXJlbnROb2RlLCBpbnN0YW5jZUlkLCBjb25maWdyYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0gJiYgX3RoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0ucmVjZWl2ZUFjdGlvbkNvbW1hbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9kb2N1bWVudFRvb2xiYXJWaWV3TDtcblxuICAgICAgICAgICAgICAgICAgICAoX2RvY3VtZW50VG9vbGJhclZpZXdMID0gX3RoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0pLnJlY2VpdmVBY3Rpb25Db21tYW5kLmFwcGx5KF9kb2N1bWVudFRvb2xiYXJWaWV3TCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmRvY3VtZW50UmVtYXJrVmlld0xpc3RbaW5zdGFuY2VJZF0gJiYgX3RoaXMuZG9jdW1lbnRSZW1hcmtWaWV3TGlzdFtpbnN0YW5jZUlkXS5yZWNlaXZlQWN0aW9uQ29tbWFuZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2RvY3VtZW50UmVtYXJrVmlld0xpO1xuXG4gICAgICAgICAgICAgICAgICAgIChfZG9jdW1lbnRSZW1hcmtWaWV3TGkgPSBfdGhpcy5kb2N1bWVudFJlbWFya1ZpZXdMaXN0W2luc3RhbmNlSWRdKS5yZWNlaXZlQWN0aW9uQ29tbWFuZC5hcHBseShfZG9jdW1lbnRSZW1hcmtWaWV3TGksIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVjZWl2ZUFjdGlvbkNvbW1hbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzSW5uZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVBY3Rpb25Db21tYW5kLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSAndmlld1N0YXRlVXBkYXRlJyB8fCBhY3Rpb24gPT09ICdtZWRpYVBsYXllck5vdGljZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlQWN0aW9uQ29tbWFuZC5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVmlldyA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRWaWV3ICYmIHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLmlzTG9hZERvY3VtZW50VG9vbEJhcikge1xuICAgICAgICAgICAgICAgIHZhciBkb2N1bWVudFRvb2xCYXJQYXJlbnROb2RlID0gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuZG9jdW1lbnRUb29sQmFyQ29uZmlnLnBhcmVudE5vZGUgfHwgd2hpdGVib2FyZFZpZXcuZ2V0V2hpdGVib2FyZFJvb3RFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVEb2N1bWVudFRvb2xCYXIoZG9jdW1lbnRUb29sQmFyUGFyZW50Tm9kZSwgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuZG9jdW1lbnRUb29sQmFyQ29uZmlnLCBpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkVmlldyAmJiB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5pc0xvYWREb2N1bWVudFJlbWFyaykge1xuICAgICAgICAgICAgICAgIHZhciBkb2N1bWVudFJlbWFya1BhcmVudE5vZGUgPSB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5kb2N1bWVudFJlbWFya0NvbmZpZy5wYXJlbnROb2RlIHx8IHdoaXRlYm9hcmRWaWV3LmdldFdoaXRlYm9hcmRSb290RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlRG9jdW1lbnRSZW1hcmsoZG9jdW1lbnRSZW1hcmtQYXJlbnROb2RlLCB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5kb2N1bWVudFJlbWFya0NvbmZpZywgaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZFZpZXcgJiYgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuaXNMb2FkQXVkaW9QbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXVkaW9QbGF5ZXJQYXJlbnROb2RlID0gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuYXVkaW9QbGF5ZXJDb25maWcucGFyZW50Tm9kZSB8fCB3aGl0ZWJvYXJkVmlldy5nZXRXaGl0ZWJvYXJkUm9vdEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUF1ZGlvUGxheWVyKGF1ZGlvUGxheWVyUGFyZW50Tm9kZSwgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuYXVkaW9QbGF5ZXJDb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRWaWV3ICYmIHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLmlzTG9hZFZpZGVvUGxheWVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZpZGVvUGxheWVyUGFyZW50Tm9kZSA9IHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLnZpZGVvUGxheWVyQ29uZmlnLnBhcmVudE5vZGUgfHwgd2hpdGVib2FyZFZpZXcuZ2V0V2hpdGVib2FyZFJvb3RFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVWaWRlb1BsYXllcih2aWRlb1BsYXllclBhcmVudE5vZGUsIHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLnZpZGVvUGxheWVyQ29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2V4ZWN1dGVTYXZlTXNnbGlzdERhdGEoaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICB0aGlzLl9leGVjdXRlU2F2ZVB1Ym1zZ0RhdGEoaW5zdGFuY2VJZCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NyZWF0ZUV4dGVuZFdoaXRlYm9hcmQnLFxuXG5cbiAgICAgICAgLyrliJvlu7rmianlsZXnmb3mnb9cclxuICAgICAgICAgKiBAcGFyYW1zIHBhcmVudE5vZGU655m95p2/5a655Zmo6IqC54K5IO+8jCBOb2RlXHJcbiAgICAgICAgICogQHBhcmFtcyBpbnN0YW5jZUlkOueZveadv+WunuS+i2lkICAsIFN0cmluZ1xyXG4gICAgICAgICAqIEBwYXJhbXMgY29uZmlncmF0aW9uOueZveadv+mFjee9rumhuSDvvIwgSnNvblxyXG4gICAgICAgICAqIEBwYXJhbXMgcmVjZWl2ZUFjdGlvbkNvbW1hbmQ65o6l5pS255m95p2/6YCa55+l5raI5oGv5Ye95pWwIO+8jCBGdW5jdGlvblxyXG4gICAgICAgICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVFeHRlbmRXaGl0ZWJvYXJkKCkge1xuICAgICAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGRvY3VtZW50LmJvZHk7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIGNvbmZpZ3JhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICAgICAgICB2YXIgcmVjZWl2ZUFjdGlvbkNvbW1hbmQgPSBhcmd1bWVudHNbM107XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWNyZWF0ZUV4dGVuZFdoaXRlYm9hcmQgIHBhcmVudE5vZGUgIGluc3RhbmNlSWQgIGNvbmZpZ3JhdGlvbiBhbmQgcmVjZWl2ZUFjdGlvbkNvbW1hbmQ6JywgcGFyZW50Tm9kZSwgaW5zdGFuY2VJZCwgY29uZmlncmF0aW9uLCByZWNlaXZlQWN0aW9uQ29tbWFuZCk7XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2VJZCAhPT0gdW5kZWZpbmVkICYmIGluc3RhbmNlSWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhcmVudE5vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnROb2RlU3RyID0gcGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhcmVudE5vZGVTdHIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ1RoZSBub2RlIGlkIGNhbm5vdCBiZSBmb3VuZCBieSBub2RlIGlkLCBhbmQgY3JlYXRlRXh0ZW5kV2hpdGVib2FyZCBtZXRob2QgY2Fubm90IGJlIHBlcmZvcm1lZCAsIGVsZW1lbnQgaWQgaXMgJyArIHBhcmVudE5vZGVTdHIgKyAnLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJhbmRvbUNyZWF0ZUV4dGVuZFdoaXRlYm9hcmROdW1iZXIrKztcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VJZCA9ICdyYW5kb21XaGl0ZWJvYXJkJyArIHRoaXMucmFuZG9tQ3JlYXRlRXh0ZW5kV2hpdGVib2FyZE51bWJlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlV2hpdGVib2FyZChwYXJlbnROb2RlLCBpbnN0YW5jZUlkLCBjb25maWdyYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzMi5kb2N1bWVudFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXSAmJiBfdGhpczIuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0ucmVjZWl2ZUFjdGlvbkNvbW1hbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZG9jdW1lbnRUb29sYmFyVmlld0wyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAoX2RvY3VtZW50VG9vbGJhclZpZXdMMiA9IF90aGlzMi5kb2N1bWVudFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXSkucmVjZWl2ZUFjdGlvbkNvbW1hbmQuYXBwbHkoX2RvY3VtZW50VG9vbGJhclZpZXdMMiwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMyLmRvY3VtZW50UmVtYXJrVmlld0xpc3RbaW5zdGFuY2VJZF0gJiYgX3RoaXMyLmRvY3VtZW50UmVtYXJrVmlld0xpc3RbaW5zdGFuY2VJZF0ucmVjZWl2ZUFjdGlvbkNvbW1hbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZG9jdW1lbnRSZW1hcmtWaWV3TGkyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAoX2RvY3VtZW50UmVtYXJrVmlld0xpMiA9IF90aGlzMi5kb2N1bWVudFJlbWFya1ZpZXdMaXN0W2luc3RhbmNlSWRdKS5yZWNlaXZlQWN0aW9uQ29tbWFuZC5hcHBseShfZG9jdW1lbnRSZW1hcmtWaWV3TGkyLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVjZWl2ZUFjdGlvbkNvbW1hbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczIuaXNJbm5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVBY3Rpb25Db21tYW5kLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSAndmlld1N0YXRlVXBkYXRlJyB8fCBhY3Rpb24gPT09ICdtZWRpYVBsYXllck5vdGljZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZUFjdGlvbkNvbW1hbmQuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVmlldyA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkVmlldyAmJiB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5pc0xvYWREb2N1bWVudFRvb2xCYXIgJiYgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvY3VtZW50VG9vbEJhclBhcmVudE5vZGUgPSB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5kb2N1bWVudFRvb2xCYXJDb25maWcucGFyZW50Tm9kZSB8fCB3aGl0ZWJvYXJkVmlldy5nZXRXaGl0ZWJvYXJkUm9vdEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVEb2N1bWVudFRvb2xCYXIoZG9jdW1lbnRUb29sQmFyUGFyZW50Tm9kZSwgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuZG9jdW1lbnRUb29sQmFyQ29uZmlnLCBpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRWaWV3ICYmIHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLmlzTG9hZERvY3VtZW50UmVtYXJrICYmIHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLmhhc0V4dGVuZERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkb2N1bWVudFJlbWFya1BhcmVudE5vZGUgPSB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5kb2N1bWVudFJlbWFya0NvbmZpZy5wYXJlbnROb2RlIHx8IHdoaXRlYm9hcmRWaWV3LmdldFdoaXRlYm9hcmRSb290RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZURvY3VtZW50UmVtYXJrKGRvY3VtZW50UmVtYXJrUGFyZW50Tm9kZSwgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuZG9jdW1lbnRSZW1hcmtDb25maWcsIGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9leGVjdXRlU2F2ZU1zZ2xpc3REYXRhKGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4ZWN1dGVTYXZlUHVibXNnRGF0YShpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZGVzdHJveU1haW5XaGl0ZWJvYXJkJyxcblxuXG4gICAgICAgIC8q6ZSA5q+B5Li755m95p2/Ki9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lNYWluV2hpdGVib2FyZCgpIHtcbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWRlc3Ryb3lNYWluV2hpdGVib2FyZCcpO1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlSWQgPSAnZGVmYXVsdCc7XG4gICAgICAgICAgICB0aGlzLl9kZXN0cm95V2hpdGVib2FyZChpbnN0YW5jZUlkKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZGVzdHJveUV4dGVuZFdoaXRlYm9hcmQnLFxuXG5cbiAgICAgICAgLyrplIDmr4HmianlsZXnmb3mnb9cclxuICAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWQgICwgU3RyaW5nXHJcbiAgICAgICAgKiAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveUV4dGVuZFdoaXRlYm9hcmQoaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1t3aGl0ZWJvYXJyZC1zZGtdZGVzdHJveUV4dGVuZFdoaXRlYm9hcmQgIGluc3RhbmNlSWQ6JywgaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2VJZCAhPT0gdW5kZWZpbmVkICYmIGluc3RhbmNlSWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95V2hpdGVib2FyZChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2hhbmdlRG9jdW1lbnQnLFxuXG5cbiAgICAgICAgLyrmlLnlj5jmmL7npLrnmoTmlofku7ZcclxuICAgICAgICAgKiBAcGFyYW1zIGZpbGVpZDrmlofku7ZpZCAsIEludFxyXG4gICAgICAgICAqIEBwYXJhbXMgdG9QYWdlOui3s+WIsOeahOmhteaVsCAsIEludFxyXG4gICAgICAgICAqIEBwYXJhbXMgaW5zdGFuY2VJZDrnmb3mnb/lrp7kvotpZCAgLCBTdHJpbmdcclxuICAgICAgICAgKiAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlRG9jdW1lbnQoZmlsZWlkKSB7XG4gICAgICAgICAgICB2YXIgdG9QYWdlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdkZWZhdWx0JztcblxuICAgICAgICAgICAgaWYgKFRLLlNES1RZUEUgPT09ICdtb2JpbGUnKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ2NoYW5nZURvY3VtZW50IG1ldGhvZCBpcyBub3QgYWxsb3dlZCBpbiB0aGUgbW9iaWxlIGVudmlyb25tZW50IScpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaWxlaWQgPT0gdW5kZWZpbmVkIHx8IGZpbGVpZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ2NoYW5nZURvY3VtZW50IG1ldGhvZCBwYXJhbWV0ZXIgZXJyb3I6IGZpbGVpZCBjYW5cXCd0IGJlIGVtcHR5ISAnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5yb29tKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFZpZXdNYXAuaGFzKGluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVmlldyA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZWluZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlaWQgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZWluZm8gPSB0aGlzLnB1cmVXaGl0ZWJvYXJkRmlsZWluZm9MaXN0W2luc3RhbmNlSWRdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVsaXN0ID0gdGhpcy5yb29tLmdldEZpbGVMaXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBmaWxlbGlzdFtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZS5maWxlaWQgPT0gZmlsZWlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlaW5mbyA9IGZpbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVpbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoLyhtcDN8bXA0fHdlYm0pL2cudGVzdChmaWxlaW5mby5maWxldHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3dmcGF0aCA9IGZpbGVpbmZvLnN3ZnBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc3dmcGF0aC5sYXN0SW5kZXhPZihcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltZ1R5cGUgPSBzd2ZwYXRoLnN1YnN0cmluZyhpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVVcmwgPSBzd2ZwYXRoLnJlcGxhY2UoaW1nVHlwZSwgXCItMVwiICsgaW1nVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IF9HbG9iYWwyLmRlZmF1bHQubm93VXNlRG9jQWRkcmVzcyArIGZpbGVVcmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmlkZW8gPSAvKG1wNHx3ZWJtKS9nLnRlc3QoZmlsZWluZm8uZmlsZXR5cGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0lEID0gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkubWVkaWFTaGFyZVRvSUQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdtZWRpYUZpbGVMaXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IGZpbGVpbmZvLmZpbGVuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlaWQ6IGZpbGVpbmZvLmZpbGVpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF1c2VXaGVuT3ZlcjogaXNWaWRlbyAmJiB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5tZWRpYVNoYXJlUGF1c2VXaGVuT3ZlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFNoYXJlTWVkaWEodXJsLCBpc1ZpZGVvLCB0b0lELCBhdHRycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlcHJvcCA9IE51bWJlcihmaWxlaW5mby5maWxlcHJvcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzRHluYW1pY1BQVCA9IGZpbGVwcm9wID09PSAxIHx8IGZpbGVwcm9wID09PSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0g1RG9jdW1lbnQgPSBmaWxlcHJvcCA9PT0gMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNHZW5lcmFsRmlsZSA9ICFpc0R5bmFtaWNQUFQgJiYgIWlzSDVEb2N1bWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNEeW5hbWljUFBUIHx8IGlzSDVEb2N1bWVudCB8fCBpc0dlbmVyYWxGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0dlbmVyYWxGaWxlICYmIHRvUGFnZSA+IGZpbGVpbmZvLnBhZ2VudW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvUGFnZSA9IGZpbGVpbmZvLnBhZ2VudW07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvUGFnZSA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvUGFnZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHB1Ym1zZ0RhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgPyAnU2hvd1BhZ2UnIDogJ0V4dGVuZFNob3dQYWdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgPyAnRG9jdW1lbnRGaWxlUGFnZV9TaG93UGFnZScgOiAnRG9jdW1lbnRGaWxlUGFnZV9FeHRlbmRTaG93UGFnZV8nICsgaW5zdGFuY2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvSUQ6ICdfX2FsbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlSW5zdGFuY2VJZDogaW5zdGFuY2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0dlbmVyYWxGaWxlOiBpc0dlbmVyYWxGaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTWVkaWE6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRHluYW1pY1BQVDogaXNEeW5hbWljUFBULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSDVEb2N1bWVudDogaXNINURvY3VtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3Nob3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhVHlwZTogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycnBhZ2U6IHRvUGFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHB0c2xpZGU6IGlzRHluYW1pY1BQVCA/IHRvUGFnZSA6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBwdHN0ZXA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXB0b3RhbDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZWlkOiBmaWxlaW5mby5maWxlaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VudW06IGZpbGVpbmZvLnBhZ2VudW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlaW5mby5maWxlbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGU6IGZpbGVpbmZvLmZpbGV0eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0NvbnRlbnREb2N1bWVudDogZmlsZWluZm8uaXNDb250ZW50RG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3ZnBhdGg6IGlzRHluYW1pY1BQVCB8fCBpc0g1RG9jdW1lbnQgPyBmaWxlaW5mby5kb3dubG9hZHBhdGggOiBmaWxlaW5mby5zd2ZwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZlRXZlbnRSb29tUHVibXNnKHsgdHlwZTogJ3Jvb20tcHVibXNnJywgbWVzc2FnZTogT2JqZWN0LmRlZXBBc3NpZ24oe30sIHB1Ym1zZ0RhdGEpIH0sIGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuc3luY2hyb25pemF0aW9uICYmIHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLmlzQ29ubmVjdGVkUm9vbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wdWJNc2cocHVibXNnRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMLkxvZ2dlci5pbmZvKCdbd2hpdGVib2FycmQtc2RrXWNoYW5nZURvY3VtZW50OnlvdSBvcGVuIGZpbGUgdHlwZSBpcyBub3Qgc3VwcG9ydCAsIGZpbGV0eXBlIGlzICcgKyBmaWxlaW5mby5maWxldHlwZSArICcgLCBmaWxlaWQgaXMgJyArIGZpbGVpZCArICcgLCB0b1BhZ2UgaXMgJyArIHRvUGFnZSArICcuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuaW5mbygnW3doaXRlYm9hcnJkLXNka11jaGFuZ2VEb2N1bWVudDp5b3UgY2FuXFwndCBmaW5kIHRoZSBmaWxlIGJ5IGZpbGVpZCAsIGZpbGVpZCBpcyAnICsgZmlsZWlkICsgJyAsIHRvUGFnZSBpcyAnICsgdG9QYWdlICsgJy4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnb3BlblJlbW90ZURvY3VtZW50JyxcblxuXG4gICAgICAgIC8q5omT5byA5oyH5a6a5pyN5Yqh5Zmo55qE6K++5Lu2L1xyXG4gICAgICAgICAqIEBwYXJhbXMgdXJsOiDmlofku7bot6/lvoQgU3RyaW5nXHJcbiAgICAgICAgICogQHBhcmFtcyBpZDog5paH5Lu255u45YWz5L+h5oGv6L6o6K+G55SoaWQo5Lu75oSP5ZSv5LiA5LiU5LiN6YeN5aSN55qE5YC8KSBTdHJpbmdcclxuICAgICAgICAgKiBAcGFyYW1zIHR5cGU6IOaWh+S7tuexu+WeiyBnZW5lcmFsRG9jdW1lbnQ6IOWbvueJh++8jCBkeW5hbWljUFBUOiDliqjmgIFQUFTor77ku7YsIGg1RG9jdW1lbnQ6IGg16K++5Lu2LCBtZWRpYUZpbGU65aqS5L2T5paH5Lu277yMICBTdHJpbmdcclxuICAgICAgICAgKiBAcGFyYW1zIG9uRmFpbHVyZTog5Lyg5YWl5aSx6LSl5ZCO5Zue6LCD5Ye95pWwIEZ1bmN0aW9uXHJcbiAgICAgICAgICogQHBhcmFtczogW29wdGlvbl06IOmFjee9rumhuSDmianlsZXnlKggT2JqZWN0XHJcbiAgICAgICAgKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9wZW5SZW1vdGVEb2N1bWVudCh1cmwsIGlkLCB0eXBlLCBvbkZhaWx1cmUpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHt9O1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tBcmd1bWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tVUkwoVVJMKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSBVUkw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBFeHByZXNzaW9uID0gL2h0dHAocyk/OlxcL1xcLyhbXFx3LV0rXFwuKStbXFx3LV0rKFxcL1tcXHctIC5cXC8/JSY9XSopPy87XG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmpFeHAgPSBuZXcgUmVnRXhwKEV4cHJlc3Npb24pO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqRXhwLnRlc3Qoc3RyKSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjaGVja1R5cGUoVFlQRSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZXMgPSBbJ2dlbmVyYWxEb2N1bWVudCcsICdkeW5hbWljUFBUJywgJ2g1RG9jdW1lbnQnLCAnbWVkaWFGaWxlJ107XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlcy5pbmRleE9mKFRZUEUpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrTm90RW1wdHkoaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhaWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodXJsLCB0eXBlLCBpZCwgb25GYWlsdXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2tVUkwodXJsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1t3aGl0ZWJvYXJyZC1zZGtdb3BlblJlbW90ZURvY3VtZW50OiB1cmwgaW52YWxpZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvbkZhaWx1cmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkZhaWx1cmUoJ3VybCBpbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGVja1R5cGUodHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbd2hpdGVib2FycmQtc2RrXW9wZW5SZW1vdGVEb2N1bWVudDogdHlwZSBpbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9uRmFpbHVyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRmFpbHVyZSgndHlwZSBpbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGVja05vdEVtcHR5KGlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1t3aGl0ZWJvYXJyZC1zZGtdb3BlblJlbW90ZURvY3VtZW50OiBpZCBpcyBlbXB0eScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvbkZhaWx1cmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkZhaWx1cmUoJ2lkIGlzIGVtcHR5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0oKTtcbiAgICAgICAgICAgIGlmICghY2hlY2tBcmd1bWVudHModXJsLCB0eXBlLCBpZCwgb25GYWlsdXJlKSB8fCAhdGhpcy5yb29tKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVmlld01hcC5oYXMoJ2RlZmF1bHQnKSkge1xuICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVmlldyA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KCdkZWZhdWx0Jyk7XG4gICAgICAgICAgICAgICAgdmFyIGZpbGVuYW1lID0gJ3Vua25vd24nO1xuICAgICAgICAgICAgICAgIHZhciBmaWxldHlwZSA9ICd1bmtub3duJztcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXJsQXJyID0gdXJsLnNwbGl0KC8oXFwvfFxcXFwpL2cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXJsQXJyICYmIHVybEFyci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZUluZm8gPSB1cmxBcnJbdXJsQXJyLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVJbmZvICYmIHR5cGVvZiBmaWxlSW5mbyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZUluZm9BcnIgPSBmaWxlSW5mby5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlSW5mb0FyciAmJiBmaWxlSW5mb0Fyci5sZW5ndGggPT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IGZpbGVJbmZvQXJyWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZSA9IGZpbGVJbmZvQXJyWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1t3aGl0ZWJvYXJyZC1zZGtdb3BlblJlbW90ZURvY3VtZW50IGVycjonLCBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdtZWRpYUZpbGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b0lEID0gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkubWVkaWFTaGFyZVRvSUQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1ZpZGVvID0gZmlsZXR5cGUgPT09ICd1bmtub3duJyA/IC8oLm1wNHwud2VibSkvZy50ZXN0KHVybCkgOiAvKG1wNHx3ZWJtKS9nLnRlc3QoZmlsZXR5cGUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdtZWRpYUZpbGVMaXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVpZDogaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXVzZVdoZW5PdmVyOiBpc1ZpZGVvICYmIHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLm1lZGlhU2hhcmVQYXVzZVdoZW5PdmVyXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRTaGFyZU1lZGlhKHVybCwgaXNWaWRlbywgdG9JRCwgYXR0cnMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwdWJtc2dEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1Nob3dQYWdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAnRG9jdW1lbnRGaWxlUGFnZV9TaG93UGFnZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b0lEOiAnX19hbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzR2VuZXJhbEZpbGU6IHR5cGUgPT0gJ2dlbmVyYWxEb2N1bWVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNNZWRpYTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEeW5hbWljUFBUOiB0eXBlID09ICdkeW5hbWljUFBUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0g1RG9jdW1lbnQ6IHR5cGUgPT0gJ2g1RG9jdW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3Nob3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhVHlwZTogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycnBhZ2U6IG9wdGlvbi50b1BhZ2UgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0aW9uLnRvUGFnZSA9PT0gJ251bWJlcicgPyBvcHRpb24udG9QYWdlIDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHB0c2xpZGU6IG9wdGlvbi50b1BhZ2UgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0aW9uLnRvUGFnZSA9PT0gJ251bWJlcicgPyBvcHRpb24udG9QYWdlIDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHB0c3RlcDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHRvdGFsOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlaWQ6IGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlbnVtOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogZmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlOiBmaWxldHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDb250ZW50RG9jdW1lbnQ6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3ZnBhdGg6IHVybFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVjZWl2ZUV2ZW50Um9vbVB1Ym1zZyh7IHR5cGU6ICdyb29tLXB1Ym1zZycsIG1lc3NhZ2U6IE9iamVjdC5kZWVwQXNzaWduKHt9LCBwdWJtc2dEYXRhKSB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLnN5bmNocm9uaXphdGlvbiAmJiB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5pc0Nvbm5lY3RlZFJvb20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHViTXNnKHB1Ym1zZ0RhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmlLnlj5jnmb3mnb/nm7jlhbPphY3nva5cclxuICAgICAgICAgKiBAcGFyYW1zIGNvbmZpZ3JhdGlvbjrpnIDopoHmm7TmlrDnmoTphY3nva7pobkgLCBPYmplY3RcclxuICAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWQgLCBTdHJpbmdcclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2hhbmdlV2hpdGVCb2FyZENvbmZpZ3JhdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VXaGl0ZUJvYXJkQ29uZmlncmF0aW9uKGNvbmZpZ3JhdGlvbikge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdkZWZhdWx0JztcblxuICAgICAgICAgICAgdmFyIGNvbW1vbldoaXRlQm9hcmRDb25maWdyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjb25maWdyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoX0NvbmZpZ3VyYXRpb24yLmRlZmF1bHQuY29tbW9uV2hpdGVib2FyZC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbldoaXRlQm9hcmRDb25maWdyYXRpb25ba2V5XSA9IGNvbmZpZ3JhdGlvbltrZXldO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY29uZmlncmF0aW9uW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGNvbW1vbldoaXRlQm9hcmRDb25maWdyYXRpb24pLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlQ29tbW9uV2hpdGVCb2FyZENvbmZpZ3JhdGlvbihjb21tb25XaGl0ZUJvYXJkQ29uZmlncmF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghT2JqZWN0LmtleXMoY29uZmlncmF0aW9uKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11jaGFuZ2VXaGl0ZUJvYXJkQ29uZmlncmF0aW9uICBjb25maWdyYXRpb24gYW5kIGluc3RhbmNlSWQ6JywgY29uZmlncmF0aW9uLCBpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmhhcyhpbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF3aXRXaGl0ZWJvYXJkQ29uZmlncmF0aW9uTWFwLmhhcyhpbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmF3aXRXaGl0ZWJvYXJkQ29uZmlncmF0aW9uTWFwLmRlbGV0ZShpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCkuY2hhbmdlV2hpdGVCb2FyZENvbmZpZ3JhdGlvbihjb25maWdyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hd2l0V2hpdGVib2FyZENvbmZpZ3JhdGlvbk1hcC5oYXMoaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZXBBc3NpZ24odGhpcy5hd2l0V2hpdGVib2FyZENvbmZpZ3JhdGlvbk1hcC5nZXQoaW5zdGFuY2VJZCksIGNvbmZpZ3JhdGlvbik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hd2l0V2hpdGVib2FyZENvbmZpZ3JhdGlvbk1hcC5zZXQoaW5zdGFuY2VJZCwgT2JqZWN0LmRlZXBBc3NpZ24oe30sIF9Db25maWd1cmF0aW9uMi5kZWZhdWx0LmRlZmF1bHRXaGl0ZWJvYXJkLCBfQ29uZmlndXJhdGlvbjIuZGVmYXVsdC5jb21tb25XaGl0ZWJvYXJkLCBjb25maWdyYXRpb24pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlncmF0aW9uLmlzTG9hZERvY3VtZW50VG9vbEJhciAhPT0gdW5kZWZpbmVkICYmIGluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCBjb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlncmF0aW9uLmlzTG9hZERvY3VtZW50VG9vbEJhciAmJiAhdGhpcy5kb2N1bWVudFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZFZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkb2N1bWVudFRvb2xCYXJQYXJlbnROb2RlID0gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuZG9jdW1lbnRUb29sQmFyQ29uZmlnLnBhcmVudE5vZGUgfHwgd2hpdGVib2FyZFZpZXcuZ2V0V2hpdGVib2FyZFJvb3RFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZURvY3VtZW50VG9vbEJhcihkb2N1bWVudFRvb2xCYXJQYXJlbnROb2RlLCB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5kb2N1bWVudFRvb2xCYXJDb25maWcsIGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghY29uZmlncmF0aW9uLmlzTG9hZERvY3VtZW50VG9vbEJhciAmJiB0aGlzLmRvY3VtZW50VG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdICYmIHRoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0uZGVzdHJveVZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXS5kZXN0cm95VmlldygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50VG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWdyYXRpb24uaXNMb2FkRG9jdW1lbnRSZW1hcmsgIT09IHVuZGVmaW5lZCAmJiBpbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgY29uZmlncmF0aW9uLmhhc0V4dGVuZERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIF93aGl0ZWJvYXJkVmlldyA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIGlmIChjb25maWdyYXRpb24uaXNMb2FkRG9jdW1lbnRSZW1hcmsgJiYgIXRoaXMuZG9jdW1lbnRSZW1hcmtWaWV3TGlzdFtpbnN0YW5jZUlkXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3doaXRlYm9hcmRWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZG9jdW1lbnRSZW1hcmtQYXJlbnROb2RlID0gX3doaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLmRvY3VtZW50UmVtYXJrQ29uZmlnLnBhcmVudE5vZGUgfHwgX3doaXRlYm9hcmRWaWV3LmdldFdoaXRlYm9hcmRSb290RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVEb2N1bWVudFJlbWFyayhkb2N1bWVudFJlbWFya1BhcmVudE5vZGUsIF93aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5kb2N1bWVudFJlbWFya0NvbmZpZywgaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFjb25maWdyYXRpb24uaXNMb2FkRG9jdW1lbnRSZW1hcmsgJiYgdGhpcy5kb2N1bWVudFJlbWFya1ZpZXdMaXN0W2luc3RhbmNlSWRdICYmIHRoaXMuZG9jdW1lbnRSZW1hcmtWaWV3TGlzdFtpbnN0YW5jZUlkXS5kZXN0cm95Vmlldykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50UmVtYXJrVmlld0xpc3RbaW5zdGFuY2VJZF0uZGVzdHJveVZpZXcoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFJlbWFya1ZpZXdMaXN0W2luc3RhbmNlSWRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbmZpZ3JhdGlvbi5pc0xvYWRXaGl0ZWJvYXJkVG9vbEJhciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIF93aGl0ZWJvYXJkVmlldzIgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlncmF0aW9uLmlzTG9hZFdoaXRlYm9hcmRUb29sQmFyICYmICF0aGlzLndoaXRlYm9hcmRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF93aGl0ZWJvYXJkVmlldzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVG9vbEJhclBhcmVudE5vZGUgPSBfd2hpdGVib2FyZFZpZXcyLmdldENvbmZpZ3JhdGlvbigpLndoaXRlYm9hcmRUb29sQmFyQ29uZmlnLnBhcmVudE5vZGUgfHwgX3doaXRlYm9hcmRWaWV3Mi5nZXRXaGl0ZWJvYXJkUm9vdEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlV2hpdGVib2FyZFRvb2xCYXIod2hpdGVib2FyZFRvb2xCYXJQYXJlbnROb2RlLCBfd2hpdGVib2FyZFZpZXcyLmdldENvbmZpZ3JhdGlvbigpLndoaXRlYm9hcmRUb29sQmFyQ29uZmlnLCBpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbmZpZ3JhdGlvbi5pc0xvYWRXaGl0ZWJvYXJkVG9vbEJhciAmJiB0aGlzLndoaXRlYm9hcmRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0gJiYgdGhpcy53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdLmRlc3Ryb3lWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXS5kZXN0cm95VmlldygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLndoaXRlYm9hcmRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29uZmlncmF0aW9uLmlzTG9hZEF1ZGlvUGxheWVyICE9PSB1bmRlZmluZWQgJiYgaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgICAgICAgICAgdmFyIF93aGl0ZWJvYXJkVmlldzMgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlncmF0aW9uLmlzTG9hZEF1ZGlvUGxheWVyICYmICF0aGlzLmF1ZGlvUGxheWVyVmlldykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3doaXRlYm9hcmRWaWV3Mykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF1ZGlvUGxheWVyUGFyZW50Tm9kZSA9IF93aGl0ZWJvYXJkVmlldzMuZ2V0Q29uZmlncmF0aW9uKCkuYXVkaW9QbGF5ZXJDb25maWcucGFyZW50Tm9kZSB8fCBfd2hpdGVib2FyZFZpZXczLmdldFdoaXRlYm9hcmRSb290RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVBdWRpb1BsYXllcihhdWRpb1BsYXllclBhcmVudE5vZGUsIF93aGl0ZWJvYXJkVmlldzMuZ2V0Q29uZmlncmF0aW9uKCkuYXVkaW9QbGF5ZXJDb25maWcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghY29uZmlncmF0aW9uLmlzTG9hZEF1ZGlvUGxheWVyICYmIHRoaXMuYXVkaW9QbGF5ZXJWaWV3ICYmIHRoaXMuYXVkaW9QbGF5ZXJWaWV3LmRlc3Ryb3lWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXJWaWV3LmRlc3Ryb3lWaWV3KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXJWaWV3ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbmZpZ3JhdGlvbi5pc0xvYWRWaWRlb1BsYXllciAhPT0gdW5kZWZpbmVkICYmIGluc3RhbmNlSWQgPT09ICdkZWZhdWx0Jykge1xuICAgICAgICAgICAgICAgIHZhciBfd2hpdGVib2FyZFZpZXc0ID0gdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZ3JhdGlvbi5pc0xvYWRWaWRlb1BsYXllciAmJiAhdGhpcy52aWRlb1BsYXllclZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF93aGl0ZWJvYXJkVmlldzQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWRlb1BsYXllclBhcmVudE5vZGUgPSBfd2hpdGVib2FyZFZpZXc0LmdldENvbmZpZ3JhdGlvbigpLnZpZGVvUGxheWVyQ29uZmlnLnBhcmVudE5vZGUgfHwgX3doaXRlYm9hcmRWaWV3NC5nZXRXaGl0ZWJvYXJkUm9vdEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlVmlkZW9QbGF5ZXIodmlkZW9QbGF5ZXJQYXJlbnROb2RlLCBfd2hpdGVib2FyZFZpZXc0LmdldENvbmZpZ3JhdGlvbigpLnZpZGVvUGxheWVyQ29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbmZpZ3JhdGlvbi5pc0xvYWRWaWRlb1BsYXllciAmJiB0aGlzLnZpZGVvUGxheWVyVmlldyAmJiB0aGlzLnZpZGVvUGxheWVyVmlldy5kZXN0cm95Vmlldykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyVmlldy5kZXN0cm95VmlldygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyVmlldyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb25maWdyYXRpb24ubGFuZ3VhZ2VUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnIHx8IGNvbmZpZ3JhdGlvbi5oYXNFeHRlbmREb2N1bWVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXS5zZXRQcm9wcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VUeXBlOiBjb25maWdyYXRpb24ubGFuZ3VhZ2VUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudFJlbWFya1ZpZXdMaXN0W2luc3RhbmNlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50UmVtYXJrVmlld0xpc3RbaW5zdGFuY2VJZF0uc2V0UHJvcHMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlVHlwZTogY29uZmlncmF0aW9uLmxhbmd1YWdlVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0uc2V0UHJvcHMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VUeXBlOiBjb25maWdyYXRpb24ubGFuZ3VhZ2VUeXBlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWdyYXRpb24uaXNNb2JpbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgY29uZmlncmF0aW9uLmhhc0V4dGVuZERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvY3VtZW50VG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50VG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdLnNldFByb3BzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc01vYmlsZTogY29uZmlncmF0aW9uLmlzTW9iaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudFJlbWFya1ZpZXdMaXN0W2luc3RhbmNlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50UmVtYXJrVmlld0xpc3RbaW5zdGFuY2VJZF0uc2V0UHJvcHMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTW9iaWxlOiBjb25maWdyYXRpb24uaXNNb2JpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdLnNldFByb3BzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTW9iaWxlOiBjb25maWdyYXRpb24uaXNNb2JpbGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29uZmlncmF0aW9uLmNhblJlbWFyayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCBjb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0uc2V0UHJvcHMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhblJlbWFyazogY29uZmlncmF0aW9uLmNhblJlbWFya1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRSZW1hcmtWaWV3TGlzdFtpbnN0YW5jZUlkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFJlbWFya1ZpZXdMaXN0W2luc3RhbmNlSWRdLnNldFByb3BzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5SZW1hcms6IGNvbmZpZ3JhdGlvbi5jYW5SZW1hcmtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29uZmlncmF0aW9uLndoaXRlYm9hcmRUb29sQmFyQ29uZmlnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maWdyYXRpb24ud2hpdGVib2FyZFRvb2xCYXJDb25maWcuaGFzT3duUHJvcGVydHkoJ3BhcmVudE5vZGUnKSAmJiB0eXBlb2YgdGhpcy53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdLmNoYW5nZVBhcmVudE5vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfd2hpdGVib2FyZFZpZXc1ID0gdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGNvbmZpZ3JhdGlvbi53aGl0ZWJvYXJkVG9vbEJhckNvbmZpZy5wYXJlbnROb2RlIHx8IChfd2hpdGVib2FyZFZpZXc1ID8gX3doaXRlYm9hcmRWaWV3NS5nZXRXaGl0ZWJvYXJkUm9vdEVsZW1lbnQoKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhcmVudE5vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudE5vZGVTdHIgPSBwYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwYXJlbnROb2RlU3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnVGhlIG5vZGUgaWQgY2Fubm90IGJlIGZvdW5kIGJ5IG5vZGUgaWQsIGFuZCAgd2hpdGVib2FyZFRvb2xCYXJDb25maWcucGFyZW50Tm9kZSBjYW5ub3QgdXBkYXRlIGNvbmZpZywgZWxlbWVudCBpZCBpcyAnICsgcGFyZW50Tm9kZVN0ciArICcuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0uY2hhbmdlUGFyZW50Tm9kZShwYXJlbnROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfa2V5IGluIGNvbmZpZ3JhdGlvbi53aGl0ZWJvYXJkVG9vbEJhckNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gY29uZmlncmF0aW9uLndoaXRlYm9hcmRUb29sQmFyQ29uZmlnW19rZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlncmF0aW9uLndoaXRlYm9hcmRUb29sQmFyQ29uZmlnW19rZXldID0gT2JqZWN0LmRlZXBBc3NpZ24oe30sIHRoaXMud2hpdGVib2FyZFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXS5wcm9wc1tfa2V5XSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXS5zZXRQcm9wcyhPYmplY3QuZGVlcEFzc2lnbih7fSwgY29uZmlncmF0aW9uLndoaXRlYm9hcmRUb29sQmFyQ29uZmlnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29uZmlncmF0aW9uLmRvY3VtZW50VG9vbEJhckNvbmZpZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCBjb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maWdyYXRpb24uZG9jdW1lbnRUb29sQmFyQ29uZmlnLmhhc093blByb3BlcnR5KCdwYXJlbnROb2RlJykgJiYgdHlwZW9mIHRoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0uY2hhbmdlUGFyZW50Tm9kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfd2hpdGVib2FyZFZpZXc2ID0gdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9wYXJlbnROb2RlID0gY29uZmlncmF0aW9uLmRvY3VtZW50VG9vbEJhckNvbmZpZy5wYXJlbnROb2RlIHx8IChfd2hpdGVib2FyZFZpZXc2ID8gX3doaXRlYm9hcmRWaWV3Ni5nZXRXaGl0ZWJvYXJkUm9vdEVsZW1lbnQoKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBfcGFyZW50Tm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9wYXJlbnROb2RlU3RyID0gX3BhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wYXJlbnROb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoX3BhcmVudE5vZGVTdHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMLkxvZ2dlci53YXJuaW5nKCdUaGUgbm9kZSBpZCBjYW5ub3QgYmUgZm91bmQgYnkgbm9kZSBpZCwgYW5kICBkb2N1bWVudFRvb2xCYXJDb25maWcucGFyZW50Tm9kZSBjYW5ub3QgdXBkYXRlIGNvbmZpZywgZWxlbWVudCBpZCBpcyAnICsgX3BhcmVudE5vZGVTdHIgKyAnLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0uY2hhbmdlUGFyZW50Tm9kZShfcGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfa2V5MiBpbiBjb25maWdyYXRpb24uZG9jdW1lbnRUb29sQmFyQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF92YWx1ZSA9IGNvbmZpZ3JhdGlvbi5kb2N1bWVudFRvb2xCYXJDb25maWdbX2tleTJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIF92YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX3ZhbHVlKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3JhdGlvbi5kb2N1bWVudFRvb2xCYXJDb25maWdbX2tleTJdID0gT2JqZWN0LmRlZXBBc3NpZ24oe30sIHRoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0ucHJvcHNbX2tleTJdLCBfdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0uc2V0UHJvcHMoT2JqZWN0LmRlZXBBc3NpZ24oe30sIGNvbmZpZ3JhdGlvbi5kb2N1bWVudFRvb2xCYXJDb25maWcpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbmZpZ3JhdGlvbi5kb2N1bWVudFJlbWFya0NvbmZpZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCBjb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRSZW1hcmtWaWV3TGlzdFtpbnN0YW5jZUlkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZ3JhdGlvbi5kb2N1bWVudFJlbWFya0NvbmZpZy5oYXNPd25Qcm9wZXJ0eSgncGFyZW50Tm9kZScpICYmIHR5cGVvZiB0aGlzLmRvY3VtZW50UmVtYXJrVmlld0xpc3RbaW5zdGFuY2VJZF0uY2hhbmdlUGFyZW50Tm9kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfd2hpdGVib2FyZFZpZXc3ID0gdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9wYXJlbnROb2RlMiA9IGNvbmZpZ3JhdGlvbi5kb2N1bWVudFJlbWFya0NvbmZpZy5wYXJlbnROb2RlIHx8IChfd2hpdGVib2FyZFZpZXc3ID8gX3doaXRlYm9hcmRWaWV3Ny5nZXRXaGl0ZWJvYXJkUm9vdEVsZW1lbnQoKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBfcGFyZW50Tm9kZTIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcGFyZW50Tm9kZVN0cjIgPSBfcGFyZW50Tm9kZTI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wYXJlbnROb2RlMiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKF9wYXJlbnROb2RlU3RyMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX3BhcmVudE5vZGUyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMLkxvZ2dlci53YXJuaW5nKCdUaGUgbm9kZSBpZCBjYW5ub3QgYmUgZm91bmQgYnkgbm9kZSBpZCwgYW5kICBkb2N1bWVudFJlbWFya0NvbmZpZy5wYXJlbnROb2RlIGNhbm5vdCB1cGRhdGUgY29uZmlnLCBlbGVtZW50IGlkIGlzICcgKyBfcGFyZW50Tm9kZVN0cjIgKyAnLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRSZW1hcmtWaWV3TGlzdFtpbnN0YW5jZUlkXS5jaGFuZ2VQYXJlbnROb2RlKF9wYXJlbnROb2RlMik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfa2V5MyBpbiBjb25maWdyYXRpb24uZG9jdW1lbnRSZW1hcmtDb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3ZhbHVlMiA9IGNvbmZpZ3JhdGlvbi5kb2N1bWVudFJlbWFya0NvbmZpZ1tfa2V5M107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YgX3ZhbHVlMiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX3ZhbHVlMikpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWdyYXRpb24uZG9jdW1lbnRSZW1hcmtDb25maWdbX2tleTNdID0gT2JqZWN0LmRlZXBBc3NpZ24oe30sIHRoaXMuZG9jdW1lbnRSZW1hcmtWaWV3TGlzdFtpbnN0YW5jZUlkXS5wcm9wc1tfa2V5M10sIF92YWx1ZTIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRSZW1hcmtWaWV3TGlzdFtpbnN0YW5jZUlkXS5zZXRQcm9wcyhPYmplY3QuZGVlcEFzc2lnbih7fSwgY29uZmlncmF0aW9uLmRvY3VtZW50UmVtYXJrQ29uZmlnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb25maWdyYXRpb24uYXVkaW9QbGF5ZXJDb25maWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF1ZGlvUGxheWVyVmlldykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfa2V5NCBpbiBjb25maWdyYXRpb24uYXVkaW9QbGF5ZXJDb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdmFsdWUzID0gY29uZmlncmF0aW9uLmF1ZGlvUGxheWVyQ29uZmlnW19rZXk0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIF92YWx1ZTMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKF92YWx1ZTMpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWdyYXRpb24uYXVkaW9QbGF5ZXJDb25maWdbX2tleTRdID0gT2JqZWN0LmRlZXBBc3NpZ24oe30sIHRoaXMuYXVkaW9QbGF5ZXJWaWV3LnByb3BzW19rZXk0XSwgX3ZhbHVlMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllclZpZXcuc2V0UHJvcHMoT2JqZWN0LmRlZXBBc3NpZ24oe30sIGNvbmZpZ3JhdGlvbi5hdWRpb1BsYXllckNvbmZpZykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbmZpZ3JhdGlvbi52aWRlb1BsYXllckNvbmZpZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmlkZW9QbGF5ZXJWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9rZXk1IGluIGNvbmZpZ3JhdGlvbi52aWRlb1BsYXllckNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF92YWx1ZTQgPSBjb25maWdyYXRpb24udmlkZW9QbGF5ZXJDb25maWdbX2tleTVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YgX3ZhbHVlNCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX3ZhbHVlNCkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3JhdGlvbi52aWRlb1BsYXllckNvbmZpZ1tfa2V5NV0gPSBPYmplY3QuZGVlcEFzc2lnbih7fSwgdGhpcy52aWRlb1BsYXllclZpZXcucHJvcHNbX2tleTVdLCBfdmFsdWU0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyVmlldy5zZXRQcm9wcyhPYmplY3QuZGVlcEFzc2lnbih7fSwgY29uZmlncmF0aW9uLnZpZGVvUGxheWVyQ29uZmlnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdub3RpY2VXaGl0ZWJvYXJkQWN0aW9uQ29tbWFuZCcsXG5cblxuICAgICAgICAvKumAmuefpeeZveadv3Nka+aJp+ihjOWKqOS9nOaMh+S7pCovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBub3RpY2VXaGl0ZWJvYXJkQWN0aW9uQ29tbWFuZChhY3Rpb24sIGNtZCkge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdkZWZhdWx0JztcblxuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1t3aGl0ZWJvYXJyZC1zZGtdbm90aWNlV2hpdGVib2FyZEFjdGlvbkNvbW1hbmQgJyk7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVmlld01hcC5oYXMoaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkVmlldy5ub3RpY2VXaGl0ZWJvYXJkQWN0aW9uQ29tbWFuZChhY3Rpb24sIGNtZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NoYW5nZUNvbW1vbldoaXRlQm9hcmRDb25maWdyYXRpb24nLFxuXG5cbiAgICAgICAgLyrmlLnlj5jmiYDmnInnmb3mnb/nmoTlhazmnInphY3nva5cclxuICAgICAgICAqIEBwYXJhbXMgPE9iamVjdD4gY29tbW9uQ29uZmlncmF0aW9uIOabtOaWsOeahOWFrOaciemFjee9rumhuVxyXG4gICAgICAgICogKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZUNvbW1vbldoaXRlQm9hcmRDb25maWdyYXRpb24oY29tbW9uQ29uZmlncmF0aW9uKSB7XG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11jaGFuZ2VDb21tb25XaGl0ZUJvYXJkQ29uZmlncmF0aW9uIGNvbW1vbiBjb25maWdyYXRpb246JywgY29tbW9uQ29uZmlncmF0aW9uKTtcbiAgICAgICAgICAgIHZhciBDb3B5T2JqID0gT2JqZWN0LmRlZXBBc3NpZ24oe30sIGNvbW1vbkNvbmZpZ3JhdGlvbik7XG4gICAgICAgICAgICBpZiAoX3R5cGVvZihDb3B5T2JqLmRvY0FkZHJlc3MpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzcyA9IGNvbW1vbkNvbmZpZ3JhdGlvbi5kb2NBZGRyZXNzO1xuICAgICAgICAgICAgICAgIGlmIChfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0tleSA9IGNvbW1vbkNvbmZpZ3JhdGlvbi5kb2NBZGRyZXNzLmhvc3RuYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0LnByb3RvY29sID0gQ29weU9iai5kb2NBZGRyZXNzLnByb3RvY29sO1xuICAgICAgICAgICAgICAgIF9HbG9iYWwyLmRlZmF1bHQucG9ydCA9IENvcHlPYmouZG9jQWRkcmVzcy5wb3J0O1xuICAgICAgICAgICAgICAgIENvcHlPYmouZG9jQWRkcmVzcyA9IGNvbW1vbkNvbmZpZ3JhdGlvbi5kb2NBZGRyZXNzLnByb3RvY29sICsgJzovLycgKyBjb21tb25Db25maWdyYXRpb24uZG9jQWRkcmVzcy5ob3N0bmFtZSArICc6JyArIGNvbW1vbkNvbmZpZ3JhdGlvbi5kb2NBZGRyZXNzLnBvcnQ7IC8vIOWwhuaLt+i0neWujOavleS5i+WQjueahGRvY+WcsOWdgOi/mOWOn+aIkOWtl+espuS4slxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChfdHlwZW9mKENvcHlPYmoud2ViQWRkcmVzcykgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgQ29weU9iai53ZWJBZGRyZXNzID0gY29tbW9uQ29uZmlncmF0aW9uLndlYkFkZHJlc3MucHJvdG9jb2wgKyAnOi8vJyArIGNvbW1vbkNvbmZpZ3JhdGlvbi53ZWJBZGRyZXNzLmhvc3RuYW1lICsgJzonICsgY29tbW9uQ29uZmlncmF0aW9uLndlYkFkZHJlc3MucG9ydDsgLy8g5bCG5ou36LSd5a6M5q+V5LmL5ZCO55qEd2Vi5Zyw5Z2A6L+Y5Y6f5oiQ5a2X56ym5LiyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQ29weU9iai5iYWNrdXBEb2NBZGRyZXNzTGlzdCAmJiBBcnJheS5pc0FycmF5KENvcHlPYmouYmFja3VwRG9jQWRkcmVzc0xpc3QpKSB7XG4gICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5iYWNrdXBEb2NBZGRyZXNzTGlzdCA9IGNvbW1vbkNvbmZpZ3JhdGlvbi5iYWNrdXBEb2NBZGRyZXNzTGlzdDtcbiAgICAgICAgICAgICAgICBfQ29uZmlndXJhdGlvbjIuZGVmYXVsdC5jb21tb25XaGl0ZWJvYXJkLmJhY2t1cERvY0FkZHJlc3NMaXN0ID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBPYmplY3QuZGVlcEFzc2lnbihfQ29uZmlndXJhdGlvbjIuZGVmYXVsdC5jb21tb25XaGl0ZWJvYXJkLCBDb3B5T2JqKTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSB0aGlzLmF3aXRXaGl0ZWJvYXJkQ29uZmlncmF0aW9uTWFwLnZhbHVlcygpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhd2l0V2hpdGVib2FyZENvbmZpZ3JhdGlvbiA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVlcEFzc2lnbihhd2l0V2hpdGVib2FyZENvbmZpZ3JhdGlvbiwgQ29weU9iaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb21tb25Db25maWdyYXRpb24uZG9jQWRkcmVzcyAhPT0gdW5kZWZpbmVkIHx8IGNvbW1vbkNvbmZpZ3JhdGlvbi5iYWNrdXBEb2NBZGRyZXNzTGlzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzTGlzdCA9IFtfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoX0dsb2JhbDIuZGVmYXVsdC5iYWNrdXBEb2NBZGRyZXNzTGlzdCksIF90b0NvbnN1bWFibGVBcnJheShfR2xvYmFsMi5kZWZhdWx0LmxhdGVyQWRkcmVzc0xpc3QpKTtcbiAgICAgICAgICAgICAgICBpZiAoIV9HbG9iYWwyLmRlZmF1bHQuaGFzR2V0RG9jQWRkcmVzc0luZGV4QnlMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5ub3dVc2VEb2NBZGRyZXNzID0gX1V0aWxzMi5kZWZhdWx0LmdldEl0ZW0oX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzTGlzdCwgX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzS2V5KSB8fCBfQ29uZmlndXJhdGlvbjIuZGVmYXVsdC5jb21tb25XaGl0ZWJvYXJkLmRvY0FkZHJlc3M7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0TG9jYWxTdG9yYWdlSXRlbSgndGtEb2NBZGRyZXNzS2V5JywgZnVuY3Rpb24gKGRvY0FkZHJlc3NLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2NBZGRyZXNzS2V5ICYmIGRvY0FkZHJlc3NLZXkgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZG9jQWRkcmVzc0tleSA9PT0gJ3N0cmluZycgJiYgZG9jQWRkcmVzc0tleSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXkgPSBkb2NBZGRyZXNzS2V5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9HbG9iYWwyLmRlZmF1bHQubG9jYWxTdG9yYWdlRG9jQWRkcmVzc0tleSA9IGRvY0FkZHJlc3NLZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9HbG9iYWwyLmRlZmF1bHQubG9jYWxTdG9yYWdlRG9jQWRkcmVzc0tleSAmJiBfVXRpbHMyLmRlZmF1bHQuZ2V0SXRlbShfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NMaXN0LCBfR2xvYmFsMi5kZWZhdWx0LmxvY2FsU3RvcmFnZURvY0FkZHJlc3NLZXkpID09PSAnJyAmJiBfVXRpbHMyLmRlZmF1bHQuZ2V0SXRlbShfR2xvYmFsMi5kZWZhdWx0LmxhdGVyQWRkcmVzc0xpc3QsIF9HbG9iYWwyLmRlZmF1bHQubG9jYWxTdG9yYWdlRG9jQWRkcmVzc0tleSkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfR2xvYmFsMi5kZWZhdWx0LnByb3RvY29sICYmIF9HbG9iYWwyLmRlZmF1bHQucG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5sYXRlckFkZHJlc3NMaXN0ID0gW3sgcHJvdG9jb2w6IF9HbG9iYWwyLmRlZmF1bHQucHJvdG9jb2wsIGhvc3RuYW1lOiBfR2xvYmFsMi5kZWZhdWx0LmxvY2FsU3RvcmFnZURvY0FkZHJlc3NLZXksIHBvcnQ6IF9HbG9iYWwyLmRlZmF1bHQucG9ydCB9XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NMaXN0ID0gW19HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShfR2xvYmFsMi5kZWZhdWx0LmJhY2t1cERvY0FkZHJlc3NMaXN0KSwgX3RvQ29uc3VtYWJsZUFycmF5KF9HbG9iYWwyLmRlZmF1bHQubGF0ZXJBZGRyZXNzTGlzdCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0Lm5vd1VzZURvY0FkZHJlc3MgPSBfVXRpbHMyLmRlZmF1bHQuZ2V0SXRlbShfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NMaXN0LCBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXkpIHx8IF9Db25maWd1cmF0aW9uMi5kZWZhdWx0LmNvbW1vbldoaXRlYm9hcmQuZG9jQWRkcmVzcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0Lmhhc0dldERvY0FkZHJlc3NJbmRleEJ5TG9jYWxTdG9yYWdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9HbG9iYWwyLmRlZmF1bHQubG9jYWxTdG9yYWdlRG9jQWRkcmVzc0tleSAmJiBfVXRpbHMyLmRlZmF1bHQuZ2V0SXRlbShfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NMaXN0LCBfR2xvYmFsMi5kZWZhdWx0LmxvY2FsU3RvcmFnZURvY0FkZHJlc3NLZXkpID09PSAnJyAmJiBfVXRpbHMyLmRlZmF1bHQuZ2V0SXRlbShfR2xvYmFsMi5kZWZhdWx0LmxhdGVyQWRkcmVzc0xpc3QsIF9HbG9iYWwyLmRlZmF1bHQubG9jYWxTdG9yYWdlRG9jQWRkcmVzc0tleSkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfR2xvYmFsMi5kZWZhdWx0LnByb3RvY29sICYmIF9HbG9iYWwyLmRlZmF1bHQucG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5sYXRlckFkZHJlc3NMaXN0ID0gW3sgcHJvdG9jb2w6IF9HbG9iYWwyLmRlZmF1bHQucHJvdG9jb2wsIGhvc3RuYW1lOiBfR2xvYmFsMi5kZWZhdWx0LmxvY2FsU3RvcmFnZURvY0FkZHJlc3NLZXksIHBvcnQ6IF9HbG9iYWwyLmRlZmF1bHQucG9ydCB9XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NMaXN0ID0gW19HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShfR2xvYmFsMi5kZWZhdWx0LmJhY2t1cERvY0FkZHJlc3NMaXN0KSwgX3RvQ29uc3VtYWJsZUFycmF5KF9HbG9iYWwyLmRlZmF1bHQubGF0ZXJBZGRyZXNzTGlzdCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0Lm5vd1VzZURvY0FkZHJlc3MgPSBfVXRpbHMyLmRlZmF1bHQuZ2V0SXRlbShfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NMaXN0LCBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXkpIHx8IF9Db25maWd1cmF0aW9uMi5kZWZhdWx0LmNvbW1vbldoaXRlYm9hcmQuZG9jQWRkcmVzcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0Lmhhc0dldERvY0FkZHJlc3NJbmRleEJ5TG9jYWxTdG9yYWdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9HbG9iYWwyLmRlZmF1bHQubG9jYWxTdG9yYWdlRG9jQWRkcmVzc0tleSAmJiBfVXRpbHMyLmRlZmF1bHQuZ2V0SXRlbShfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NMaXN0LCBfR2xvYmFsMi5kZWZhdWx0LmxvY2FsU3RvcmFnZURvY0FkZHJlc3NLZXkpID09PSAnJyAmJiBfVXRpbHMyLmRlZmF1bHQuZ2V0SXRlbShfR2xvYmFsMi5kZWZhdWx0LmxhdGVyQWRkcmVzc0xpc3QsIF9HbG9iYWwyLmRlZmF1bHQubG9jYWxTdG9yYWdlRG9jQWRkcmVzc0tleSkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX0dsb2JhbDIuZGVmYXVsdC5wcm90b2NvbCAmJiBfR2xvYmFsMi5kZWZhdWx0LnBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0LmxhdGVyQWRkcmVzc0xpc3QgPSBbeyBwcm90b2NvbDogX0dsb2JhbDIuZGVmYXVsdC5wcm90b2NvbCwgaG9zdG5hbWU6IF9HbG9iYWwyLmRlZmF1bHQubG9jYWxTdG9yYWdlRG9jQWRkcmVzc0tleSwgcG9ydDogX0dsb2JhbDIuZGVmYXVsdC5wb3J0IH1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzTGlzdCA9IFtfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoX0dsb2JhbDIuZGVmYXVsdC5iYWNrdXBEb2NBZGRyZXNzTGlzdCksIF90b0NvbnN1bWFibGVBcnJheShfR2xvYmFsMi5kZWZhdWx0LmxhdGVyQWRkcmVzc0xpc3QpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0Lm5vd1VzZURvY0FkZHJlc3MgPSBfVXRpbHMyLmRlZmF1bHQuZ2V0SXRlbShfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NMaXN0LCBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXkpIHx8IF9Db25maWd1cmF0aW9uMi5kZWZhdWx0LmNvbW1vbldoaXRlYm9hcmQuZG9jQWRkcmVzcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IzID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAzOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfcmVmID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gX3JlZjJbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVmlldyA9IF9yZWYyWzFdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF3aXRXaGl0ZWJvYXJkQ29uZmlncmF0aW9uTWFwLmhhcyhpbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hd2l0V2hpdGVib2FyZENvbmZpZ3JhdGlvbk1hcC5kZWxldGUoaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZFZpZXcuY2hhbmdlV2hpdGVCb2FyZENvbmZpZ3JhdGlvbihDb3B5T2JqKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMyA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNCA9IE9iamVjdC52YWx1ZXModGhpcy53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0KVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IChfc3RlcDQgPSBfaXRlcmF0b3I0Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFRvb2xiYXJWaWV3ID0gX3N0ZXA0LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkVG9vbGJhclZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRUb29sYmFyVmlldy5zZXRQcm9wcyhPYmplY3QuZGVlcEFzc2lnbih7fSwgQ29weU9iaikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjQgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgJiYgX2l0ZXJhdG9yNC5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjQucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I1ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I1ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjUgPSBPYmplY3QudmFsdWVzKHRoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3QpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA1OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gKF9zdGVwNSA9IF9pdGVyYXRvcjUubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkb2N1bWVudFRvb2xiYXJWaWV3ID0gX3N0ZXA1LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudFRvb2xiYXJWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudFRvb2xiYXJWaWV3LnNldFByb3BzKE9iamVjdC5kZWVwQXNzaWduKHt9LCBDb3B5T2JqKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yNSA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSAmJiBfaXRlcmF0b3I1LnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNS5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb242ID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjYgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjYgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNiA9IE9iamVjdC52YWx1ZXModGhpcy5kb2N1bWVudFJlbWFya1ZpZXdMaXN0KVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiA9IChfc3RlcDYgPSBfaXRlcmF0b3I2Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb242ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZG9jdW1lbnRSZW1hcmtWaWV3ID0gX3N0ZXA2LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudFJlbWFya1ZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50UmVtYXJrVmlldy5zZXRQcm9wcyhPYmplY3QuZGVlcEFzc2lnbih7fSwgQ29weU9iaikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I2ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjYgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgJiYgX2l0ZXJhdG9yNi5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjYucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmF1ZGlvUGxheWVyVmlldykge1xuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXJWaWV3LnNldFByb3BzKE9iamVjdC5kZWVwQXNzaWduKHt9LCBDb3B5T2JqKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnZpZGVvUGxheWVyVmlldykge1xuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9QbGF5ZXJWaWV3LnNldFByb3BzKE9iamVjdC5kZWVwQXNzaWduKHt9LCBDb3B5T2JqKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VzZVdoaXRlYm9hcmRUb29sJyxcblxuXG4gICAgICAgIC8q5L2/55So5qCH5rOo5bel5YW3XHJcbiAgICAgICAgKiBAcGFyYW1zIHRvb2xLZXk65bel5YW355qEa2V577yMa2V55YC85o+P6L+w5aaC5LiL77yaXHJcbiAgICAgICAgICAgICB0b29sX21vdXNlOum8oOagh1xyXG4gICAgICAgICAgICAgdG9vbF9sYXNlcjrmv4DlhYnnrJRcclxuICAgICAgICAgICAgIHRvb2xfcGVuY2lsOueUu+eslFxyXG4gICAgICAgICAgICAgdG9vbF9oaWdobGlnaHRlcjrojaflhYnnrJRcclxuICAgICAgICAgICAgIHRvb2xfbGluZTrnm7Tnur9cclxuICAgICAgICAgICAgIHRvb2xfYXJyb3c6566t5aS0XHJcbiAgICAgICAgICAgICB0b29sX2VyYXNlcjrmqaHnmq5cclxuICAgICAgICAgICAgIHRvb2xfdGV4dDrmloflrZdcclxuICAgICAgICAgICAgIHRvb2xfZWxsaXBzZTrlrp7lv4PmpK3lnIZcclxuICAgICAgICAgICAgIHRvb2xfZWxsaXBzZV9lbXB0eTrnqbrlv4PmpK3lnIZcclxuICAgICAgICAgICAgIHRvb2xfcmVjdGFuZ2xlOuWunuW/g+efqeW9olxyXG4gICAgICAgICAgICAgdG9vbF9yZWN0YW5nbGVfZW1wdHk656m65b+D55+p5b2iXHJcbiAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWRcclxuICAgICAgICAqICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1c2VXaGl0ZWJvYXJkVG9vbCh0b29sS2V5KSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2RlZmF1bHQnO1xuXG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka111c2VXaGl0ZWJvYXJkVG9vbCB0b29sS2V5IGFuZCBpbnN0YW5jZUlkOicsIHRvb2xLZXksIGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFZpZXdNYXAuaGFzKGluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCkudXNlV2hpdGVib2FyZFRvb2wodG9vbEtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWKoOmhtVxyXG4gICAgICAgICogQHBhcmFtcyBpbnN0YW5jZUlkOueZveadv+WunuS+i2lkICAsIFN0cmluZ1xyXG4gICAgICAgICogKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYWRkUGFnZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRQYWdlKCkge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdkZWZhdWx0JztcblxuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1t3aGl0ZWJvYXJyZC1zZGtdYWRkUGFnZSAnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmhhcyhpbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KGluc3RhbmNlSWQpLmFkZFBhZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbmV4dFBhZ2UnLFxuXG5cbiAgICAgICAgLyrkuIvkuIDpobVcclxuICAgICAgICAqIEBwYXJhbXMgaW5zdGFuY2VJZDrnmb3mnb/lrp7kvotpZCAgLCBTdHJpbmdcclxuICAgICAgICAqICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0UGFnZSgpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXW5leHRQYWdlICcpO1xuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFZpZXdNYXAuaGFzKGluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCkubmV4dFBhZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5LiK5LiA6aG1XHJcbiAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWQgICwgU3RyaW5nXHJcbiAgICAgICAgKiAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcmV2UGFnZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmV2UGFnZSgpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXXByZXZQYWdlICcpO1xuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFZpZXdNYXAuaGFzKGluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCkucHJldlBhZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q6Lez6L2s5Yiw5oyH5a6a6aG1XHJcbiAgICAgICAgKiBAcGFyYW1zIHBhZ2U66Lez6L2s5Yiw55qE6aG15pWw77yMSW50XHJcbiAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWQgICwgU3RyaW5nXHJcbiAgICAgICAgKiAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdza2lwUGFnZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBza2lwUGFnZShwYWdlKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2RlZmF1bHQnO1xuXG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11za2lwUGFnZSAgcGFnZSA6JywgcGFnZSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhZ2UgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnc2tpcFBhZ2UgcGFnZSBtdXN0IGlzIG51bWJlciEnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVmlld01hcC5oYXMoaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKS5za2lwUGFnZShwYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5LiL5LiA5q2l77yM55So5LqO5Yqo5oCBcHB0XHJcbiAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWQgICwgU3RyaW5nXHJcbiAgICAgICAgKiAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICduZXh0U3RlcCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0U3RlcCgpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXW5leHRTdGVwICcpO1xuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFZpZXdNYXAuaGFzKGluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCkubmV4dFN0ZXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5LiK5LiA5q2l77yM55So5LqO5Yqo5oCBcHB0XHJcbiAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWQgICwgU3RyaW5nXHJcbiAgICAgICAgKiAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcmV2U3RlcCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmV2U3RlcCgpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXXByZXZTdGVwICcpO1xuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFZpZXdNYXAuaGFzKGluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCkucHJldlN0ZXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5pS+5aSn5pON5L2cXHJcbiAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWQgICwgU3RyaW5nXHJcbiAgICAgICAgKiAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdlbmxhcmdlV2hpdGVib2FyZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbmxhcmdlV2hpdGVib2FyZCgpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWVubGFyZ2VXaGl0ZWJvYXJkICBpbnN0YW5jZUlkOicsIGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgdmFyIHpvb21LZXkgPSAnem9vbV9iaWcnOyAvLyB6b29tX2JpZzrmlL7lpKfnmb3mnb9cbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZVpvb21XaGl0ZWFvcmQoem9vbUtleSwgaW5zdGFuY2VJZCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ25hcnJvd1doaXRlYm9hcmQnLFxuXG5cbiAgICAgICAgLyrnvKnlsI/mk43kvZxcclxuICAgICAgICAqIEBwYXJhbXMgaW5zdGFuY2VJZDrnmb3mnb/lrp7kvotpZCAgLCBTdHJpbmcqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbmFycm93V2hpdGVib2FyZCgpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXW5hcnJvd1doaXRlYm9hcmQgIGluc3RhbmNlSWQ6JywgaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICB2YXIgem9vbUtleSA9ICd6b29tX3NtYWxsJzsgLy8gem9vbV9iaWc65pS+5aSn55m95p2/XG4gICAgICAgICAgICB0aGlzLmV4ZWN1dGVab29tV2hpdGVhb3JkKHpvb21LZXksIGluc3RhbmNlSWQpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjbGVhcicsXG5cblxuICAgICAgICAvKua4heepuuW9k+WJjemhteeUu+eslOaTjeS9nFxyXG4gICAgICAgICogQHBhcmFtcyBpbnN0YW5jZUlkOueZveadv+WunuS+i2lkICAsIFN0cmluZyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWNsZWFyICBpbnN0YW5jZUlkOicsIGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgdmFyIGFjdGlvbktleSA9ICdhY3Rpb25fY2xlYXInOyAvLyBhY3Rpb25fY2xlYXI65riF56m655m95p2/55S756yUXG4gICAgICAgICAgICB0aGlzLmV4ZWN1dGVXaGl0ZWJvYXJkQWN0aW9uKGFjdGlvbktleSwgaW5zdGFuY2VJZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuaSpOmUgOeUu+eslOaTjeS9nFxyXG4gICAgICAgICogQHBhcmFtcyBpbnN0YW5jZUlkOueZveadv+WunuS+i2lkICAsIFN0cmluZyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VuZG8nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdW5kbygpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXXVuZG8gIGluc3RhbmNlSWQ6JywgaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICB2YXIgYWN0aW9uS2V5ID0gJ2FjdGlvbl91bmRvJzsgLy8gYWN0aW9uX3VuZG865pKk6ZSA55m95p2/55S756yUXG4gICAgICAgICAgICB0aGlzLmV4ZWN1dGVXaGl0ZWJvYXJkQWN0aW9uKGFjdGlvbktleSwgaW5zdGFuY2VJZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuaBouWkjeeUu+eslOaTjeS9nFxyXG4gICAgICAgICogQHBhcmFtcyBpbnN0YW5jZUlkOueZveadv+WunuS+i2lkICAsIFN0cmluZyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlZG8nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVkbygpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXXJlZG8gIGluc3RhbmNlSWQ6JywgaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICB2YXIgYWN0aW9uS2V5ID0gJ2FjdGlvbl9yZWRvJzsgLy8gYWN0aW9uX3JlZG865oGi5aSN55m95p2/55S756yUXG4gICAgICAgICAgICB0aGlzLmV4ZWN1dGVXaGl0ZWJvYXJkQWN0aW9uKGFjdGlvbktleSwgaW5zdGFuY2VJZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuWFqOWxj+WKn+iDvVxyXG4gICAgICAgICogQHBhcmFtcyBpbnN0YW5jZUlkOueZveadv+WunuS+i2lkICAsIFN0cmluZyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Z1bGxTY3JlZW4nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZnVsbFNjcmVlbigpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWZ1bGxTY3JlZW4gJyk7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVmlld01hcC5oYXMoaW5zdGFuY2VJZCkgJiYgdGhpcy5yb29tKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRWaWV3ID0gdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLmlzTW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8v56e75Yqo56uv55qE5YWo5bGPXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvb20uY2hhbmdlV2ViUGFnZUZ1bGxTY3JlZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vbS5jaGFuZ2VXZWJQYWdlRnVsbFNjcmVlbih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8v5rWP6KeI5Zmo55qE5YWo5bGPXG4gICAgICAgICAgICAgICAgICAgIGlmIChfVXRpbHMyLmRlZmF1bHQuaXNGdWxsU2NyZWVuU3RhdHVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9VdGlsczIuZGVmYXVsdC5leGl0RnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBmdWxsU2NyZWVuRWxlbWVudCA9IHdoaXRlYm9hcmRWaWV3LmdldFdoaXRlYm9hcmRSb290RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZnVsbFNjcmVlbkVsZW1lbnRJZCA9IHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLmRvY3VtZW50VG9vbEJhckNvbmZpZy5mdWxsU2NyZWVuRWxlbWVudElkO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmdWxsU2NyZWVuRWxlbWVudElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bGxTY3JlZW5FbGVtZW50SWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGZ1bGxTY3JlZW5FbGVtZW50SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxTY3JlZW5FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZnVsbFNjcmVlbkVsZW1lbnRJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsU2NyZWVuRWxlbWVudCA9IGZ1bGxTY3JlZW5FbGVtZW50SWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX1V0aWxzMi5kZWZhdWx0LmxhdW5jaEZ1bGxzY3JlZW4oZnVsbFNjcmVlbkVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB3aGl0ZWJvYXJkVmlldy5jaGFuZ2VGdWxsU2NyZWVuU3RhdGUoIHRydWUgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q6YCA5Ye65YWo5bGP5Yqf6IO9XHJcbiAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWQgICwgU3RyaW5nKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZXhpdEZ1bGxTY3JlZW4nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXhpdEZ1bGxTY3JlZW4oKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2RlZmF1bHQnO1xuXG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11leGl0RnVsbFNjcmVlbiAnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmhhcyhpbnN0YW5jZUlkKSAmJiB0aGlzLnJvb20pIHtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuaXNNb2JpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy/np7vliqjnq6/nmoTlhajlsY9cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucm9vbS5jaGFuZ2VXZWJQYWdlRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb29tLmNoYW5nZVdlYlBhZ2VGdWxsU2NyZWVuKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8v5rWP6KeI5Zmo55qE5YWo5bGPXG4gICAgICAgICAgICAgICAgICAgIF9VdGlsczIuZGVmYXVsdC5leGl0RnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB3aGl0ZWJvYXJkVmlldy5jaGFuZ2VGdWxsU2NyZWVuU3RhdGUoIGZhbHNlICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuabtOaWsOeZveadv+Wkp+Wwj1xyXG4gICAgICAgICAqIEBwYXJhbXMgaW5zdGFuY2VJZDrnmb3mnb/lrp7kvotpZCAsIFN0cmluZ1xyXG4gICAgICAgICogKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndXBkYXRlV2hpdGVib2FyZFNpemUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlV2hpdGVib2FyZFNpemUoKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2RlZmF1bHQnO1xuXG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka111cGRhdGVXaGl0ZWJvYXJkU2l6ZSAgaW5zdGFuY2VJZDonLCBpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIHZhciBjb25maWdyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmhhcyhpbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVmlldyA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRWaWV3LnJlc2l6ZVdoaXRlYm9hcmRIYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgY29uZmlncmF0aW9uID0gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCBjb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpICYmIHRoaXMuZG9jdW1lbnRSZW1hcmtWaWV3TGlzdFtpbnN0YW5jZUlkXSAmJiBfVXRpbHMyLmRlZmF1bHQuaXNGdW5jdGlvbih0aGlzLmRvY3VtZW50UmVtYXJrVmlld0xpc3RbaW5zdGFuY2VJZF0ucmVzaXplKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRSZW1hcmtWaWV3TGlzdFtpbnN0YW5jZUlkXS5yZXNpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnIHx8IGNvbmZpZ3JhdGlvbi5oYXNFeHRlbmREb2N1bWVudCkgJiYgdGhpcy5kb2N1bWVudFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXSAmJiBfVXRpbHMyLmRlZmF1bHQuaXNGdW5jdGlvbih0aGlzLmRvY3VtZW50VG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdLnJlc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50VG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdLnJlc2l6ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXSAmJiBfVXRpbHMyLmRlZmF1bHQuaXNGdW5jdGlvbih0aGlzLndoaXRlYm9hcmRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0ucmVzaXplKSkge1xuICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXS5yZXNpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndXBkYXRlQWxsV2hpdGVib2FyZFNpemUnLFxuXG5cbiAgICAgICAgLyrmm7TmlrDmiYDmnInnmb3mnb/lpKflsI8qL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlQWxsV2hpdGVib2FyZFNpemUoKSB7XG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka111cGRhdGVBbGxXaGl0ZWJvYXJkU2l6ZSAnKTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I3ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I3ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjcgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmtleXMoKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNyA9IChfc3RlcDcgPSBfaXRlcmF0b3I3Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb243ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IF9zdGVwNy52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVdoaXRlYm9hcmRTaXplKGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNyA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I3ID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb243ICYmIF9pdGVyYXRvcjcucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I3LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I3O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZXNldFdoaXRlYm9hcmREYXRhJyxcblxuXG4gICAgICAgIC8q6YeN572u5oyH5a6a55m95p2/55qE5omA5pyJ55S756yU5pWw5o2uXHJcbiAgICAgICAgICogQHBhcmFtcyBpbnN0YW5jZUlkOueZveadv+WunuS+i2lkICwg6buY6K6k5Li6J2RlZmF1bHQnLCBTdHJpbmdcclxuICAgICAgICAgKiAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRXaGl0ZWJvYXJkRGF0YSgpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXXJlc2V0V2hpdGVib2FyZERhdGEgIGluc3RhbmNlSWQ6JywgaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVmlld01hcC5oYXMoaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKS5yZXNldFdoaXRlYm9hcmREYXRhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Jlc2V0QWxsV2hpdGVib2FyZERhdGEnLFxuXG5cbiAgICAgICAgLyrph43nva7miYDmnInnmb3mnb/nmoTmlbDmja4qL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRBbGxXaGl0ZWJvYXJkRGF0YSgpIHtcbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXXJlc2V0QWxsV2hpdGVib2FyZERhdGEgJyk7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjggPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yOCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yOCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I4ID0gdGhpcy53aGl0ZWJvYXJkVmlld01hcC52YWx1ZXMoKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwODsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOCA9IChfc3RlcDggPSBfaXRlcmF0b3I4Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb244ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSBfc3RlcDgudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZFZpZXcucmVzZXRXaGl0ZWJvYXJkRGF0YSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yOCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I4ID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb244ICYmIF9pdGVyYXRvcjgucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I4LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZXNldFB1cmVXaGl0ZWJvYXJkVG90YWxQYWdlJyxcblxuXG4gICAgICAgIC8q6YeN572u57qv55m95p2/5oC76aG15pWwXHJcbiAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWQgICwgU3RyaW5nKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0UHVyZVdoaXRlYm9hcmRUb3RhbFBhZ2UoKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2RlZmF1bHQnO1xuXG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11yZXNldFB1cmVXaGl0ZWJvYXJkVG90YWxQYWdlICcpO1xuICAgICAgICAgICAgdmFyIG9sZFRvdGFsUGFnZSA9IHRoaXMucHVyZVdoaXRlYm9hcmRGaWxlaW5mb0xpc3RbaW5zdGFuY2VJZF0gPyB0aGlzLnB1cmVXaGl0ZWJvYXJkRmlsZWluZm9MaXN0W2luc3RhbmNlSWRdLnBhZ2VudW0gOiAxO1xuICAgICAgICAgICAgaWYgKHRoaXMucHVyZVdoaXRlYm9hcmRGaWxlaW5mb0xpc3RbaW5zdGFuY2VJZF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1cmVXaGl0ZWJvYXJkRmlsZWluZm9MaXN0W2luc3RhbmNlSWRdLnBhZ2VudW0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRWaWV3ID0gdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZFZpZXcgJiYgX1V0aWxzMi5kZWZhdWx0LmlzRnVuY3Rpb24od2hpdGVib2FyZFZpZXcucmVzZXRQdXJlV2hpdGVib2FyZFRvdGFsUGFnZSkpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkVmlldy5yZXNldFB1cmVXaGl0ZWJvYXJkVG90YWxQYWdlKG9sZFRvdGFsUGFnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuaUueWPmOWKqOaAgVBQVOmfs+mHj1xyXG4gICAgICAgICogQHBhcmFtcyB2b2x1bWU66Z+z6YeP5aSn5bCPKDAtMTAwKe+8jEludFxyXG4gICAgICAgICogQHBhcmFtcyBpbnN0YW5jZUlkOueZveadv+WunuS+i2lkICAsIFN0cmluZ1xyXG4gICAgICAgICogKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2hhbmdlRHluYW1pY1BwdFZvbHVtZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VEeW5hbWljUHB0Vm9sdW1lKHZvbHVtZSkge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdkZWZhdWx0JztcblxuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1t3aGl0ZWJvYXJyZC1zZGtdY2hhbmdlRHluYW1pY1BwdFZvbHVtZSB2b2x1bWU6Jywgdm9sdW1lKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygdm9sdW1lID09PSAnbnVtYmVyJyAmJiB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmhhcyhpbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVmlldyA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIGlmICh2b2x1bWUgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZvbHVtZSA9IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2b2x1bWUgPiAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgdm9sdW1lID0gMTAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcHVibXNnRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnID8gJ1BwdFZvbHVtZUNvbnRyb2wnIDogJ0V4dGVuZFBwdFZvbHVtZUNvbnRyb2wnLFxuICAgICAgICAgICAgICAgICAgICBpZDogaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnID8gJ1BwdFZvbHVtZUNvbnRyb2wnIDogJ1BwdFZvbHVtZUNvbnRyb2xfJyArIGluc3RhbmNlSWQsXG4gICAgICAgICAgICAgICAgICAgIHRvSUQ6ICdfX2FsbEV4Y2VwdFNlbmRlcicsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUluc3RhbmNlSWQ6IGluc3RhbmNlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWU6IHZvbHVtZSAvIDEwMFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzYXZlOiB0cnVlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlY2VpdmVFdmVudFJvb21QdWJtc2coeyB0eXBlOiAncm9vbS1wdWJtc2cnLCBtZXNzYWdlOiBwdWJtc2dEYXRhIH0pO1xuICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5wcHRWb2x1bWVTeW5jaHJvbml6YXRpb24gJiYgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuaXNDb25uZWN0ZWRSb29tKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHViTXNnKHB1Ym1zZ0RhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5omT5byA5paH5qGj5aSH5rOoXHJcbiAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWQgICwgU3RyaW5nKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnb3BlbkRvY3VtZW50UmVtYXJrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9wZW5Eb2N1bWVudFJlbWFyaygpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXW9wZW5Eb2N1bWVudFJlbWFyayAnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmhhcyhpbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVmlldyA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRWaWV3LmNoYW5nZURvY3VtZW50UmVtYXJrU3RhdGUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWFs+mXreaWh+aho+Wkh+azqFxyXG4gICAgICAgICogQHBhcmFtcyBpbnN0YW5jZUlkOueZveadv+WunuS+i2lkICAsIFN0cmluZyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Nsb3NlRG9jdW1lbnRSZW1hcmsnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VEb2N1bWVudFJlbWFyaygpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWNsb3NlRG9jdW1lbnRSZW1hcmsgJyk7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVmlld01hcC5oYXMoaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkVmlldy5jaGFuZ2VEb2N1bWVudFJlbWFya1N0YXRlKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5omn6KGM55m95p2/55qE5Yqo5L2cXHJcbiAgICAgICAgICogQHBhcmFtcyBhY3Rpb25LZXk655m95p2/5Yqo5L2c55qEa2V5IO+8jCBrZXnlgLzmj4/ov7DlpoLkuIvvvJpcclxuICAgICAgICAgYWN0aW9uX2NsZWFyOua4heepuueZveadv+eUu+eslFxyXG4gICAgICAgICBhY3Rpb25fcmVkbzrmgaLlpI3nmb3mnb/nlLvnrJRcclxuICAgICAgICAgYWN0aW9uX3VuZG865pKk6ZSA55m95p2/55S756yUXHJcbiAgICAgICAgICogQHBhcmFtcyBpbnN0YW5jZUlkOueZveadv+WunuS+i2lkXHJcbiAgICAgICAgICogKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZXhlY3V0ZVdoaXRlYm9hcmRBY3Rpb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXhlY3V0ZVdoaXRlYm9hcmRBY3Rpb24oYWN0aW9uS2V5KSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2RlZmF1bHQnO1xuXG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11leGVjdXRlV2hpdGVib2FyZEFjdGlvbiBhY3Rpb25LZXkgYW5kXHRpbnN0YW5jZUlkOicsIGFjdGlvbktleSwgaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVmlld01hcC5oYXMoaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKS5leGVjdXRlV2hpdGVib2FyZEFjdGlvbihhY3Rpb25LZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmiafooYznvKnmlL7nmb3mnb9cclxuICAgICAgICAgKiBAcGFyYW1zIHpvb21LZXk655m95p2/57yp5pS+55qEa2V5IO+8jCBrZXnlgLzmj4/ov7DlpoLkuIvvvJpcclxuICAgICAgICAgem9vbV9iaWc65pS+5aSn55m95p2/XHJcbiAgICAgICAgIHpvb21fc21hbGw657yp5bCP55m95p2/XHJcbiAgICAgICAgICogQHBhcmFtcyBpbnN0YW5jZUlkOueZveadv+WunuS+i2lkXHJcbiAgICAgICAgICogKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZXhlY3V0ZVpvb21XaGl0ZWFvcmQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXhlY3V0ZVpvb21XaGl0ZWFvcmQoem9vbUtleSkge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdkZWZhdWx0JztcblxuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1t3aGl0ZWJvYXJyZC1zZGtdZXhlY3V0ZVpvb21XaGl0ZWFvcmQgXHR6b29tS2V5IGFuZFx0aW5zdGFuY2VJZDonLCB6b29tS2V5LCBpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmhhcyhpbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KGluc3RhbmNlSWQpLmV4ZWN1dGVab29tV2hpdGVhb3JkKHpvb21LZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrlpITnkIZyb29tLXB1Ym1zZyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlY2VpdmVFdmVudFJvb21QdWJtc2cnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVjZWl2ZUV2ZW50Um9vbVB1Ym1zZyhyZWN2RXZlbnREYXRhKSB7XG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11yZWNlaXZlRXZlbnRSb29tUHVibXNnIFx0cmVjdkV2ZW50RGF0YTonLCByZWN2RXZlbnREYXRhKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVjdkV2ZW50RGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZWN2RXZlbnREYXRhID0gSlNPTi5wYXJzZShyZWN2RXZlbnREYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwdWJtc2dEYXRhID0gcmVjdkV2ZW50RGF0YS5tZXNzYWdlO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzV2hpdGVib2FyZENvcnJlbGF0aW9uU2lnbmFsbGluZyhwdWJtc2dEYXRhLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHB1Ym1zZ0RhdGEubmFtZSA9PT0gJ1NoYXJwc0NoYW5nZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHB1Ym1zZ0RhdGEuZGF0YSAmJiBwdWJtc2dEYXRhLmRhdGEubmlja25hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1Ym1zZ0RhdGEucmVtaW5kQ29udGVudCA9IHB1Ym1zZ0RhdGEuZGF0YS5uaWNrbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJvb20gJiYgX1V0aWxzMi5kZWZhdWx0LmlzRnVuY3Rpb24odGhpcy5yb29tLmdldFVzZXIpICYmIHRoaXMucm9vbS5nZXRVc2VyKHB1Ym1zZ0RhdGEuZnJvbUlEKSAmJiBfdHlwZW9mKHRoaXMucm9vbS5nZXRVc2VyKHB1Ym1zZ0RhdGEuZnJvbUlEKSkgPT09ICdvYmplY3QnICYmIHRoaXMucm9vbS5nZXRVc2VyKHB1Ym1zZ0RhdGEuZnJvbUlEKS5uaWNrbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHVibXNnRGF0YS5yZW1pbmRDb250ZW50ID0gdGhpcy5yb29tLmdldFVzZXIocHVibXNnRGF0YS5mcm9tSUQpLm5pY2tuYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuaGFuZGxlclB1Ym1zZ19TaGFycHNDaGFuZ2UocHVibXNnRGF0YSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwdWJtc2dEYXRhLm5hbWUgPT09ICdXQlBhZ2VDb3VudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHVyZVdoaXRlYm9hcmRGaWxlaW5mb0xpc3RbJ2RlZmF1bHQnXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXJlV2hpdGVib2FyZEZpbGVpbmZvTGlzdFsnZGVmYXVsdCddLnBhZ2VudW0gPSBwdWJtc2dEYXRhLmRhdGEudG90YWxQYWdlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwdWJtc2dEYXRhLm5hbWUgPT09ICdFeHRlbmRXQlBhZ2VDb3VudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHB1Ym1zZ0RhdGEuZGF0YSAmJiB0aGlzLnB1cmVXaGl0ZWJvYXJkRmlsZWluZm9MaXN0W3B1Ym1zZ0RhdGEuZGF0YS5zb3VyY2VJbnN0YW5jZUlkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXJlV2hpdGVib2FyZEZpbGVpbmZvTGlzdFtwdWJtc2dEYXRhLmRhdGEuc291cmNlSW5zdGFuY2VJZF0ucGFnZW51bSA9IHB1Ym1zZ0RhdGEuZGF0YS50b3RhbFBhZ2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHVibXNnRGF0YS5uYW1lID09PSAnU2hvd1BhZ2UnIHx8IHB1Ym1zZ0RhdGEubmFtZSA9PT0gJ3doaXRlYm9hcmRNYXJrVG9vbCcgfHwgcHVibXNnRGF0YS5uYW1lID09PSAnTmV3UHB0VHJpZ2dlckFjdGlvbkNsaWNrJyB8fCBwdWJtc2dEYXRhLm5hbWUgPT09ICdQcHRWb2x1bWVDb250cm9sJyB8fCBwdWJtc2dEYXRhLm5hbWUgPT09ICdINURvY3VtZW50QWN0aW9uJyB8fCBwdWJtc2dEYXRhLm5hbWUgPT09ICdFeHRlbmRTaG93UGFnZScgfHwgcHVibXNnRGF0YS5uYW1lID09PSAnRXh0ZW5kV2hpdGVib2FyZE1hcmtUb29sJyB8fCBwdWJtc2dEYXRhLm5hbWUgPT09ICdFeHRlbmRINURvY3VtZW50QWN0aW9uJyB8fCBwdWJtc2dEYXRhLm5hbWUgPT09ICdFeHRlbmRQcHRWb2x1bWVDb250cm9sJyB8fCBwdWJtc2dEYXRhLm5hbWUgPT09ICdFeHRlbmROZXdQcHRUcmlnZ2VyQWN0aW9uQ2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHVibXNnRGF0YS5uYW1lID09PSAnU2hvd1BhZ2UnIHx8IHB1Ym1zZ0RhdGEubmFtZSA9PT0gJ0V4dGVuZFNob3dQYWdlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHVibXNnRGF0YS5kYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJtc2dEYXRhLmRhdGEgPSBfVXRpbHMyLmRlZmF1bHQudG9Kc29uUGFyc2UocHVibXNnRGF0YS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHB1Ym1zZ0RhdGEuZGF0YS5pc0dlbmVyYWxGaWxlICYmIHB1Ym1zZ0RhdGEuZGF0YS5maWxlZGF0YSAmJiBwdWJtc2dEYXRhLmRhdGEuZmlsZWRhdGEuZmlsZWlkID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHB1Ym1zZ0RhdGEubmFtZSA9PT0gJ1Nob3dQYWdlJyAmJiB0aGlzLnB1cmVXaGl0ZWJvYXJkRmlsZWluZm9MaXN0WydkZWZhdWx0J10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1Ym1zZ0RhdGEuZGF0YS5maWxlZGF0YS5wYWdlbnVtID0gdGhpcy5wdXJlV2hpdGVib2FyZEZpbGVpbmZvTGlzdFsnZGVmYXVsdCddLnBhZ2VudW07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHVibXNnRGF0YS5uYW1lID09PSAnRXh0ZW5kU2hvd1BhZ2UnICYmIHRoaXMucHVyZVdoaXRlYm9hcmRGaWxlaW5mb0xpc3RbcHVibXNnRGF0YS5kYXRhLnNvdXJjZUluc3RhbmNlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJtc2dEYXRhLmRhdGEuZmlsZWRhdGEucGFnZW51bSA9IHRoaXMucHVyZVdoaXRlYm9hcmRGaWxlaW5mb0xpc3RbcHVibXNnRGF0YS5kYXRhLnNvdXJjZUluc3RhbmNlSWRdLnBhZ2VudW07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHVibXNnRGF0YS5uYW1lID09PSAnU2hvd1BhZ2UnIHx8IHB1Ym1zZ0RhdGEubmFtZSA9PT0gJ3doaXRlYm9hcmRNYXJrVG9vbCcgfHwgcHVibXNnRGF0YS5uYW1lID09PSAnTmV3UHB0VHJpZ2dlckFjdGlvbkNsaWNrJyB8fCBwdWJtc2dEYXRhLm5hbWUgPT09ICdQcHRWb2x1bWVDb250cm9sJyB8fCBwdWJtc2dEYXRhLm5hbWUgPT09ICdINURvY3VtZW50QWN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmhhcygnZGVmYXVsdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KCdkZWZhdWx0JykucmVjZWl2ZUV2ZW50Um9vbVB1Ym1zZyhyZWN2RXZlbnREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+atpOWunuS+i+S4jeWtmOWcqOWPiOaUtuWIsOS6huatpOWunuS+i+eahOa2iOaBr++8jOWImeS/neWtmOaVsOaNrlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zYXZlUHVibXNnRGF0YVsnZGVmYXVsdCddICYmIEFycmF5LmlzQXJyYXkodGhpcy5zYXZlUHVibXNnRGF0YVsnZGVmYXVsdCddKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlUHVibXNnRGF0YVsnZGVmYXVsdCddLnB1c2gocmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVQdWJtc2dEYXRhWydkZWZhdWx0J10gPSBbcmVjdkV2ZW50RGF0YV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHB1Ym1zZ0RhdGEubmFtZSA9PT0gJ0V4dGVuZFNob3dQYWdlJyB8fCBwdWJtc2dEYXRhLm5hbWUgPT09ICdFeHRlbmRXaGl0ZWJvYXJkTWFya1Rvb2wnIHx8IHB1Ym1zZ0RhdGEubmFtZSA9PT0gJ0V4dGVuZFBwdFZvbHVtZUNvbnRyb2wnIHx8IHB1Ym1zZ0RhdGEubmFtZSA9PT0gJ0V4dGVuZEg1RG9jdW1lbnRBY3Rpb24nIHx8IHB1Ym1zZ0RhdGEubmFtZSA9PT0gJ0V4dGVuZE5ld1BwdFRyaWdnZXJBY3Rpb25DbGljaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHVibXNnRGF0YS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmhhcyhwdWJtc2dEYXRhLmRhdGEuc291cmNlSW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KHB1Ym1zZ0RhdGEuZGF0YS5zb3VyY2VJbnN0YW5jZUlkKS5yZWNlaXZlRXZlbnRSb29tUHVibXNnKHJlY3ZFdmVudERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/mraTlrp7kvovkuI3lrZjlnKjlj4jmlLbliLDkuobmraTlrp7kvovnmoTmtojmga/vvIzliJnkv53lrZjmlbDmja5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNhdmVQdWJtc2dEYXRhW3B1Ym1zZ0RhdGEuZGF0YS5zb3VyY2VJbnN0YW5jZUlkXSAmJiBBcnJheS5pc0FycmF5KHRoaXMuc2F2ZVB1Ym1zZ0RhdGFbcHVibXNnRGF0YS5kYXRhLnNvdXJjZUluc3RhbmNlSWRdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZVB1Ym1zZ0RhdGFbcHVibXNnRGF0YS5kYXRhLnNvdXJjZUluc3RhbmNlSWRdLnB1c2gocmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZVB1Ym1zZ0RhdGFbcHVibXNnRGF0YS5kYXRhLnNvdXJjZUluc3RhbmNlSWRdID0gW3JlY3ZFdmVudERhdGFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb245ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yOSA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAudmFsdWVzKClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDk7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjkgPSAoX3N0ZXA5ID0gX2l0ZXJhdG9yOS5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOSA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRWaWV3ID0gX3N0ZXA5LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRWaWV3LnJlY2VpdmVFdmVudFJvb21QdWJtc2cocmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjkgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjkgJiYgX2l0ZXJhdG9yOS5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjkucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlY2VpdmVFdmVudFJvb21Db25uZWN0ZWQnLFxuXG5cbiAgICAgICAgLyrlpITnkIZyb29tLWNvbm5lY3RlZCovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWNlaXZlRXZlbnRSb29tQ29ubmVjdGVkKHJlY3ZFdmVudERhdGEpIHtcbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXXJlY2VpdmVFdmVudFJvb21Db25uZWN0ZWQgXHRyZWN2RXZlbnREYXRhOicsIHJlY3ZFdmVudERhdGEpO1xuICAgICAgICAgICAgLy8g5oi/6Ze06L+e5o6l5oiQ5Yqf5aSE55CG5riF56m65pWw5o2u55qE55u45YWz5pON5L2cXG4gICAgICAgICAgICB0aGlzLnNhdmVNc2dsaXN0RGF0YSA9IHt9O1xuICAgICAgICAgICAgdGhpcy5zYXZlUHVibXNnRGF0YSA9IHt9O1xuICAgICAgICAgICAgdGhpcy5yZXNldEFsbFdoaXRlYm9hcmREYXRhKCk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0UHVyZVdoaXRlYm9hcmRUb3RhbFBhZ2UoKTtcbiAgICAgICAgICAgIHZhciBtc2dzID0gcmVjdkV2ZW50RGF0YS5tZXNzYWdlO1xuICAgICAgICAgICAgdGhpcy5yZWNlaXZlRXZlbnRSb29tTXNnbGlzdChKU09OLnN0cmluZ2lmeSh7IHR5cGU6ICdyb29tLW1zZ2xpc3QnLCBtZXNzYWdlOiBtc2dzIH0pKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVjZWl2ZUV2ZW50Um9vbURpc2Nvbm5lY3RlZCcsXG5cblxuICAgICAgICAvKuWkseWOu+i/nuaOpSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWNlaXZlRXZlbnRSb29tRGlzY29ubmVjdGVkKCkge1xuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1t3aGl0ZWJvYXJyZC1zZGtdcmVjZWl2ZUV2ZW50Um9vbURpc2Nvbm5lY3RlZCAnKTtcbiAgICAgICAgICAgIF9HbG9iYWwyLmRlZmF1bHQubGF0ZXJBZGRyZXNzTGlzdCA9IFtdO1xuICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5oYXNHZXREb2NBZGRyZXNzSW5kZXhCeUxvY2FsU3RvcmFnZSA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IxMCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMTAgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMTAgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLnZhbHVlcygpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAxMDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTAgPSAoX3N0ZXAxMCA9IF9pdGVyYXRvcjEwLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRWaWV3ID0gX3N0ZXAxMC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZFZpZXcgJiYgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkgJiYgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuaXNEaXNjb25uZWN0ZWRDbGVhcldoaXRlYm9hcmREYXRhICYmIF9VdGlsczIuZGVmYXVsdC5pc0Z1bmN0aW9uKHdoaXRlYm9hcmRWaWV3LnJlc2V0V2hpdGVib2FyZERhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkVmlldy5yZXNldFdoaXRlYm9hcmREYXRhKCk7IC8v5aSx5Y676L+e5o6l5LiU5pyJ6YWN572u6aG55YiZ5riF6Zmk5omA5pyJ5pWw5o2uXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjEwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjEwID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMCAmJiBfaXRlcmF0b3IxMC5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjEwLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMTA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWkhOeQhnJvb20tZGVsbXNnKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVjZWl2ZUV2ZW50Um9vbURlbG1zZycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWNlaXZlRXZlbnRSb29tRGVsbXNnKHJlY3ZFdmVudERhdGEpIHtcbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXXJlY2VpdmVFdmVudFJvb21EZWxtc2cgXHRyZWN2RXZlbnREYXRhOicsIHJlY3ZFdmVudERhdGEpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZWN2RXZlbnREYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJlY3ZFdmVudERhdGEgPSBKU09OLnBhcnNlKHJlY3ZFdmVudERhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRlbG1zZ0RhdGEgPSByZWN2RXZlbnREYXRhLm1lc3NhZ2U7XG4gICAgICAgICAgICBpZiAodGhpcy5faXNXaGl0ZWJvYXJkQ29ycmVsYXRpb25TaWduYWxsaW5nKGRlbG1zZ0RhdGEubmFtZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVsbXNnRGF0YS5uYW1lID09PSAnU2hhcnBzQ2hhbmdlJykge1xuICAgICAgICAgICAgICAgICAgICBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmhhbmRsZXJEZWxtc2dfU2hhcnBzQ2hhbmdlKGRlbG1zZ0RhdGEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTEgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IxMSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IxMSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMTEgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLnZhbHVlcygpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAxMTsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTEgPSAoX3N0ZXAxMSA9IF9pdGVyYXRvcjExLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMSA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSBfc3RlcDExLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZFZpZXcucmVjZWl2ZUV2ZW50Um9vbURlbG1zZyhyZWN2RXZlbnREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjExID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMTEgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjExICYmIF9pdGVyYXRvcjExLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IxMS5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjExKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZWNlaXZlRXZlbnRSb29tTXNnbGlzdCcsXG5cblxuICAgICAgICAvKuWkhOeQhnJvb20tbXNnbGlzdCovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWNlaXZlRXZlbnRSb29tTXNnbGlzdChyZWN2RXZlbnREYXRhKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1t3aGl0ZWJvYXJyZC1zZGtdcmVjZWl2ZUV2ZW50Um9vbU1zZ2xpc3QgXHRyZWN2RXZlbnREYXRhOicsIHJlY3ZFdmVudERhdGEpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZWN2RXZlbnREYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJlY3ZFdmVudERhdGEgPSBKU09OLnBhcnNlKHJlY3ZFdmVudERhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRtcFNpZ25hbGxpbmdEYXRhID0ge307XG4gICAgICAgICAgICB2YXIgbWVzc2FnZUxpc3REYXRhID0gcmVjdkV2ZW50RGF0YS5tZXNzYWdlO1xuICAgICAgICAgICAgZm9yICh2YXIgeCBpbiBtZXNzYWdlTGlzdERhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNXaGl0ZWJvYXJkQ29ycmVsYXRpb25TaWduYWxsaW5nKG1lc3NhZ2VMaXN0RGF0YVt4XS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZUxpc3REYXRhW3hdLmRhdGEgJiYgdHlwZW9mIG1lc3NhZ2VMaXN0RGF0YVt4XS5kYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlTGlzdERhdGFbeF0uZGF0YSA9IEpTT04ucGFyc2UobWVzc2FnZUxpc3REYXRhW3hdLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0bXBTaWduYWxsaW5nRGF0YVttZXNzYWdlTGlzdERhdGFbeF0ubmFtZV0gPT09IG51bGwgfHwgdG1wU2lnbmFsbGluZ0RhdGFbbWVzc2FnZUxpc3REYXRhW3hdLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFNpZ25hbGxpbmdEYXRhW21lc3NhZ2VMaXN0RGF0YVt4XS5uYW1lXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG1wU2lnbmFsbGluZ0RhdGFbbWVzc2FnZUxpc3REYXRhW3hdLm5hbWVdLnB1c2gobWVzc2FnZUxpc3REYXRhW3hdKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFNpZ25hbGxpbmdEYXRhW21lc3NhZ2VMaXN0RGF0YVt4XS5uYW1lXS5wdXNoKG1lc3NhZ2VMaXN0RGF0YVt4XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKuWKoOmhteaVsOaNriovXG4gICAgICAgICAgICB2YXIgd0JQYWdlQ291bnRBcnIgPSB0bXBTaWduYWxsaW5nRGF0YVtcIldCUGFnZUNvdW50XCJdO1xuICAgICAgICAgICAgaWYgKHdCUGFnZUNvdW50QXJyICE9PSBudWxsICYmIHdCUGFnZUNvdW50QXJyICE9PSB1bmRlZmluZWQgJiYgd0JQYWdlQ291bnRBcnIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnB1cmVXaGl0ZWJvYXJkRmlsZWluZm9MaXN0WydkZWZhdWx0J10pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXJlV2hpdGVib2FyZEZpbGVpbmZvTGlzdFsnZGVmYXVsdCddLnBhZ2VudW0gPSB3QlBhZ2VDb3VudEFyclt3QlBhZ2VDb3VudEFyci5sZW5ndGggLSAxXS5kYXRhLnRvdGFsUGFnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0bXBTaWduYWxsaW5nRGF0YVtcIldCUGFnZUNvdW50XCJdID0gbnVsbDtcbiAgICAgICAgICAgIGRlbGV0ZSB0bXBTaWduYWxsaW5nRGF0YVtcIldCUGFnZUNvdW50XCJdO1xuXG4gICAgICAgICAgICAvKuaJqeWxleeZveadv+WKoOmhteaVsOaNriovXG4gICAgICAgICAgICB2YXIgZXh0ZW5kV0JQYWdlQ291bnRBcnIgPSB0bXBTaWduYWxsaW5nRGF0YVtcIkV4dGVuZFdCUGFnZUNvdW50XCJdO1xuICAgICAgICAgICAgaWYgKGV4dGVuZFdCUGFnZUNvdW50QXJyICE9PSBudWxsICYmIGV4dGVuZFdCUGFnZUNvdW50QXJyICE9PSB1bmRlZmluZWQgJiYgZXh0ZW5kV0JQYWdlQ291bnRBcnIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGV4dGVuZFdCUGFnZUNvdW50QXJyLmZvckVhY2goZnVuY3Rpb24gKGV4dGVuZFdCUGFnZUNvdW50LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kV0JQYWdlQ291bnQuZGF0YSAmJiBfdGhpczMucHVyZVdoaXRlYm9hcmRGaWxlaW5mb0xpc3RbZXh0ZW5kV0JQYWdlQ291bnQuZGF0YS5zb3VyY2VJbnN0YW5jZUlkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLnB1cmVXaGl0ZWJvYXJkRmlsZWluZm9MaXN0W2V4dGVuZFdCUGFnZUNvdW50LmRhdGEuc291cmNlSW5zdGFuY2VJZF0ucGFnZW51bSA9IGV4dGVuZFdCUGFnZUNvdW50LmRhdGEudG90YWxQYWdlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0bXBTaWduYWxsaW5nRGF0YVtcIkV4dGVuZFdCUGFnZUNvdW50XCJdID0gbnVsbDtcbiAgICAgICAgICAgIGRlbGV0ZSB0bXBTaWduYWxsaW5nRGF0YVtcIkV4dGVuZFdCUGFnZUNvdW50XCJdO1xuXG4gICAgICAgICAgICB2YXIgc2lnbmFsbGluZ05hbWVBcnJheSA9IFsnU2hvd1BhZ2UnLCAnd2hpdGVib2FyZE1hcmtUb29sJywgJ05ld1BwdFRyaWdnZXJBY3Rpb25DbGljaycsICdQcHRWb2x1bWVDb250cm9sJywgJ0g1RG9jdW1lbnRBY3Rpb24nLCAnRXh0ZW5kU2hvd1BhZ2UnLCAnRXh0ZW5kV2hpdGVib2FyZE1hcmtUb29sJywgJ0V4dGVuZFBwdFZvbHVtZUNvbnRyb2wnLCAnRXh0ZW5kSDVEb2N1bWVudEFjdGlvbicsICdFeHRlbmROZXdQcHRUcmlnZ2VyQWN0aW9uQ2xpY2snXTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTIgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMTIgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjEyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjEyID0gc2lnbmFsbGluZ05hbWVBcnJheVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMTI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEyID0gKF9zdGVwMTIgPSBfaXRlcmF0b3IxMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTIgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaWduYWxsaW5nTmFtZSA9IF9zdGVwMTIudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNpZ25hbGxpbmdBcnJheSA9IHRtcFNpZ25hbGxpbmdEYXRhW3NpZ25hbGxpbmdOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChzaWduYWxsaW5nTmFtZSA9PT0gJ1Nob3dQYWdlJyB8fCBzaWduYWxsaW5nTmFtZSA9PT0gJ0V4dGVuZFNob3dQYWdlJykgJiYgc2lnbmFsbGluZ0FycmF5ICYmIHNpZ25hbGxpbmdBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMTMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjEzID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjEzID0gc2lnbmFsbGluZ0FycmF5W1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAxMzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTMgPSAoX3N0ZXAxMyA9IF9pdGVyYXRvcjEzLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMyA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHB1Ym1zZ0RhdGEgPSBfc3RlcDEzLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdWJtc2dEYXRhLm5hbWUgPT09ICdTaG93UGFnZScgfHwgcHVibXNnRGF0YS5uYW1lID09PSAnRXh0ZW5kU2hvd1BhZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHB1Ym1zZ0RhdGEuZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJtc2dEYXRhLmRhdGEgPSBfVXRpbHMyLmRlZmF1bHQudG9Kc29uUGFyc2UocHVibXNnRGF0YS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwdWJtc2dEYXRhLmRhdGEuaXNHZW5lcmFsRmlsZSAmJiBwdWJtc2dEYXRhLmRhdGEuZmlsZWRhdGEgJiYgcHVibXNnRGF0YS5kYXRhLmZpbGVkYXRhLmZpbGVpZCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHB1Ym1zZ0RhdGEubmFtZSA9PT0gJ1Nob3dQYWdlJyAmJiB0aGlzLnB1cmVXaGl0ZWJvYXJkRmlsZWluZm9MaXN0WydkZWZhdWx0J10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVibXNnRGF0YS5kYXRhLmZpbGVkYXRhLnBhZ2VudW0gPSB0aGlzLnB1cmVXaGl0ZWJvYXJkRmlsZWluZm9MaXN0WydkZWZhdWx0J10ucGFnZW51bTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHB1Ym1zZ0RhdGEubmFtZSA9PT0gJ0V4dGVuZFNob3dQYWdlJyAmJiB0aGlzLnB1cmVXaGl0ZWJvYXJkRmlsZWluZm9MaXN0W3B1Ym1zZ0RhdGEuZGF0YS5zb3VyY2VJbnN0YW5jZUlkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJtc2dEYXRhLmRhdGEuZmlsZWRhdGEucGFnZW51bSA9IHRoaXMucHVyZVdoaXRlYm9hcmRGaWxlaW5mb0xpc3RbcHVibXNnRGF0YS5kYXRhLnNvdXJjZUluc3RhbmNlSWRdLnBhZ2VudW07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IxMyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IxMyA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTMgJiYgX2l0ZXJhdG9yMTMucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IxMy5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjEzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjEzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qaWYoIHNpZ25hbGxpbmdOYW1lID09PSAnU2hvd1BhZ2UnICYmICEoIHNpZ25hbGxpbmdBcnJheSAhPT0gbnVsbCAmJiBzaWduYWxsaW5nQXJyYXkgIT09IHVuZGVmaW5lZCAmJiBzaWduYWxsaW5nQXJyYXkubGVuZ3RoID4gMCApICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmhhcygnZGVmYXVsdCcpICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldCgnZGVmYXVsdCcpLnNhdmVGaWxlZGF0YUFuZExvYWRDdXJycGFnZVdoaXRlYm9hcmREYXRhKCApIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2lnbmFsbGluZ0FycmF5ICE9PSBudWxsICYmIHNpZ25hbGxpbmdBcnJheSAhPT0gdW5kZWZpbmVkICYmIHNpZ25hbGxpbmdBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2lnbmFsbGluZ05hbWUgPT09ICdTaG93UGFnZScgfHwgc2lnbmFsbGluZ05hbWUgPT09ICd3aGl0ZWJvYXJkTWFya1Rvb2wnIHx8IHNpZ25hbGxpbmdOYW1lID09PSAnTmV3UHB0VHJpZ2dlckFjdGlvbkNsaWNrJyB8fCBzaWduYWxsaW5nTmFtZSA9PT0gJ1BwdFZvbHVtZUNvbnRyb2wnIHx8IHNpZ25hbGxpbmdOYW1lID09PSAnSDVEb2N1bWVudEFjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVmlld01hcC5oYXMoJ2RlZmF1bHQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldCgnZGVmYXVsdCcpLnJlY2VpdmVFdmVudFJvb21Nc2dsaXN0KHNpZ25hbGxpbmdOYW1lLCBzaWduYWxsaW5nQXJyYXlbc2lnbmFsbGluZ0FycmF5Lmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zYXZlTXNnbGlzdERhdGFbJ2RlZmF1bHQnXSAmJiBBcnJheS5pc0FycmF5KHRoaXMuc2F2ZU1zZ2xpc3REYXRhWydkZWZhdWx0J10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVNc2dsaXN0RGF0YVsnZGVmYXVsdCddLnB1c2goc2lnbmFsbGluZ0FycmF5W3NpZ25hbGxpbmdBcnJheS5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVNc2dsaXN0RGF0YVsnZGVmYXVsdCddID0gW3NpZ25hbGxpbmdBcnJheVtzaWduYWxsaW5nQXJyYXkubGVuZ3RoIC0gMV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzaWduYWxsaW5nTmFtZSA9PT0gJ0V4dGVuZFNob3dQYWdlJyB8fCBzaWduYWxsaW5nTmFtZSA9PT0gJ0V4dGVuZFdoaXRlYm9hcmRNYXJrVG9vbCcgfHwgc2lnbmFsbGluZ05hbWUgPT09ICdFeHRlbmRQcHRWb2x1bWVDb250cm9sJyB8fCBzaWduYWxsaW5nTmFtZSA9PT0gJ0V4dGVuZEg1RG9jdW1lbnRBY3Rpb24nIHx8IHNpZ25hbGxpbmdOYW1lID09PSAnRXh0ZW5kTmV3UHB0VHJpZ2dlckFjdGlvbkNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjE0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMTQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IxNCA9IHNpZ25hbGxpbmdBcnJheVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMTQ7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE0ID0gKF9zdGVwMTQgPSBfaXRlcmF0b3IxNC5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTQgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3B1Ym1zZ0RhdGEgPSBfc3RlcDE0LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3B1Ym1zZ0RhdGEuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmhhcyhfcHVibXNnRGF0YS5kYXRhLnNvdXJjZUluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KF9wdWJtc2dEYXRhLmRhdGEuc291cmNlSW5zdGFuY2VJZCkucmVjZWl2ZUV2ZW50Um9vbU1zZ2xpc3Qoc2lnbmFsbGluZ05hbWUsIF9wdWJtc2dEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+atpOWunuS+i+S4jeWtmOWcqOWPiOaUtuWIsOS6huatpOWunuS+i+eahOa2iOaBr++8jOWImeS/neWtmOaVsOaNrlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zYXZlTXNnbGlzdERhdGFbX3B1Ym1zZ0RhdGEuZGF0YS5zb3VyY2VJbnN0YW5jZUlkXSAmJiBBcnJheS5pc0FycmF5KHRoaXMuc2F2ZU1zZ2xpc3REYXRhW19wdWJtc2dEYXRhLmRhdGEuc291cmNlSW5zdGFuY2VJZF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVNc2dsaXN0RGF0YVtfcHVibXNnRGF0YS5kYXRhLnNvdXJjZUluc3RhbmNlSWRdLnB1c2goX3B1Ym1zZ0RhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlTXNnbGlzdERhdGFbX3B1Ym1zZ0RhdGEuZGF0YS5zb3VyY2VJbnN0YW5jZUlkXSA9IFtfcHVibXNnRGF0YV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IxNCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMTQgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE0ICYmIF9pdGVyYXRvcjE0LnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjE0LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMTQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjE0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRtcFNpZ25hbGxpbmdEYXRhW3NpZ25hbGxpbmdOYW1lXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0bXBTaWduYWxsaW5nRGF0YVtzaWduYWxsaW5nTmFtZV07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyrnlLvnrJTmlbDmja4qL1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IxMiA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IxMiA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTIgJiYgX2l0ZXJhdG9yMTIucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IxMi5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjEyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjEyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc2hhcnBzQ2hhbmdlQXJyID0gdG1wU2lnbmFsbGluZ0RhdGFbXCJTaGFycHNDaGFuZ2VcIl07XG4gICAgICAgICAgICBpZiAoc2hhcnBzQ2hhbmdlQXJyICE9PSBudWxsICYmIHNoYXJwc0NoYW5nZUFyciAhPT0gdW5kZWZpbmVkICYmIHNoYXJwc0NoYW5nZUFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5oYW5kbGVyTXNnbGlzdF9TaGFycHNDaGFuZ2Uoc2hhcnBzQ2hhbmdlQXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRtcFNpZ25hbGxpbmdEYXRhW1wiU2hhcnBzQ2hhbmdlXCJdID0gbnVsbDtcbiAgICAgICAgICAgIGRlbGV0ZSB0bXBTaWduYWxsaW5nRGF0YVtcIlNoYXJwc0NoYW5nZVwiXTtcblxuICAgICAgICAgICAgdG1wU2lnbmFsbGluZ0RhdGEgPSBudWxsO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZXZlaXZlRXZlbnRSb29tVXNlcm1lZGlhb3JmaWxlc3RhdGVDaGFuZ2VkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJldmVpdmVFdmVudFJvb21Vc2VybWVkaWFvcmZpbGVzdGF0ZUNoYW5nZWQocmVjdkV2ZW50RGF0YSkge1xuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1t3aGl0ZWJvYXJyZC1zZGtdcmV2ZWl2ZUV2ZW50Um9vbVVzZXJtZWRpYW9yZmlsZXN0YXRlQ2hhbmdlZCByZWN2RXZlbnREYXRhOicsIHJlY3ZFdmVudERhdGEpO1xuICAgICAgICAgICAgdGhpcy5fZm9yd2FyZGluZ1N0cmVhbUV2ZW50cygncmV2ZWl2ZUV2ZW50Um9vbVVzZXJtZWRpYW9yZmlsZXN0YXRlQ2hhbmdlZCcsIHJlY3ZFdmVudERhdGEpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZXZlaXZlRXZlbnRSb29tVXNlcm1lZGlhb3JmaWxlYXR0cmlidXRlc1VwZGF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXZlaXZlRXZlbnRSb29tVXNlcm1lZGlhb3JmaWxlYXR0cmlidXRlc1VwZGF0ZShyZWN2RXZlbnREYXRhKSB7XG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11yZXZlaXZlRXZlbnRSb29tVXNlcm1lZGlhb3JmaWxlYXR0cmlidXRlc1VwZGF0ZSByZWN2RXZlbnREYXRhOicsIHJlY3ZFdmVudERhdGEpO1xuICAgICAgICAgICAgdGhpcy5fZm9yd2FyZGluZ1N0cmVhbUV2ZW50cygncmV2ZWl2ZUV2ZW50Um9vbVVzZXJtZWRpYW9yZmlsZWF0dHJpYnV0ZXNVcGRhdGUnLCByZWN2RXZlbnREYXRhKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVjZWl2ZUV2ZW50Um9vbUVycm9yTm90aWNlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlY2VpdmVFdmVudFJvb21FcnJvck5vdGljZShyZWN2RXZlbnREYXRhKSB7XG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11yZWNlaXZlRXZlbnRSb29tRXJyb3JOb3RpY2UgcmVjdkV2ZW50RGF0YTonLCByZWN2RXZlbnREYXRhKTtcbiAgICAgICAgICAgIHRoaXMuX2ZvcndhcmRpbmdTdHJlYW1FdmVudHMoJ3JlY2VpdmVFdmVudFJvb21FcnJvck5vdGljZScsIHJlY3ZFdmVudERhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrmjqXmlLZyb29tLXJlY2VpdmVBY3Rpb25Db21tYW5kKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmV2ZWl2ZUV2ZW50Um9vbVJlY2VpdmVBY3Rpb25Db21tYW5kJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJldmVpdmVFdmVudFJvb21SZWNlaXZlQWN0aW9uQ29tbWFuZChyZWN2RXZlbnREYXRhKSB7XG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11yZXZlaXZlRXZlbnRSb29tUmVjZWl2ZUFjdGlvbkNvbW1hbmQgXHRyZWN2RXZlbnREYXRhOicsIHJlY3ZFdmVudERhdGEpO1xuICAgICAgICAgICAgdmFyIF9yZWN2RXZlbnREYXRhJG1lc3NhZyA9IHJlY3ZFdmVudERhdGEubWVzc2FnZSxcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSBfcmVjdkV2ZW50RGF0YSRtZXNzYWcuYWN0aW9uLFxuICAgICAgICAgICAgICAgIGNtZCA9IF9yZWN2RXZlbnREYXRhJG1lc3NhZy5jbWQ7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndHJhbnNtaXRXaW5kb3dTaXplJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2luZG93UmVzaXplQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE1ID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjE1ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IxNSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IxNSA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAudmFsdWVzKClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDE1OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xNSA9IChfc3RlcDE1ID0gX2l0ZXJhdG9yMTUubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE1ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSBfc3RlcDE1LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRWaWV3LnJldmVpdmVFdmVudFJvb21SZWNlaXZlQWN0aW9uQ29tbWFuZChhY3Rpb24sIGNtZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGlmKCB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmhhcygnZGVmYXVsdCcpICl7XG4gICAgICAgICAgICAgICAgLy8gICAgIGxldCB3aGl0ZWJvYXJkVmlldyA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KCdkZWZhdWx0JykgO1xuICAgICAgICAgICAgICAgIC8vICAgICB3aGl0ZWJvYXJkVmlldy5yZXZlaXZlRXZlbnRSb29tUmVjZWl2ZUFjdGlvbkNvbW1hbmQoIGFjdGlvbiAsIGNtZCApO1xuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMTUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMTUgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE1ICYmIF9pdGVyYXRvcjE1LnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMTUucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IxNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IxNTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVnaXN0ZXJSb29tRGVsZWdhdGUnLFxuXG5cbiAgICAgICAgLyrorr7nva7miL/pl7QqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJSb29tRGVsZWdhdGUocm9vbSwgc2RrUmVjZWl2ZUFjdGlvbkNvbW1hbmQpIHtcbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXXJlZ2lzdGVyUm9vbURlbGVnYXRlIFx0cm9vbSBhbmQgIHNka1JlY2VpdmVBY3Rpb25Db21tYW5kOicsIHJvb20sIHNka1JlY2VpdmVBY3Rpb25Db21tYW5kKTtcbiAgICAgICAgICAgIHRoaXMucm9vbSA9IHJvb207XG4gICAgICAgICAgICB0aGlzLnNka1JlY2VpdmVBY3Rpb25Db21tYW5kID0gc2RrUmVjZWl2ZUFjdGlvbkNvbW1hbmQ7XG4gICAgICAgICAgICB0aGlzLl9hZGRSb29tRXZlbnQoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0Um9vbURlbGVnYXRlJyxcblxuXG4gICAgICAgIC8q6I635Y+W5oi/6Ze0Ki9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJvb21EZWxlZ2F0ZSgpIHtcbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWdldFJvb21EZWxlZ2F0ZSAnKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJvb207XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhc1Jvb21EZWxlZ2F0ZScsXG5cblxuICAgICAgICAvKuaYr+WQpuacieaIv+mXtOWxnuaApyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNSb29tRGVsZWdhdGUoKSB7XG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11oYXNSb29tRGVsZWdhdGUgJyk7XG4gICAgICAgICAgICByZXR1cm4gISF0aGlzLnJvb207XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NlbmRBY3Rpb25Db21tYW5kVG9TZGsnLFxuXG5cbiAgICAgICAgLyrlj5HpgIHliqjkvZzmjIfku6Tnu5lzZGtcclxuICAgICAgICAgKiBAcGFyYW1zIGFjdGlvbu+8muaJp+ihjOeahOWKqOS9nFxyXG4gICAgICAgICAgICAgYWN0aW9u55uu5YmN5pyJ77yaXHJcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkU2RrTm90aWNlX1Nob3dQYWdlOue/u+mhtea2iOaBr+mAmuefpee7mXNka1xyXG4gICAgICAgICAqIEBwYXJhbXMgY21kOuWKqOS9nOaPj+i/sFxyXG4gICAgICAgICogKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbmRBY3Rpb25Db21tYW5kVG9TZGsoYWN0aW9uLCBjbWQpIHtcbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXXNlbmRBY3Rpb25Db21tYW5kVG9TZGsgXHRhY3Rpb24gYW5kXHRjbWQ6JywgYWN0aW9uLCBjbWQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2RrUmVjZWl2ZUFjdGlvbkNvbW1hbmQgJiYgdHlwZW9mIHRoaXMuc2RrUmVjZWl2ZUFjdGlvbkNvbW1hbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBjbWQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNtZCkpICYmICFBcnJheS5pc0FycmF5KGNtZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY21kID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjbWQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZGtSZWNlaXZlQWN0aW9uQ29tbWFuZChhY3Rpb24sIGNtZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWPkemAgVB1Yk1zZ+S/oeS7pFxyXG4gICAgICAgICAqIEBhbGxQYXJhbXMgcGFyYW1zOnB1Yk1zZ+mcgOimgeeahOaJgOacieWPguaVsOaJv+aOpeWvueixoVxyXG4gICAgICAgICAqIEBwYXJhbXMgcGFyYW1zLm5hbWU65L+h5Luk5ZCN5a2XICwgU3RyaW5nXHJcbiAgICAgICAgICogQHBhcmFtcyBwYXJhbXMuaWQ65L+h5LukSUQgLCBTdHJpbmdcclxuICAgICAgICAgKiBAcGFyYW1zIHBhcmFtcy50b0lEOuWPkemAgee7meiwgSjpu5jorqTlj5Hnu5nmiYDmnInkuropICwgU3RyaW5nXHJcbiAgICAgICAgIF9fYWxs77yI5omA5pyJ5Lq677yM5YyF5ous6Ieq5bex77yJICxcclxuICAgICAgICAgX19hbGxFeGNlcHRTZW5kZXIg77yI6Zmk5LqG6Ieq5bex5Lul5aSW55qE5omA5pyJ5Lq677yJLFxyXG4gICAgICAgICB1c2VyaWTvvIjmjIflrpppZOWPkee7meafkOS6uu+8iSAsXHJcbiAgICAgICAgIF9fbm9uZSDvvIjosIHkuZ/kuI3lj5HvvIzlj6rmnInmnI3liqHlmajkvJrmlLbliLDvvIksXHJcbiAgICAgICAgIF9fYWxsU3VwZXJVc2Vyc++8iOWPquWPkee7meWKqeaVmeWSjOiAgeW4iO+8iSxcclxuICAgICAgICAgX19ncm91cDpncm91cEE6Z3JvdXBCKOWPkemAgee7meaMh+Wumue7hO+8jOe7hGlk5LiN6IO95YyF5ZCr5YaS5Y+3KSxcclxuICAgICAgICAgX19ncm91cEV4Y2VwdFNlbmRlcjpncm91cEHvvIjlj5Hnu5nmjIflrprnu4TvvIzkuI3ljIXmi6zoh6rlt7HvvIlcclxuICAgICAgICAgKiBAcGFyYW1zIHBhcmFtcy5kYXRhOuS/oeS7pOaQuuW4pueahOaVsOaNriAsIEpzb24vSnNvblN0cmluZ1xyXG4gICAgICAgICAqIEBwYXJhbXMgcGFyYW1zLnNhdmU65L+h5Luk5piv5ZCm5L+d5a2YICwgQm9vbGVhblxyXG4gICAgICAgICAqIEBwYXJhbXMgcGFyYW1zLmV4cGlyZXNhYnM65pqC5pe25LiN55SoXHJcbiAgICAgICAgICogQHBhcmFtcyBwYXJhbXMuYXNzb2NpYXRlZE1zZ0lEOue7keWumueahOeItue6p+S/oeS7pGlkICwgU3RyaW5nXHJcbiAgICAgICAgICogQHBhcmFtcyBwYXJhbXMuYXNzb2NpYXRlZFVzZXJJRDrnu5HlrprnmoTnlKjmiLdpZCAsIFN0cmluZ1xyXG4gICAgICAgICAqIEBwYXJhbXMgcGFyYW1zLmV4cGlyZXM65pqC5pe25peg5pWIXHJcbiAgICAgICAgICogQHBhcmFtcyBwYXJhbXMudHlwZTrmianlsZXnsbvlnovvvIznm67liY3lj6rmnIljb3VudOS4gOenjeaJqeWxleexu+Wei++8jOS5i+WQjuWmgumcgOaJqeWxleWPr+WcqOatpOWkhOi/m+ihjOebuOW6lOWPmOWKqCAsIFN0cmluZyAo55uu5YmN55u05pKt5omN5pyJ55SoKVxyXG4gICAgICAgICAqIEBwYXJhbXMgcGFyYW1zLndyaXRlMkRCOuaaguaXtuaXoOaViCwgQm9vbGVhbiAo55uu5YmN55u05pKt5omN5pyJ55SoKVxyXG4gICAgICAgICAqIEBwYXJhbXMgcGFyYW1zLmFjdGlvbnM65omn6KGM55qE5Yqo5L2c5pON5L2c5YiX6KGo77yM55uu5YmN5Y+q5pyJMO+8jDEgKDAt5LiN5pON5L2c77yMMS3ku6Pooajlop7liqDmk43kvZwpLCBBcnJheSAo55uu5YmN55u05pKt5omN5pyJ55SoKVxyXG4gICAgICAgICAqIEBwYXJhbXMgcGFyYW1zLmRvX25vdF9yZXBsYWNlOuiAgeW4iOWSjOWKqeaVmeS4jeiDveWQjOaXtuaTjeS9nO+8jOWQjuaTjeS9nOeahOacjeWKoeWZqOebtOaOpeS4ouW8gywgQm9vbGVhbiAo55uu5YmN55u05pKt5omN5pyJ55SoKVxyXG4gICAgICAgICAqIOWkh+azqO+8muaMh+WumueUqOaIt+S8muaUtuWIsOS6i+S7tnJvb20tcHVibXNnXHJcbiAgICAgICAgICogKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncHViTXNnJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHB1Yk1zZyhwYXJhbXMpIHtcbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXXB1Yk1zZyBcdHBhcmFtcyA6JywgcGFyYW1zKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJvb20gJiYgdGhpcy5yb29tLnB1Yk1zZykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSBKU09OLnBhcnNlKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMubmFtZSA9PT0gJ1dCUGFnZUNvdW50JyAmJiB0aGlzLnB1cmVXaGl0ZWJvYXJkRmlsZWluZm9MaXN0WydkZWZhdWx0J10pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXJlV2hpdGVib2FyZEZpbGVpbmZvTGlzdFsnZGVmYXVsdCddLnBhZ2VudW0gPSBwYXJhbXMuZGF0YS50b3RhbFBhZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMubmFtZSA9PT0gJ0V4dGVuZFdCUGFnZUNvdW50JyAmJiB0aGlzLnB1cmVXaGl0ZWJvYXJkRmlsZWluZm9MaXN0W3BhcmFtcy5kYXRhLnNvdXJjZUluc3RhbmNlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHVyZVdoaXRlYm9hcmRGaWxlaW5mb0xpc3RbcGFyYW1zLmRhdGEuc291cmNlSW5zdGFuY2VJZF0ucGFnZW51bSA9IHBhcmFtcy5kYXRhLnRvdGFsUGFnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5kYXRhICYmIF90eXBlb2YocGFyYW1zLmRhdGEpID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShwYXJhbXMuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmRhdGEgPSBKU09OLnN0cmluZ2lmeShwYXJhbXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucm9vbS5wdWJNc2cocGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZGVsTXNnJyxcblxuXG4gICAgICAgIC8q5Y+R6YCBRGVsTXNn5L+h5Luk5Yqf6IO95Ye95pWwLOWIoOmZpOS5i+WJjeWPkemAgeeahOS/oeS7pFxyXG4gICAgICAgICAqIEBhbGxQYXJhbXMgcGFyYW1zOmRlbE1zZ+mcgOimgeeahOaJgOacieWPguaVsOaJv+aOpeWvueixoVxyXG4gICAgICAgICAqIEBwYXJhbXMgbXNnTmFtZTrkv6Hku6TlkI3lrZcgLCBTdHJpbmdcclxuICAgICAgICAgKiBAcGFyYW1zIG1zZ0lkOuS/oeS7pElEICwgU3RyaW5nXHJcbiAgICAgICAgICogQHBhcmFtcyB0b0lkOuWPkemAgee7meiwgSjpu5jorqTlj5Hnu5nmiYDmnInkuropICwgU3RyaW5nXHJcbiAgICAgICAgIF9fYWxs77yI5omA5pyJ5Lq677yM5YyF5ous6Ieq5bex77yJICxcclxuICAgICAgICAgX19hbGxFeGNlcHRTZW5kZXIg77yI6Zmk5LqG6Ieq5bex5Lul5aSW55qE5omA5pyJ5Lq677yJLFxyXG4gICAgICAgICB1c2VyaWTvvIjmjIflrpppZOWPkee7meafkOS6uu+8iSAsXHJcbiAgICAgICAgIF9fbm9uZSDvvIjosIHkuZ/kuI3lj5HvvIzlj6rmnInmnI3liqHlmajkvJrmlLbliLDvvIksXHJcbiAgICAgICAgIF9fYWxsU3VwZXJVc2Vyc++8iOWPquWPkee7meWKqeaVmeWSjOiAgeW4iO+8iSxcclxuICAgICAgICAgX19ncm91cDpncm91cEE6Z3JvdXBCKOWPkemAgee7meaMh+Wumue7hO+8jOe7hGlk5LiN6IO95YyF5ZCr5YaS5Y+3KSxcclxuICAgICAgICAgX19ncm91cEV4Y2VwdFNlbmRlcjpncm91cEHvvIjlj5Hnu5nmjIflrprnu4TvvIzkuI3ljIXmi6zoh6rlt7HvvIlcclxuICAgICAgICAgKiBAcGFyYW1zIGRhdGE65L+h5Luk5pC65bim55qE5pWw5o2uICwgSnNvbi9Kc29uU3RyaW5nXHJcbiAgICAgICAgICrlpIfms6jvvJrmjIflrprnlKjmiLfkvJrmlLbliLDkuovku7Zyb29tLWRlbG1zZ1xyXG4gICAgICAgICAqICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxNc2cocGFyYW1zKSB7XG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11kZWxNc2cgcGFyYW1zIDonLCBwYXJhbXMpO1xuICAgICAgICAgICAgaWYgKHRoaXMucm9vbSAmJiB0aGlzLnJvb20uZGVsTXNnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5kYXRhICYmIF90eXBlb2YocGFyYW1zLmRhdGEpID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShwYXJhbXMuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmRhdGEgPSBKU09OLnN0cmluZ2lmeShwYXJhbXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucm9vbS5kZWxNc2cocGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc3RhcnRTaGFyZU1lZGlhJyxcblxuXG4gICAgICAgIC8q5byA5aeL5YWx5Lqr5aqS5L2T5paH5Lu2Ki9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0U2hhcmVNZWRpYSh1cmwsIGlzVmlkZW8sIHRvSUQpIHtcbiAgICAgICAgICAgIHZhciBhdHRycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXXN0YXJ0U2hhcmVNZWRpYSB1cmwgIGlzVmlkZW8gIHRvSUQgIGFuZCAgYXR0cnM6JywgdXJsLCBpc1ZpZGVvLCB0b0lELCBhdHRycyk7XG4gICAgICAgICAgICB0aGlzLnN0b3BTaGFyZU1lZGlhKCk7XG4gICAgICAgICAgICB0aGlzLnN0b3BTaGFyZUxvY2FsTWVkaWEoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJvb20gJiYgdGhpcy5yb29tLnN0YXJ0U2hhcmVNZWRpYSkge1xuICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVmlldyA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KCdkZWZhdWx0Jyk7XG4gICAgICAgICAgICAgICAgaWYgKGlzVmlkZW8gJiYgd2hpdGVib2FyZFZpZXcgJiYgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkgJiYgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkubWVkaWFTaGFyZVBhdXNlV2hlbk92ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cnNbJ3BhdXNlV2hlbk92ZXInXSA9IHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLm1lZGlhU2hhcmVQYXVzZVdoZW5PdmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZFZpZXcgJiYgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkgJiYgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkubXlVc2VySWQgIT09IHVuZGVmaW5lZCAmJiAhd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuc3luY2hyb25pemF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvSUQgPSB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5teVVzZXJJZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFRLLlNES1RZUEUgIT09ICdtb2JpbGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9vbS5zdGFydFNoYXJlTWVkaWEodXJsLCBpc1ZpZGVvLCBmdW5jdGlvbiAoZmFpbGluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ1t3aGl0ZWJvYXJkLXNka11zdGFydFNoYXJlTWVkaWEgZmFpbCAsIGZhaWwgaW5mbzonICsgZmFpbGluZm8pO1xuICAgICAgICAgICAgICAgICAgICB9LCB7IHRvSUQ6IHRvSUQsIGF0dHJzOiBhdHRycyB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb20uc3RhcnRTaGFyZU1lZGlhKHVybCwgaXNWaWRlbywgdG9JRCwgYXR0cnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc3RvcFNoYXJlTWVkaWEnLFxuXG5cbiAgICAgICAgLyrlgZzmraLlhbHkuqvlqpLkvZPmlofku7YqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcFNoYXJlTWVkaWEoKSB7XG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11zdG9wU2hhcmVNZWRpYSAnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJvb20gJiYgdGhpcy5yb29tLnN0b3BTaGFyZU1lZGlhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb29tLnN0b3BTaGFyZU1lZGlhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3N0b3BTaGFyZUxvY2FsTWVkaWEnLFxuXG5cbiAgICAgICAgLyrlgZzmraLlhbHkuqvmnKzlnLDlqpLkvZPmlofku7YqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcFNoYXJlTG9jYWxNZWRpYSgpIHtcbiAgICAgICAgICAgIGlmIChUSy5TREtUWVBFICE9PSAnbW9iaWxlJyAmJiB0aGlzLnJvb20gJiYgdGhpcy5yb29tLnN0b3BTaGFyZUxvY2FsTWVkaWEpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11zdG9wU2hhcmVMb2NhbE1lZGlhICcpO1xuICAgICAgICAgICAgICAgIHRoaXMucm9vbS5zdG9wU2hhcmVMb2NhbE1lZGlhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NyZWF0ZUF1ZGlvUGxheWVyJyxcblxuXG4gICAgICAgIC8q5Yib5bu66Z+z6aKR5pKt5pS+5ZmoXHJcbiAgICAgICAgKiBAcGFyYW1zIHBhcmVudE5vZGU65om/5pS+55qE6IqC54K5XHJcbiAgICAgICAgKiBAcGFyYW1zIGNvbmZpZzrphY3nva7pobkqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQXVkaW9QbGF5ZXIocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdmFyIGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWNyZWF0ZUF1ZGlvUGxheWVyIHBhcmVudE5vZGUgYW5kIGNvbmZpZyA6JywgcGFyZW50Tm9kZSwgY29uZmlnKTtcbiAgICAgICAgICAgIGlmICghd2luZG93LlRhbGtBdWRpb1BsYXllcikge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdUaGUgcmVzb3VyY2UgZmlsZSBmb3IgdGhlIGF1ZGlvIHBsYXllciBpcyBub3QgbG9hZGVkIGFuZCBjYW5cXCd0IGJlIGV4ZWN1dGVkIHdpdGggY3JlYXRlQXVkaW9QbGF5ZXIgbWV0aG9kcy4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmVudE5vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudE5vZGVTdHIgPSBwYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwYXJlbnROb2RlU3RyKTtcbiAgICAgICAgICAgICAgICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnVGhlIG5vZGUgaWQgY2Fubm90IGJlIGZvdW5kIGJ5IG5vZGUgaWQsIGFuZCBjcmVhdGVBdWRpb1BsYXllciBtZXRob2QgY2Fubm90IGJlIHBlcmZvcm1lZCAsIGVsZW1lbnQgaWQgaXMgJyArIHBhcmVudE5vZGVTdHIgKyAnLicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluc3RhbmNlSWQgPSAnZGVmYXVsdCc7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIHZhciBlbGVtZW50Tm9kZSA9IHBhcmVudE5vZGUgfHwgKHdoaXRlYm9hcmRWaWV3ID8gd2hpdGVib2FyZFZpZXcuZ2V0V2hpdGVib2FyZFJvb3RFbGVtZW50KCkgOiBkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmF1ZGlvUGxheWVyVmlldyAmJiB0aGlzLmF1ZGlvUGxheWVyVmlldy5kZXN0cm95Vmlldykge1xuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXJWaWV3LmRlc3Ryb3lWaWV3KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllclZpZXcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyVmlldyA9IG5ldyB3aW5kb3cuVGFsa0F1ZGlvUGxheWVyKGVsZW1lbnROb2RlLCBpbnN0YW5jZUlkLCB0aGlzLCBPYmplY3QuZGVlcEFzc2lnbih7fSwgY29uZmlnLCB7XG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VUeXBlOiB3aGl0ZWJvYXJkVmlldyA/IHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLmxhbmd1YWdlVHlwZSA6ICdjaCcsXG4gICAgICAgICAgICAgICAgaXNNb2JpbGU6IHdoaXRlYm9hcmRWaWV3ID8gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuaXNNb2JpbGUgOiBmYWxzZVxuICAgICAgICAgICAgfSwgX0NvbmZpZ3VyYXRpb24yLmRlZmF1bHQuY29tbW9uV2hpdGVib2FyZCksIHdoaXRlYm9hcmRWaWV3ID8gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjcmVhdGVWaWRlb1BsYXllcicsXG5cblxuICAgICAgICAvKuWIm+W7uuinhumikeaSreaUvuWZqFxyXG4gICAgICAgICAqIEBwYXJhbXMgcGFyZW50Tm9kZTrmib/mlL7nmoToioLngrlcclxuICAgICAgICAgKiBAcGFyYW1zIGNvbmZpZzrphY3nva7pobkqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlVmlkZW9QbGF5ZXIocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdmFyIGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWNyZWF0ZVZpZGVvUGxheWVyIHBhcmVudE5vZGUgYW5kIGNvbmZpZyA6JywgcGFyZW50Tm9kZSwgY29uZmlnKTtcbiAgICAgICAgICAgIGlmICghd2luZG93LlRhbGtWaWRlb1BsYXllcikge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdUaGUgcmVzb3VyY2UgZmlsZSBmb3IgdGhlIGF1ZGlvIHBsYXllciBpcyBub3QgbG9hZGVkIGFuZCBjYW5cXCd0IGJlIGV4ZWN1dGVkIHdpdGggY3JlYXRlVmlkZW9QbGF5ZXIgbWV0aG9kcy4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmVudE5vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudE5vZGVTdHIgPSBwYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwYXJlbnROb2RlU3RyKTtcbiAgICAgICAgICAgICAgICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnVGhlIG5vZGUgaWQgY2Fubm90IGJlIGZvdW5kIGJ5IG5vZGUgaWQsIGFuZCBjcmVhdGVWaWRlb1BsYXllciBtZXRob2QgY2Fubm90IGJlIHBlcmZvcm1lZCAsIGVsZW1lbnQgaWQgaXMgJyArIHBhcmVudE5vZGVTdHIgKyAnLicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluc3RhbmNlSWQgPSAnZGVmYXVsdCc7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIHZhciBlbGVtZW50Tm9kZSA9IHBhcmVudE5vZGUgfHwgKHdoaXRlYm9hcmRWaWV3ID8gd2hpdGVib2FyZFZpZXcuZ2V0V2hpdGVib2FyZFJvb3RFbGVtZW50KCkgOiBkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgICAgIGlmICh0aGlzLnZpZGVvUGxheWVyVmlldyAmJiB0aGlzLnZpZGVvUGxheWVyVmlldy5kZXN0cm95Vmlldykge1xuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9QbGF5ZXJWaWV3LmRlc3Ryb3lWaWV3KCk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWRlb1BsYXllclZpZXcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyVmlldyA9IG5ldyB3aW5kb3cuVGFsa1ZpZGVvUGxheWVyKGVsZW1lbnROb2RlLCBpbnN0YW5jZUlkLCB0aGlzLCBPYmplY3QuZGVlcEFzc2lnbih7fSwgY29uZmlnLCB7XG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VUeXBlOiB3aGl0ZWJvYXJkVmlldyA/IHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLmxhbmd1YWdlVHlwZSA6ICdjaCcsXG4gICAgICAgICAgICAgICAgaXNNb2JpbGU6IHdoaXRlYm9hcmRWaWV3ID8gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuaXNNb2JpbGUgOiBmYWxzZVxuICAgICAgICAgICAgfSwgX0NvbmZpZ3VyYXRpb24yLmRlZmF1bHQuY29tbW9uV2hpdGVib2FyZCksIHdoaXRlYm9hcmRWaWV3ID8gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjcmVhdGVEb2N1bWVudFJlbWFyaycsXG5cblxuICAgICAgICAvKuWIm+W7uuivvuS7tuWkh+azqOinhuWbvlxyXG4gICAgICAgICAqIEBwYXJhbXMgcGFyZW50Tm9kZTrmib/mlL7nmoToioLngrlcclxuICAgICAgICAgKiBAcGFyYW1zIGNvbmZpZzrphY3nva7poblcclxuICAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWQgICwgU3RyaW5nKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZURvY3VtZW50UmVtYXJrKHBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBhcmd1bWVudHNbMl07XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWNyZWF0ZURvY3VtZW50UmVtYXJrIHBhcmVudE5vZGUgYW5kIGNvbmZpZyA6JywgcGFyZW50Tm9kZSwgY29uZmlnKTtcbiAgICAgICAgICAgIGlmICghd2luZG93LlRhbGtEb2N1bWVudFJlbWFyaykge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdUaGUgcmVzb3VyY2UgZmlsZSBmb3IgdGhlIGRvY3VtZW50IHRvb2wgYmFyIGlzIG5vdCBsb2FkZWQgYW5kIGNhblxcJ3QgYmUgZXhlY3V0ZWQgd2l0aCBjcmVhdGVEb2N1bWVudFJlbWFyayBtZXRob2RzLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyZW50Tm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50Tm9kZVN0ciA9IHBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhcmVudE5vZGVTdHIpO1xuICAgICAgICAgICAgICAgIGlmICghcGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBMLkxvZ2dlci53YXJuaW5nKCdUaGUgbm9kZSBpZCBjYW5ub3QgYmUgZm91bmQgYnkgbm9kZSBpZCwgYW5kIGNyZWF0ZURvY3VtZW50UmVtYXJrIG1ldGhvZCBjYW5ub3QgYmUgcGVyZm9ybWVkICwgZWxlbWVudCBpZCBpcyAnICsgcGFyZW50Tm9kZVN0ciArICcuJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVmlldyA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgdmFyIGVsZW1lbnROb2RlID0gcGFyZW50Tm9kZSB8fCAod2hpdGVib2FyZFZpZXcgPyB3aGl0ZWJvYXJkVmlldy5nZXRXaGl0ZWJvYXJkUm9vdEVsZW1lbnQoKSA6IGRvY3VtZW50LmJvZHkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRSZW1hcmtWaWV3TGlzdFtpbnN0YW5jZUlkXSAmJiB0aGlzLmRvY3VtZW50UmVtYXJrVmlld0xpc3RbaW5zdGFuY2VJZF0uZGVzdHJveVZpZXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50UmVtYXJrVmlld0xpc3RbaW5zdGFuY2VJZF0uZGVzdHJveVZpZXcoKTtcbiAgICAgICAgICAgICAgICAvLyB0aGlzLmRvY3VtZW50UmVtYXJrVmlld0xpc3RbaW5zdGFuY2VJZF0gPSB1bmRlZmluZWQgO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRvY3VtZW50UmVtYXJrVmlld0xpc3RbaW5zdGFuY2VJZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50UmVtYXJrVmlld0xpc3RbaW5zdGFuY2VJZF0gPSBuZXcgd2luZG93LlRhbGtEb2N1bWVudFJlbWFyayhlbGVtZW50Tm9kZSwgaW5zdGFuY2VJZCwgdGhpcywgT2JqZWN0LmRlZXBBc3NpZ24oe30sIGNvbmZpZywge1xuICAgICAgICAgICAgICAgIGxhbmd1YWdlVHlwZTogd2hpdGVib2FyZFZpZXcgPyB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5sYW5ndWFnZVR5cGUgOiAnY2gnLFxuICAgICAgICAgICAgICAgIGlzTW9iaWxlOiB3aGl0ZWJvYXJkVmlldyA/IHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLmlzTW9iaWxlIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2FuUmVtYXJrOiB3aGl0ZWJvYXJkVmlldyA/IHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLmNhblJlbWFyayA6IGZhbHNlXG4gICAgICAgICAgICB9LCBfQ29uZmlndXJhdGlvbjIuZGVmYXVsdC5jb21tb25XaGl0ZWJvYXJkKSwgd2hpdGVib2FyZFZpZXcgPyB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZFZpZXcpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXdTdGF0ZSA9IHRoaXMuZ2V0V2hpdGVib2FyZFZpZXdTdGF0ZShpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudFJlbWFya1ZpZXdMaXN0W2luc3RhbmNlSWRdICYmIHRoaXMuZG9jdW1lbnRSZW1hcmtWaWV3TGlzdFtpbnN0YW5jZUlkXS5yZWNlaXZlQWN0aW9uQ29tbWFuZCAmJiB3aGl0ZWJvYXJkVmlld1N0YXRlICYmIE9iamVjdC5rZXlzKHdoaXRlYm9hcmRWaWV3U3RhdGUucGFnZSkubGVuZ3RoICYmIE9iamVjdC5rZXlzKHdoaXRlYm9hcmRWaWV3U3RhdGUuem9vbSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSAndmlld1N0YXRlVXBkYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdTdGF0ZTogd2hpdGVib2FyZFZpZXdTdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZpZXdTdGF0ZToge31cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFJlbWFya1ZpZXdMaXN0W2luc3RhbmNlSWRdLnJlY2VpdmVBY3Rpb25Db21tYW5kKGFjdGlvbiwgY21kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NyZWF0ZURvY3VtZW50VG9vbEJhcicsXG5cblxuICAgICAgICAvKuWIm+W7uueZveadv+e/u+mhteW3peWFt+adoVxyXG4gICAgICAgICAqIEBwYXJhbXMgcGFyZW50Tm9kZTrmib/mlL7nmoToioLngrlcclxuICAgICAgICAgKiBAcGFyYW1zIGNvbmZpZzrphY3nva7poblcclxuICAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWQgICwgU3RyaW5nKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZURvY3VtZW50VG9vbEJhcihwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWNyZWF0ZURvY3VtZW50VG9vbEJhciBwYXJlbnROb2RlIGFuZCBjb25maWcgOicsIHBhcmVudE5vZGUsIGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5UYWxrRG9jdW1lbnRUb29sYmFyKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1RoZSByZXNvdXJjZSBmaWxlIGZvciB0aGUgZG9jdW1lbnQgdG9vbCBiYXIgaXMgbm90IGxvYWRlZCBhbmQgY2FuXFwndCBiZSBleGVjdXRlZCB3aXRoIGNyZWF0ZURvY3VtZW50VG9vbEJhciBtZXRob2RzLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyZW50Tm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50Tm9kZVN0ciA9IHBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhcmVudE5vZGVTdHIpO1xuICAgICAgICAgICAgICAgIGlmICghcGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBMLkxvZ2dlci53YXJuaW5nKCdUaGUgbm9kZSBpZCBjYW5ub3QgYmUgZm91bmQgYnkgbm9kZSBpZCwgYW5kIGNyZWF0ZURvY3VtZW50VG9vbEJhciBtZXRob2QgY2Fubm90IGJlIHBlcmZvcm1lZCAsIGVsZW1lbnQgaWQgaXMgJyArIHBhcmVudE5vZGVTdHIgKyAnLicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIHZhciBlbGVtZW50Tm9kZSA9IHBhcmVudE5vZGUgfHwgKHdoaXRlYm9hcmRWaWV3ID8gd2hpdGVib2FyZFZpZXcuZ2V0V2hpdGVib2FyZFJvb3RFbGVtZW50KCkgOiBkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRvY3VtZW50VG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdICYmIHRoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0uZGVzdHJveVZpZXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50VG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdLmRlc3Ryb3lWaWV3KCk7XG4gICAgICAgICAgICAgICAgLy8gdGhpcy5kb2N1bWVudFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXSA9IHVuZGVmaW5lZCA7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50VG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdID0gbmV3IHdpbmRvdy5UYWxrRG9jdW1lbnRUb29sYmFyKGVsZW1lbnROb2RlLCBpbnN0YW5jZUlkLCB0aGlzLCBPYmplY3QuZGVlcEFzc2lnbih7fSwgY29uZmlnLCB7XG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VUeXBlOiB3aGl0ZWJvYXJkVmlldyA/IHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpLmxhbmd1YWdlVHlwZSA6ICdjaCcsXG4gICAgICAgICAgICAgICAgaXNNb2JpbGU6IHdoaXRlYm9hcmRWaWV3ID8gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuaXNNb2JpbGUgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjYW5SZW1hcms6IHdoaXRlYm9hcmRWaWV3ID8gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuY2FuUmVtYXJrIDogZmFsc2VcbiAgICAgICAgICAgIH0sIF9Db25maWd1cmF0aW9uMi5kZWZhdWx0LmNvbW1vbldoaXRlYm9hcmQpLCB3aGl0ZWJvYXJkVmlldyA/IHdoaXRlYm9hcmRWaWV3LmdldENvbmZpZ3JhdGlvbigpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkVmlldykge1xuICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVmlld1N0YXRlID0gdGhpcy5nZXRXaGl0ZWJvYXJkVmlld1N0YXRlKGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvY3VtZW50VG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdICYmIHRoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0ucmVjZWl2ZUFjdGlvbkNvbW1hbmQgJiYgd2hpdGVib2FyZFZpZXdTdGF0ZSAmJiBPYmplY3Qua2V5cyh3aGl0ZWJvYXJkVmlld1N0YXRlLnBhZ2UpLmxlbmd0aCAmJiBPYmplY3Qua2V5cyh3aGl0ZWJvYXJkVmlld1N0YXRlLnpvb20pLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gJ3ZpZXdTdGF0ZVVwZGF0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3U3RhdGU6IHdoaXRlYm9hcmRWaWV3U3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVWaWV3U3RhdGU6IHt9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0ucmVjZWl2ZUFjdGlvbkNvbW1hbmQoYWN0aW9uLCBjbWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY3JlYXRlV2hpdGVib2FyZFRvb2xCYXInLFxuXG5cbiAgICAgICAgLyrliJvlu7rnmb3mnb/moIfms6jlt6XlhbfmnaFcclxuICAgICAgICAgKiBAcGFyYW1zIHBhcmVudE5vZGU65om/5pS+55qE6IqC54K5XHJcbiAgICAgICAgICogQHBhcmFtcyBjb25maWc66YWN572u6aG5XHJcbiAgICAgICAgICogQHBhcmFtcyBpbnN0YW5jZUlkOueZveadv+WunuS+i2lkICAsIFN0cmluZyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVXaGl0ZWJvYXJkVG9vbEJhcihwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWNyZWF0ZVdoaXRlYm9hcmRUb29sQmFyIHBhcmVudE5vZGUgIGNvbmZpZyAgYW5kIGluc3RhbmNlSWQgOicsIHBhcmVudE5vZGUsIGNvbmZpZywgaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5UYWxrV2hpdGVib2FyZFRvb2xiYXIpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignVGhlIHJlc291cmNlIGZpbGUgZm9yIHRoZSBkb2N1bWVudCB0b29sIGJhciBpcyBub3QgbG9hZGVkIGFuZCBjYW5cXCd0IGJlIGV4ZWN1dGVkIHdpdGggVGFsa1doaXRlYm9hcmRUb29sYmFyIG1ldGhvZHMuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJlbnROb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnROb2RlU3RyID0gcGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFyZW50Tm9kZVN0cik7XG4gICAgICAgICAgICAgICAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ1RoZSBub2RlIGlkIGNhbm5vdCBiZSBmb3VuZCBieSBub2RlIGlkLCBhbmQgVGFsa1doaXRlYm9hcmRUb29sYmFyIG1ldGhvZCBjYW5ub3QgYmUgcGVyZm9ybWVkICwgZWxlbWVudCBpZCBpcyAnICsgcGFyZW50Tm9kZVN0ciArICcuJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIHZhciBlbGVtZW50Tm9kZSA9IHBhcmVudE5vZGUgfHwgKHdoaXRlYm9hcmRWaWV3ID8gd2hpdGVib2FyZFZpZXcuZ2V0V2hpdGVib2FyZFJvb3RFbGVtZW50KCkgOiBkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRUb29sYmFyVmlld0xpc3RbaW5zdGFuY2VJZF0gJiYgdGhpcy53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdLmRlc3Ryb3lWaWV3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdLmRlc3Ryb3lWaWV3KCk7XG4gICAgICAgICAgICAgICAgLy8gdGhpcy53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdID0gdW5kZWZpbmVkIDtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdID0gbmV3IHdpbmRvdy5UYWxrV2hpdGVib2FyZFRvb2xiYXIoZWxlbWVudE5vZGUsIGluc3RhbmNlSWQsIHRoaXMsIE9iamVjdC5kZWVwQXNzaWduKHt9LCBjb25maWcsIHtcbiAgICAgICAgICAgICAgICBsYW5ndWFnZVR5cGU6IHdoaXRlYm9hcmRWaWV3ID8gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkubGFuZ3VhZ2VUeXBlIDogJ2NoJyxcbiAgICAgICAgICAgICAgICBpc01vYmlsZTogd2hpdGVib2FyZFZpZXcgPyB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5pc01vYmlsZSA6IGZhbHNlXG4gICAgICAgICAgICB9LCBfQ29uZmlndXJhdGlvbjIuZGVmYXVsdC5jb21tb25XaGl0ZWJvYXJkKSwgd2hpdGVib2FyZFZpZXcgPyB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZFZpZXcpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXdTdGF0ZSA9IHRoaXMuZ2V0V2hpdGVib2FyZFZpZXdTdGF0ZShpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdICYmIHRoaXMud2hpdGVib2FyZFRvb2xiYXJWaWV3TGlzdFtpbnN0YW5jZUlkXS5yZWNlaXZlQWN0aW9uQ29tbWFuZCAmJiB3aGl0ZWJvYXJkVmlld1N0YXRlICYmIE9iamVjdC5rZXlzKHdoaXRlYm9hcmRWaWV3U3RhdGUucGFnZSkubGVuZ3RoICYmIE9iamVjdC5rZXlzKHdoaXRlYm9hcmRWaWV3U3RhdGUuem9vbSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSAndmlld1N0YXRlVXBkYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdTdGF0ZTogd2hpdGVib2FyZFZpZXdTdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZpZXdTdGF0ZToge31cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdLnJlY2VpdmVBY3Rpb25Db21tYW5kKGFjdGlvbiwgY21kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldFdoaXRlYm9hcmRWaWV3U3RhdGUnLFxuXG5cbiAgICAgICAgLyrojrflj5bnmb3mnb/op4blm77nirbmgIFcclxuICAgICAgICAqIEBwYXJhbXMgaW5zdGFuY2VJZDrnmb3mnb/lrp7kvotpZCAgLCBTdHJpbmcqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0V2hpdGVib2FyZFZpZXdTdGF0ZSgpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXWdldFdoaXRlYm9hcmRWaWV3U3RhdGUgJyk7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkVmlldykge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aGl0ZWJvYXJkVmlldy5nZXRXaGl0ZWJvYXJkVmlld1N0YXRlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuiOt+WPlueZveadv+S4remXtOWxgiovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldFdoaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllckluc3RhbmNlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFdoaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllckluc3RhbmNlKCkge1xuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1t3aGl0ZWJvYXJyZC1zZGtdZ2V0V2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVySW5zdGFuY2UgJyk7XG4gICAgICAgICAgICByZXR1cm4gX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5YiH5o2i5paH5qGj5pyN5Yqh5ZmoXHJcbiAgICAgICAgKiBAcGFyYW1zIGRvY0FkZHJlc3NJbmRleDrmlofmoaPlnLDlnYDln5/lkI0gU3RyaW5n57G75Z6LXHJcbiAgICAgICAgKiBAcGFyYW1zIGlzU2F2ZUxvY2FsU3RvcmFnZTrmmK/lkKbkv53lrZjmnKzlnLDlrZjlgqgg77yMIOm7mOiupGZhbHNlXHJcbiAgICAgICAgKiBAcGFyYW1zIGZvcmNlUmVsb2FkRG9jdW1lbnQ65piv5ZCm5by65Yi26YeN5paw5Yqg6L295paH5qGjIO+8jCDpu5jorqRmYWxzZe+8iOWNs++8miDlj6rmnInmlofmoaPlnLDlnYDntKLlvJXlkozlvZPliY3ntKLlvJXkuI3kuIDoh7TmiY3kvJrph43mlrDliqDovb3vvIlcclxuICAgICAgICAqIEBwYXJhbXMgaW5zdGFuY2VJZDrnmb3mnb/lrp7kvotpZCAgLCBTdHJpbmdcclxuICAgICAgICAgKiAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzd2l0Y2hEb2NBZGRyZXNzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN3aXRjaERvY0FkZHJlc3MoZG9jQWRkcmVzc0tleSkge1xuICAgICAgICAgICAgdmFyIGlzU2F2ZUxvY2FsU3RvcmFnZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgICAgICAgICB2YXIgZm9yY2VSZWxvYWREb2N1bWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogJ2RlZmF1bHQnO1xuXG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11jYWxsIHN3aXRjaERvY0FkZHJlc3MgbWV0aG9kICwgZG9jQWRkcmVzc0tleSBpcyAnICsgZG9jQWRkcmVzc0tleSk7XG4gICAgICAgICAgICBpZiAoZG9jQWRkcmVzc0tleSAmJiB0eXBlb2YgZG9jQWRkcmVzc0tleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0LmxvY2FsU3RvcmFnZURvY0FkZHJlc3NLZXkgPSBkb2NBZGRyZXNzS2V5O1xuICAgICAgICAgICAgICAgIGlmIChfR2xvYmFsMi5kZWZhdWx0LmxvY2FsU3RvcmFnZURvY0FkZHJlc3NLZXkgJiYgX1V0aWxzMi5kZWZhdWx0LmdldEl0ZW0oX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzTGlzdCwgX0dsb2JhbDIuZGVmYXVsdC5sb2NhbFN0b3JhZ2VEb2NBZGRyZXNzS2V5KSA9PT0gJycgJiYgX1V0aWxzMi5kZWZhdWx0LmdldEl0ZW0oX0dsb2JhbDIuZGVmYXVsdC5sYXRlckFkZHJlc3NMaXN0LCBfR2xvYmFsMi5kZWZhdWx0LmxvY2FsU3RvcmFnZURvY0FkZHJlc3NLZXkpID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX0dsb2JhbDIuZGVmYXVsdC5wcm90b2NvbCAmJiBfR2xvYmFsMi5kZWZhdWx0LnBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9HbG9iYWwyLmRlZmF1bHQubGF0ZXJBZGRyZXNzTGlzdCA9IFt7IHByb3RvY29sOiBfR2xvYmFsMi5kZWZhdWx0LnByb3RvY29sLCBob3N0bmFtZTogX0dsb2JhbDIuZGVmYXVsdC5sb2NhbFN0b3JhZ2VEb2NBZGRyZXNzS2V5LCBwb3J0OiBfR2xvYmFsMi5kZWZhdWx0LnBvcnQgfV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzTGlzdCA9IFtfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoX0dsb2JhbDIuZGVmYXVsdC5iYWNrdXBEb2NBZGRyZXNzTGlzdCksIF90b0NvbnN1bWFibGVBcnJheShfR2xvYmFsMi5kZWZhdWx0LmxhdGVyQWRkcmVzc0xpc3QpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0tleSAhPT0gZG9jQWRkcmVzc0tleSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkRm9yY2VVc2VEb2NBZGRyZXNzID0gX1V0aWxzMi5kZWZhdWx0LmdldEl0ZW0oX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzTGlzdCwgX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzS2V5ID0gZG9jQWRkcmVzc0tleTtcbiAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5ub3dVc2VEb2NBZGRyZXNzID0gX1V0aWxzMi5kZWZhdWx0LmdldEl0ZW0oX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzTGlzdCwgX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzS2V5KSB8fCBfQ29uZmlndXJhdGlvbjIuZGVmYXVsdC5jb21tb25XaGl0ZWJvYXJkLmRvY0FkZHJlc3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1NhdmVMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0TG9jYWxTdG9yYWdlSXRlbSgndGtEb2NBZGRyZXNzS2V5JywgX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkVmlldy5yZWxvYWRDdXJyZW50RG9jdW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRWaWV3LnNlbmRBY3Rpb25Db21tYW5kKCdkb2NBZGRyZXNzVXBkYXRlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY0FkZHJlc3NMaXN0OiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0xpc3QpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NBZGRyZXNzS2V5OiBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkRG9jQWRkcmVzczogb2xkRm9yY2VVc2VEb2NBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vd0RvY0FkZHJlc3M6IF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0xpc3RbX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzS2V5XSB8fCBfQ29uZmlndXJhdGlvbjIuZGVmYXVsdC5jb21tb25XaGl0ZWJvYXJkLmRvY0FkZHJlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JjZVJlbG9hZERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfd2hpdGVib2FyZFZpZXc4ID0gdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfd2hpdGVib2FyZFZpZXc4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfd2hpdGVib2FyZFZpZXc4LnJlbG9hZEN1cnJlbnREb2N1bWVudCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JjZVJlbG9hZERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIF93aGl0ZWJvYXJkVmlldzkgPSB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICBpZiAoX3doaXRlYm9hcmRWaWV3OSkge1xuICAgICAgICAgICAgICAgICAgICBfd2hpdGVib2FyZFZpZXc5LnJlbG9hZEN1cnJlbnREb2N1bWVudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q6K6+572u5pys5Zyw5a2Y5YKoKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2V0TG9jYWxTdG9yYWdlSXRlbScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMb2NhbFN0b3JhZ2VJdGVtKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChUSy5TREtUWVBFID09PSAnbW9iaWxlJykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvb20gJiYgX1V0aWxzMi5kZWZhdWx0LmlzRnVuY3Rpb24odGhpcy5yb29tLnNldExvY2FsU3RvcmFnZUl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9vbS5zZXRMb2NhbFN0b3JhZ2VJdGVtKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX1V0aWxzMi5kZWZhdWx0LnNldExvY2FsU3RvcmFnZUl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuiOt+WPluacrOWcsOWtmOWCqCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldExvY2FsU3RvcmFnZUl0ZW0nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlSXRlbShrZXksIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoX1V0aWxzMi5kZWZhdWx0LmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgaWYgKFRLLlNES1RZUEUgPT09ICdtb2JpbGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvb20gJiYgX1V0aWxzMi5kZWZhdWx0LmlzRnVuY3Rpb24odGhpcy5yb29tLmdldExvY2FsU3RvcmFnZUl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucm9vbS5nZXRMb2NhbFN0b3JhZ2VJdGVtKGtleSwgZnVuY3Rpb24gKGRvY0FkZHJlc3NLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZG9jQWRkcmVzc0tleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1t3aGl0ZWJvYXJkLXNka11nZXRMb2NhbFN0b3JhZ2VJdGVtIGVycm9yOicsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soX1V0aWxzMi5kZWZhdWx0LmdldExvY2FsU3RvcmFnZUl0ZW0oJ3RrRG9jQWRkcmVzc0tleScpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19leGVjdXRlU2F2ZU1zZ2xpc3REYXRhJyxcblxuICAgICAgICAvKuaJp+ihjOS/neWtmOeahG1zZ2xpc3TmlbDmja5cclxuICAgICAgICAqIEBwYXJhbXMgaW5zdGFuY2VJZDrnmb3mnb/lrp7kvotpZCAgLCBTdHJpbmcqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2V4ZWN1dGVTYXZlTXNnbGlzdERhdGEoaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNhdmVNc2dsaXN0RGF0YVtpbnN0YW5jZUlkXSAmJiB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmdldChpbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZU1zZ2xpc3REYXRhW2luc3RhbmNlSWRdLmZvckVhY2goZnVuY3Rpb24gKHB1Ym1zZ0RhdGEsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzNC53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCkucmVjZWl2ZUV2ZW50Um9vbU1zZ2xpc3QocHVibXNnRGF0YS5uYW1lLCBwdWJtc2dEYXRhKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zYXZlTXNnbGlzdERhdGFbaW5zdGFuY2VJZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyrmiafooYzkv53lrZjnmoRwdWJtc2fmlbDmja5cclxuICAgICAgICAqIEBwYXJhbXMgaW5zdGFuY2VJZDrnmb3mnb/lrp7kvotpZCAgLCBTdHJpbmcqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfZXhlY3V0ZVNhdmVQdWJtc2dEYXRhJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9leGVjdXRlU2F2ZVB1Ym1zZ0RhdGEoaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNhdmVQdWJtc2dEYXRhW2luc3RhbmNlSWRdICYmIHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KGluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlUHVibXNnRGF0YVtpbnN0YW5jZUlkXS5mb3JFYWNoKGZ1bmN0aW9uIChyZWN2RXZlbnREYXRhLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczUud2hpdGVib2FyZFZpZXdNYXAuZ2V0KGluc3RhbmNlSWQpLnJlY2VpdmVFdmVudFJvb21QdWJtc2cocmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2F2ZVB1Ym1zZ0RhdGFbaW5zdGFuY2VJZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWIm+W7uueZveadv1xyXG4gICAgICAgICAqIEBwYXJhbXMgcGFyZW50Tm9kZTrnmb3mnb/nmoTniLboioLngrkgLCDpu5jorqTkuLogZG9jdW1lbnQuYm9keSDvvIwgRWxlbWVudE5vZGVcclxuICAgICAgICAgKiBAcGFyYW1zIGluc3RhbmNlSWQ655m95p2/5a6e5L6LaWQgLCDpu5jorqTkuLonZGVmYXVsdCcgLCBTdHJpbmdcclxuICAgICAgICAgKiBAcGFyYW1zIGNvbmZpZ3JhdGlvbjrnmb3mnb/phY3nva7pobkgLCDpu5jorqTkuLp7fSAsICBKc29uXHJcbiAgICAgICAgICogQHBhcmFtcyByZWNlaXZlQWN0aW9uQ29tbWFuZDrmjqXlj5fnmb3mnb/liqjkvZzmjIfku6Tlh73mlbAgLCBGdW5jdGlvblxyXG4gICAgICAgICogKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2NyZWF0ZVdoaXRlYm9hcmQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZVdoaXRlYm9hcmQoKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZG9jdW1lbnQuYm9keTtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnZGVmYXVsdCc7XG5cbiAgICAgICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgY29uZmlncmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICAgICAgICAgIHZhciByZWNlaXZlQWN0aW9uQ29tbWFuZCA9IGFyZ3VtZW50c1szXTtcblxuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1t3aGl0ZWJvYXJyZC1zZGtdX2NyZWF0ZVdoaXRlYm9hcmQgIHBhcmVudE5vZGUgIGluc3RhbmNlSWQgIGNvbmZpZ3JhdGlvbiAgYW5kXHRyZWNlaXZlQWN0aW9uQ29tbWFuZDonLCBwYXJlbnROb2RlLCBpbnN0YW5jZUlkLCBjb25maWdyYXRpb24sIHJlY2VpdmVBY3Rpb25Db21tYW5kKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyZW50Tm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50Tm9kZVN0ciA9IHBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhcmVudE5vZGVTdHIpO1xuICAgICAgICAgICAgICAgIGlmICghcGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBMLkxvZ2dlci53YXJuaW5nKCdUaGUgbm9kZSBpZCBjYW5ub3QgYmUgZm91bmQgYnkgbm9kZSBpZCwgYW5kIGNyZWF0ZVdoaXRlYm9hcmQgbWV0aG9kIGNhbm5vdCBiZSBwZXJmb3JtZWQgLCBlbGVtZW50IGlkIGlzICcgKyBwYXJlbnROb2RlU3RyICsgJy4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHVyZVdoaXRlYm9hcmRGaWxlaW5mb0xpc3RbaW5zdGFuY2VJZF0gPSB7XG4gICAgICAgICAgICAgICAgXCJmaWxlaWRcIjogMCxcbiAgICAgICAgICAgICAgICBcImNvbXBhbnlpZFwiOiAnJyxcbiAgICAgICAgICAgICAgICBcImZpbGVuYW1lXCI6ICd3aGl0ZWJvYXJkJyxcbiAgICAgICAgICAgICAgICBcInVwbG9hZHVzZXJpZFwiOiAnJyxcbiAgICAgICAgICAgICAgICBcInVwbG9hZHVzZXJuYW1lXCI6ICcnLFxuICAgICAgICAgICAgICAgIFwiZG93bmxvYWRwYXRoXCI6ICcnLFxuICAgICAgICAgICAgICAgIFwic3dmcGF0aFwiOiAnJyxcbiAgICAgICAgICAgICAgICBcImZpbGV0eXBlXCI6ICd3aGl0ZWJvYXJkJyxcbiAgICAgICAgICAgICAgICBcInBhZ2VudW1cIjogMSxcbiAgICAgICAgICAgICAgICBcImR5bmFtaWNwcHRcIjogMCxcbiAgICAgICAgICAgICAgICBcImZpbGVjYXRlZ29yeVwiOiAwLFxuICAgICAgICAgICAgICAgIFwiZmlsZXByb3BcIjogMCAvLzDvvJrmma7pgJrmlofmoaMg77yMIDEtMu+8muWKqOaAgXBwdCgxLeaXp+eJiO+8jDIt5paw54mIKSDvvIwgM++8mmg15paH5qGjXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRXaGl0ZWJvYXJkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHRoaXMuYXdpdFdoaXRlYm9hcmRDb25maWdyYXRpb25NYXAuaGFzKGluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdFdoaXRlYm9hcmQgPSB0aGlzLmF3aXRXaGl0ZWJvYXJkQ29uZmlncmF0aW9uTWFwLmdldChpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLmF3aXRXaGl0ZWJvYXJkQ29uZmlncmF0aW9uTWFwLmRlbGV0ZShpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdFdoaXRlYm9hcmQgPSBPYmplY3QuZGVlcEFzc2lnbih7fSwgX0NvbmZpZ3VyYXRpb24yLmRlZmF1bHQuZGVmYXVsdFdoaXRlYm9hcmQsIF9Db25maWd1cmF0aW9uMi5kZWZhdWx0LmNvbW1vbldoaXRlYm9hcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRWaWV3Q29uZmlncmF0aW9uID0gT2JqZWN0LmRlZXBBc3NpZ24oe30sIGRlZmF1bHRXaGl0ZWJvYXJkLCBjb25maWdyYXRpb24pO1xuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFZpZXdNYXAuaGFzKGluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveVdoaXRlYm9hcmQoaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRWaWV3TWFwLnNldChpbnN0YW5jZUlkLCBuZXcgX1doaXRlYm9hcmRWaWV3Mi5kZWZhdWx0KHBhcmVudE5vZGUsIGluc3RhbmNlSWQsIHdoaXRlYm9hcmRWaWV3Q29uZmlncmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzNi53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdICYmIF90aGlzNi53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdLnJlY2VpdmVBY3Rpb25Db21tYW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfd2hpdGVib2FyZFRvb2xiYXJWaWU7XG5cbiAgICAgICAgICAgICAgICAgICAgKF93aGl0ZWJvYXJkVG9vbGJhclZpZSA9IF90aGlzNi53aGl0ZWJvYXJkVG9vbGJhclZpZXdMaXN0W2luc3RhbmNlSWRdKS5yZWNlaXZlQWN0aW9uQ29tbWFuZC5hcHBseShfd2hpdGVib2FyZFRvb2xiYXJWaWUsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVjZWl2ZUFjdGlvbkNvbW1hbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZUFjdGlvbkNvbW1hbmQuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgICAgIF9VdGlsczIuZGVmYXVsdC5vbkVsZW1lbnRSZXNpemUocGFyZW50Tm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzNi51cGRhdGVXaGl0ZWJvYXJkU2l6ZShpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRWaWV3ID0gdGhpcy53aGl0ZWJvYXJkVmlld01hcC5nZXQoaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZFZpZXcgJiYgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkuaXNMb2FkV2hpdGVib2FyZFRvb2xCYXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFRvb2xCYXJQYXJlbnROb2RlID0gd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkud2hpdGVib2FyZFRvb2xCYXJDb25maWcucGFyZW50Tm9kZSB8fCB3aGl0ZWJvYXJkVmlldy5nZXRXaGl0ZWJvYXJkUm9vdEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVdoaXRlYm9hcmRUb29sQmFyKHdoaXRlYm9hcmRUb29sQmFyUGFyZW50Tm9kZSwgd2hpdGVib2FyZFZpZXcuZ2V0Q29uZmlncmF0aW9uKCkud2hpdGVib2FyZFRvb2xCYXJDb25maWcsIGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfZGVzdHJveVdoaXRlYm9hcmQnLFxuXG5cbiAgICAgICAgLyrplIDmr4Hnmb3mnb9cclxuICAgICAgICAqIEBwYXJhbXMgaW5zdGFuY2VJZDrnmb3mnb/lrp7kvotpZCAgLCBTdHJpbmcqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3lXaGl0ZWJvYXJkKCkge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdkZWZhdWx0JztcblxuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1t3aGl0ZWJvYXJyZC1zZGtdX2Rlc3Ryb3lXaGl0ZWJvYXJkICAgIGluc3RhbmNlSWQgIDonLCBpbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3TWFwLmhhcyhpbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZ2V0KGluc3RhbmNlSWQpLmRlc3Ryb3lXaGl0ZWJvYXJkVmlldygpO1xuICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFZpZXdNYXAuZGVsZXRlKGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYXdpdFdoaXRlYm9hcmRDb25maWdyYXRpb25NYXAuaGFzKGluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hd2l0V2hpdGVib2FyZENvbmZpZ3JhdGlvbk1hcC5kZWxldGUoaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19pc1doaXRlYm9hcmRDb3JyZWxhdGlvblNpZ25hbGxpbmcnLFxuXG5cbiAgICAgICAgLyrmmK/lkKbmmK/nmb3mnb/nm7jlhbPkv6Hku6QqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2lzV2hpdGVib2FyZENvcnJlbGF0aW9uU2lnbmFsbGluZyhuYW1lKSB7XG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11faXNXaGl0ZWJvYXJkQ29ycmVsYXRpb25TaWduYWxsaW5nICAgIG5hbWUgIDonLCBuYW1lKTtcbiAgICAgICAgICAgIHZhciBpc1doaXRlYm9hcmRDb3JyZWxhdGlvblNpZ25hbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ1NoYXJwc0NoYW5nZSc6XG5cbiAgICAgICAgICAgICAgICBjYXNlICdTaG93UGFnZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRXh0ZW5kU2hvd1BhZ2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1dCUGFnZUNvdW50JzpcbiAgICAgICAgICAgICAgICBjYXNlICdFeHRlbmRXQlBhZ2VDb3VudCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnTmV3UHB0VHJpZ2dlckFjdGlvbkNsaWNrJzpcbiAgICAgICAgICAgICAgICBjYXNlICdFeHRlbmROZXdQcHRUcmlnZ2VyQWN0aW9uQ2xpY2snOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1BwdFZvbHVtZUNvbnRyb2wnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0V4dGVuZFBwdFZvbHVtZUNvbnRyb2wnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0g1RG9jdW1lbnRBY3Rpb24nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0V4dGVuZEg1RG9jdW1lbnRBY3Rpb24nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3doaXRlYm9hcmRNYXJrVG9vbCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRXh0ZW5kV2hpdGVib2FyZE1hcmtUb29sJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnVmlkZW9XaGl0ZWJvYXJkJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnQmxhY2tCb2FyZCc6XG4gICAgICAgICAgICAgICAgICAgIGlzV2hpdGVib2FyZENvcnJlbGF0aW9uU2lnbmFsbGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGlzV2hpdGVib2FyZENvcnJlbGF0aW9uU2lnbmFsbGluZztcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3dpbmRvd1Jlc2l6ZUNhbGxiYWNrJyxcblxuXG4gICAgICAgIC8q56qX5Y+j5pS55Y+Y5LqL5Lu25aSE55CG5pa55rOVKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF93aW5kb3dSZXNpemVDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11fd2luZG93UmVzaXplQ2FsbGJhY2sgJyk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFsbFdoaXRlYm9hcmRTaXplKCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpczcudXBkYXRlQWxsV2hpdGVib2FyZFNpemUoKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM3LnVwZGF0ZUFsbFdoaXRlYm9hcmRTaXplKCk7XG4gICAgICAgICAgICAgICAgfSwgMjUwKTtcbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3dpbmRvd01lc3NhZ2VDYWxsYmFjaycsXG5cblxuICAgICAgICAvKuaUtuWIsGlmcmFtZeeahOa2iOaBr+WkhOeQhuaWueazlSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfd2luZG93TWVzc2FnZUNhbGxiYWNrKGV2ZW50KSB7XG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11fd2luZG93TWVzc2FnZUNhbGxiYWNrJyk7XG4gICAgICAgICAgICBldmVudCA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTYgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMTYgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjE2ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjE2ID0gdGhpcy53aGl0ZWJvYXJkVmlld01hcC52YWx1ZXMoKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMTY7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE2ID0gKF9zdGVwMTYgPSBfaXRlcmF0b3IxNi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTYgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVmlldyA9IF9zdGVwMTYudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZFZpZXcucmVjZWl2ZVdpbmRvd01lc3NhZ2VFdmVudChldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IxNiA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IxNiA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTYgJiYgX2l0ZXJhdG9yMTYucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IxNi5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjE2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjE2O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE3ID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjE3ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IxNyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IxNyA9IE9iamVjdC52YWx1ZXModGhpcy5kb2N1bWVudFRvb2xiYXJWaWV3TGlzdClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDE3OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xNyA9IChfc3RlcDE3ID0gX2l0ZXJhdG9yMTcubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE3ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZG9jdW1lbnRUb29sYmFyVmlldyA9IF9zdGVwMTcudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50VG9vbGJhclZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50VG9vbGJhclZpZXcucmVjZWl2ZVdpbmRvd01lc3NhZ2VFdmVudChldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjE3ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjE3ID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xNyAmJiBfaXRlcmF0b3IxNy5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjE3LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMTcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMTc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2RvY3VtZW50S2V5ZG93bkNhbGxiYWNrJyxcblxuXG4gICAgICAgIC8q6ZSu55uY5oyJ5LiL5LqL5Lu2Ki9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9kb2N1bWVudEtleWRvd25DYWxsYmFjayhldmVudCkge1xuICAgICAgICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXV9kb2N1bWVudEtleWRvd25DYWxsYmFjaycpO1xuICAgICAgICAgICAgZXZlbnQgPSBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICAgICAgICAvL0VTQ+mUrlxuICAgICAgICAgICAgICAgICAgICBpZiAoX1V0aWxzMi5kZWZhdWx0LmlzRnVsbFNjcmVlblN0YXR1cygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfVXRpbHMyLmRlZmF1bHQuZXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfcGFnZURleURvd24gPSBmdW5jdGlvbiBfcGFnZURleURvd24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfR2xvYmFsMi5kZWZhdWx0LmlzU2tpcFBhZ2VpbmcgJiYgX3RoaXM4LndoaXRlYm9hcmRWaWV3TWFwLmhhcygnZGVmYXVsdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczgud2hpdGVib2FyZFZpZXdNYXAuZ2V0KCdkZWZhdWx0JykuZ2V0Q29uZmlncmF0aW9uKCkuaXNVc2VLZXlib2FyZFBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXM4LndoaXRlYm9hcmRWaWV3TWFwLmdldCgnZGVmYXVsdCcpLmlzV2hpdGVib2FyZFRleHRFZGl0aW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5bem6ZSuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczgud2hpdGVib2FyZFZpZXdNYXAuZ2V0KCdkZWZhdWx0JykucHJldlBhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/kuIrplK5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzOC53aGl0ZWJvYXJkVmlld01hcC5nZXQoJ2RlZmF1bHQnKS5wcmV2U3RlcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WPs+mUrlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM4LndoaXRlYm9hcmRWaWV3TWFwLmdldCgnZGVmYXVsdCcpLm5leHRQYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5LiL6ZSuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczgud2hpdGVib2FyZFZpZXdNYXAuZ2V0KCdkZWZhdWx0JykubmV4dFN0ZXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5kb2N1bWVudEtleWRvd25UaW1lcik7XG4gICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudEtleWRvd25EYXRlVGltZSAmJiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuZG9jdW1lbnRLZXlkb3duRGF0ZVRpbWUgPiA1MDApIHtcbiAgICAgICAgICAgICAgICBfcGFnZURleURvd24oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudEtleWRvd25UaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfcGFnZURleURvd24oKTtcbiAgICAgICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudEtleWRvd25EYXRlVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfZG9jdW1lbnRGdWxsc2NyZWVuY2hhbmdlQ2FsbGJhY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2RvY3VtZW50RnVsbHNjcmVlbmNoYW5nZUNhbGxiYWNrKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1t3aGl0ZWJvYXJyZC1zZGtdX2RvY3VtZW50RnVsbHNjcmVlbmNoYW5nZUNhbGxiYWNrJyk7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE4ID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjE4ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IxOCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IxOCA9IHRoaXMud2hpdGVib2FyZFZpZXdNYXAudmFsdWVzKClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDE4OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xOCA9IChfc3RlcDE4ID0gX2l0ZXJhdG9yMTgubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE4ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSBfc3RlcDE4LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChfVXRpbHMyLmRlZmF1bHQuaXNGdWxsU2NyZWVuU3RhdHVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmdWxsU2NyZWVuRWxlbWVudCA9IHdoaXRlYm9hcmRWaWV3LmdldFdoaXRlYm9hcmRSb290RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZ1bGxTY3JlZW5FbGVtZW50SWQgPSB3aGl0ZWJvYXJkVmlldy5nZXRDb25maWdyYXRpb24oKS5kb2N1bWVudFRvb2xCYXJDb25maWcuZnVsbFNjcmVlbkVsZW1lbnRJZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZ1bGxTY3JlZW5FbGVtZW50SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bGxTY3JlZW5FbGVtZW50SWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChmdWxsU2NyZWVuRWxlbWVudElkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFNjcmVlbkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChmdWxsU2NyZWVuRWxlbWVudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxTY3JlZW5FbGVtZW50ID0gZnVsbFNjcmVlbkVsZW1lbnRJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX1V0aWxzMi5kZWZhdWx0LmdldEZ1bGxzY3JlZW5FbGVtZW50KCkgJiYgX1V0aWxzMi5kZWZhdWx0LmdldEZ1bGxzY3JlZW5FbGVtZW50KCkuaWQgPT09IGZ1bGxTY3JlZW5FbGVtZW50LmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZFZpZXcuY2hhbmdlRnVsbFNjcmVlblN0YXRlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkVmlldy5jaGFuZ2VGdWxsU2NyZWVuU3RhdGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZFZpZXcuY2hhbmdlRnVsbFNjcmVlblN0YXRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMTggPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMTggPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE4ICYmIF9pdGVyYXRvcjE4LnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMTgucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IxOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IxODtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMudmlkZW9QbGF5ZXJWaWV3ICYmIHRoaXMudmlkZW9QbGF5ZXJWaWV3LnJlY2VpdmVFdmVudEZ1bGxTY3JlZW5DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyVmlldy5yZWNlaXZlRXZlbnRGdWxsU2NyZWVuQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlQWxsV2hpdGVib2FyZFNpemUoKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzOS51cGRhdGVBbGxXaGl0ZWJvYXJkU2l6ZSgpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczkudXBkYXRlQWxsV2hpdGVib2FyZFNpemUoKTtcbiAgICAgICAgICAgICAgICB9LCAyNTApO1xuICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrms6jlhozkuovku7YqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfcmVnaXN0ZXJFdmVudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVnaXN0ZXJFdmVudCgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1t3aGl0ZWJvYXJyZC1zZGtdX3JlZ2lzdGVyRXZlbnQnKTtcbiAgICAgICAgICAgIC8q5aSE55CG5YW85a655oCn77yM55uR5ZCs5rWP6KeI5Zmo56qX5Y+j5piv5ZCm6K++5Lu277yI5pyA5bCP5YyW77yJKi9cbiAgICAgICAgICAgIHZhciBfZ2V0VmlzaWJpbGl0eUNoYW5nZUNvbXBhdGliaWxpdHkgPSBmdW5jdGlvbiBfZ2V0VmlzaWJpbGl0eUNoYW5nZUNvbXBhdGliaWxpdHkoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhpZGRlbiA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHlDaGFuZ2UgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5oaWRkZW4gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaGlkZGVuID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9IFwidmlzaWJpbGl0eWNoYW5nZVwiO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IFwidmlzaWJpbGl0eVN0YXRlXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQubW96SGlkZGVuICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbiA9IFwibW96SGlkZGVuXCI7XG4gICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHlDaGFuZ2UgPSBcIm1venZpc2liaWxpdHljaGFuZ2VcIjtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBcIm1velZpc2liaWxpdHlTdGF0ZVwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50Lm1zSGlkZGVuICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbiA9IFwibXNIaWRkZW5cIjtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9IFwibXN2aXNpYmlsaXR5Y2hhbmdlXCI7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gXCJtc1Zpc2liaWxpdHlTdGF0ZVwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50LndlYmtpdEhpZGRlbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBoaWRkZW4gPSBcIndlYmtpdEhpZGRlblwiO1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5Q2hhbmdlID0gXCJ3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlXCI7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gXCJ3ZWJraXRWaXNpYmlsaXR5U3RhdGVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgaGlkZGVuOiBoaWRkZW4sIHN0YXRlOiBzdGF0ZSwgdmlzaWJpbGl0eUNoYW5nZTogdmlzaWJpbGl0eUNoYW5nZSB9O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgX1V0aWxzMi5kZWZhdWx0LmFkZEV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX3dpbmRvd1Jlc2l6ZUNhbGxiYWNrLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgX1V0aWxzMi5kZWZhdWx0LmFkZEV2ZW50KHdpbmRvdywgJ21lc3NhZ2UnLCB0aGlzLl93aW5kb3dNZXNzYWdlQ2FsbGJhY2suYmluZCh0aGlzKSk7XG4gICAgICAgICAgICBfVXRpbHMyLmRlZmF1bHQuYWRkRXZlbnQoZG9jdW1lbnQsICdrZXl1cCcsIHRoaXMuX2RvY3VtZW50S2V5ZG93bkNhbGxiYWNrLmJpbmQodGhpcykpOyAvL3RvZG8g5omp5bGV55m95p2/5aaC5p6c5ZON5bqU6ZSu55uY5LqL5Lu25pyJ6Zeu6aKYXG4gICAgICAgICAgICBfVXRpbHMyLmRlZmF1bHQuYWRkRnVsbHNjcmVlbmNoYW5nZSh0aGlzLl9kb2N1bWVudEZ1bGxzY3JlZW5jaGFuZ2VDYWxsYmFjay5iaW5kKHRoaXMpKTtcblxuICAgICAgICAgICAgdmFyIF9nZXRWaXNpYmlsaXR5Q2hhbmdlQyA9IF9nZXRWaXNpYmlsaXR5Q2hhbmdlQ29tcGF0aWJpbGl0eSgpLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gX2dldFZpc2liaWxpdHlDaGFuZ2VDLnN0YXRlLFxuICAgICAgICAgICAgICAgIHZpc2liaWxpdHlDaGFuZ2UgPSBfZ2V0VmlzaWJpbGl0eUNoYW5nZUMudmlzaWJpbGl0eUNoYW5nZTtcblxuICAgICAgICAgICAgX1V0aWxzMi5kZWZhdWx0LmFkZEV2ZW50KGRvY3VtZW50LCB2aXNpYmlsaXR5Q2hhbmdlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50W3N0YXRlXSA9PT0gJ3Zpc2libGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMTAudXBkYXRlQWxsV2hpdGVib2FyZFNpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczEwLnVwZGF0ZUFsbFdoaXRlYm9hcmRTaXplKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczEwLnVwZGF0ZUFsbFdoaXRlYm9hcmRTaXplKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAyNTApO1xuICAgICAgICAgICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmYWxzZSk7IC8v55uR5ZCs5rWP6KeI5Zmo56qX5Y+j5piv5ZCm5Y+v6KeB77yI5pyA5bCP5YyW77yJXG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19hZGRSb29tRXZlbnQnLFxuXG5cbiAgICAgICAgLyrnm5HlkKzmiL/pl7TnmoTkuovku7YqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZFJvb21FdmVudCgpIHtcbiAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbd2hpdGVib2FycmQtc2RrXV9hZGRSb29tRXZlbnQnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJvb20pIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb29tLnJlbW92ZUJhY2t1cExpc3Rlcm5lcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb20ucmVtb3ZlQmFja3VwTGlzdGVybmVyKHRoaXMubGlzdGVybmVyQmFja3VwaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJvb20uYWRkRXZlbnRMaXN0ZW5lcigncm9vbS1yZWNlaXZlQWN0aW9uQ29tbWFuZCcsIHRoaXMucmV2ZWl2ZUV2ZW50Um9vbVJlY2VpdmVBY3Rpb25Db21tYW5kLmJpbmQodGhpcyksIHRoaXMubGlzdGVybmVyQmFja3VwaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMucm9vbS5hZGRFdmVudExpc3RlbmVyKCdyb29tLXB1Ym1zZycsIHRoaXMucmVjZWl2ZUV2ZW50Um9vbVB1Ym1zZy5iaW5kKHRoaXMpLCB0aGlzLmxpc3Rlcm5lckJhY2t1cGlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb20uYWRkRXZlbnRMaXN0ZW5lcigncm9vbS1kZWxtc2cnLCB0aGlzLnJlY2VpdmVFdmVudFJvb21EZWxtc2cuYmluZCh0aGlzKSwgdGhpcy5saXN0ZXJuZXJCYWNrdXBpZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yb29tLmFkZEV2ZW50TGlzdGVuZXIoJ3Jvb20tY29ubmVjdGVkJywgdGhpcy5yZWNlaXZlRXZlbnRSb29tQ29ubmVjdGVkLmJpbmQodGhpcyksIHRoaXMubGlzdGVybmVyQmFja3VwaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMucm9vbS5hZGRFdmVudExpc3RlbmVyKCdyb29tLWRpc2Nvbm5lY3RlZCcsIHRoaXMucmVjZWl2ZUV2ZW50Um9vbURpc2Nvbm5lY3RlZC5iaW5kKHRoaXMpLCB0aGlzLmxpc3Rlcm5lckJhY2t1cGlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb20uYWRkRXZlbnRMaXN0ZW5lcigncm9vbS1tc2dsaXN0JywgdGhpcy5yZWNlaXZlRXZlbnRSb29tTXNnbGlzdC5iaW5kKHRoaXMpLCB0aGlzLmxpc3Rlcm5lckJhY2t1cGlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb20uYWRkRXZlbnRMaXN0ZW5lcigncm9vbS11c2VybWVkaWFzdGF0ZS1jaGFuZ2VkJywgdGhpcy5yZXZlaXZlRXZlbnRSb29tVXNlcm1lZGlhb3JmaWxlc3RhdGVDaGFuZ2VkLmJpbmQodGhpcyksIHRoaXMubGlzdGVybmVyQmFja3VwaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMucm9vbS5hZGRFdmVudExpc3RlbmVyKCdyb29tLXVzZXJmaWxlc3RhdGUtY2hhbmdlZCcsIHRoaXMucmV2ZWl2ZUV2ZW50Um9vbVVzZXJtZWRpYW9yZmlsZXN0YXRlQ2hhbmdlZC5iaW5kKHRoaXMpLCB0aGlzLmxpc3Rlcm5lckJhY2t1cGlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb20uYWRkRXZlbnRMaXN0ZW5lcigncm9vbS11c2VybWVkaWFhdHRyaWJ1dGVzLXVwZGF0ZScsIHRoaXMucmV2ZWl2ZUV2ZW50Um9vbVVzZXJtZWRpYW9yZmlsZWF0dHJpYnV0ZXNVcGRhdGUuYmluZCh0aGlzKSwgdGhpcy5saXN0ZXJuZXJCYWNrdXBpZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yb29tLmFkZEV2ZW50TGlzdGVuZXIoJ3Jvb20tdXNlcmZpbGVhdHRyaWJ1dGVzLXVwZGF0ZScsIHRoaXMucmV2ZWl2ZUV2ZW50Um9vbVVzZXJtZWRpYW9yZmlsZWF0dHJpYnV0ZXNVcGRhdGUuYmluZCh0aGlzKSwgdGhpcy5saXN0ZXJuZXJCYWNrdXBpZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yb29tLmFkZEV2ZW50TGlzdGVuZXIoJ3Jvb20tZXJyb3Itbm90aWNlJywgdGhpcy5yZWNlaXZlRXZlbnRSb29tRXJyb3JOb3RpY2UuYmluZCh0aGlzKSwgdGhpcy5saXN0ZXJuZXJCYWNrdXBpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKui9rOWPkea1geeahOebuOWFs+S6i+S7tiovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19mb3J3YXJkaW5nU3RyZWFtRXZlbnRzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9mb3J3YXJkaW5nU3RyZWFtRXZlbnRzKGhhbmRsZXJOYW1lLCByZWN2RXZlbnREYXRhKSB7XG4gICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZygnW3doaXRlYm9hcnJkLXNka11fZm9yd2FyZGluZ1N0cmVhbUV2ZW50cyBoYW5kbGVyTmFtZSBhbmQgcmVjdkV2ZW50RGF0YTonLCBoYW5kbGVyTmFtZSwgcmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICBpZiAodGhpcy5hdWRpb1BsYXllclZpZXcgJiYgdGhpcy5hdWRpb1BsYXllclZpZXdbaGFuZGxlck5hbWVdICYmIF9VdGlsczIuZGVmYXVsdC5pc0Z1bmN0aW9uKHRoaXMuYXVkaW9QbGF5ZXJWaWV3W2hhbmRsZXJOYW1lXSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyVmlld1toYW5kbGVyTmFtZV0ocmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy52aWRlb1BsYXllclZpZXcgJiYgdGhpcy52aWRlb1BsYXllclZpZXdbaGFuZGxlck5hbWVdICYmIF9VdGlsczIuZGVmYXVsdC5pc0Z1bmN0aW9uKHRoaXMudmlkZW9QbGF5ZXJWaWV3W2hhbmRsZXJOYW1lXSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyVmlld1toYW5kbGVyTmFtZV0ocmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVEtXaGl0ZUJvYXJkTWFuYWdlcklubmVyO1xufSgpO1xuXG47XG5cbnZhciBmaWx0ZXJUS1doaXRlQm9hcmRNYW5hZ2VySW5uZXJBcnIgPSBbJ2NyZWF0ZU1haW5XaGl0ZWJvYXJkJywgJ2Rlc3Ryb3lNYWluV2hpdGVib2FyZCcsICdjcmVhdGVFeHRlbmRXaGl0ZWJvYXJkJywgJ2Rlc3Ryb3lFeHRlbmRXaGl0ZWJvYXJkJywgJ2NoYW5nZVdoaXRlQm9hcmRDb25maWdyYXRpb24nLCAndXNlV2hpdGVib2FyZFRvb2wnLCAnYWRkUGFnZScsICduZXh0UGFnZScsICdwcmV2UGFnZScsICdza2lwUGFnZScsICduZXh0U3RlcCcsICdwcmV2U3RlcCcsICdlbmxhcmdlV2hpdGVib2FyZCcsICduYXJyb3dXaGl0ZWJvYXJkJywgJ2NsZWFyJywgJ3VuZG8nLCAncmVkbycsICdmdWxsU2NyZWVuJywgJ2V4aXRGdWxsU2NyZWVuJywgJ3Jlc2V0V2hpdGVib2FyZERhdGEnLCAndXBkYXRlV2hpdGVib2FyZFNpemUnLCAndXBkYXRlQWxsV2hpdGVib2FyZFNpemUnLCAncmVzZXRBbGxXaGl0ZWJvYXJkRGF0YScsICdyZXNldFB1cmVXaGl0ZWJvYXJkVG90YWxQYWdlJywgJ2NoYW5nZUR5bmFtaWNQcHRWb2x1bWUnLCAnb3BlbkRvY3VtZW50UmVtYXJrJywgJ2Nsb3NlRG9jdW1lbnRSZW1hcmsnLCAnZ2V0V2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVySW5zdGFuY2UnLCAnY2hhbmdlQ29tbW9uV2hpdGVCb2FyZENvbmZpZ3JhdGlvbicsICdyZWdpc3RlclJvb21EZWxlZ2F0ZScsICdjaGFuZ2VEb2N1bWVudCcsICdzdG9wU2hhcmVMb2NhbE1lZGlhJywgJ3N3aXRjaERvY0FkZHJlc3MnLCAnZ2V0VmVyc2lvbicsICdvcGVuUmVtb3RlRG9jdW1lbnQnLCAnbm90aWNlV2hpdGVib2FyZEFjdGlvbkNvbW1hbmQnXTtcbnZhciBmaWx0ZXJUS1doaXRlQm9hcmRNYW5hZ2VyT3V0ZXJBcnIgPSBbJ2NyZWF0ZU1haW5XaGl0ZWJvYXJkJywgJ2Rlc3Ryb3lNYWluV2hpdGVib2FyZCcsICdjaGFuZ2VEb2N1bWVudCcsICdjaGFuZ2VXaGl0ZUJvYXJkQ29uZmlncmF0aW9uJywgJ3VzZVdoaXRlYm9hcmRUb29sJywgJ2FkZFBhZ2UnLCAnbmV4dFBhZ2UnLCAncHJldlBhZ2UnLCAnc2tpcFBhZ2UnLCAnbmV4dFN0ZXAnLCAncHJldlN0ZXAnLCAnZW5sYXJnZVdoaXRlYm9hcmQnLCAnbmFycm93V2hpdGVib2FyZCcsICdjbGVhcicsICd1bmRvJywgJ3JlZG8nLCAnZnVsbFNjcmVlbicsICdleGl0RnVsbFNjcmVlbicsICdyZXNldFdoaXRlYm9hcmREYXRhJywgJ3JlZ2lzdGVyUm9vbURlbGVnYXRlJywgJ2NoYW5nZUNvbW1vbldoaXRlQm9hcmRDb25maWdyYXRpb24nLCAnZ2V0VmVyc2lvbicsICdvcGVuUmVtb3RlRG9jdW1lbnQnLCAnbm90aWNlV2hpdGVib2FyZEFjdGlvbkNvbW1hbmQnXTtcblxuZnVuY3Rpb24gVEtXaGl0ZUJvYXJkTWFuYWdlcihyb29tLCBzZGtSZWNlaXZlQWN0aW9uQ29tbWFuZCwgaXNJbm5lcikge1xuICAgIHZhciB0aGF0ID0ge307XG4gICAgdGhhdC5jbGFzc05hbWUgPSAnVEtXaGl0ZUJvYXJkTWFuYWdlcic7IC8v57G755qE5ZCN5a2XXG5cbiAgICB2YXIgVEtXaGl0ZUJvYXJkID0gbmV3IFRLV2hpdGVCb2FyZE1hbmFnZXJJbm5lcihyb29tLCBzZGtSZWNlaXZlQWN0aW9uQ29tbWFuZCwgaXNJbm5lcik7XG4gICAgdmFyIGZpbHRlclRLV2hpdGVCb2FyZE1hbmFnZXIgPSBpc0lubmVyID8gZmlsdGVyVEtXaGl0ZUJvYXJkTWFuYWdlcklubmVyQXJyIDogZmlsdGVyVEtXaGl0ZUJvYXJkTWFuYWdlck91dGVyQXJyO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AobWV0aG9kTmFtZSkge1xuICAgICAgICB0aGF0W21ldGhvZE5hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFRLV2hpdGVCb2FyZFttZXRob2ROYW1lXS5hcHBseShUS1doaXRlQm9hcmQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTkgPSB0cnVlO1xuICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjE5ID0gZmFsc2U7XG4gICAgdmFyIF9pdGVyYXRvckVycm9yMTkgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IxOSA9IGZpbHRlclRLV2hpdGVCb2FyZE1hbmFnZXJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDE5OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xOSA9IChfc3RlcDE5ID0gX2l0ZXJhdG9yMTkubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE5ID0gdHJ1ZSkge1xuICAgICAgICAgICAgdmFyIG1ldGhvZE5hbWUgPSBfc3RlcDE5LnZhbHVlO1xuXG4gICAgICAgICAgICBfbG9vcChtZXRob2ROYW1lKTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjE5ID0gdHJ1ZTtcbiAgICAgICAgX2l0ZXJhdG9yRXJyb3IxOSA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTkgJiYgX2l0ZXJhdG9yMTkucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yMTkucmV0dXJuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IxOSkge1xuICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMTk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhhdDtcbn1cblxud2luZG93LlRLV2hpdGVCb2FyZE1hbmFnZXIgPSBUS1doaXRlQm9hcmRNYW5hZ2VyO1xuZXhwb3J0cy5US1doaXRlQm9hcmRNYW5hZ2VyID0gVEtXaGl0ZUJvYXJkTWFuYWdlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IFRLV2hpdGVCb2FyZE1hbmFnZXI7IiwiLyoqXHJcbiAqIOWKqOaAgVBQVOS4remXtOWxguWkhOeQhuexu1xyXG4gKiBAY2xhc3MgRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyXHJcbiAqIEBkZXNjcmlwdGlvbiAg5o+Q5L6b5Yqo5oCBUFBU5Lit6Ze05bGC5aSE55CG57G7XHJcbiAqIEBhdXRob3Ig6YKx5bm/55SfXHJcbiAqIEBkYXRlIDIwMTgtMDQtMjJcclxuICovXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBEeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyKTtcblxuICAgICAgICB0aGlzLmRlZmF1bHRQcm9kdWN0aW9uT3B0aW9ucyA9IHsgLy/pu5jorqTnmoTliqjmgIFQUFTnlJ/kuqfphY3nva7pgInpoblcbiAgICAgICAgICAgIHN5bmNocm9uaXphdGlvbkR5bmFtaWNQcHQ6IHRydWUsIC8v5piv5ZCm5ZCM5q2l5Yqo5oCBUFBUXG4gICAgICAgICAgICBkeW5hbWljUHB0QWN0aW9uQ2xpY2s6IHRydWUsIC8v5Yqo5oCBUFBU55qE54K55Ye75p2D6ZmQXG4gICAgICAgICAgICBtYXhGb3JjZVJlbG9hZE51bWJlcjogMTAsIC8v5pyA5aSa6IO95by65Yi26YeN6L+e55qE5qyh5pWwXG4gICAgICAgICAgICBmb3JjZVJlbG9hZEludGVydmFsOiA2MDAwMCwgLy/ph43mlrDliqDovb3nmoTpl7TpmpQg77yMIG1zXG4gICAgICAgICAgICBsYW5ndWFnZVR5cGU6ICdjaCcgLy/or63oqIDnsbvlnovvvIzpu5jorqRjaCAsICBsYW5ndWFnZVR5cGXnmoTlgLzmnIkgY2ggLyB0dyAvIGVuICAsIGNoOueugOS9k+S4reaWh++8jHR3Oue5geS9k+S4reaWhyDvvIwgZW466Iux5paHXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZHluYW1pY1BwdEluc3RhbmNlSURQcmVmaXggPSBcImR5bmFtaWNQcHRfXCI7XG4gICAgICAgIHRoaXMuZHluYW1pY1BwdEluc3RhbmNlRGVmYXVsdElEID0gXCJkeW5hbWljUHB0X1wiICsgJ2RlZmF1bHQnO1xuICAgICAgICB0aGlzLmR5bmFtaWNQcHRJbnN0YW5jZVN0b3JlID0ge307IC8v5Yqo5oCBUFBU5a6e5L6L5a2Y5YKo5Lit5b+DXG4gICAgICAgIHRoaXMudW5pcXVlRHluYW1pY1BwdCA9IGZhbHNlOyAvL+WUr+S4gOeahOWKqOaAgVBQVFxuICAgICAgICB0aGlzLnNwZWNpYWxEeW5hbWljUHB0SW5zdGFuY2VJRFByZWZpeCA9ICdzcGVjaWFsRHluYW1pY1BwdEluc3RhbmNlSURQcmVmaXhfJztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyLCBbe1xuICAgICAgICBrZXk6ICdwcm9kdWN0aW9uRHluYW1pY1BwdCcsXG5cblxuICAgICAgICAvKuWIneWni+WMluWKqOaAgVBQVOadg+mZkFxyXG4gICAgICAgICAqIEBwYXJhbXNcclxuICAgICAgICAgZHluYW1pY1BwdEVsZW1lbnRJZDrliqjmgIFQUFTlhYPntKBpZO+8iHN0cmluZyAsIHJlcXVpcmVk77yJIHRodW1ibmFpbElkOue8qeeVpeWbvuWFg+e0oGlk77yIc3RyaW5nIO+8iSDvvIxcclxuICAgICAgICAgb3B0aW9uczrphY3nva7pobkob2JqZWN0KVxyXG4gICAgICAgICAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJvZHVjdGlvbkR5bmFtaWNQcHQoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEVsZW1lbnRJZCA9IF9yZWYuZHluYW1pY1BwdEVsZW1lbnRJZCxcbiAgICAgICAgICAgICAgICBfcmVmJHByb2R1Y3Rpb25PcHRpb24gPSBfcmVmLnByb2R1Y3Rpb25PcHRpb25zLFxuICAgICAgICAgICAgICAgIHByb2R1Y3Rpb25PcHRpb25zID0gX3JlZiRwcm9kdWN0aW9uT3B0aW9uID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkcHJvZHVjdGlvbk9wdGlvbixcbiAgICAgICAgICAgICAgICBfcmVmJGhhbmRsZXIgPSBfcmVmLmhhbmRsZXIsXG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IF9yZWYkaGFuZGxlciA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgaWQgPSBfcmVmLmlkO1xuXG4gICAgICAgICAgICBpZiAoIWR5bmFtaWNQcHRFbGVtZW50SWQpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignZHluYW1pY1BwdEVsZW1lbnRJZCBpcyByZXF1aXJlZCEnKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZHluYW1pY1BwdEluc3RhbmNlSUQgPSB0aGlzLl9nZXREeW5hbWljUHB0SW5zdGFuY2VJRChpZCk7XG4gICAgICAgICAgICB2YXIgZHluYW1pY1BwdEluc3RhbmNlID0gdGhpcy5nZXREeW5hbWljUHB0SW5zdGFuY2VCeUlEKGR5bmFtaWNQcHRJbnN0YW5jZUlEKTtcbiAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignVGhlIHByb2R1Y3Rpb24gZHluYW1pY1BwdChkeW5hbWljUHB0SW5zdGFuY2VJRDonICsgZHluYW1pY1BwdEluc3RhbmNlSUQgKyAnKSBmYWlscywgdGhlIGR5bmFtaWNQcHQgYWxyZWFkeSBleGlzdHMhJyk7cmV0dXJuIGR5bmFtaWNQcHRJbnN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZSA9IHt9O1xuICAgICAgICAgICAgcHJvZHVjdGlvbk9wdGlvbnMgPSBPYmplY3QuZGVlcEFzc2lnbih7fSwgdGhpcy5kZWZhdWx0UHJvZHVjdGlvbk9wdGlvbnMsIHByb2R1Y3Rpb25PcHRpb25zKTtcblxuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZHluYW1pY1BwdEVsZW1lbnRJZCk7XG4gICAgICAgICAgICBpZiAoIWR5bmFtaWNQcHRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ0R5bmFtaWNQcHQgZWxlbWVudHMgZG8gbm90IGV4aXN0ICwgZWxlbWVudCBpZCBpczonICsgZHluYW1pY1BwdEVsZW1lbnRJZCArICchJyk7cmV0dXJuIGR5bmFtaWNQcHRJbnN0YW5jZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRJbnN0YW5jZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHZhciBkeW5hbWljUHB0SW5zdGFuY2VFbGVtZW50SWQgPSBkeW5hbWljUHB0RWxlbWVudElkICsgJ19keW5hbWljUHB0SW5zdGFuY2UnO1xuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlRWxlbWVudC5jbGFzc05hbWUgPSAnZHluYW1pY1BwdC1pbnN0YW5jZS1lbGVtZW50JztcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZUVsZW1lbnQuaWQgPSBkeW5hbWljUHB0SW5zdGFuY2VFbGVtZW50SWQ7XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2VFbGVtZW50LnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlRWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG5cbiAgICAgICAgICAgIHZhciBkeW5hbWljUHB0SWZyYW1lRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRJZnJhbWVFbGVtZW50SWQgPSBkeW5hbWljUHB0RWxlbWVudElkICsgJ19keW5hbWljUHB0SWZyYW1lJztcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJZnJhbWVFbGVtZW50LmNsYXNzTmFtZSA9ICdkeW5hbWljUHB0LWlmcmFtZS1lbGVtZW50JztcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJZnJhbWVFbGVtZW50LmlkID0gZHluYW1pY1BwdElmcmFtZUVsZW1lbnRJZDtcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJZnJhbWVFbGVtZW50Lm5hbWUgPSBkeW5hbWljUHB0RWxlbWVudElkICsgXCJfZHluYW1pY1BwdElmcmFtZU5hbWVcIjtcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJZnJhbWVFbGVtZW50LmFsbG93RnVsbFNjcmVlbiA9IHRydWU7XG4gICAgICAgICAgICBkeW5hbWljUHB0SWZyYW1lRWxlbWVudC5mcmFtZWJvcmRlciA9IDA7XG4gICAgICAgICAgICBkeW5hbWljUHB0SWZyYW1lRWxlbWVudC5zY3JvbGxpbmcgPSAnbm8nO1xuICAgICAgICAgICAgZHluYW1pY1BwdElmcmFtZUVsZW1lbnQuYWxsb3cgPSAnYXV0b3BsYXknO1xuICAgICAgICAgICAgZHluYW1pY1BwdElmcmFtZUVsZW1lbnQud2lkdGggPSAnMTAwJSc7XG4gICAgICAgICAgICBkeW5hbWljUHB0SWZyYW1lRWxlbWVudC5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgICAgICBkeW5hbWljUHB0SWZyYW1lRWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJZnJhbWVFbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJZnJhbWVFbGVtZW50LnN0eWxlLmJvcmRlciA9ICdub25lJztcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJZnJhbWVFbGVtZW50LnN0eWxlLnBhZGRpbmcgPSAnMCc7XG4gICAgICAgICAgICBkeW5hbWljUHB0SWZyYW1lRWxlbWVudC5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2VFbGVtZW50LmFwcGVuZENoaWxkKGR5bmFtaWNQcHRJZnJhbWVFbGVtZW50KTtcblxuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRMb2FkaW5nRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRMb2FkaW5nRWxlbWVudElkID0gZHluYW1pY1BwdEVsZW1lbnRJZCArICdfZHluYW1pY1BwdExvYWRpbmcnO1xuICAgICAgICAgICAgZHluYW1pY1BwdExvYWRpbmdFbGVtZW50LmNsYXNzTmFtZSA9ICdkeW5hbWljUHB0LWxvYWRpbmctZWxlbWVudCB0YWxrY2xvdWQtbG9hZGluZyc7XG4gICAgICAgICAgICBkeW5hbWljUHB0TG9hZGluZ0VsZW1lbnQuaWQgPSBkeW5hbWljUHB0TG9hZGluZ0VsZW1lbnRJZDtcbiAgICAgICAgICAgIHZhciBkeW5hbWljUHB0UmVsb2FkTnVtYmVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgIGR5bmFtaWNQcHRSZWxvYWROdW1iZXJFbGVtZW50LmNsYXNzTmFtZSA9ICd0ay1sb2FkaW5nLXJlbG9hZC1udW1iZXInO1xuICAgICAgICAgICAgZHluYW1pY1BwdFJlbG9hZE51bWJlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIGR5bmFtaWNQcHRMb2FkaW5nRWxlbWVudC5hcHBlbmRDaGlsZChkeW5hbWljUHB0UmVsb2FkTnVtYmVyRWxlbWVudCk7XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2VFbGVtZW50LmFwcGVuZENoaWxkKGR5bmFtaWNQcHRMb2FkaW5nRWxlbWVudCk7XG5cbiAgICAgICAgICAgIHZhciBkeW5hbWljUHB0QWN0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRBY3Rpb25FbGVtZW50SWQgPSBkeW5hbWljUHB0RWxlbWVudElkICsgJ19keW5hbWljUHB0QWN0aW9uJztcbiAgICAgICAgICAgIGR5bmFtaWNQcHRBY3Rpb25FbGVtZW50LmNsYXNzTmFtZSA9ICdkeW5hbWljUHB0LWFjdGlvbi1lbGVtZW50IHRhbGtjbG91ZC1hY3Rpb24nO1xuICAgICAgICAgICAgZHluYW1pY1BwdEFjdGlvbkVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgICAgICBkeW5hbWljUHB0QWN0aW9uRWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgICAgICBkeW5hbWljUHB0QWN0aW9uRWxlbWVudC5zdHlsZS56SW5kZXggPSA5ODtcbiAgICAgICAgICAgIGR5bmFtaWNQcHRBY3Rpb25FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBwcm9kdWN0aW9uT3B0aW9ucy5keW5hbWljUHB0QWN0aW9uQ2xpY2sgPyAnbm9uZScgOiAnYmxvY2snO1xuICAgICAgICAgICAgZHluYW1pY1BwdEFjdGlvbkVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICAgICAgZHluYW1pY1BwdEFjdGlvbkVsZW1lbnQuc3R5bGUudG9wID0gJzAnO1xuICAgICAgICAgICAgZHluYW1pY1BwdEFjdGlvbkVsZW1lbnQuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgICAgICAgIGR5bmFtaWNQcHRBY3Rpb25FbGVtZW50LmlkID0gZHluYW1pY1BwdEFjdGlvbkVsZW1lbnRJZDtcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZHluYW1pY1BwdEFjdGlvbkVsZW1lbnQpO1xuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlRWxlbWVudC5hcHBlbmRDaGlsZChkeW5hbWljUHB0QWN0aW9uRWxlbWVudCk7XG5cbiAgICAgICAgICAgIGR5bmFtaWNQcHRFbGVtZW50LmFwcGVuZENoaWxkKGR5bmFtaWNQcHRJbnN0YW5jZUVsZW1lbnQpO1xuXG4gICAgICAgICAgICB0aGlzLmR5bmFtaWNQcHRJbnN0YW5jZVN0b3JlW2R5bmFtaWNQcHRJbnN0YW5jZUlEXSA9IGR5bmFtaWNQcHRJbnN0YW5jZTsgLy/liqjmgIFQUFTlrp7kvotcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0SW5zdGFuY2VJRCA9IGR5bmFtaWNQcHRJbnN0YW5jZUlEOyAvL+WKqOaAgVBQVGlkXG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuaGFuZGxlciA9IHt9OyAvL+WkhOeQhuWHveaVsOmbhuWQiFxuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIuc2VuZFNpZ25hbGxpbmdUb1NlcnZlciA9IGhhbmRsZXIuc2VuZFNpZ25hbGxpbmdUb1NlcnZlcjtcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5oYW5kbGVyLmRlbFNpZ25hbGxpbmdUb1NlcnZlciA9IGhhbmRsZXIuZGVsU2lnbmFsbGluZ1RvU2VydmVyO1xuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjayA9IGhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaztcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0RWxlbWVudElkID0gZHluYW1pY1BwdEVsZW1lbnRJZDsgLy/liqjmgIFQUFToioLngrnnmoRpZFxuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmR5bmFtaWNQcHRFbGVtZW50ID0gZHluYW1pY1BwdEVsZW1lbnQ7IC8v5Yqo5oCBUFBU55qE6IqC54K55YWD57SgXG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEluc3RhbmNlRWxlbWVudElkID0gZHluYW1pY1BwdEluc3RhbmNlRWxlbWVudElkOyAvL+WKqOaAgVBQVOWunuS+i+iKgueCueeahGlkXG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEluc3RhbmNlRWxlbWVudCA9IGR5bmFtaWNQcHRJbnN0YW5jZUVsZW1lbnQ7IC8v5Yqo5oCBUFBU5a6e5L6L6IqC54K55YWD57SgXG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdElmcmFtZUVsZW1lbnRJZCA9IGR5bmFtaWNQcHRJZnJhbWVFbGVtZW50SWQ7IC8v5Yqo5oCBUFBU55qEaWZyYW1l6IqC54K555qEaWRcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0SWZyYW1lRWxlbWVudCA9IGR5bmFtaWNQcHRJZnJhbWVFbGVtZW50OyAvL+WKqOaAgVBQVOeahGlmcmFtZeiKgueCueWFg+e0oFxuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmR5bmFtaWNQcHRMb2FkaW5nRWxlbWVudElkID0gZHluYW1pY1BwdExvYWRpbmdFbGVtZW50SWQ7IC8v5Yqo5oCBUFBU55qEbG9hZGluZ+iKgueCueeahGlkXG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdExvYWRpbmdFbGVtZW50ID0gZHluYW1pY1BwdExvYWRpbmdFbGVtZW50OyAvL+WKqOaAgVBQVOeahGxvYWRpbmfoioLngrnlhYPntKBcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0UmVsb2FkTnVtYmVyRWxlbWVudCA9IGR5bmFtaWNQcHRSZWxvYWROdW1iZXJFbGVtZW50OyAvL2g15paH5qGj55qEcmVsb2FkIG51bWJlcuiKgueCueWFg+e0oFxuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmR5bmFtaWNQcHRBY3Rpb25FbGVtZW50SWQgPSBkeW5hbWljUHB0QWN0aW9uRWxlbWVudElkOyAvL+WKqOaAgVBQVOeahGFjdGlvbuiKgueCueeahGlkXG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEFjdGlvbkVsZW1lbnQgPSBkeW5hbWljUHB0QWN0aW9uRWxlbWVudDsgLy/liqjmgIFQUFTnmoRhY3Rpb27oioLngrnlhYPntKBcblxuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmlkID0gaWQ7IC8v5a6e5L6LaWRcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhID0ge307IC8v5Yqo5oCBcHB05pS25Yiw55qE6L+c56iL5pWw5o2uXG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuYXdpdEV4ZWN1dGVQb3N0TWVzc2FnZUFycmF5ID0gW107IC8v562J5b6F5omn6KGM55qEcG9zdE1lc3NhZ2Xmtojmga/mlbDnu4RcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0QWN0aW9uSnNvbiA9IHt9OyAvL+WKqOaAgXBwdOeCueWHu+WKqOS9nOWIl+ihqFxuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmFzc29jaWF0ZWRNc2dJRCA9IHByb2R1Y3Rpb25PcHRpb25zLmFzc29jaWF0ZWRNc2dJRDsgLy/nu5HlrprnmoTkv6Hku6Tmtojmga9pZFxuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmFzc29jaWF0ZWRVc2VySUQgPSBwcm9kdWN0aW9uT3B0aW9ucy5hc3NvY2lhdGVkVXNlcklEOyAvL+e7keWumueahOeUqOaIt2lkXG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2Uuc3luY2hyb25pemF0aW9uRHluYW1pY1BwdCA9IHByb2R1Y3Rpb25PcHRpb25zLnN5bmNocm9uaXphdGlvbkR5bmFtaWNQcHQ7IC8v5piv5ZCm5ZCM5q2l5Yqo5oCBcHB0XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEFjdGlvbkNsaWNrID0gcHJvZHVjdGlvbk9wdGlvbnMuZHluYW1pY1BwdEFjdGlvbkNsaWNrOyAvL+WKqOaAgVBQVOeahOeCueWHu+adg+mZkFxuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmZvcmNlUmVsb2FkTnVtYmVyID0gMDsgLy/lvLrliLbph43ov57nmoTmrKHmlbBcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5tYXhGb3JjZVJlbG9hZE51bWJlciA9IHByb2R1Y3Rpb25PcHRpb25zLm1heEZvcmNlUmVsb2FkTnVtYmVyOyAvL+acgOWkmuiDveW8uuWItumHjei/nueahOasoeaVsFxuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmZvcmNlUmVsb2FkSW50ZXJ2YWwgPSBwcm9kdWN0aW9uT3B0aW9ucy5mb3JjZVJlbG9hZEludGVydmFsOyAvL+mHjeaWsOWKoOi9veeahOmXtOmalCAsIG1zXG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuaXNTaG93UmVsb2FkRmlsZVRpcCA9IHByb2R1Y3Rpb25PcHRpb25zLmlzU2hvd1JlbG9hZEZpbGVUaXA7IC8v6YeN5paw5Yqg6L295paH5qGj77yM5piv5ZCm5pi+56S66YeN6L+e5qyh5pWwXG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UubGFuZ3VhZ2VUeXBlID0gcHJvZHVjdGlvbk9wdGlvbnMubGFuZ3VhZ2VUeXBlOyAvL+ivreiogOexu+Wei1xuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmFnYWlucmVjb25uZWN0TnVtID0gMDsgLy/liqjmgIFQUFTlhoXpg6jlj5HpgIHnmoTph43ov57mtojmga/nmoTmrKHmlbBcbiAgICAgICAgICAgIGlmIChwcm9kdWN0aW9uT3B0aW9ucy5hZ2FpbnJlY29ubmVjdEVsZW1lbnRQYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmFnYWlucmVjb25uZWN0RWxlbWVudFBhcmVudE5vZGUgPSBwcm9kdWN0aW9uT3B0aW9ucy5hZ2FpbnJlY29ubmVjdEVsZW1lbnRQYXJlbnROb2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdElmcmFtZUVsZW1lbnQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChkeW5hbWljUHB0SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXJUaW1lcik7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmZvcmNlUmVsb2FkTnVtYmVyVGltZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UuaWZyYW1lU3JjICYmICFkeW5hbWljUHB0SW5zdGFuY2UuaXNMb2FkRmluaXNoZWQgJiYgZHluYW1pY1BwdEluc3RhbmNlLmZvcmNlUmVsb2FkTnVtYmVyIDwgZHluYW1pY1BwdEluc3RhbmNlLm1heEZvcmNlUmVsb2FkTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9pZnJhbWVSZWxvYWRNb25pdG9yKGR5bmFtaWNQcHRJbnN0YW5jZSwgJ2R5bmFtaWNQcHRMb2FkZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGR5bmFtaWNQcHRJbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZGVzdHJveUR5bmFtaWNQcHRJbnN0YW5jZScsXG5cblxuICAgICAgICAvKumUgOavgeWKqOaAgVBQVOWunuS+i++8jOmAmui/h2lkKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lEeW5hbWljUHB0SW5zdGFuY2UoaWQpIHtcbiAgICAgICAgICAgIHZhciBkeW5hbWljUHB0SW5zdGFuY2UgPSB0aGlzLmdldER5bmFtaWNQcHRJbnN0YW5jZUJ5SUQoaWQpO1xuICAgICAgICAgICAgaWYgKCFkeW5hbWljUHB0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW2Rlc3Ryb3ldVGhlcmUgYXJlIG5vIGR5bmFtaWMgcHB0IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fZGVzdHJveUR5bmFtaWNQcHRJbnN0YW5jZShkeW5hbWljUHB0SW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZWNlaXZlV2luZG93TWVzc2FnZUV2ZW50JyxcblxuXG4gICAgICAgIC8q5o6l5pS25Yqo5oCBUFBU55qEaWZyYW1l5raI5oGvKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlY2VpdmVXaW5kb3dNZXNzYWdlRXZlbnQoaWQsIGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZHluYW1pY1BwdEluc3RhbmNlID0gdGhpcy5nZXREeW5hbWljUHB0SW5zdGFuY2VCeUlEKGlkKTtcbiAgICAgICAgICAgIGlmICghZHluYW1pY1BwdEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tyZWNlaXZlV2luZG93TWVzc2FnZUV2ZW50XVRoZXJlIGFyZSBubyBkeW5hbWljIHBwdCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8v5qC55o2uZXZlbnQuc291cmNl5Yik5pat5raI5oGv5p2l5rqQ5piv5ZCm5piv5b2T5YmN5a6e5L6LaWTlr7nlupTnmoRpZnJhbWVcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgIT09IGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0SWZyYW1lRWxlbWVudC5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcmVjZWl2ZVdpbmRvd01lc3NhZ2VFdmVudChpZCwgZHluYW1pY1BwdEluc3RhbmNlLCBldmVudCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NoYW5nZUR5bmFtaWNQcHRTaXplJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZUR5bmFtaWNQcHRTaXplKGlkKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRJbnN0YW5jZSA9IHRoaXMuZ2V0RHluYW1pY1BwdEluc3RhbmNlQnlJRChpZCk7XG4gICAgICAgICAgICBpZiAoIWR5bmFtaWNQcHRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbY2hhbmdlRHluYW1pY1BwdFNpemVdVGhlcmUgYXJlIG5vIGR5bmFtaWMgcHB0IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVzaXplSGFuZGxlclwiLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fcG9zdE1lc3NhZ2UoZHluYW1pY1BwdEluc3RhbmNlLCBwb3N0TWVzc2FnZURhdGEpO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlc2l6ZUhhbmRsZXJcIixcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0RWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBfdGhpczIuX3Bvc3RNZXNzYWdlKGR5bmFtaWNQcHRJbnN0YW5jZSwgcG9zdE1lc3NhZ2VEYXRhKTtcbiAgICAgICAgICAgIH0sIDI1MCk7XG4gICAgICAgIH1cbiAgICAgICAgLyrmmK/lkKbmnInliqjmgIFQUFTlrp7kvosqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYXNEeW5hbWljUHB0QnlJZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNEeW5hbWljUHB0QnlJZChpZCkge1xuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRJbnN0YW5jZSA9IHRoaXMuZ2V0RHluYW1pY1BwdEluc3RhbmNlQnlJRChpZCk7XG4gICAgICAgICAgICByZXR1cm4gZHluYW1pY1BwdEluc3RhbmNlICE9PSB1bmRlZmluZWQgJiYgZHluYW1pY1BwdEluc3RhbmNlICE9PSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrorr7nva7liqjmgIFwcHTnmoRpZnJhbWXnmoRzcmMqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZXREeW5hbWljUHB0SWZyYW1lU3JjJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldER5bmFtaWNQcHRJZnJhbWVTcmMoaWQsIHNyYykge1xuICAgICAgICAgICAgdmFyIHBhcmFtZXRlcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgICAgICAgICAgdmFyIGZpbGVkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB7fTtcblxuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRJbnN0YW5jZSA9IHRoaXMuZ2V0RHluYW1pY1BwdEluc3RhbmNlQnlJRChpZCk7XG4gICAgICAgICAgICBpZiAoIWR5bmFtaWNQcHRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbc2V0RHluYW1pY1BwdElmcmFtZVNyY11UaGVyZSBhcmUgbm8gZHluYW1pYyBwcHQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgc3JjU3RyID0gJyc7XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuaXNMb2FkRmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5hd2l0RXhlY3V0ZVBvc3RNZXNzYWdlQXJyYXkubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChkeW5hbWljUHB0SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXJUaW1lcik7XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXJUaW1lciA9IG51bGw7XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXIgPSBvcHRpb25zLmZvcmNlUmVsb2FkTnVtYmVyIHx8IDA7XG4gICAgICAgICAgICB2YXIgZmlsZWlkID0gZmlsZWRhdGEuZmlsZWlkLFxuICAgICAgICAgICAgICAgIHBwdHNsaWRlID0gZmlsZWRhdGEucHB0c2xpZGUsXG4gICAgICAgICAgICAgICAgcHB0c3RlcCA9IGZpbGVkYXRhLnBwdHN0ZXA7XG5cbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5wbGF5YmFjayA9IG9wdGlvbnMucGxheWJhY2s7XG4gICAgICAgICAgICBpZiAoZHluYW1pY1BwdEluc3RhbmNlLmFnYWlucmVjb25uZWN0RWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmFnYWlucmVjb25uZWN0RWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGR5bmFtaWNQcHRJbnN0YW5jZS5hZ2FpbnJlY29ubmVjdEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpbGVpZCAhPSBkeW5hbWljUHB0SW5zdGFuY2UuZmlsZWlkIHx8ICFzcmMgfHwgIW9wdGlvbnMuaXNBZ2FpbnJlY29ubmVjdCkge1xuICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5hZ2FpbnJlY29ubmVjdE51bSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZmlsZWlkID0gZmlsZWlkO1xuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmF3aXRKdW1wVG9BbmltUHB0c2xpZGUgPSBwcHRzbGlkZTtcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5hd2l0SnVtcFRvQW5pbVBwdHN0ZXAgPSBwcHRzdGVwO1xuICAgICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgICAgIHNyY1N0ciA9IHNyYztcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gT2JqZWN0LmVudHJpZXMocGFyYW1ldGVycylbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjIgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYzID0gX3NsaWNlZFRvQXJyYXkoX3JlZjIsIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gX3JlZjNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmM1sxXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjU3RyICs9ICgvXFw/L2cudGVzdChzcmNTdHIpID8gJyYnIDogJz8nKSArIGtleSArICc9JyArIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNTdHIgKz0gJyYnICsga2V5ICsgJz0nICsgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5pZnJhbWVTcmMgPSBzcmNTdHI7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvd0xvYWRpbmcoZHluYW1pY1BwdEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pZnJhbWVSZWxvYWRNb25pdG9yKGR5bmFtaWNQcHRJbnN0YW5jZSwgJ3NldER5bmFtaWNQcHRJZnJhbWVTcmMnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmlmcmFtZVNyYyA9IHNyY1N0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlzQWdhaW5yZWNvbm5lY3QpIHtcbiAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdElmcmFtZUVsZW1lbnQuc3JjID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdElmcmFtZUVsZW1lbnQuc3JjID0gc3JjU3RyO1xuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ3NldCBkeW5hbWljIHBwdCBzcmM6Jywgc3JjU3RyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q6I635Y+WaWZyYW1l55qEc3Jj5Zyw5Z2AKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0SWZyYW1lU3JjJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldElmcmFtZVNyYyhpZCkge1xuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRJbnN0YW5jZSA9IHRoaXMuZ2V0RHluYW1pY1BwdEluc3RhbmNlQnlJRChpZCk7XG4gICAgICAgICAgICBpZiAoIWR5bmFtaWNQcHRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbZ2V0SWZyYW1lU3JjXVRoZXJlIGFyZSBubyBkeW5hbWljIHBwdCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBkeW5hbWljUHB0SW5zdGFuY2UuaWZyYW1lU3JjO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrot7PovazliLBwcHTnmoTmjIflrprpobXlkozluKcqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdqdW1wVG9BbmltYXRpb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24ganVtcFRvQW5pbWF0aW9uKGlkLCBzbGlkZSwgc3RlcCwgaW5pdGlhdGl2ZSwgdGltZU9mZnNldCwgYXV0b1N0YXJ0KSB7XG4gICAgICAgICAgICB2YXIgZHluYW1pY1BwdEluc3RhbmNlID0gdGhpcy5nZXREeW5hbWljUHB0SW5zdGFuY2VCeUlEKGlkKTtcbiAgICAgICAgICAgIGlmICghZHluYW1pY1BwdEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tqdW1wVG9BbmltYXRpb25dVGhlcmUgYXJlIG5vIGR5bmFtaWMgcHB0IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fanVtcFRvQW5pbWF0aW9uKGR5bmFtaWNQcHRJbnN0YW5jZSwgc2xpZGUsIHN0ZXAsIGluaXRpYXRpdmUsIHRpbWVPZmZzZXQsIGF1dG9TdGFydCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuS4i+S4gOmhtSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ25leHRTbGlkZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0U2xpZGUoaWQsIGF1dG9TdGFydCkge1xuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRJbnN0YW5jZSA9IHRoaXMuZ2V0RHluYW1pY1BwdEluc3RhbmNlQnlJRChpZCk7XG4gICAgICAgICAgICBpZiAoIWR5bmFtaWNQcHRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbbmV4dFBhZ2VdVGhlcmUgYXJlIG5vIGR5bmFtaWMgcHB0IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCFkeW5hbWljUHB0SW5zdGFuY2UuaXNMb2FkRmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5pbmZvKCdbbmV4dFBhZ2VdZHluYW1pYyBwcHQgaXMgbm90IGxvYWQgZmluaXNoZWQgICwgY2Fubm90IGV4ZWN1dGUgbmV4dFBhZ2UgbWV0aG9kJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhICYmIGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHNsaWRlID49IGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHNsaWRlc0NvdW50KSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnW25leHRQYWdlXWR5bmFtaWMgcHB0IGlzIG9uIHRoZSBsYXN0IHBhZ2UgLCBjYW5ub3QgZXhlY3V0ZSBuZXh0UGFnZSBtZXRob2QuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcG9zdE1lc3NhZ2UoZHluYW1pY1BwdEluc3RhbmNlLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcImdvdG9OZXh0U2xpZGVcIixcbiAgICAgICAgICAgICAgICBhdXRvU3RhcnQ6IGF1dG9TdGFydFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuS4iuS4gOmhtSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3ByZXZTbGlkZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmV2U2xpZGUoaWQsIGF1dG9TdGFydCkge1xuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRJbnN0YW5jZSA9IHRoaXMuZ2V0RHluYW1pY1BwdEluc3RhbmNlQnlJRChpZCk7XG4gICAgICAgICAgICBpZiAoIWR5bmFtaWNQcHRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbcHJldlBhZ2VdVGhlcmUgYXJlIG5vIGR5bmFtaWMgcHB0IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCFkeW5hbWljUHB0SW5zdGFuY2UuaXNMb2FkRmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5pbmZvKCdbcHJldlBhZ2VdZHluYW1pYyBwcHQgaXMgbm90IGxvYWQgZmluaXNoZWQgICwgY2Fubm90IGV4ZWN1dGUgcHJldlBhZ2UgbWV0aG9kJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhICYmIGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHNsaWRlIDw9IDEpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci53YXJuaW5nKCdbcHJldlBhZ2VdZHluYW1pYyBwcHQgaXMgIG9uIHBhZ2UgMSAsIGNhbm5vdCBleGVjdXRlIHByZXZQYWdlIG1ldGhvZC4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wb3N0TWVzc2FnZShkeW5hbWljUHB0SW5zdGFuY2UsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ290b1ByZXZpb3VzU2xpZGVcIixcbiAgICAgICAgICAgICAgICBhdXRvU3RhcnQ6IGF1dG9TdGFydFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuS4i+S4gOW4pyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ25leHRTdGVwJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG5leHRTdGVwKGlkKSB7XG4gICAgICAgICAgICB2YXIgZHluYW1pY1BwdEluc3RhbmNlID0gdGhpcy5nZXREeW5hbWljUHB0SW5zdGFuY2VCeUlEKGlkKTtcbiAgICAgICAgICAgIGlmICghZHluYW1pY1BwdEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tuZXh0U3RlcF1UaGVyZSBhcmUgbm8gZHluYW1pYyBwcHQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIWR5bmFtaWNQcHRJbnN0YW5jZS5pc0xvYWRGaW5pc2hlZCkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmluZm8oJ1tuZXh0U3RlcF1keW5hbWljIHBwdCBpcyBub3QgbG9hZCBmaW5pc2hlZCAgLCBjYW5ub3QgZXhlY3V0ZSBuZXh0U3RlcCBtZXRob2QnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wb3N0TWVzc2FnZShkeW5hbWljUHB0SW5zdGFuY2UsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ290b05leHRTdGVwXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrkuIrkuIDluKcqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcmV2U3RlcCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmV2U3RlcChpZCkge1xuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRJbnN0YW5jZSA9IHRoaXMuZ2V0RHluYW1pY1BwdEluc3RhbmNlQnlJRChpZCk7XG4gICAgICAgICAgICBpZiAoIWR5bmFtaWNQcHRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbcHJldlN0ZXBdVGhlcmUgYXJlIG5vIGR5bmFtaWMgcHB0IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCFkeW5hbWljUHB0SW5zdGFuY2UuaXNMb2FkRmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5pbmZvKCdbcHJldlN0ZXBdZHluYW1pYyBwcHQgaXMgbm90IGxvYWQgZmluaXNoZWQgICwgY2Fubm90IGV4ZWN1dGUgcHJldlN0ZXAgbWV0aG9kJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcG9zdE1lc3NhZ2UoZHluYW1pY1BwdEluc3RhbmNlLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcImdvdG9QcmV2aW91c1N0ZXBcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuabtOaWsOWKqOaAgVBQVOWunuS+i+WxnuaApyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwZGF0ZUR5bmFtaWNQcHRQcm9wZXJ0eScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVEeW5hbWljUHB0UHJvcGVydHkoaWQsIHVwZGF0ZVByb3BlcnR5KSB7XG4gICAgICAgICAgICB2YXIgZHluYW1pY1BwdEluc3RhbmNlID0gdGhpcy5nZXREeW5hbWljUHB0SW5zdGFuY2VCeUlEKGlkKTtcbiAgICAgICAgICAgIGlmICghZHluYW1pY1BwdEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1t1cGRhdGVEeW5hbWljUHB0UHJvcGVydHldVGhlcmUgYXJlIG5vIGR5bmFtaWMgcHB0IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHVwZGF0ZVByb3BlcnR5LmFzc29jaWF0ZWRNc2dJRCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmFzc29jaWF0ZWRNc2dJRCA9IHVwZGF0ZVByb3BlcnR5LmFzc29jaWF0ZWRNc2dJRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5hc3NvY2lhdGVkVXNlcklEICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuYXNzb2NpYXRlZFVzZXJJRCA9IHVwZGF0ZVByb3BlcnR5LmFzc29jaWF0ZWRVc2VySUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlUHJvcGVydHkuc3luY2hyb25pemF0aW9uRHluYW1pY1BwdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLnN5bmNocm9uaXphdGlvbkR5bmFtaWNQcHQgPSB1cGRhdGVQcm9wZXJ0eS5zeW5jaHJvbml6YXRpb25EeW5hbWljUHB0O1xuICAgICAgICAgICAgICAgIC8qdGhpcy5fcG9zdE1lc3NhZ2UoZHluYW1pY1BwdEluc3RhbmNlICwge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjpcImNoYW5nZUNsYXNzQmVnaW5cIiAsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NiZWdpbjpkeW5hbWljUHB0SW5zdGFuY2Uuc3luY2hyb25pemF0aW9uRHluYW1pY1BwdFxyXG4gICAgICAgICAgICAgICAgfSk7Ki9cbiAgICAgICAgICAgICAgICB0aGlzLl9wb3N0TWVzc2FnZShkeW5hbWljUHB0SW5zdGFuY2UsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImNoYW5nZVB1Ymxpc2hEeW5hbWljUHB0TWVkaWFQZXJtaXNzaW9uX3ZpZGVvXCIsXG4gICAgICAgICAgICAgICAgICAgIHB1Ymxpc2hEeW5hbWljUHB0TWVkaWFQZXJtaXNzaW9uX3ZpZGVvOiBkeW5hbWljUHB0SW5zdGFuY2Uuc3luY2hyb25pemF0aW9uRHluYW1pY1BwdFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZVByb3BlcnR5LmR5bmFtaWNQcHRBY3Rpb25DbGljayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmR5bmFtaWNQcHRBY3Rpb25DbGljayA9IHVwZGF0ZVByb3BlcnR5LmR5bmFtaWNQcHRBY3Rpb25DbGljaztcbiAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEFjdGlvbkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0QWN0aW9uQ2xpY2sgPyAnbm9uZScgOiAnYmxvY2snO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Bvc3RNZXNzYWdlKGR5bmFtaWNQcHRJbnN0YW5jZSwge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiY2hhbmdlRHluYW1pY1BwdEFjdGlvbkNsaWNrXCIsXG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRBY3Rpb25DbGljazogZHluYW1pY1BwdEluc3RhbmNlLmR5bmFtaWNQcHRBY3Rpb25DbGlja1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZVByb3BlcnR5LmNhblBhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Bvc3RNZXNzYWdlKGR5bmFtaWNQcHRJbnN0YW5jZSwge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiY2hhbmdlTmV3cHB0UGFnaW5nUGFnZVwiLFxuICAgICAgICAgICAgICAgICAgICBuZXdwcHRQYWdpbmdQYWdlOiB1cGRhdGVQcm9wZXJ0eS5jYW5QYWdlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlUHJvcGVydHkuaXNTaG93UmVsb2FkRmlsZVRpcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmlzU2hvd1JlbG9hZEZpbGVUaXAgPSB1cGRhdGVQcm9wZXJ0eS5pc1Nob3dSZWxvYWRGaWxlVGlwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZVByb3BlcnR5Lmxhbmd1YWdlVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmxhbmd1YWdlVHlwZSA9IHVwZGF0ZVByb3BlcnR5Lmxhbmd1YWdlVHlwZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1Nob3dSZWxvYWRGaWxlU2hvd1JlbG9hZE51bWJlcihkeW5hbWljUHB0SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldEFnYWlucmVjb25uZWN0SW5mbyhkeW5hbWljUHB0SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5Y+R6YCB5Yqo5oCBUFBU55qE54K55Ye7YWN0aW9u57uZaWZyYW1lKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncG9zdE1lc3NhZ2VEeW5hbWljUHB0VHJpZ2dlckFjdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0TWVzc2FnZUR5bmFtaWNQcHRUcmlnZ2VyQWN0aW9uKGlkLCBwb3N0TWVzc2FnZURhdGEpIHtcbiAgICAgICAgICAgIHZhciBkeW5hbWljUHB0SW5zdGFuY2UgPSB0aGlzLmdldER5bmFtaWNQcHRJbnN0YW5jZUJ5SUQoaWQpO1xuICAgICAgICAgICAgaWYgKCFkeW5hbWljUHB0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3Bvc3RNZXNzYWdlRHluYW1pY1BwdFRyaWdnZXJBY3Rpb25dVGhlcmUgYXJlIG5vIGR5bmFtaWMgcHB0IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHNsaWRlID0gcG9zdE1lc3NhZ2VEYXRhLnNsaWRlLFxuICAgICAgICAgICAgICAgIGZpbGVpZCA9IHBvc3RNZXNzYWdlRGF0YS5maWxlaWQ7XG5cbiAgICAgICAgICAgIGlmICghKGR5bmFtaWNQcHRJbnN0YW5jZS5maWxlaWQgPT0gZmlsZWlkICYmIGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHNsaWRlID09PSBzbGlkZSArIDEpKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmR5bmFtaWNQcHRBY3Rpb25Kc29uW3NsaWRlICsgMV0gPSBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEFjdGlvbkpzb25bc2xpZGUgKyAxXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEFjdGlvbkpzb25bc2xpZGUgKyAxXS5wdXNoKHBvc3RNZXNzYWdlRGF0YSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Bvc3RNZXNzYWdlKGR5bmFtaWNQcHRJbnN0YW5jZSwgcG9zdE1lc3NhZ2VEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5o+Q5L6bcG9zdE1lc3NhZ2UqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwb3N0TWVzc2FnZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0TWVzc2FnZShpZCwgcG9zdE1lc3NhZ2VEYXRhKSB7XG4gICAgICAgICAgICB2YXIgZHluYW1pY1BwdEluc3RhbmNlID0gdGhpcy5nZXREeW5hbWljUHB0SW5zdGFuY2VCeUlEKGlkKTtcbiAgICAgICAgICAgIGlmICghZHluYW1pY1BwdEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1twb3N0TWVzc2FnZV1UaGVyZSBhcmUgbm8gZHluYW1pYyBwcHQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl9wb3N0TWVzc2FnZShkeW5hbWljUHB0SW5zdGFuY2UsIHBvc3RNZXNzYWdlRGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuaYr+WQpuWKoOi9veWujOaIkGg15paH5qGjKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaXNMb2FkRmluaXNoZWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNMb2FkRmluaXNoZWQoaWQpIHtcbiAgICAgICAgICAgIHZhciBkeW5hbWljUHB0SW5zdGFuY2UgPSB0aGlzLmdldER5bmFtaWNQcHRJbnN0YW5jZUJ5SUQoaWQpO1xuICAgICAgICAgICAgaWYgKCFkeW5hbWljUHB0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW2lzTG9hZEZpbmlzaGVkXVRoZXJlIGFyZSBubyBkeW5hbWljIHBwdCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBkeW5hbWljUHB0SW5zdGFuY2UuaXNMb2FkRmluaXNoZWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvKuiOt+WPluWKqOaAgVBQVOWunuS+iyzmoLnmja5pZOiOt+WPliovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldER5bmFtaWNQcHRJbnN0YW5jZUJ5SUQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RHluYW1pY1BwdEluc3RhbmNlQnlJRChpZCkge1xuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRJbnN0YW5jZUlEID0gdGhpcy5fZ2V0RHluYW1pY1BwdEluc3RhbmNlSUQoaWQpO1xuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRJbnN0YW5jZSA9IHRoaXMuZHluYW1pY1BwdEluc3RhbmNlU3RvcmVbZHluYW1pY1BwdEluc3RhbmNlSURdO1xuICAgICAgICAgICAgcmV0dXJuIGR5bmFtaWNQcHRJbnN0YW5jZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q6Lez6L2s5YiwcHB055qE5oyH5a6a6aG15ZKM5binKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2p1bXBUb0FuaW1hdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfanVtcFRvQW5pbWF0aW9uKGR5bmFtaWNQcHRJbnN0YW5jZSwgc2xpZGUsIHN0ZXAsIGluaXRpYXRpdmUsIHRpbWVPZmZzZXQsIGF1dG9TdGFydCkge1xuICAgICAgICAgICAgaWYgKGR5bmFtaWNQcHRJbnN0YW5jZS5pc0xvYWRGaW5pc2hlZCkge1xuICAgICAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHRzbGlkZSA+IGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHNsaWRlc0NvdW50IHx8IGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHNsaWRlIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c2xpZGUgPiBkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHRzbGlkZXNDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUgPSBkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHRzbGlkZXNDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHNsaWRlID0gZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c2xpZGVzQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHNsaWRlIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c2xpZGUgPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UuaGFuZGxlciAmJiBkeW5hbWljUHB0SW5zdGFuY2UuaGFuZGxlci5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuaGFuZGxlci5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrKCdkeW5hbWljUHB0U2xpZGVDaGFuZ2UnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGR5bmFtaWNQcHRJbnN0YW5jZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVGaWxlRGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcHRzbGlkZTogZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c2xpZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBwdHN0ZXA6IGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHN0ZXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJwYWdlOiBkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHRzbGlkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHRvdGFsOiBkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHRzdGVwVG90YWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVpZDogZHluYW1pY1BwdEluc3RhbmNlLmZpbGVpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZW51bTogZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c2xpZGVzQ291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJqdW1wVG9BbmltXCIsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZTogc2xpZGUsXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IHN0ZXAsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVPZmZzZXQ6IHRpbWVPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9TdGFydDogYXV0b1N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBpbml0aWF0aXZlOiBpbml0aWF0aXZlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX3Bvc3RNZXNzYWdlKGR5bmFtaWNQcHRJbnN0YW5jZSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuWPkemAgea2iOaBr+e7meWKqOaAgXBwdOeahGlmcmFtZeahhuaetiovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19wb3N0TWVzc2FnZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcG9zdE1lc3NhZ2UoZHluYW1pY1BwdEluc3RhbmNlLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZHluYW1pY1BwdEluc3RhbmNlLmlzTG9hZEZpbmlzaGVkKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0SWZyYW1lRWxlbWVudCAmJiBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdElmcmFtZUVsZW1lbnQuc3JjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gXCJ0a19keW5hbWljUFBUXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VuZERhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmREYXRhID0gSlNPTi5zdHJpbmdpZnkoc2VuZERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0SWZyYW1lRWxlbWVudCAmJiBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdElmcmFtZUVsZW1lbnQuY29udGVudFdpbmRvdyAmJiBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdElmcmFtZUVsZW1lbnQuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbX3Bvc3RNZXNzYWdlXWR5bmFtaWMgcHB0IHBvc3RNZXNzYWdlIGluc3RhbmNlSWQgaXMgJyArIGR5bmFtaWNQcHRJbnN0YW5jZS5pZCArICcsc2VuZERhdGE6JyArIHNlbmREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdElmcmFtZUVsZW1lbnQuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShzZW5kRGF0YSwgXCIqXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbX3Bvc3RNZXNzYWdlXSBkeW5hbWljIHBwdCBwb3N0TWVzc2FnZSBlcnJvcjonLCBlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmF3aXRFeGVjdXRlUG9zdE1lc3NhZ2VBcnJheS5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmmL7npLpsb2FkaW5nKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3Nob3dMb2FkaW5nJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zaG93TG9hZGluZyhkeW5hbWljUHB0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0TG9hZGluZ0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICB0aGlzLl9pc1Nob3dSZWxvYWRGaWxlU2hvd1JlbG9hZE51bWJlcihkeW5hbWljUHB0SW5zdGFuY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrpmpDol49sb2FkaW5nKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2hpZGVMb2FkaW5nJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oaWRlTG9hZGluZyhkeW5hbWljUHB0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0TG9hZGluZ0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIHRoaXMuX2lzU2hvd1JlbG9hZEZpbGVTaG93UmVsb2FkTnVtYmVyKGR5bmFtaWNQcHRJbnN0YW5jZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuiOt+WPluWKqOaAgVBQVOWunuS+i2lkLOagueaNrmlk6I635Y+WKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2dldER5bmFtaWNQcHRJbnN0YW5jZUlEJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXREeW5hbWljUHB0SW5zdGFuY2VJRChpZCkge1xuICAgICAgICAgICAgdmFyIGR5bmFtaWNQcHRJbnN0YW5jZUlEID0gIXRoaXMudW5pcXVlRHluYW1pY1BwdCAmJiBpZCAhPT0gdW5kZWZpbmVkICYmIGlkICE9PSBudWxsID8gdGhpcy5keW5hbWljUHB0SW5zdGFuY2VJRFByZWZpeCArIGlkIDogdGhpcy5keW5hbWljUHB0SW5zdGFuY2VEZWZhdWx0SUQ7XG4gICAgICAgICAgICBpZiAoaWQgJiYgdHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHZhciBycSA9IG5ldyBSZWdFeHAodGhpcy5zcGVjaWFsRHluYW1pY1BwdEluc3RhbmNlSURQcmVmaXgsICdnJyk7XG4gICAgICAgICAgICAgICAgaWYgKHJxLnRlc3QoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZUlEID0gaWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGR5bmFtaWNQcHRJbnN0YW5jZUlEO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfZGVzdHJveUR5bmFtaWNQcHRJbnN0YW5jZScsXG5cblxuICAgICAgICAvKumUgOavgeWKqOaAgVBQVOWunuS+i++8jOmAmui/h+WunuS+i2R5bmFtaWNQcHRJbnN0YW5jZSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVzdHJveUR5bmFtaWNQcHRJbnN0YW5jZShkeW5hbWljUHB0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciBkeW5hbWljUHB0SW5zdGFuY2VJRCA9IGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0SW5zdGFuY2VJRDtcbiAgICAgICAgICAgIHZhciBkeW5hbWljUHB0RWxlbWVudCA9IGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0RWxlbWVudDtcbiAgICAgICAgICAgIGlmICghZHluYW1pY1BwdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci53YXJuaW5nKCdbZGVzdHJveV0gZHluYW1pY1BwdCBlbGVtZW50cyBkbyBub3QgZXhpc3QgLCBlbGVtZW50IGlkIGlzOicgKyBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEVsZW1lbnRJZCArICchJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRFbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IE9iamVjdC5rZXlzKGR5bmFtaWNQcHRJbnN0YW5jZSlbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2Vba2V5XSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBkeW5hbWljUHB0SW5zdGFuY2Vba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5keW5hbWljUHB0SW5zdGFuY2VTdG9yZVtkeW5hbWljUHB0SW5zdGFuY2VJRF0gPSBudWxsOyAvL+WKqOaAgVBQVOWunuS+i1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZHluYW1pY1BwdEluc3RhbmNlU3RvcmVbZHluYW1pY1BwdEluc3RhbmNlSURdO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfcmVjZWl2ZVdpbmRvd01lc3NhZ2VFdmVudCcsXG5cblxuICAgICAgICAvKuaOpeaUtuWKqOaAgVBQVOeahGlmcmFtZea2iOaBryovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVjZWl2ZVdpbmRvd01lc3NhZ2VFdmVudChpbnN0YW5jZUlkLCBkeW5hbWljUHB0SW5zdGFuY2UsIGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAgICAgLy8g6YCa6L+Hb3JpZ2lu5bGe5oCn5Yik5pat5raI5oGv5p2l5rqQ5Zyw5Z2AXG4gICAgICAgICAgICBpZiAoZXZlbnQuZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHZhciByZWN2RGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZWN2RGF0YSA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSByZWN2RGF0YS5kYXRhO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZyhcImR5bmFtaWMgcHB0IHJlY2VpdmUgaWZyYW1lIG1lc3NhZ2UgZGF0YSBjYW4ndCBiZSBjb252ZXJ0ZWQgdG8gSlNPTiAsIGlmcmFtZSBkYXRhOlwiLCBldmVudC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVjdkRhdGEgJiYgcmVjdkRhdGEuc291cmNlID09PSBcInRrX2R5bmFtaWNQUFRcIikge1xuICAgICAgICAgICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZyhcIltkeW5hbWljUHB0XXJlY2VpdmUgcmVtb3RlIGlmcmFtZSBkYXRhIGZvcm0gXCIgKyBldmVudC5vcmlnaW4gKyBcIjpcIiwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgSU5JVEVWRU5UID0gXCJpbml0RXZlbnRcIjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIFNMSURFQ0hBTkdFRVZFTlQgPSBcInNsaWRlQ2hhbmdlRXZlbnRcIjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIFNURVBDSEFOR0VFVkVOVCA9IFwic3RlcENoYW5nZUV2ZW50XCI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBBVVRPUExBWVZJREVPSU5ORVdQUFQgPSBcImF1dG9QbGF5VmlkZW9Jbk5ld1BwdFwiO1xuICAgICAgICAgICAgICAgICAgICB2YXIgQ0xJQ0tORVdQUFRUUklHR0VSRVZFTlQgPSBcImNsaWNrTmV3cHB0VHJpZ2dlckV2ZW50XCI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBDTElDS0xJTksgPSBcImNsaWNrTGlua1wiO1xuICAgICAgICAgICAgICAgICAgICB2YXIgQUxMVklERU9BTkRBVURJTyA9IFwiYWxsVmlkZW9BbmRBdWRpb1wiO1xuICAgICAgICAgICAgICAgICAgICB2YXIgQUdBSU5SRUNPTk5FQ1QgPSBcImFnYWluUmVjb25uZWN0XCI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBDTElORVRBVURJT1BMQVlFUiA9IFwiY2xpbmV0QXVkaW9QbGF5ZXJcIjtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChkYXRhLmFjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBJTklURVZFTlQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlSWZyYW1lTWVzc2FnZV9pbml0RXZlbnQoZHluYW1pY1BwdEluc3RhbmNlLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU0xJREVDSEFOR0VFVkVOVDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU1RFUENIQU5HRUVWRU5UOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUlmcmFtZU1lc3NhZ2Vfc2xpZGVPclN0ZXBDaGFuZ2VFdmVudChkeW5hbWljUHB0SW5zdGFuY2UsIGRhdGEsIGRhdGEuYWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQVVUT1BMQVlWSURFT0lOTkVXUFBUOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUlmcmFtZU1lc3NhZ2VfYXV0b1BsYXlWaWRlb0luTmV3UHB0KGR5bmFtaWNQcHRJbnN0YW5jZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIENMSU5FVEFVRElPUExBWUVSOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUlmcmFtZU1lc3NhZ2VfYXV0b1BsYXlBdWRpb0luSW9zKGR5bmFtaWNQcHRJbnN0YW5jZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIENMSUNLTkVXUFBUVFJJR0dFUkVWRU5UOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUlmcmFtZU1lc3NhZ2VfY2xpY2tOZXdwcHRUcmlnZ2VyRXZlbnQoaW5zdGFuY2VJZCwgZHluYW1pY1BwdEluc3RhbmNlLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQUxMVklERU9BTkRBVURJTzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0ZJWE1FIOatpOWkhOWkhOeQhueUseaWh+aho+W3peWFt+adoeS7o+S4uuWkhOeQhlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBDTElDS0xJTks6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPIOi2hemTvuaOpSDvvIwgYnVnOuinpuWPkeWZqOeahOS5n+S8mui1sOi/mVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBBR0FJTlJFQ09OTkVDVDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WKqOaAgVBQVOWGhemDqOimgeaxgumHjeaWsOWKoOi9veaWh+aho1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ1tkeW5hbWljIHBwdF1hZ2FpbiByZWNvbm5lY3QgaW5mbyBmcm9tIGR5bmFtaWMgcHB0IGlubmVyLCBhZ2FpbiByZWNvbm5lY3QgbnVtYmVyIGlzICcgKyBkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3ROdW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5hZ2FpbnJlY29ubmVjdE51bSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3ROdW0gPD0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIgJiYgZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaygncmVsb2FkQ3VycmVudERvY3VtZW50Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBkeW5hbWljUHB0SW5zdGFuY2UuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWZyYW1lU3JjOiBkeW5hbWljUHB0SW5zdGFuY2UuaWZyYW1lU3JjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVpZDogZHluYW1pY1BwdEluc3RhbmNlLmZpbGVpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JjZVJlbG9hZE51bWJlcjogZHluYW1pY1BwdEluc3RhbmNlLmZvcmNlUmVsb2FkTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQWdhaW5yZWNvbm5lY3Q6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR5bmFtaWNQcHRJbnN0YW5jZS5hZ2FpbnJlY29ubmVjdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZHluYW1pY1BwdEluc3RhbmNlLmFnYWlucmVjb25uZWN0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR5bmFtaWNQcHRJbnN0YW5jZS5wbGF5YmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5hZ2FpbnJlY29ubmVjdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmFnYWlucmVjb25uZWN0RWxlbWVudC5jbGFzc05hbWUgPSAnYWdhaW5yZWNvbm5lY3QtY29udGFpbmVyJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFnYWlucmVjb25uZWN0Qm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnYWlucmVjb25uZWN0Qm94LmNsYXNzTmFtZSA9ICdhZ2FpbnJlY29ubmVjdC1ib3gnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9wU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wU3Bhbi5jbGFzc05hbWUgPSAndG9wLWJveCB0aXRsZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3BNaWRkbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcE1pZGRsZS5jbGFzc05hbWUgPSAnbWlkZGxlLWJveCBwb2ludC1pY29uJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvdHRvbU1pZGRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tTWlkZGxlLmNsYXNzTmFtZSA9ICdib3R0b20tYm94IG9rLWNvbnRhaW5lcic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBva0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva0J0bi5jbGFzc05hbWUgPSAnb2stYnRuJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tCdG4ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMy5fcG9zdE1lc3NhZ2UoZHluYW1pY1BwdEluc3RhbmNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAndXNlclRyaWdnZXJBdWRpbydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR5bmFtaWNQcHRJbnN0YW5jZS5hZ2FpbnJlY29ubmVjdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHluYW1pY1BwdEluc3RhbmNlLmFnYWlucmVjb25uZWN0RWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5hZ2FpbnJlY29ubmVjdEVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva0J0bi5vbnRvdWNoZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLl9wb3N0TWVzc2FnZShkeW5hbWljUHB0SW5zdGFuY2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICd1c2VyVHJpZ2dlckF1ZGlvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHluYW1pY1BwdEluc3RhbmNlLmFnYWlucmVjb25uZWN0RWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmFnYWlucmVjb25uZWN0RWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGR5bmFtaWNQcHRJbnN0YW5jZS5hZ2FpbnJlY29ubmVjdEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5hZ2FpbnJlY29ubmVjdEVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbU1pZGRsZS5hcHBlbmRDaGlsZChva0J0bik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnYWlucmVjb25uZWN0Qm94LmFwcGVuZENoaWxkKHRvcFNwYW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnJlY29ubmVjdEJveC5hcHBlbmRDaGlsZCh0b3BNaWRkbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnJlY29ubmVjdEJveC5hcHBlbmRDaGlsZChib3R0b21NaWRkbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50LmFwcGVuZENoaWxkKGFnYWlucmVjb25uZWN0Qm94KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFnYWlucmVjb25uZWN0RWxlbWVudFBhcm5ldE5vZGUgPSBkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50UGFyZW50Tm9kZSB8fCBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEluc3RhbmNlRWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWdhaW5yZWNvbm5lY3RFbGVtZW50UGFybmV0Tm9kZS5hcHBlbmRDaGlsZChkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0QWdhaW5yZWNvbm5lY3RJbmZvKGR5bmFtaWNQcHRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5aSE55CGaWZyYW1l55qEaW5pdEV2ZW505raI5oGvKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2hhbmRsZUlmcmFtZU1lc3NhZ2VfaW5pdEV2ZW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVJZnJhbWVNZXNzYWdlX2luaXRFdmVudChkeW5hbWljUHB0SW5zdGFuY2UsIGRhdGEpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChkeW5hbWljUHB0SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXJUaW1lcik7XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXJUaW1lciA9IG51bGw7XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHR2aWV3ID0gZGF0YS52aWV3O1xuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c2xpZGVzQ291bnQgPSBkYXRhLnNsaWRlc0NvdW50O1xuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c2xpZGUgPSBkYXRhLnNsaWRlICsgMTtcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHN0ZXAgPSBkYXRhLnN0ZXA7XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHRzdGVwVG90YWwgPSBkYXRhLnN0ZXBUb3RhbDtcbiAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UuaGFuZGxlciAmJiBkeW5hbWljUHB0SW5zdGFuY2UuaGFuZGxlci5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaygnZHluYW1pY1BwdFNsaWRlQ2hhbmdlJywge1xuICAgICAgICAgICAgICAgICAgICBpZDogZHluYW1pY1BwdEluc3RhbmNlLmlkLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVGaWxlRGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHB0c2xpZGU6IGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHNsaWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHB0c3RlcDogZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c3RlcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJwYWdlOiBkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHRzbGlkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXB0b3RhbDogZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c3RlcFRvdGFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZWlkOiBkeW5hbWljUHB0SW5zdGFuY2UuZmlsZWlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZW51bTogZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c2xpZGVzQ291bnRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2soJ3VwZGF0ZVdoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZVNjYWxlJywge1xuICAgICAgICAgICAgICAgICAgICBpZDogZHluYW1pY1BwdEluc3RhbmNlLmlkLFxuICAgICAgICAgICAgICAgICAgICBzY2FsZTogZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0dmlldy53aWR0aCAvIGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHZpZXcuaGVpZ2h0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaygnZHluYW1pY1BwdExvYWRFbmQnLCB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBkeW5hbWljUHB0SW5zdGFuY2UuaWQsXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiBkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHR2aWV3LndpZHRoIC8gZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0dmlldy5oZWlnaHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZHluYW1pY1BwdEluc3RhbmNlLmlzTG9hZEZpbmlzaGVkKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmlzTG9hZEZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoZHluYW1pY1BwdEluc3RhbmNlLmF3aXRKdW1wVG9BbmltUHB0c2xpZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9qdW1wVG9BbmltYXRpb24oZHluYW1pY1BwdEluc3RhbmNlLCBkeW5hbWljUHB0SW5zdGFuY2UuYXdpdEp1bXBUb0FuaW1QcHRzbGlkZSwgZHluYW1pY1BwdEluc3RhbmNlLmF3aXRKdW1wVG9BbmltUHB0c3RlcCk7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5hd2l0SnVtcFRvQW5pbVBwdHNsaWRlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuYXdpdEp1bXBUb0FuaW1QcHRzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZHluYW1pY1BwdEluc3RhbmNlLmF3aXRKdW1wVG9BbmltUHB0c2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBkeW5hbWljUHB0SW5zdGFuY2UuYXdpdEp1bXBUb0FuaW1QcHRzdGVwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZHluYW1pY1BwdEluc3RhbmNlLmF3aXRFeGVjdXRlUG9zdE1lc3NhZ2VBcnJheSAmJiBkeW5hbWljUHB0SW5zdGFuY2UuYXdpdEV4ZWN1dGVQb3N0TWVzc2FnZUFycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IzID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMyA9IGR5bmFtaWNQcHRJbnN0YW5jZS5hd2l0RXhlY3V0ZVBvc3RNZXNzYWdlQXJyYXlbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZURhdGEgPSBfc3RlcDMudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bvc3RNZXNzYWdlKGR5bmFtaWNQcHRJbnN0YW5jZSwgcG9zdE1lc3NhZ2VEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjMgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5hd2l0RXhlY3V0ZVBvc3RNZXNzYWdlQXJyYXkubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2hpZGVMb2FkaW5nKGR5bmFtaWNQcHRJbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19oYW5kbGVJZnJhbWVNZXNzYWdlX3NsaWRlT3JTdGVwQ2hhbmdlRXZlbnQnLFxuXG5cbiAgICAgICAgLyrlpITnkIZpZnJhbWXnmoRzbGlkZUNoYW5nZUV2ZW505oiW6ICFc3RlcENoYW5nZUV2ZW505raI5oGvKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVJZnJhbWVNZXNzYWdlX3NsaWRlT3JTdGVwQ2hhbmdlRXZlbnQoZHluYW1pY1BwdEluc3RhbmNlLCBkYXRhLCBldmVudEFjdGlvbikge1xuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c2xpZGUgPSBkYXRhLnNsaWRlICsgMTtcbiAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHN0ZXAgPSBkYXRhLnN0ZXA7XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHRzdGVwVG90YWwgPSBkYXRhLnN0ZXBUb3RhbDtcbiAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UuaGFuZGxlciAmJiBkeW5hbWljUHB0SW5zdGFuY2UuaGFuZGxlci5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjayhldmVudEFjdGlvbiA9PT0gJ3NsaWRlQ2hhbmdlRXZlbnQnID8gJ2R5bmFtaWNQcHRTbGlkZUNoYW5nZScgOiAnZHluYW1pY1BwdFN0ZXBDaGFuZ2UnLCB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBkeW5hbWljUHB0SW5zdGFuY2UuaWQsXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUZpbGVEYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcHRzbGlkZTogZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c2xpZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcHRzdGVwOiBkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHRzdGVwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycnBhZ2U6IGR5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHNsaWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcHRvdGFsOiBkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHRzdGVwVG90YWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlaWQ6IGR5bmFtaWNQcHRJbnN0YW5jZS5maWxlaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlbnVtOiBkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHRzbGlkZXNDb3VudFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoZHluYW1pY1BwdEluc3RhbmNlLmR5bmFtaWNQcHRBY3Rpb25Kc29uKS5sZW5ndGggPiAwICYmIGR5bmFtaWNQcHRJbnN0YW5jZS5keW5hbWljUHB0QWN0aW9uSnNvbltkeW5hbWljUHB0SW5zdGFuY2UucmVtb3RlRGF0YS5wcHRzbGlkZV0pIHtcbiAgICAgICAgICAgICAgICBpZiAoZHluYW1pY1BwdEluc3RhbmNlLmR5bmFtaWNQcHRBY3Rpb25Kc29uW2R5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHNsaWRlXS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I0ID0gZHluYW1pY1BwdEluc3RhbmNlLmR5bmFtaWNQcHRBY3Rpb25Kc29uW2R5bmFtaWNQcHRJbnN0YW5jZS5yZW1vdGVEYXRhLnBwdHNsaWRlXVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IChfc3RlcDQgPSBfaXRlcmF0b3I0Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkeW5hbWljUHB0QWN0aW9uID0gX3N0ZXA0LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zdE1lc3NhZ2UoZHluYW1pY1BwdEluc3RhbmNlLCBkeW5hbWljUHB0QWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I0ID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ICYmIF9pdGVyYXRvcjQucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjQucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEFjdGlvbkpzb25bZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c2xpZGVdLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdEFjdGlvbkpzb25bZHluYW1pY1BwdEluc3RhbmNlLnJlbW90ZURhdGEucHB0c2xpZGVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhLmV4dGVybmFsRGF0YSAmJiBkYXRhLmV4dGVybmFsRGF0YS5pbml0aWF0aXZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2VuZFNpZ25hbGxpbmdfU2hvd1BhZ2UoZHluYW1pY1BwdEluc3RhbmNlLCB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogZXZlbnRBY3Rpb24gPT09ICdzbGlkZUNoYW5nZUV2ZW50JyA/ICdzbGlkZScgOiAnc3RlcCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UuaGFuZGxlciAmJiBkeW5hbWljUHB0SW5zdGFuY2UuaGFuZGxlci5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2soJ2Nsb3NlQWxsU2VsZWN0Qm94Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGR5bmFtaWNQcHRJbnN0YW5jZS5pZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19oYW5kbGVJZnJhbWVNZXNzYWdlX2F1dG9QbGF5VmlkZW9Jbk5ld1BwdCcsXG5cblxuICAgICAgICAvKuWkhOeQhmlmcmFtZeeahGF1dG9QbGF5VmlkZW9Jbk5ld1BwdOa2iOaBryovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlSWZyYW1lTWVzc2FnZV9hdXRvUGxheVZpZGVvSW5OZXdQcHQoZHluYW1pY1BwdEluc3RhbmNlLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIgJiYgZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciBpc3ZpZGVvID0gZGF0YS5pc3ZpZGVvLFxuICAgICAgICAgICAgICAgICAgICB1cmwgPSBkYXRhLnVybCxcbiAgICAgICAgICAgICAgICAgICAgZmlsZWlkID0gZGF0YS5maWxlaWQ7XG5cbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gJ3B1Ymxpc2hEeW1hbmljUHB0TmV0d29ya01lZGlhJztcbiAgICAgICAgICAgICAgICB2YXIgY21kID0ge1xuICAgICAgICAgICAgICAgICAgICBpZDogZHluYW1pY1BwdEluc3RhbmNlLmlkLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgICAgICAgdmlkZW86IGlzdmlkZW8sXG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdkeW5hbWljUFBUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVpZDogZmlsZWlkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2soYWN0aW9uLCBjbWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfaGFuZGxlSWZyYW1lTWVzc2FnZV9hdXRvUGxheUF1ZGlvSW5Jb3MnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZUlmcmFtZU1lc3NhZ2VfYXV0b1BsYXlBdWRpb0luSW9zKGR5bmFtaWNQcHRJbnN0YW5jZSwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGR5bmFtaWNQcHRJbnN0YW5jZS5oYW5kbGVyICYmIGR5bmFtaWNQcHRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNQbGF5ID0gZGF0YS5pc1BsYXksXG4gICAgICAgICAgICAgICAgICAgIHVybCA9IGRhdGEudXJsLFxuICAgICAgICAgICAgICAgICAgICBmaWxlaWQgPSBkYXRhLmZpbGVpZCxcbiAgICAgICAgICAgICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoZGF0YSwgWydpc1BsYXknLCAndXJsJywgJ2ZpbGVpZCddKTtcblxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSAncHVibGlzaER5bWFuaWNQcHROZXR3b3JrQXVkaW8nO1xuICAgICAgICAgICAgICAgIHZhciBjbWQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBkeW5hbWljUHB0SW5zdGFuY2UuaWQsXG4gICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgICAgICBpc1BsYXk6IGlzUGxheSxcbiAgICAgICAgICAgICAgICAgICAgYXVkaW86IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ2R5bmFtaWNQUFQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZWlkOiBmaWxlaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYXVkaW8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXI6IG90aGVyXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2soYWN0aW9uLCBjbWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrlpITnkIZpZnJhbWXnmoRjbGlja05ld3BwdFRyaWdnZXJFdmVudOa2iOaBryovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19oYW5kbGVJZnJhbWVNZXNzYWdlX2NsaWNrTmV3cHB0VHJpZ2dlckV2ZW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVJZnJhbWVNZXNzYWdlX2NsaWNrTmV3cHB0VHJpZ2dlckV2ZW50KGluc3RhbmNlSWQsIGR5bmFtaWNQcHRJbnN0YW5jZSwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuZXh0ZXJuYWxEYXRhICYmIGRhdGEuZXh0ZXJuYWxEYXRhLmluaXRpYXRpdmUpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmZpbGVpZCA9IGR5bmFtaWNQcHRJbnN0YW5jZS5maWxlaWQ7XG4gICAgICAgICAgICAgICAgZGF0YS5zb3VyY2VJbnN0YW5jZUlkID0gaW5zdGFuY2VJZDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZW5kU2lnbmFsbGluZ1RvU2VydmVyKGR5bmFtaWNQcHRJbnN0YW5jZSwge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgPyAnTmV3UHB0VHJpZ2dlckFjdGlvbkNsaWNrJyA6ICdFeHRlbmROZXdQcHRUcmlnZ2VyQWN0aW9uQ2xpY2snLFxuICAgICAgICAgICAgICAgICAgICBpZDogaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnID8gJ05ld1BwdFRyaWdnZXJBY3Rpb25DbGljaycgOiAnTmV3UHB0VHJpZ2dlckFjdGlvbkNsaWNrXycgKyBpbnN0YW5jZUlkLFxuICAgICAgICAgICAgICAgICAgICB0b0lEOiAnX19hbGxFeGNlcHRTZW5kZXInLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGR5bmFtaWNQcHRJbnN0YW5jZS5oYW5kbGVyICYmIGR5bmFtaWNQcHRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaygnY2xvc2VBbGxTZWxlY3RCb3gnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZHluYW1pY1BwdEluc3RhbmNlLmlkXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5Y+R6YCB5L+h5LukKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3NlbmRTaWduYWxsaW5nVG9TZXJ2ZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3NlbmRTaWduYWxsaW5nVG9TZXJ2ZXIoZHluYW1pY1BwdEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgICAgICAgICAgIG5hbWUgPSBfcmVmNC5uYW1lLFxuICAgICAgICAgICAgICAgIGlkID0gX3JlZjQuaWQsXG4gICAgICAgICAgICAgICAgX3JlZjQkdG9JRCA9IF9yZWY0LnRvSUQsXG4gICAgICAgICAgICAgICAgdG9JRCA9IF9yZWY0JHRvSUQgPT09IHVuZGVmaW5lZCA/ICdfX2FsbCcgOiBfcmVmNCR0b0lELFxuICAgICAgICAgICAgICAgIGRhdGEgPSBfcmVmNC5kYXRhLFxuICAgICAgICAgICAgICAgIGRvX25vdF9zYXZlID0gX3JlZjQuZG9fbm90X3NhdmUsXG4gICAgICAgICAgICAgICAgZXhwaXJlc2FicyA9IF9yZWY0LmV4cGlyZXNhYnMsXG4gICAgICAgICAgICAgICAgYXNzb2NpYXRlZE1zZ0lEID0gX3JlZjQuYXNzb2NpYXRlZE1zZ0lELFxuICAgICAgICAgICAgICAgIGFzc29jaWF0ZWRVc2VySUQgPSBfcmVmNC5hc3NvY2lhdGVkVXNlcklEO1xuXG4gICAgICAgICAgICBpZiAoZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIgJiYgZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIuc2VuZFNpZ25hbGxpbmdUb1NlcnZlcikge1xuICAgICAgICAgICAgICAgIGFzc29jaWF0ZWRNc2dJRCA9IGFzc29jaWF0ZWRNc2dJRCB8fCBkeW5hbWljUHB0SW5zdGFuY2UuYXNzb2NpYXRlZE1zZ0lEO1xuICAgICAgICAgICAgICAgIGFzc29jaWF0ZWRVc2VySUQgPSBhc3NvY2lhdGVkVXNlcklEIHx8IGR5bmFtaWNQcHRJbnN0YW5jZS5hc3NvY2lhdGVkVXNlcklEO1xuICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5oYW5kbGVyLnNlbmRTaWduYWxsaW5nVG9TZXJ2ZXIobmFtZSwgaWQsIHRvSUQsIGRhdGEsIGRvX25vdF9zYXZlLCBleHBpcmVzYWJzLCBhc3NvY2lhdGVkTXNnSUQsIGFzc29jaWF0ZWRVc2VySUQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrnm5HmtYtpZnJhbWXov5vooYzph43mlrDliqDovb0qL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfaWZyYW1lUmVsb2FkTW9uaXRvcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaWZyYW1lUmVsb2FkTW9uaXRvcihkeW5hbWljUHB0SW5zdGFuY2UsIHNvdXJjZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dChkeW5hbWljUHB0SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXJUaW1lcik7XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXJUaW1lciA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZHluYW1pY1BwdEluc3RhbmNlLmlmcmFtZVNyYyAmJiAhZHluYW1pY1BwdEluc3RhbmNlLmlzTG9hZEZpbmlzaGVkICYmIGR5bmFtaWNQcHRJbnN0YW5jZS5mb3JjZVJlbG9hZE51bWJlciA8IGR5bmFtaWNQcHRJbnN0YW5jZS5tYXhGb3JjZVJlbG9hZE51bWJlcikge1xuICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRJbnN0YW5jZS5mb3JjZVJlbG9hZE51bWJlclRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UuaWZyYW1lU3JjICYmICFkeW5hbWljUHB0SW5zdGFuY2UuaXNMb2FkRmluaXNoZWQgJiYgZHluYW1pY1BwdEluc3RhbmNlLmZvcmNlUmVsb2FkTnVtYmVyIDwgZHluYW1pY1BwdEluc3RhbmNlLm1heEZvcmNlUmVsb2FkTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXIrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNC5faXNTaG93UmVsb2FkRmlsZVNob3dSZWxvYWROdW1iZXIoZHluYW1pY1BwdEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UuaGFuZGxlciAmJiBkeW5hbWljUHB0SW5zdGFuY2UuaGFuZGxlci5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaygncmVsb2FkRHluYW1pY1BwdElmcmFtZVNyYycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGR5bmFtaWNQcHRJbnN0YW5jZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWZyYW1lU3JjOiBkeW5hbWljUHB0SW5zdGFuY2UuaWZyYW1lU3JjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZWlkOiBkeW5hbWljUHB0SW5zdGFuY2UuZmlsZWlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JjZVJlbG9hZE51bWJlcjogZHluYW1pY1BwdEluc3RhbmNlLmZvcmNlUmVsb2FkTnVtYmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBkeW5hbWljUHB0SW5zdGFuY2UuZm9yY2VSZWxvYWRJbnRlcnZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWPkemAgVNob3dQYWdl5L+h5LukKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3NlbmRTaWduYWxsaW5nX1Nob3dQYWdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kU2lnbmFsbGluZ19TaG93UGFnZShkeW5hbWljUHB0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciB1cGRhdGVQdWJtc2dEYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgICAgICAgICAgaWYgKGR5bmFtaWNQcHRJbnN0YW5jZS5oYW5kbGVyICYmIGR5bmFtaWNQcHRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuaGFuZGxlci5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrKCdzZW5kU2lnbmFsbGluZ19TaG93UGFnZScsIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGR5bmFtaWNQcHRJbnN0YW5jZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUHVibXNnRGF0YTogdXBkYXRlUHVibXNnRGF0YVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmmK/lkKbmmL7npLrmlofku7bph43mlrDliqDovb3mj5DnpLoqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfaXNTaG93UmVsb2FkRmlsZVNob3dSZWxvYWROdW1iZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2lzU2hvd1JlbG9hZEZpbGVTaG93UmVsb2FkTnVtYmVyKGR5bmFtaWNQcHRJbnN0YW5jZSkge1xuICAgICAgICAgICAgZHluYW1pY1BwdEluc3RhbmNlLmR5bmFtaWNQcHRSZWxvYWROdW1iZXJFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBkeW5hbWljUHB0SW5zdGFuY2UuaXNTaG93UmVsb2FkRmlsZVRpcCAmJiBkeW5hbWljUHB0SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXIgPyAnaW5saW5lLXRhYmxlJyA6ICdub25lJztcbiAgICAgICAgICAgIHZhciBmb3JjZVJlbG9hZE51bWJlclRpcCA9ICflvZPliY3nvZHnu5zkuI3nqLPlrprvvIzmraPlnKjlsJ3or5Xph43mlrDmiZPlvIDor77ku7bigKbigKbnrKwnICsgZHluYW1pY1BwdEluc3RhbmNlLmZvcmNlUmVsb2FkTnVtYmVyICsgJ+asoSc7XG4gICAgICAgICAgICBzd2l0Y2ggKGR5bmFtaWNQcHRJbnN0YW5jZS5sYW5ndWFnZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd0dyc6XG4gICAgICAgICAgICAgICAgICAgIGZvcmNlUmVsb2FkTnVtYmVyVGlwID0gJ+eVtuWJjee2sue1oeS4jeepqeWumu+8jOato+WcqOWYl+ippumHjeaWsOaJk+mWi+iqsuS7tuKApuKApuesrCcgKyBkeW5hbWljUHB0SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXIgKyAn5qyhJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZW4nOlxuICAgICAgICAgICAgICAgICAgICBmb3JjZVJlbG9hZE51bWJlclRpcCA9ICdUaGUgbmV0d29yayBpcyB1bnN0YWJsZSAsIFRyeWluZyB0byByZW9wZW4gdGhlIGNvdXJzZXdhcmUgLi4uJyArIGR5bmFtaWNQcHRJbnN0YW5jZS5mb3JjZVJlbG9hZE51bWJlciArICcnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdqYSc6XG4gICAgICAgICAgICAgICAgICAgIGZvcmNlUmVsb2FkTnVtYmVyVGlwID0gJ+ODjeODg+ODiOOBjOS4jeWuieWumuOBp+OBmeOAgeaVmeadkOOCkumWi+OBjeOBquOBiuOBl+OBpuOBhOOBvuOBmScgKyBkeW5hbWljUHB0SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXIgKyAn5qyhJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkeW5hbWljUHB0SW5zdGFuY2UuZHluYW1pY1BwdFJlbG9hZE51bWJlckVsZW1lbnQuaW5uZXJIVE1MID0gZm9yY2VSZWxvYWROdW1iZXJUaXAgfHwgJyc7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19zZXRBZ2FpbnJlY29ubmVjdEluZm8nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEFnYWlucmVjb25uZWN0SW5mbyhkeW5hbWljUHB0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGlmIChkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRvcFNwYW4gPSBkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3RvcC1ib3gnKVswXTtcbiAgICAgICAgICAgICAgICB2YXIgb2tCdG4gPSBkeW5hbWljUHB0SW5zdGFuY2UuYWdhaW5yZWNvbm5lY3RFbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ29rLWJ0bicpWzBdO1xuICAgICAgICAgICAgICAgIGlmICh0b3BTcGFuIHx8IG9rQnRuKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhZ2FpbnJlY29ubmVjdFRpdGxlID0gJ+WKoOi9veacieeCueaFoi4uLi4uLic7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhZ2FpbnJlY29ubmVjdE9rID0gJ+eCueatpOe7p+e7rSc7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZHluYW1pY1BwdEluc3RhbmNlLmxhbmd1YWdlVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndHcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnYWlucmVjb25uZWN0VGl0bGUgPSAn5Yqg6LyJ5pyJ6bue5oWiLi4uLi4uJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnJlY29ubmVjdE9rID0gJ+m7nuatpOe5vOe6jCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdlbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWdhaW5yZWNvbm5lY3RUaXRsZSA9ICdMb2FkaW5nIGEgYml0IHNsb3cuLi4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnYWlucmVjb25uZWN0T2sgPSAnQ2xpY2sgdG8gY29udGludWUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnamEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnYWlucmVjb25uZWN0VGl0bGUgPSAn44Kk44Oz44K544OI44O844Or44Gr5pmC6ZaT44GM44GL44GL44Gj44Gm44GE44G+44GZ44CCLi4uJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnJlY29ubmVjdE9rID0gJ+e2muihjOOBmeOCiyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvcFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcFNwYW4uaW5uZXJIVE1MID0gYWdhaW5yZWNvbm5lY3RUaXRsZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob2tCdG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9rQnRuLmlubmVySFRNTCA9IGFnYWlucmVjb25uZWN0T2s7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyO1xufSgpO1xuXG47XG52YXIgRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVySW5zdGFuY2UgPSBuZXcgRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyKCk7XG5leHBvcnRzLmRlZmF1bHQgPSBEeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXJJbnN0YW5jZTsiLCIvKipcclxuICogSDXmlofmoaPkuK3pl7TlsYLlpITnkIbnsbtcclxuICogQGNsYXNzIEg1RG9jdW1lbnRJbnRlcm1lZGlhdGVMYXllclxyXG4gKiBAZGVzY3JpcHRpb24gIOaPkOS+m0g15paH5qGj5Lit6Ze05bGC5aSE55CG57G7XHJcbiAqIEBhdXRob3Ig6YKx5bm/55SfXHJcbiAqIEBkYXRlIDIwMTgtMDQtMjRcclxuICovXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgSDVEb2N1bWVudEludGVybWVkaWF0ZUxheWVyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEg1RG9jdW1lbnRJbnRlcm1lZGlhdGVMYXllcigpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEg1RG9jdW1lbnRJbnRlcm1lZGlhdGVMYXllcik7XG5cbiAgICAgICAgdGhpcy5kZWZhdWx0UHJvZHVjdGlvbk9wdGlvbnMgPSB7IC8v6buY6K6k55qEaDXmlofmoaPnlJ/kuqfphY3nva7pgInpoblcbiAgICAgICAgICAgIHN5bmNocm9uaXphdGlvbkg1RG9jdW1lbnQ6IHRydWUsIC8v5piv5ZCm5ZCM5q2laDXmlofmoaNcbiAgICAgICAgICAgIGg1RG9jdW1lbnRBY3Rpb25DbGljazogdHJ1ZSwgLy9oNeaWh+aho+eahOeCueWHu+adg+mZkFxuICAgICAgICAgICAgbWF4Rm9yY2VSZWxvYWROdW1iZXI6IDEwLCAvL+acgOWkmuiDveW8uuWItumHjei/nueahOasoeaVsFxuICAgICAgICAgICAgZm9yY2VSZWxvYWRJbnRlcnZhbDogNjAwMDAsIC8v6YeN5paw5Yqg6L2955qE6Ze06ZqUIO+8jCBtc1xuICAgICAgICAgICAgbGFuZ3VhZ2VUeXBlOiAnY2gnIC8v6K+t6KiA57G75Z6L77yM6buY6K6kY2ggLCAgbGFuZ3VhZ2VUeXBl55qE5YC85pyJIGNoIC8gdHcgLyBlbiAgLCBjaDrnroDkvZPkuK3mlofvvIx0dzrnuYHkvZPkuK3mlocg77yMIGVuOuiLseaWh1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmg1RG9jdW1lbnRJbnN0YW5jZUlEUHJlZml4ID0gXCJoNURvY3VtZW50X1wiO1xuICAgICAgICB0aGlzLmg1RG9jdW1lbnRJbnN0YW5jZURlZmF1bHRJRCA9IFwiaDVEb2N1bWVudF9cIiArICdkZWZhdWx0JztcbiAgICAgICAgdGhpcy5oNURvY3VtZW50SW5zdGFuY2VTdG9yZSA9IHt9OyAvL2g15paH5qGj5a6e5L6L5a2Y5YKo5Lit5b+DXG4gICAgICAgIHRoaXMudW5pcXVlSDVEb2N1bWVudCA9IGZhbHNlOyAvL+WUr+S4gOeahGg15paH5qGjXG4gICAgICAgIHRoaXMuc3BlY2lhbEg1RG9jdW1lbnRJbnN0YW5jZUlEUHJlZml4ID0gJ3NwZWNpYWxINURvY3VtZW50SW5zdGFuY2VJRFByZWZpeF8nO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhINURvY3VtZW50SW50ZXJtZWRpYXRlTGF5ZXIsIFt7XG4gICAgICAgIGtleTogJ3Byb2R1Y3Rpb25INURvY3VtZW50JyxcblxuXG4gICAgICAgIC8q5Yid5aeL5YyWaDXmlofmoaPmnYPpmZBcclxuICAgICAgICAgKiBAcGFyYW1zXHJcbiAgICAgICAgIGg1RG9jdW1lbnRFbGVtZW50SWQ6aDXmlofmoaPlhYPntKBpZO+8iHN0cmluZyAsIHJlcXVpcmVk77yJIHRodW1ibmFpbElkOue8qeeVpeWbvuWFg+e0oGlk77yIc3RyaW5nIO+8iSDvvIxcclxuICAgICAgICAgb3B0aW9uczrphY3nva7pobkob2JqZWN0KVxyXG4gICAgICAgICAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJvZHVjdGlvbkg1RG9jdW1lbnQoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgICAgICAgICAgaDVEb2N1bWVudEVsZW1lbnRJZCA9IF9yZWYuaDVEb2N1bWVudEVsZW1lbnRJZCxcbiAgICAgICAgICAgICAgICBfcmVmJHByb2R1Y3Rpb25PcHRpb24gPSBfcmVmLnByb2R1Y3Rpb25PcHRpb25zLFxuICAgICAgICAgICAgICAgIHByb2R1Y3Rpb25PcHRpb25zID0gX3JlZiRwcm9kdWN0aW9uT3B0aW9uID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkcHJvZHVjdGlvbk9wdGlvbixcbiAgICAgICAgICAgICAgICBfcmVmJGhhbmRsZXIgPSBfcmVmLmhhbmRsZXIsXG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IF9yZWYkaGFuZGxlciA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgaWQgPSBfcmVmLmlkO1xuXG4gICAgICAgICAgICBpZiAoIWg1RG9jdW1lbnRFbGVtZW50SWQpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignaDVEb2N1bWVudEVsZW1lbnRJZCBpcyByZXF1aXJlZCEnKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaDVEb2N1bWVudEluc3RhbmNlSUQgPSB0aGlzLl9nZXRINURvY3VtZW50SW5zdGFuY2VJRChpZCk7XG4gICAgICAgICAgICB2YXIgaDVEb2N1bWVudEluc3RhbmNlID0gdGhpcy5nZXRINURvY3VtZW50SW5zdGFuY2VCeUlEKGg1RG9jdW1lbnRJbnN0YW5jZUlEKTtcbiAgICAgICAgICAgIGlmIChoNURvY3VtZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignVGhlIHByb2R1Y3Rpb24gaDVEb2N1bWVudChoNURvY3VtZW50SW5zdGFuY2VJRDonICsgaDVEb2N1bWVudEluc3RhbmNlSUQgKyAnKSBmYWlscywgdGhlIGg1RG9jdW1lbnQgYWxyZWFkeSBleGlzdHMhJyk7cmV0dXJuIGg1RG9jdW1lbnRJbnN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZSA9IHt9O1xuICAgICAgICAgICAgcHJvZHVjdGlvbk9wdGlvbnMgPSBPYmplY3QuZGVlcEFzc2lnbih7fSwgdGhpcy5kZWZhdWx0UHJvZHVjdGlvbk9wdGlvbnMsIHByb2R1Y3Rpb25PcHRpb25zKTtcblxuICAgICAgICAgICAgdmFyIGg1RG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaDVEb2N1bWVudEVsZW1lbnRJZCk7XG4gICAgICAgICAgICBpZiAoIWg1RG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ0g1RG9jdW1lbnQgZWxlbWVudHMgZG8gbm90IGV4aXN0ICwgZWxlbWVudCBpZCBpczonICsgaDVEb2N1bWVudEVsZW1lbnRJZCArICchJyk7cmV0dXJuIGg1RG9jdW1lbnRJbnN0YW5jZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGg1RG9jdW1lbnRJbnN0YW5jZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHZhciBoNURvY3VtZW50SW5zdGFuY2VFbGVtZW50SWQgPSBoNURvY3VtZW50RWxlbWVudElkICsgJ19oNURvY3VtZW50SW5zdGFuY2UnO1xuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlRWxlbWVudC5jbGFzc05hbWUgPSAnaDVEb2N1bWVudC1pbnN0YW5jZS1lbGVtZW50JztcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZUVsZW1lbnQuaWQgPSBoNURvY3VtZW50SW5zdGFuY2VFbGVtZW50SWQ7XG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2VFbGVtZW50LnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlRWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG5cbiAgICAgICAgICAgIHZhciBoNURvY3VtZW50SWZyYW1lRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgICAgICAgdmFyIGg1RG9jdW1lbnRJZnJhbWVFbGVtZW50SWQgPSBoNURvY3VtZW50RWxlbWVudElkICsgJ19oNURvY3VtZW50SWZyYW1lJztcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJZnJhbWVFbGVtZW50LmNsYXNzTmFtZSA9ICdoNURvY3VtZW50LWlmcmFtZS1lbGVtZW50JztcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJZnJhbWVFbGVtZW50LmlkID0gaDVEb2N1bWVudElmcmFtZUVsZW1lbnRJZDtcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJZnJhbWVFbGVtZW50Lm5hbWUgPSBoNURvY3VtZW50RWxlbWVudElkICsgXCJfaDVEb2N1bWVudElmcmFtZU5hbWVcIjtcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJZnJhbWVFbGVtZW50LmFsbG93RnVsbFNjcmVlbiA9IHRydWU7XG4gICAgICAgICAgICBoNURvY3VtZW50SWZyYW1lRWxlbWVudC5hbGxvdyA9ICdhdXRvcGxheSc7XG4gICAgICAgICAgICBoNURvY3VtZW50SWZyYW1lRWxlbWVudC5mcmFtZWJvcmRlciA9IDA7XG4gICAgICAgICAgICBoNURvY3VtZW50SWZyYW1lRWxlbWVudC5zY3JvbGxpbmcgPSAnbm8nO1xuICAgICAgICAgICAgaDVEb2N1bWVudElmcmFtZUVsZW1lbnQud2lkdGggPSAnMTAwJSc7XG4gICAgICAgICAgICBoNURvY3VtZW50SWZyYW1lRWxlbWVudC5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgICAgICBoNURvY3VtZW50SWZyYW1lRWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJZnJhbWVFbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJZnJhbWVFbGVtZW50LnN0eWxlLmJvcmRlciA9ICdub25lJztcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJZnJhbWVFbGVtZW50LnN0eWxlLnBhZGRpbmcgPSAnMCc7XG4gICAgICAgICAgICBoNURvY3VtZW50SWZyYW1lRWxlbWVudC5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2VFbGVtZW50LmFwcGVuZENoaWxkKGg1RG9jdW1lbnRJZnJhbWVFbGVtZW50KTtcblxuICAgICAgICAgICAgdmFyIGg1RG9jdW1lbnRMb2FkaW5nRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdmFyIGg1RG9jdW1lbnRMb2FkaW5nRWxlbWVudElkID0gaDVEb2N1bWVudEVsZW1lbnRJZCArICdfaDVEb2N1bWVudExvYWRpbmcnO1xuICAgICAgICAgICAgaDVEb2N1bWVudExvYWRpbmdFbGVtZW50LmNsYXNzTmFtZSA9ICdoNURvY3VtZW50LWxvYWRpbmctZWxlbWVudCB0YWxrY2xvdWQtbG9hZGluZyc7XG4gICAgICAgICAgICBoNURvY3VtZW50TG9hZGluZ0VsZW1lbnQuaWQgPSBoNURvY3VtZW50TG9hZGluZ0VsZW1lbnRJZDtcbiAgICAgICAgICAgIHZhciBoNURvY3VtZW50UmVsb2FkTnVtYmVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgIGg1RG9jdW1lbnRSZWxvYWROdW1iZXJFbGVtZW50LmNsYXNzTmFtZSA9ICd0ay1sb2FkaW5nLXJlbG9hZC1udW1iZXInO1xuICAgICAgICAgICAgaDVEb2N1bWVudFJlbG9hZE51bWJlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIGg1RG9jdW1lbnRMb2FkaW5nRWxlbWVudC5hcHBlbmRDaGlsZChoNURvY3VtZW50UmVsb2FkTnVtYmVyRWxlbWVudCk7XG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2VFbGVtZW50LmFwcGVuZENoaWxkKGg1RG9jdW1lbnRMb2FkaW5nRWxlbWVudCk7XG5cbiAgICAgICAgICAgIHZhciBoNURvY3VtZW50QWN0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdmFyIGg1RG9jdW1lbnRBY3Rpb25FbGVtZW50SWQgPSBoNURvY3VtZW50RWxlbWVudElkICsgJ19oNURvY3VtZW50QWN0aW9uJztcbiAgICAgICAgICAgIGg1RG9jdW1lbnRBY3Rpb25FbGVtZW50LmNsYXNzTmFtZSA9ICdoNURvY3VtZW50LWFjdGlvbi1lbGVtZW50IHRhbGtjbG91ZC1hY3Rpb24nO1xuICAgICAgICAgICAgaDVEb2N1bWVudEFjdGlvbkVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgICAgICBoNURvY3VtZW50QWN0aW9uRWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgICAgICBoNURvY3VtZW50QWN0aW9uRWxlbWVudC5zdHlsZS56SW5kZXggPSA5ODtcbiAgICAgICAgICAgIGg1RG9jdW1lbnRBY3Rpb25FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBwcm9kdWN0aW9uT3B0aW9ucy5oNURvY3VtZW50QWN0aW9uQ2xpY2sgPyAnbm9uZScgOiAnYmxvY2snO1xuICAgICAgICAgICAgaDVEb2N1bWVudEFjdGlvbkVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICAgICAgaDVEb2N1bWVudEFjdGlvbkVsZW1lbnQuc3R5bGUudG9wID0gJzAnO1xuICAgICAgICAgICAgaDVEb2N1bWVudEFjdGlvbkVsZW1lbnQuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgICAgICAgIGg1RG9jdW1lbnRBY3Rpb25FbGVtZW50LmlkID0gaDVEb2N1bWVudEFjdGlvbkVsZW1lbnRJZDtcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZUVsZW1lbnQuYXBwZW5kQ2hpbGQoaDVEb2N1bWVudEFjdGlvbkVsZW1lbnQpO1xuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlRWxlbWVudC5hcHBlbmRDaGlsZChoNURvY3VtZW50QWN0aW9uRWxlbWVudCk7XG5cbiAgICAgICAgICAgIGg1RG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGg1RG9jdW1lbnRJbnN0YW5jZUVsZW1lbnQpO1xuXG4gICAgICAgICAgICB0aGlzLmg1RG9jdW1lbnRJbnN0YW5jZVN0b3JlW2g1RG9jdW1lbnRJbnN0YW5jZUlEXSA9IGg1RG9jdW1lbnRJbnN0YW5jZTsgLy9oNeaWh+aho+WunuS+i1xuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRJbnN0YW5jZUlEID0gaDVEb2N1bWVudEluc3RhbmNlSUQ7IC8vaDXmlofmoaNpZFxuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIgPSB7fTsgLy/lpITnkIblh73mlbDpm4blkIhcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oYW5kbGVyLnNlbmRTaWduYWxsaW5nVG9TZXJ2ZXIgPSBoYW5kbGVyLnNlbmRTaWduYWxsaW5nVG9TZXJ2ZXI7XG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaGFuZGxlci5kZWxTaWduYWxsaW5nVG9TZXJ2ZXIgPSBoYW5kbGVyLmRlbFNpZ25hbGxpbmdUb1NlcnZlcjtcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2sgPSBoYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2s7XG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEVsZW1lbnRJZCA9IGg1RG9jdW1lbnRFbGVtZW50SWQ7IC8vaDXmlofmoaPoioLngrnnmoRpZFxuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRFbGVtZW50ID0gaDVEb2N1bWVudEVsZW1lbnQ7IC8vaDXmlofmoaPnmoToioLngrnlhYPntKBcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50SW5zdGFuY2VFbGVtZW50SWQgPSBoNURvY3VtZW50SW5zdGFuY2VFbGVtZW50SWQ7IC8vaDXmlofmoaPlrp7kvovoioLngrnnmoRpZFxuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRJbnN0YW5jZUVsZW1lbnQgPSBoNURvY3VtZW50SW5zdGFuY2VFbGVtZW50OyAvL2g15paH5qGj5a6e5L6L6IqC54K55YWD57SgXG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudElmcmFtZUVsZW1lbnRJZCA9IGg1RG9jdW1lbnRJZnJhbWVFbGVtZW50SWQ7IC8vaDXmlofmoaPnmoRpZnJhbWXoioLngrnnmoRpZFxuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRJZnJhbWVFbGVtZW50ID0gaDVEb2N1bWVudElmcmFtZUVsZW1lbnQ7IC8vaDXmlofmoaPnmoRpZnJhbWXoioLngrnlhYPntKBcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50TG9hZGluZ0VsZW1lbnRJZCA9IGg1RG9jdW1lbnRMb2FkaW5nRWxlbWVudElkOyAvL2g15paH5qGj55qEbG9hZGluZ+iKgueCueeahGlkXG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudExvYWRpbmdFbGVtZW50ID0gaDVEb2N1bWVudExvYWRpbmdFbGVtZW50OyAvL2g15paH5qGj55qEbG9hZGluZ+iKgueCueWFg+e0oFxuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRSZWxvYWROdW1iZXJFbGVtZW50ID0gaDVEb2N1bWVudFJlbG9hZE51bWJlckVsZW1lbnQ7IC8vaDXmlofmoaPnmoRyZWxvYWQgbnVtYmVy6IqC54K55YWD57SgXG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEFjdGlvbkVsZW1lbnRJZCA9IGg1RG9jdW1lbnRBY3Rpb25FbGVtZW50SWQ7IC8vaDXmlofmoaPnmoRhY3Rpb27oioLngrnnmoRpZFxuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRBY3Rpb25FbGVtZW50ID0gaDVEb2N1bWVudEFjdGlvbkVsZW1lbnQ7IC8vaDXmlofmoaPnmoRhY3Rpb27oioLngrnlhYPntKBcblxuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmlkID0gaWQ7IC8v5a6e5L6LaWRcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5hd2l0RXhlY3V0ZVBvc3RNZXNzYWdlQXJyYXkgPSBbXTsgLy/nrYnlvoXmiafooYznmoRwb3N0TWVzc2FnZea2iOaBr+aVsOe7hFxuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRBY3Rpb25Kc29uID0ge307IC8vaDXmlofmoaPngrnlh7vliqjkvZzliJfooahcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5hc3NvY2lhdGVkTXNnSUQgPSBwcm9kdWN0aW9uT3B0aW9ucy5hc3NvY2lhdGVkTXNnSUQ7IC8v57uR5a6a55qE5L+h5Luk5raI5oGvaWRcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5hc3NvY2lhdGVkVXNlcklEID0gcHJvZHVjdGlvbk9wdGlvbnMuYXNzb2NpYXRlZFVzZXJJRDsgLy/nu5HlrprnmoTnlKjmiLdpZFxuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLnN5bmNocm9uaXphdGlvbkg1RG9jdW1lbnQgPSBwcm9kdWN0aW9uT3B0aW9ucy5zeW5jaHJvbml6YXRpb25INURvY3VtZW50OyAvL+aYr+WQpuWQjOatpUg15paH5qGjXG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEFjdGlvbkNsaWNrID0gcHJvZHVjdGlvbk9wdGlvbnMuaDVEb2N1bWVudEFjdGlvbkNsaWNrOyAvL2g15paH5qGj55qE54K55Ye75p2D6ZmQXG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXIgPSAwOyAvL+W8uuWItumHjei/nueahOasoeaVsFxuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLm1heEZvcmNlUmVsb2FkTnVtYmVyID0gcHJvZHVjdGlvbk9wdGlvbnMubWF4Rm9yY2VSZWxvYWROdW1iZXI7IC8v5pyA5aSa6IO95by65Yi26YeN6L+e55qE5qyh5pWwXG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuZm9yY2VSZWxvYWRJbnRlcnZhbCA9IHByb2R1Y3Rpb25PcHRpb25zLmZvcmNlUmVsb2FkSW50ZXJ2YWw7IC8v6YeN5paw5Yqg6L2955qE6Ze06ZqUICwgbXNcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5pc1Nob3dSZWxvYWRGaWxlVGlwID0gcHJvZHVjdGlvbk9wdGlvbnMuaXNTaG93UmVsb2FkRmlsZVRpcDsgLy/ph43mlrDliqDovb3mlofmoaPvvIzmmK/lkKbmmL7npLrph43ov57mrKHmlbBcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5sYW5ndWFnZVR5cGUgPSBwcm9kdWN0aW9uT3B0aW9ucy5sYW5ndWFnZVR5cGU7IC8v6K+t6KiA57G75Z6LXG5cbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50SWZyYW1lRWxlbWVudC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGg1RG9jdW1lbnRJbnN0YW5jZS5mb3JjZVJlbG9hZE51bWJlclRpbWVyKTtcbiAgICAgICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXJUaW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGg1RG9jdW1lbnRJbnN0YW5jZS5pZnJhbWVTcmMgJiYgIWg1RG9jdW1lbnRJbnN0YW5jZS5pc0xvYWRGaW5pc2hlZCAmJiBoNURvY3VtZW50SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXIgPCBoNURvY3VtZW50SW5zdGFuY2UubWF4Rm9yY2VSZWxvYWROdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2lmcmFtZVJlbG9hZE1vbml0b3IoaDVEb2N1bWVudEluc3RhbmNlLCAnaDVEb2N1bWVudExvYWRlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBoNURvY3VtZW50SW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rlc3Ryb3lINURvY3VtZW50SW5zdGFuY2UnLFxuXG5cbiAgICAgICAgLyrplIDmr4FoNeaWh+aho+WunuS+i++8jOmAmui/h2lkKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lINURvY3VtZW50SW5zdGFuY2UoaWQpIHtcbiAgICAgICAgICAgIHZhciBoNURvY3VtZW50SW5zdGFuY2UgPSB0aGlzLmdldEg1RG9jdW1lbnRJbnN0YW5jZUJ5SUQoaWQpO1xuICAgICAgICAgICAgaWYgKCFoNURvY3VtZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW2Rlc3Ryb3ldVGhlcmUgYXJlIG5vIGg1IGRvY3VtZW50IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fZGVzdHJveUg1RG9jdW1lbnRJbnN0YW5jZShoNURvY3VtZW50SW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZWNlaXZlV2luZG93TWVzc2FnZUV2ZW50JyxcblxuXG4gICAgICAgIC8q5o6l5pS2aDXmlofmoaPnmoRpZnJhbWXmtojmga8qL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVjZWl2ZVdpbmRvd01lc3NhZ2VFdmVudChpZCwgZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoNURvY3VtZW50SW5zdGFuY2UgPSB0aGlzLmdldEg1RG9jdW1lbnRJbnN0YW5jZUJ5SUQoaWQpO1xuICAgICAgICAgICAgaWYgKCFoNURvY3VtZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3JlY2VpdmVXaW5kb3dNZXNzYWdlRXZlbnRdVGhlcmUgYXJlIG5vIGg1IGRvY3VtZW50IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy/moLnmja5ldmVudC5zb3VyY2XliKTmlq3mtojmga/mnaXmupDmmK/lkKbmmK/lvZPliY3lrp7kvotpZOWvueW6lOeahGlmcmFtZVxuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSAhPT0gaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRJZnJhbWVFbGVtZW50LmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9yZWNlaXZlV2luZG93TWVzc2FnZUV2ZW50KGlkLCBoNURvY3VtZW50SW5zdGFuY2UsIGV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5piv5ZCm5pyJaDXmlofmoaPlrp7kvosqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYXNINURvY3VtZW50QnlJZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNINURvY3VtZW50QnlJZChpZCkge1xuICAgICAgICAgICAgdmFyIGg1RG9jdW1lbnRJbnN0YW5jZSA9IHRoaXMuZ2V0SDVEb2N1bWVudEluc3RhbmNlQnlJRChpZCk7XG4gICAgICAgICAgICByZXR1cm4gaDVEb2N1bWVudEluc3RhbmNlICE9PSB1bmRlZmluZWQgJiYgaDVEb2N1bWVudEluc3RhbmNlICE9PSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrorr7nva5oNeaWh+aho+eahGlmcmFtZeeahHNyYyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NldEg1RG9jdW1lbnRJZnJhbWVTcmMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SDVEb2N1bWVudElmcmFtZVNyYyhpZCwgc3JjKSB7XG4gICAgICAgICAgICB2YXIgcGFyYW1ldGVycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICAgICAgICB2YXIgZmlsZWRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHt9O1xuXG4gICAgICAgICAgICB2YXIgaDVEb2N1bWVudEluc3RhbmNlID0gdGhpcy5nZXRINURvY3VtZW50SW5zdGFuY2VCeUlEKGlkKTtcbiAgICAgICAgICAgIGlmICghaDVEb2N1bWVudEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tzZXRINURvY3VtZW50SWZyYW1lU3JjXVRoZXJlIGFyZSBubyBoNSBkb2N1bWVudCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBzcmNTdHIgPSAnJztcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5pc0xvYWRGaW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmlzUmVjZWl2ZVBhZ2VudW0gPSBmYWxzZTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEFjdGlvblRpbWVyKTtcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5hd2l0RXhlY3V0ZVBvc3RNZXNzYWdlQXJyYXkubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChoNURvY3VtZW50SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXJUaW1lcik7XG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXJUaW1lciA9IG51bGw7XG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXIgPSBvcHRpb25zLmZvcmNlUmVsb2FkTnVtYmVyIHx8IDA7XG4gICAgICAgICAgICB2YXIgZmlsZWlkID0gZmlsZWRhdGEuZmlsZWlkO1xuXG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuZmlsZWlkID0gZmlsZWlkO1xuICAgICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgICAgIHNyY1N0ciA9IHNyYztcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gT2JqZWN0LmVudHJpZXMocGFyYW1ldGVycylbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjIgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYzID0gX3NsaWNlZFRvQXJyYXkoX3JlZjIsIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gX3JlZjNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmM1sxXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNTdHIgKz0gKC9cXD8vZy50ZXN0KHNyY1N0cikgPyAnJicgOiAnPycpICsga2V5ICsgJz0nICsgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyY1N0ciArPSAnJicgKyBrZXkgKyAnPScgKyB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmlmcmFtZVNyYyA9IHNyY1N0cjtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG93TG9hZGluZyhoNURvY3VtZW50SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lmcmFtZVJlbG9hZE1vbml0b3IoaDVEb2N1bWVudEluc3RhbmNlLCAnc2V0SDVEb2N1bWVudElmcmFtZVNyYycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaWZyYW1lU3JjID0gc3JjU3RyO1xuICAgICAgICAgICAgICAgIHRoaXMuX2hpZGVMb2FkaW5nKGg1RG9jdW1lbnRJbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudElmcmFtZUVsZW1lbnQuc3JjID0gc3JjU3RyO1xuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ3NldCBoNSBkb2N1bWVudCBzcmM6Jywgc3JjU3RyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q6I635Y+WaWZyYW1l55qEc3Jj5Zyw5Z2AKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0SWZyYW1lU3JjJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldElmcmFtZVNyYyhpZCkge1xuICAgICAgICAgICAgdmFyIGg1RG9jdW1lbnRJbnN0YW5jZSA9IHRoaXMuZ2V0SDVEb2N1bWVudEluc3RhbmNlQnlJRChpZCk7XG4gICAgICAgICAgICBpZiAoIWg1RG9jdW1lbnRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbZ2V0SWZyYW1lU3JjXVRoZXJlIGFyZSBubyBoNSBkb2N1bWVudCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBoNURvY3VtZW50SW5zdGFuY2UuaWZyYW1lU3JjO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrot7PovazliLBwcHTnmoTmjIflrprpobXlkozluKcqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdqdW1wVG9QYWdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGp1bXBUb1BhZ2UoaWQsIHBhZ2UpIHtcbiAgICAgICAgICAgIHZhciBoNURvY3VtZW50SW5zdGFuY2UgPSB0aGlzLmdldEg1RG9jdW1lbnRJbnN0YW5jZUJ5SUQoaWQpO1xuICAgICAgICAgICAgaWYgKCFoNURvY3VtZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW2p1bXBUb1BhZ2VdVGhlcmUgYXJlIG5vIGg1IGRvY3VtZW50IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fanVtcFRvUGFnZShoNURvY3VtZW50SW5zdGFuY2UsIHBhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrkuIvkuIDpobUqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICduZXh0UGFnZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0UGFnZShpZCkge1xuICAgICAgICAgICAgdmFyIGg1RG9jdW1lbnRJbnN0YW5jZSA9IHRoaXMuZ2V0SDVEb2N1bWVudEluc3RhbmNlQnlJRChpZCk7XG4gICAgICAgICAgICBpZiAoIWg1RG9jdW1lbnRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbbmV4dFBhZ2VdVGhlcmUgYXJlIG5vIGg1IGRvY3VtZW50IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCFoNURvY3VtZW50SW5zdGFuY2UuaXNMb2FkRmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5pbmZvKCdbbmV4dFBhZ2VdaDUgZG9jdW1lbnQgaXMgbm90IGxvYWQgZmluaXNoZWQgICwgY2Fubm90IGV4ZWN1dGUgbmV4dFBhZ2UgbWV0aG9kJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZpbGVkYXRhID0gdGhpcy5fZ2V0V2hpdGVib2FyZEZpbGVkYXRhKGg1RG9jdW1lbnRJbnN0YW5jZSk7XG4gICAgICAgICAgICBpZiAoZmlsZWRhdGEgJiYgZmlsZWRhdGEuY3VycnBhZ2UgPj0gZmlsZWRhdGEucGFnZW51bSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ1tuZXh0UGFnZV1oNSBkb2N1bWVudCBpcyBvbiB0aGUgbGFzdCBwYWdlICwgY2Fubm90IGV4ZWN1dGUgbmV4dFBhZ2UgbWV0aG9kLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoaXMuX3Bvc3RNZXNzYWdlKGg1RG9jdW1lbnRJbnN0YW5jZSAsIHsgbWV0aG9kOlwib25QYWdlZG93blwiIH0gKTtcbiAgICAgICAgICAgIHZhciB1cGRhdGVGaWxlRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBjdXJycGFnZTogZmlsZWRhdGEuY3VycnBhZ2UgKyAxXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fcG9zdE1lc3NhZ2UoaDVEb2N1bWVudEluc3RhbmNlLCB7IG1ldGhvZDogXCJvbkp1bXBQYWdlXCIsIHRvUGFnZTogdXBkYXRlRmlsZURhdGEuY3VycnBhZ2UgfSk7XG4gICAgICAgICAgICB0aGlzLl9zYXZlRmlsZWRhdGFBbmRMb2FkQ3VycnBhZ2VXaGl0ZWJvYXJkRGF0YShoNURvY3VtZW50SW5zdGFuY2UsIHVwZGF0ZUZpbGVEYXRhKTtcbiAgICAgICAgICAgIHRoaXMuX3NlbmRTaWduYWxsaW5nX1Nob3dQYWdlKGg1RG9jdW1lbnRJbnN0YW5jZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuS4iuS4gOmhtSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3ByZXZQYWdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByZXZQYWdlKGlkKSB7XG4gICAgICAgICAgICB2YXIgaDVEb2N1bWVudEluc3RhbmNlID0gdGhpcy5nZXRINURvY3VtZW50SW5zdGFuY2VCeUlEKGlkKTtcbiAgICAgICAgICAgIGlmICghaDVEb2N1bWVudEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tuZXh0UGFnZV1UaGVyZSBhcmUgbm8gaDUgZG9jdW1lbnQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIWg1RG9jdW1lbnRJbnN0YW5jZS5pc0xvYWRGaW5pc2hlZCkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmluZm8oJ1twcmV2UGFnZV1oNSBkb2N1bWVudCBpcyBub3QgbG9hZCBmaW5pc2hlZCAgLCBjYW5ub3QgZXhlY3V0ZSBwcmV2UGFnZSBtZXRob2QnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZmlsZWRhdGEgPSB0aGlzLl9nZXRXaGl0ZWJvYXJkRmlsZWRhdGEoaDVEb2N1bWVudEluc3RhbmNlKTtcbiAgICAgICAgICAgIGlmIChmaWxlZGF0YSAmJiBmaWxlZGF0YS5jdXJycGFnZSA8PSAxKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnW25leHRQYWdlXWg1IGRvY3VtZW50IGlzIG9uIHBhZ2UgMSwgY2Fubm90IGV4ZWN1dGUgcHJldlBhZ2UgbWV0aG9kLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoaXMuX3Bvc3RNZXNzYWdlKGg1RG9jdW1lbnRJbnN0YW5jZSAsIHsgbWV0aG9kOlwib25QYWdldXBcIiB9ICk7XG4gICAgICAgICAgICB2YXIgdXBkYXRlRmlsZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgY3VycnBhZ2U6IGZpbGVkYXRhLmN1cnJwYWdlIC0gMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX3Bvc3RNZXNzYWdlKGg1RG9jdW1lbnRJbnN0YW5jZSwgeyBtZXRob2Q6IFwib25KdW1wUGFnZVwiLCB0b1BhZ2U6IHVwZGF0ZUZpbGVEYXRhLmN1cnJwYWdlIH0pO1xuICAgICAgICAgICAgdGhpcy5fc2F2ZUZpbGVkYXRhQW5kTG9hZEN1cnJwYWdlV2hpdGVib2FyZERhdGEoaDVEb2N1bWVudEluc3RhbmNlLCB1cGRhdGVGaWxlRGF0YSk7XG4gICAgICAgICAgICB0aGlzLl9zZW5kU2lnbmFsbGluZ19TaG93UGFnZShoNURvY3VtZW50SW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdza2lwUGFnZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBza2lwUGFnZShpZCwgdG9QYWdlKSB7XG4gICAgICAgICAgICB2YXIgaDVEb2N1bWVudEluc3RhbmNlID0gdGhpcy5nZXRINURvY3VtZW50SW5zdGFuY2VCeUlEKGlkKTtcbiAgICAgICAgICAgIGlmICghaDVEb2N1bWVudEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tza2lwUGFnZV1UaGVyZSBhcmUgbm8gaDUgZG9jdW1lbnQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIWg1RG9jdW1lbnRJbnN0YW5jZS5pc0xvYWRGaW5pc2hlZCkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmluZm8oJ1tza2lwUGFnZV1oNSBkb2N1bWVudCBpcyBub3QgbG9hZCBmaW5pc2hlZCAgLCBjYW5ub3QgZXhlY3V0ZSBza2lwUGFnZSBtZXRob2QnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZmlsZWRhdGEgPSB0aGlzLl9nZXRXaGl0ZWJvYXJkRmlsZWRhdGEoaDVEb2N1bWVudEluc3RhbmNlKTtcbiAgICAgICAgICAgIGlmIChmaWxlZGF0YSAmJiB0b1BhZ2UgPiBmaWxlZGF0YS5wYWdlbnVtKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuaW5mbygnW3NraXBQYWdlXWg1IGRvY3VtZW50IHNraXAgdG8gcGFnZSBleGNlZWRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBwYWdlcyAsIGNoYW5nZSBza2lwIHBhZ2UgIHRvIDUobWF4IHBhZ2UgbnVtYmVyKS4nKTtcbiAgICAgICAgICAgICAgICB0b1BhZ2UgPSBmaWxlZGF0YS5wYWdlbnVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvUGFnZSA8IDEpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5pbmZvKCdbc2tpcFBhZ2VdaDUgZG9jdW1lbnQgc2tpcCB0byBwYWdlIGxlc3MgdGhhbiB0aGUgbWluaW11bSBwYWdlICwgY2hhbmdlIHNraXAgcGFnZSAgdG8gMShtaW4gcGFnZSBudW1iZXIpLicpO1xuICAgICAgICAgICAgICAgIHRvUGFnZSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zYXZlRmlsZWRhdGFBbmRMb2FkQ3VycnBhZ2VXaGl0ZWJvYXJkRGF0YShoNURvY3VtZW50SW5zdGFuY2UsIHtcbiAgICAgICAgICAgICAgICBjdXJycGFnZTogdG9QYWdlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX2p1bXBUb1BhZ2UoaDVEb2N1bWVudEluc3RhbmNlLCB0b1BhZ2UpO1xuICAgICAgICAgICAgdGhpcy5fc2VuZFNpZ25hbGxpbmdfU2hvd1BhZ2UoaDVEb2N1bWVudEluc3RhbmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5pu05pawaDXmlofmoaPlrp7kvovlsZ7mgKcqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICd1cGRhdGVINURvY3VtZW50UHJvcGVydHknLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlSDVEb2N1bWVudFByb3BlcnR5KGlkLCB1cGRhdGVQcm9wZXJ0eSkge1xuICAgICAgICAgICAgdmFyIGg1RG9jdW1lbnRJbnN0YW5jZSA9IHRoaXMuZ2V0SDVEb2N1bWVudEluc3RhbmNlQnlJRChpZCk7XG4gICAgICAgICAgICBpZiAoIWg1RG9jdW1lbnRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbdXBkYXRlSDVEb2N1bWVudFByb3BlcnR5XVRoZXJlIGFyZSBubyBoNSBkb2N1bWVudCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5hc3NvY2lhdGVkTXNnSUQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5hc3NvY2lhdGVkTXNnSUQgPSB1cGRhdGVQcm9wZXJ0eS5hc3NvY2lhdGVkTXNnSUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlUHJvcGVydHkuYXNzb2NpYXRlZFVzZXJJRCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmFzc29jaWF0ZWRVc2VySUQgPSB1cGRhdGVQcm9wZXJ0eS5hc3NvY2lhdGVkVXNlcklEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZVByb3BlcnR5LnN5bmNocm9uaXphdGlvbkg1RG9jdW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5zeW5jaHJvbml6YXRpb25INURvY3VtZW50ID0gdXBkYXRlUHJvcGVydHkuc3luY2hyb25pemF0aW9uSDVEb2N1bWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5oNURvY3VtZW50QWN0aW9uQ2xpY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50QWN0aW9uQ2xpY2sgPSB1cGRhdGVQcm9wZXJ0eS5oNURvY3VtZW50QWN0aW9uQ2xpY2s7XG4gICAgICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRBY3Rpb25FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEFjdGlvbkNsaWNrID8gJ25vbmUnIDogJ2Jsb2NrJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5pc1Nob3dSZWxvYWRGaWxlVGlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaXNTaG93UmVsb2FkRmlsZVRpcCA9IHVwZGF0ZVByb3BlcnR5LmlzU2hvd1JlbG9hZEZpbGVUaXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlUHJvcGVydHkubGFuZ3VhZ2VUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UubGFuZ3VhZ2VUeXBlID0gdXBkYXRlUHJvcGVydHkubGFuZ3VhZ2VUeXBlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzU2hvd1JlbG9hZEZpbGVTaG93UmVsb2FkTnVtYmVyKGg1RG9jdW1lbnRJbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWPkemAgWg15paH5qGj55qE54K55Ye7YWN0aW9u57uZaWZyYW1lKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncG9zdE1lc3NhZ2VINURvY3VtZW50VHJpZ2dlckFjdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0TWVzc2FnZUg1RG9jdW1lbnRUcmlnZ2VyQWN0aW9uKGlkLCBwb3N0TWVzc2FnZURhdGEpIHtcbiAgICAgICAgICAgIHZhciBoNURvY3VtZW50SW5zdGFuY2UgPSB0aGlzLmdldEg1RG9jdW1lbnRJbnN0YW5jZUJ5SUQoaWQpO1xuICAgICAgICAgICAgaWYgKCFoNURvY3VtZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3Bvc3RNZXNzYWdlSDVEb2N1bWVudFRyaWdnZXJBY3Rpb25dVGhlcmUgYXJlIG5vIGg1IGRvY3VtZW50IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGZpbGVkYXRhID0gdGhpcy5fZ2V0V2hpdGVib2FyZEZpbGVkYXRhKGg1RG9jdW1lbnRJbnN0YW5jZSk7XG4gICAgICAgICAgICBpZiAocG9zdE1lc3NhZ2VEYXRhICYmIHBvc3RNZXNzYWdlRGF0YS5maWxlaWQgIT0gdW5kZWZpbmVkICYmIHBvc3RNZXNzYWdlRGF0YS5jdXJycGFnZSAhPT0gdW5kZWZpbmVkICYmICEoZmlsZWRhdGEuZmlsZWlkID09IHBvc3RNZXNzYWdlRGF0YS5maWxlaWQgJiYgZmlsZWRhdGEuY3VycnBhZ2UgPT09IHBvc3RNZXNzYWdlRGF0YS5jdXJycGFnZSkpIHtcbiAgICAgICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEFjdGlvbkpzb25bcG9zdE1lc3NhZ2VEYXRhLmN1cnJwYWdlXSA9IGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50QWN0aW9uSnNvbltwb3N0TWVzc2FnZURhdGEuY3VycnBhZ2VdIHx8IFtdO1xuICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50QWN0aW9uSnNvbltwb3N0TWVzc2FnZURhdGEuY3VycnBhZ2VdLnB1c2gocG9zdE1lc3NhZ2VEYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcG9zdE1lc3NhZ2UoaDVEb2N1bWVudEluc3RhbmNlLCBwb3N0TWVzc2FnZURhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmj5Dkvptwb3N0TWVzc2FnZSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Bvc3RNZXNzYWdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKGlkLCBwb3N0TWVzc2FnZURhdGEpIHtcbiAgICAgICAgICAgIHZhciBoNURvY3VtZW50SW5zdGFuY2UgPSB0aGlzLmdldEg1RG9jdW1lbnRJbnN0YW5jZUJ5SUQoaWQpO1xuICAgICAgICAgICAgaWYgKCFoNURvY3VtZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3Bvc3RNZXNzYWdlXVRoZXJlIGFyZSBubyBoNSBkb2N1bWVudCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX3Bvc3RNZXNzYWdlKGg1RG9jdW1lbnRJbnN0YW5jZSwgcG9zdE1lc3NhZ2VEYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5piv5ZCm5Yqg6L295a6M5oiQaDXmlofmoaMqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdpc0xvYWRGaW5pc2hlZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0xvYWRGaW5pc2hlZChpZCkge1xuICAgICAgICAgICAgdmFyIGg1RG9jdW1lbnRJbnN0YW5jZSA9IHRoaXMuZ2V0SDVEb2N1bWVudEluc3RhbmNlQnlJRChpZCk7XG4gICAgICAgICAgICBpZiAoIWg1RG9jdW1lbnRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbaXNMb2FkRmluaXNoZWRdVGhlcmUgYXJlIG5vIGg1IGRvY3VtZW50IE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGg1RG9jdW1lbnRJbnN0YW5jZS5pc0xvYWRGaW5pc2hlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q6I635Y+WaDXmlofmoaPlrp7kvoss5qC55o2uaWTojrflj5YqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRINURvY3VtZW50SW5zdGFuY2VCeUlEJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEg1RG9jdW1lbnRJbnN0YW5jZUJ5SUQoaWQpIHtcbiAgICAgICAgICAgIHZhciBoNURvY3VtZW50SW5zdGFuY2VJRCA9IHRoaXMuX2dldEg1RG9jdW1lbnRJbnN0YW5jZUlEKGlkKTtcbiAgICAgICAgICAgIHZhciBoNURvY3VtZW50SW5zdGFuY2UgPSB0aGlzLmg1RG9jdW1lbnRJbnN0YW5jZVN0b3JlW2g1RG9jdW1lbnRJbnN0YW5jZUlEXTtcbiAgICAgICAgICAgIHJldHVybiBoNURvY3VtZW50SW5zdGFuY2U7XG4gICAgICAgIH1cblxuICAgICAgICAvKui3s+i9rOWIsHBwdOeahOaMh+WumumhteWSjOW4pyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19qdW1wVG9QYWdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9qdW1wVG9QYWdlKGg1RG9jdW1lbnRJbnN0YW5jZSwgcGFnZSkge1xuICAgICAgICAgICAgaWYgKGg1RG9jdW1lbnRJbnN0YW5jZS5pc0xvYWRGaW5pc2hlZCkge1xuICAgICAgICAgICAgICAgIHZhciBmaWxlZGF0YSA9IHRoaXMuX2dldFdoaXRlYm9hcmRGaWxlZGF0YShoNURvY3VtZW50SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIHZhciBuZWVkQ2hhbmdlQ3VycnBhZ2UgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY3VycnBhZ2UgPSBwYWdlO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZWRhdGEuY3VycnBhZ2UgPiBmaWxlZGF0YS5wYWdlbnVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlZGF0YS5jdXJycGFnZSA9IGZpbGVkYXRhLnBhZ2VudW07XG4gICAgICAgICAgICAgICAgICAgICAgICBuZWVkQ2hhbmdlQ3VycnBhZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZSA9IGZpbGVkYXRhLmN1cnJwYWdlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlZGF0YS5jdXJycGFnZSA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVkYXRhLmN1cnJwYWdlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRDaGFuZ2VDdXJycGFnZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlID0gZmlsZWRhdGEuY3VycnBhZ2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VycnBhZ2UgPSBmaWxlZGF0YS5jdXJycGFnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5lZWRDaGFuZ2VDdXJycGFnZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlRmlsZURhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5lZWRDaGFuZ2VDdXJycGFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRmlsZURhdGEuY3VycnBhZ2UgPSBjdXJycGFnZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zYXZlRmlsZWRhdGFBbmRMb2FkQ3VycnBhZ2VXaGl0ZWJvYXJkRGF0YShoNURvY3VtZW50SW5zdGFuY2UsIHVwZGF0ZUZpbGVEYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhZ2UgIT09IHVuZGVmaW5lZCAmJiBwYWdlICE9PSBudWxsICYmICFpc05hTihwYWdlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJvbkp1bXBQYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b1BhZ2U6IHBhZ2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zdE1lc3NhZ2UoaDVEb2N1bWVudEluc3RhbmNlLCBkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWPkemAgea2iOaBr+e7mWg15paH5qGj55qEaWZyYW1l5qGG5p62Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3Bvc3RNZXNzYWdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wb3N0TWVzc2FnZShoNURvY3VtZW50SW5zdGFuY2UsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChoNURvY3VtZW50SW5zdGFuY2UuaXNMb2FkRmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRJZnJhbWVFbGVtZW50ICYmIGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50SWZyYW1lRWxlbWVudC5zcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxldCBzb3VyY2UgPSAgXCJ0a19oNURvY3VtZW50XCIgO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmREYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmREYXRhID0gSlNPTi5zdHJpbmdpZnkoc2VuZERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50SWZyYW1lRWxlbWVudCAmJiBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudElmcmFtZUVsZW1lbnQuY29udGVudFdpbmRvdyAmJiBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudElmcmFtZUVsZW1lbnQuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmRlYnVnKCdbX3Bvc3RNZXNzYWdlXWg1IGRvY3VtZW50IHBvc3RNZXNzYWdlIGluc3RhbmNlSWQgaXMgJyArIGg1RG9jdW1lbnRJbnN0YW5jZS5pZCArICcsc2VuZERhdGE6JyArIHNlbmREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudElmcmFtZUVsZW1lbnQuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShzZW5kRGF0YSwgXCIqXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbX3Bvc3RNZXNzYWdlXSBoNSBkb2N1bWVudCBwb3N0TWVzc2FnZSBlcnJvcjonLCBlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmF3aXRFeGVjdXRlUG9zdE1lc3NhZ2VBcnJheS5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmmL7npLpsb2FkaW5nKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3Nob3dMb2FkaW5nJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zaG93TG9hZGluZyhoNURvY3VtZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50TG9hZGluZ0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICB0aGlzLl9pc1Nob3dSZWxvYWRGaWxlU2hvd1JlbG9hZE51bWJlcihoNURvY3VtZW50SW5zdGFuY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrpmpDol49sb2FkaW5nKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2hpZGVMb2FkaW5nJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oaWRlTG9hZGluZyhoNURvY3VtZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50TG9hZGluZ0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIHRoaXMuX2lzU2hvd1JlbG9hZEZpbGVTaG93UmVsb2FkTnVtYmVyKGg1RG9jdW1lbnRJbnN0YW5jZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuiOt+WPlmg15paH5qGj5a6e5L6LaWQs5qC55o2uaWTojrflj5YqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfZ2V0SDVEb2N1bWVudEluc3RhbmNlSUQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEg1RG9jdW1lbnRJbnN0YW5jZUlEKGlkKSB7XG4gICAgICAgICAgICB2YXIgaDVEb2N1bWVudEluc3RhbmNlSUQgPSAhdGhpcy51bmlxdWVINURvY3VtZW50ICYmIGlkICE9PSB1bmRlZmluZWQgJiYgaWQgIT09IG51bGwgPyB0aGlzLmg1RG9jdW1lbnRJbnN0YW5jZUlEUHJlZml4ICsgaWQgOiB0aGlzLmg1RG9jdW1lbnRJbnN0YW5jZURlZmF1bHRJRDtcbiAgICAgICAgICAgIGlmIChpZCAmJiB0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJxID0gbmV3IFJlZ0V4cCh0aGlzLnNwZWNpYWxINURvY3VtZW50SW5zdGFuY2VJRFByZWZpeCwgJ2cnKTtcbiAgICAgICAgICAgICAgICBpZiAocnEudGVzdChpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlSUQgPSBpZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaDVEb2N1bWVudEluc3RhbmNlSUQ7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19kZXN0cm95SDVEb2N1bWVudEluc3RhbmNlJyxcblxuXG4gICAgICAgIC8q6ZSA5q+BaDXmlofmoaPlrp7kvovvvIzpgJrov4flrp7kvotoNURvY3VtZW50SW5zdGFuY2UqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3lINURvY3VtZW50SW5zdGFuY2UoaDVEb2N1bWVudEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgaDVEb2N1bWVudEluc3RhbmNlSUQgPSBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEluc3RhbmNlSUQ7XG4gICAgICAgICAgICB2YXIgaDVEb2N1bWVudEVsZW1lbnQgPSBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoIWg1RG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnW2Rlc3Ryb3ldIGg1RG9jdW1lbnQgZWxlbWVudHMgZG8gbm90IGV4aXN0ICwgZWxlbWVudCBpZCBpczonICsgaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRFbGVtZW50SWQgKyAnIScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoNURvY3VtZW50RWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBPYmplY3Qua2V5cyhoNURvY3VtZW50SW5zdGFuY2UpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlW2tleV0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgaDVEb2N1bWVudEluc3RhbmNlW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaDVEb2N1bWVudEluc3RhbmNlU3RvcmVbaDVEb2N1bWVudEluc3RhbmNlSURdID0gbnVsbDsgLy9oNeaWh+aho+WunuS+i1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuaDVEb2N1bWVudEluc3RhbmNlU3RvcmVbaDVEb2N1bWVudEluc3RhbmNlSURdO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfcmVjZWl2ZVdpbmRvd01lc3NhZ2VFdmVudCcsXG5cblxuICAgICAgICAvKuaOpeaUtmg15paH5qGj55qEaWZyYW1l5raI5oGvKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWNlaXZlV2luZG93TWVzc2FnZUV2ZW50KGluc3RhbmNlSWQsIGg1RG9jdW1lbnRJbnN0YW5jZSwgZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIOmAmui/h29yaWdpbuWxnuaAp+WIpOaWrea2iOaBr+adpea6kOWcsOWdgFxuICAgICAgICAgICAgaWYgKGV2ZW50LmRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVjdkRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVjdkRhdGEgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZyhcImg1IGRvY3VtZW50IHJlY2VpdmUgaWZyYW1lIG1lc3NhZ2UgZGF0YSBjYW4ndCBiZSBjb252ZXJ0ZWQgdG8gSlNPTiAsIGlmcmFtZSBkYXRhOlwiLCBldmVudC5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVjdkRhdGEubWV0aG9kIHx8IHJlY3ZEYXRhLnNvdXJjZSA9PT0gXCJ0a19oNURvY3VtZW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoXCJbaDVEb2N1bWVudF1yZWNlaXZlIHJlbW90ZSBpZnJhbWUgZGF0YSBmb3JtIFwiICsgZXZlbnQub3JpZ2luICsgXCI6XCIsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIE9OTE9BRENPTVBMRVRFID0gXCJvbkxvYWRDb21wbGV0ZVwiOyAvL+aUtuWIsGlmcmFtZeWKoOi9veWujOaIkOaXtlxuICAgICAgICAgICAgICAgICAgICB2YXIgT05QQUdFTlVNID0gXCJvblBhZ2VudW1cIjsgLy/mlLbliLDmgLvpobXmlbBcbiAgICAgICAgICAgICAgICAgICAgdmFyIE9ORklMRU1FU1NBR0UgPSBcIm9uRmlsZU1lc3NhZ2VcIjsgLy/mk43kvZxoNeivvuS7tuaXtlxuICAgICAgICAgICAgICAgICAgICB2YXIgT05KVU1QUEFHRSA9IFwib25KdW1wUGFnZVwiOyAvL+i3s+WIsOafkOmhtVxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHJlY3ZEYXRhLm1ldGhvZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBPTkxPQURDT01QTEVURTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVJZnJhbWVNZXNzYWdlX29uTG9hZENvbXBsZXRlKGg1RG9jdW1lbnRJbnN0YW5jZSwgcmVjdkRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBPTlBBR0VOVU06XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlSWZyYW1lTWVzc2FnZV9vblBhZ2VudW0oaDVEb2N1bWVudEluc3RhbmNlLCByZWN2RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIE9ORklMRU1FU1NBR0U6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlSWZyYW1lTWVzc2FnZV9vbkZpbGVNZXNzYWdlKGluc3RhbmNlSWQsIGg1RG9jdW1lbnRJbnN0YW5jZSwgcmVjdkRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBPTkpVTVBQQUdFOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVjdkRhdGEudG9QYWdlIHx8IHR5cGVvZiByZWN2RGF0YS50b1BhZ2UgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZyhcImg1IGRvY3VtZW50IHRvUGFnZSBpcyBub3QgYSBudW1iZXIgLCB0b1BhZ2U6XCIsIHJlY3ZEYXRhLnRvUGFnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaygnaDVEb2N1bWVudE9uSnVtcFBhZ2UnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBoNURvY3VtZW50SW5zdGFuY2UuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvUGFnZTogcmVjdkRhdGEudG9QYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrlpITnkIZpZnJhbWXnmoRvbkxvYWRDb21wbGV0Zea2iOaBryovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19oYW5kbGVJZnJhbWVNZXNzYWdlX29uTG9hZENvbXBsZXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVJZnJhbWVNZXNzYWdlX29uTG9hZENvbXBsZXRlKGg1RG9jdW1lbnRJbnN0YW5jZSwgZGF0YSkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dChoNURvY3VtZW50SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXJUaW1lcik7XG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXJUaW1lciA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIgJiYgaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2soJ3VwZGF0ZVdoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZVNjYWxlJywge1xuICAgICAgICAgICAgICAgICAgICBpZDogaDVEb2N1bWVudEluc3RhbmNlLmlkLFxuICAgICAgICAgICAgICAgICAgICBzY2FsZTogZGF0YS5jb3Vyc2V3YXJlUmF0aW8gfHwgMTYgLyA5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaygnaDVEb2N1bWVudExvYWRFbmQnLCB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBoNURvY3VtZW50SW5zdGFuY2UuaWQsXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiBkYXRhLmNvdXJzZXdhcmVSYXRpbyB8fCAxNiAvIDlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaDVEb2N1bWVudEluc3RhbmNlLmlzTG9hZEZpbmlzaGVkKSB7XG4gICAgICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmlzTG9hZEZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoaDVEb2N1bWVudEluc3RhbmNlLmlzUmVjZWl2ZVBhZ2VudW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVkYXRhID0gdGhpcy5fZ2V0V2hpdGVib2FyZEZpbGVkYXRhKGg1RG9jdW1lbnRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fanVtcFRvUGFnZShoNURvY3VtZW50SW5zdGFuY2UsIGZpbGVkYXRhLmN1cnJwYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEFjdGlvblRpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50QWN0aW9uVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaDVEb2N1bWVudEluc3RhbmNlLmlzTG9hZEZpbmlzaGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVkYXRhID0gX3RoaXMyLl9nZXRXaGl0ZWJvYXJkRmlsZWRhdGEoaDVEb2N1bWVudEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50QWN0aW9uSnNvbikubGVuZ3RoID4gMCAmJiBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEFjdGlvbkpzb25bZmlsZWRhdGEuY3VycnBhZ2VdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRBY3Rpb25Kc29uW2ZpbGVkYXRhLmN1cnJwYWdlXS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IzID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMyA9IGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50QWN0aW9uSnNvbltmaWxlZGF0YS5jdXJycGFnZV1bU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoNURvY3VtZW50QWN0aW9uID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIuX3Bvc3RNZXNzYWdlKGg1RG9jdW1lbnRJbnN0YW5jZSwgaDVEb2N1bWVudEFjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IzID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zICYmIF9pdGVyYXRvcjMucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEFjdGlvbkpzb25bZmlsZWRhdGEuY3VycnBhZ2VdLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50QWN0aW9uSnNvbltmaWxlZGF0YS5jdXJycGFnZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGg1RG9jdW1lbnRJbnN0YW5jZS5hd2l0RXhlY3V0ZVBvc3RNZXNzYWdlQXJyYXkgJiYgaDVEb2N1bWVudEluc3RhbmNlLmF3aXRFeGVjdXRlUG9zdE1lc3NhZ2VBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yNCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjQgPSBoNURvY3VtZW50SW5zdGFuY2UuYXdpdEV4ZWN1dGVQb3N0TWVzc2FnZUFycmF5W1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA0OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gKF9zdGVwNCA9IF9pdGVyYXRvcjQubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VEYXRhID0gX3N0ZXA0LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3N0TWVzc2FnZShoNURvY3VtZW50SW5zdGFuY2UsIHBvc3RNZXNzYWdlRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I0ID0gZXJyO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ICYmIF9pdGVyYXRvcjQucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNC5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuYXdpdEV4ZWN1dGVQb3N0TWVzc2FnZUFycmF5Lmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB0aGlzLl9oaWRlTG9hZGluZyhoNURvY3VtZW50SW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfaGFuZGxlSWZyYW1lTWVzc2FnZV9vblBhZ2VudW0nLFxuXG5cbiAgICAgICAgLyrlpITnkIZpZnJhbWXnmoRvblBhZ2VudW3mtojmga8qL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZUlmcmFtZU1lc3NhZ2Vfb25QYWdlbnVtKGg1RG9jdW1lbnRJbnN0YW5jZSwgZGF0YSkge1xuICAgICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBoNVBhZ2VudW0gPSBkYXRhLnRvdGFsUGFnZXM7XG4gICAgICAgICAgICB2YXIgbmVlZENoYW5nZUN1cnJwYWdlID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgY3VycnBhZ2UgPSAxO1xuICAgICAgICAgICAgdmFyIGZpbGVkYXRhID0gdGhpcy5fZ2V0V2hpdGVib2FyZEZpbGVkYXRhKGg1RG9jdW1lbnRJbnN0YW5jZSk7XG4gICAgICAgICAgICBpZiAoZmlsZWRhdGEpIHtcbiAgICAgICAgICAgICAgICBmaWxlZGF0YS5wYWdlbnVtID0gaDVQYWdlbnVtO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlZGF0YS5jdXJycGFnZSA+IGZpbGVkYXRhLnBhZ2VudW0pIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZWRhdGEuY3VycnBhZ2UgPSBmaWxlZGF0YS5wYWdlbnVtO1xuICAgICAgICAgICAgICAgICAgICBuZWVkQ2hhbmdlQ3VycnBhZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZmlsZWRhdGEuY3VycnBhZ2UgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVkYXRhLmN1cnJwYWdlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgbmVlZENoYW5nZUN1cnJwYWdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycnBhZ2UgPSBmaWxlZGF0YS5jdXJycGFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB1cGRhdGVGaWxlRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBwYWdlbnVtOiBoNVBhZ2VudW1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAobmVlZENoYW5nZUN1cnJwYWdlKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlRmlsZURhdGEuY3VycnBhZ2UgPSBjdXJycGFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZWVkQ2hhbmdlQ3VycnBhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zYXZlRmlsZWRhdGFBbmRMb2FkQ3VycnBhZ2VXaGl0ZWJvYXJkRGF0YShoNURvY3VtZW50SW5zdGFuY2UsIHVwZGF0ZUZpbGVEYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlV2hpdGVib2FyZEZpbGVkYXRhKGg1RG9jdW1lbnRJbnN0YW5jZSwgdXBkYXRlRmlsZURhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGg1RG9jdW1lbnRJbnN0YW5jZS5pc0xvYWRGaW5pc2hlZCAmJiAhaDVEb2N1bWVudEluc3RhbmNlLmlzUmVjZWl2ZVBhZ2VudW0pIHtcbiAgICAgICAgICAgICAgICBmaWxlZGF0YSA9IHRoaXMuX2dldFdoaXRlYm9hcmRGaWxlZGF0YShoNURvY3VtZW50SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9qdW1wVG9QYWdlKGg1RG9jdW1lbnRJbnN0YW5jZSwgZmlsZWRhdGEuY3VycnBhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRBY3Rpb25UaW1lcik7XG4gICAgICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50QWN0aW9uVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoNURvY3VtZW50SW5zdGFuY2UuaXNMb2FkRmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlZGF0YSA9IF90aGlzMy5fZ2V0V2hpdGVib2FyZEZpbGVkYXRhKGg1RG9jdW1lbnRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50QWN0aW9uSnNvbikubGVuZ3RoID4gMCAmJiBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEFjdGlvbkpzb25bZmlsZWRhdGEuY3VycnBhZ2VdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEFjdGlvbkpzb25bZmlsZWRhdGEuY3VycnBhZ2VdLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNSA9IGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50QWN0aW9uSnNvbltmaWxlZGF0YS5jdXJycGFnZV1bU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDU7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSAoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGg1RG9jdW1lbnRBY3Rpb24gPSBfc3RlcDUudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLl9wb3N0TWVzc2FnZShoNURvY3VtZW50SW5zdGFuY2UsIGg1RG9jdW1lbnRBY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I1ID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ICYmIF9pdGVyYXRvcjUucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I1LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaDVEb2N1bWVudEFjdGlvbkpzb25bZmlsZWRhdGEuY3VycnBhZ2VdLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRBY3Rpb25Kc29uW2ZpbGVkYXRhLmN1cnJwYWdlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmlzUmVjZWl2ZVBhZ2VudW0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfaGFuZGxlSWZyYW1lTWVzc2FnZV9vbkZpbGVNZXNzYWdlJyxcblxuXG4gICAgICAgIC8q5aSE55CGaWZyYW1l55qEb25GaWxlTWVzc2FnZea2iOaBryovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlSWZyYW1lTWVzc2FnZV9vbkZpbGVNZXNzYWdlKGluc3RhbmNlSWQsIGg1RG9jdW1lbnRJbnN0YW5jZSwgZGF0YSkge1xuICAgICAgICAgICAgZGF0YS5zb3VyY2VJbnN0YW5jZUlkID0gaW5zdGFuY2VJZDtcbiAgICAgICAgICAgIHRoaXMuX3NlbmRTaWduYWxsaW5nVG9TZXJ2ZXIoaDVEb2N1bWVudEluc3RhbmNlLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnID8gJ0g1RG9jdW1lbnRBY3Rpb24nIDogJ0V4dGVuZEg1RG9jdW1lbnRBY3Rpb24nLFxuICAgICAgICAgICAgICAgIGlkOiBpbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgPyAnSDVEb2N1bWVudEFjdGlvbicgOiAnSDVEb2N1bWVudEFjdGlvbl8nICsgaW5zdGFuY2VJZCxcbiAgICAgICAgICAgICAgICB0b0lEOiAnX19hbGxFeGNlcHRTZW5kZXInLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGg1RG9jdW1lbnRJbnN0YW5jZS5oYW5kbGVyICYmIGg1RG9jdW1lbnRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuaGFuZGxlci5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrKCdjbG9zZUFsbFNlbGVjdEJveCcsIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGg1RG9jdW1lbnRJbnN0YW5jZS5pZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrlj5HpgIHkv6Hku6QqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfc2VuZFNpZ25hbGxpbmdUb1NlcnZlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VuZFNpZ25hbGxpbmdUb1NlcnZlcihoNURvY3VtZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciBfcmVmNCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICAgICAgICAgICAgbmFtZSA9IF9yZWY0Lm5hbWUsXG4gICAgICAgICAgICAgICAgaWQgPSBfcmVmNC5pZCxcbiAgICAgICAgICAgICAgICBfcmVmNCR0b0lEID0gX3JlZjQudG9JRCxcbiAgICAgICAgICAgICAgICB0b0lEID0gX3JlZjQkdG9JRCA9PT0gdW5kZWZpbmVkID8gJ19fYWxsJyA6IF9yZWY0JHRvSUQsXG4gICAgICAgICAgICAgICAgZGF0YSA9IF9yZWY0LmRhdGEsXG4gICAgICAgICAgICAgICAgZG9fbm90X3NhdmUgPSBfcmVmNC5kb19ub3Rfc2F2ZSxcbiAgICAgICAgICAgICAgICBleHBpcmVzYWJzID0gX3JlZjQuZXhwaXJlc2FicyxcbiAgICAgICAgICAgICAgICBhc3NvY2lhdGVkTXNnSUQgPSBfcmVmNC5hc3NvY2lhdGVkTXNnSUQsXG4gICAgICAgICAgICAgICAgYXNzb2NpYXRlZFVzZXJJRCA9IF9yZWY0LmFzc29jaWF0ZWRVc2VySUQ7XG5cbiAgICAgICAgICAgIGlmIChoNURvY3VtZW50SW5zdGFuY2UuaGFuZGxlciAmJiBoNURvY3VtZW50SW5zdGFuY2UuaGFuZGxlci5zZW5kU2lnbmFsbGluZ1RvU2VydmVyKSB7XG4gICAgICAgICAgICAgICAgYXNzb2NpYXRlZE1zZ0lEID0gYXNzb2NpYXRlZE1zZ0lEIHx8IGg1RG9jdW1lbnRJbnN0YW5jZS5hc3NvY2lhdGVkTXNnSUQ7XG4gICAgICAgICAgICAgICAgYXNzb2NpYXRlZFVzZXJJRCA9IGFzc29jaWF0ZWRVc2VySUQgfHwgaDVEb2N1bWVudEluc3RhbmNlLmFzc29jaWF0ZWRVc2VySUQ7XG4gICAgICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIuc2VuZFNpZ25hbGxpbmdUb1NlcnZlcihuYW1lLCBpZCwgdG9JRCwgZGF0YSwgZG9fbm90X3NhdmUsIGV4cGlyZXNhYnMsIGFzc29jaWF0ZWRNc2dJRCwgYXNzb2NpYXRlZFVzZXJJRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuiOt+WPlndoaXRlYm9hcmQgZmlsZWRhdGEqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfZ2V0V2hpdGVib2FyZEZpbGVkYXRhJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRXaGl0ZWJvYXJkRmlsZWRhdGEoaDVEb2N1bWVudEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgZmlsZWRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIgJiYgaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2soJ2dldFdoaXRlYm9hcmRGaWxlZGF0YScsIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGg1RG9jdW1lbnRJbnN0YW5jZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKGZpbGVkYXRhUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlZGF0YSA9IGZpbGVkYXRhUmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmlsZWRhdGE7XG4gICAgICAgIH1cblxuICAgICAgICAvKuS/neWtmOeZveadv+aVsOaNruS4lOWKoOi9veW9k+WJjemhteeahOeZveadv+aVsOaNriovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19zYXZlRmlsZWRhdGFBbmRMb2FkQ3VycnBhZ2VXaGl0ZWJvYXJkRGF0YScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2F2ZUZpbGVkYXRhQW5kTG9hZEN1cnJwYWdlV2hpdGVib2FyZERhdGEoaDVEb2N1bWVudEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgdXBkYXRlRmlsZWRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICAgICAgICBpZiAoaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIgJiYgaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2soJ3NhdmVGaWxlZGF0YUFuZExvYWRDdXJycGFnZVdoaXRlYm9hcmREYXRhJywge1xuICAgICAgICAgICAgICAgICAgICBpZDogaDVEb2N1bWVudEluc3RhbmNlLmlkLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVGaWxlRGF0YTogdXBkYXRlRmlsZWRhdGFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5pu05pawd2hpdGVib2FyZCBmaWxlZGF0YSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ191cGRhdGVXaGl0ZWJvYXJkRmlsZWRhdGEnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZVdoaXRlYm9hcmRGaWxlZGF0YShoNURvY3VtZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciB1cGRhdGVGaWxlRGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICAgICAgICAgIGlmIChoNURvY3VtZW50SW5zdGFuY2UuaGFuZGxlciAmJiBoNURvY3VtZW50SW5zdGFuY2UuaGFuZGxlci5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaygndXBkYXRlV2hpdGVib2FyZEZpbGVkYXRhJywge1xuICAgICAgICAgICAgICAgICAgICBpZDogaDVEb2N1bWVudEluc3RhbmNlLmlkLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVGaWxlRGF0YTogdXBkYXRlRmlsZURhdGFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q55uR5rWLaWZyYW1l6L+b6KGM6YeN5paw5Yqg6L29Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2lmcmFtZVJlbG9hZE1vbml0b3InLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2lmcmFtZVJlbG9hZE1vbml0b3IoaDVEb2N1bWVudEluc3RhbmNlLCBzb3VyY2UpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoaDVEb2N1bWVudEluc3RhbmNlLmZvcmNlUmVsb2FkTnVtYmVyVGltZXIpO1xuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmZvcmNlUmVsb2FkTnVtYmVyVGltZXIgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGg1RG9jdW1lbnRJbnN0YW5jZS5pZnJhbWVTcmMgJiYgIWg1RG9jdW1lbnRJbnN0YW5jZS5pc0xvYWRGaW5pc2hlZCAmJiBoNURvY3VtZW50SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXIgPCBoNURvY3VtZW50SW5zdGFuY2UubWF4Rm9yY2VSZWxvYWROdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBoNURvY3VtZW50SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXJUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaDVEb2N1bWVudEluc3RhbmNlLmlmcmFtZVNyYyAmJiAhaDVEb2N1bWVudEluc3RhbmNlLmlzTG9hZEZpbmlzaGVkICYmIGg1RG9jdW1lbnRJbnN0YW5jZS5mb3JjZVJlbG9hZE51bWJlciA8IGg1RG9jdW1lbnRJbnN0YW5jZS5tYXhGb3JjZVJlbG9hZE51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmZvcmNlUmVsb2FkTnVtYmVyKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczQuX2lzU2hvd1JlbG9hZEZpbGVTaG93UmVsb2FkTnVtYmVyKGg1RG9jdW1lbnRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIgJiYgaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2soJ3JlbG9hZEg1RG9jdW1lbnRJZnJhbWVTcmMnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBoNURvY3VtZW50SW5zdGFuY2UuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmcmFtZVNyYzogaDVEb2N1bWVudEluc3RhbmNlLmlmcmFtZVNyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVpZDogaDVEb2N1bWVudEluc3RhbmNlLmZpbGVpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VSZWxvYWROdW1iZXI6IGg1RG9jdW1lbnRJbnN0YW5jZS5mb3JjZVJlbG9hZE51bWJlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgaDVEb2N1bWVudEluc3RhbmNlLmZvcmNlUmVsb2FkSW50ZXJ2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrlj5HpgIFTaG93UGFnZeS/oeS7pCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19zZW5kU2lnbmFsbGluZ19TaG93UGFnZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VuZFNpZ25hbGxpbmdfU2hvd1BhZ2UoaDVEb2N1bWVudEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgdXBkYXRlUHVibXNnRGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICAgICAgICAgIGlmIChoNURvY3VtZW50SW5zdGFuY2UuaGFuZGxlciAmJiBoNURvY3VtZW50SW5zdGFuY2UuaGFuZGxlci5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaygnc2VuZFNpZ25hbGxpbmdfU2hvd1BhZ2UnLCB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBoNURvY3VtZW50SW5zdGFuY2UuaWQsXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVB1Ym1zZ0RhdGE6IHVwZGF0ZVB1Ym1zZ0RhdGFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2lzU2hvd1JlbG9hZEZpbGVTaG93UmVsb2FkTnVtYmVyJyxcblxuXG4gICAgICAgIC8q5piv5ZCm5pi+56S65paH5Lu26YeN5paw5Yqg6L295o+Q56S6Ki9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1Nob3dSZWxvYWRGaWxlU2hvd1JlbG9hZE51bWJlcihoNURvY3VtZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGg1RG9jdW1lbnRJbnN0YW5jZS5oNURvY3VtZW50UmVsb2FkTnVtYmVyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gaDVEb2N1bWVudEluc3RhbmNlLmlzU2hvd1JlbG9hZEZpbGVUaXAgJiYgaDVEb2N1bWVudEluc3RhbmNlLmZvcmNlUmVsb2FkTnVtYmVyID8gJ2lubGluZS10YWJsZScgOiAnbm9uZSc7XG4gICAgICAgICAgICB2YXIgZm9yY2VSZWxvYWROdW1iZXJUaXAgPSAn5b2T5YmN572R57uc5LiN56iz5a6a77yM5q2j5Zyo5bCd6K+V6YeN5paw5omT5byA6K++5Lu24oCm4oCm56ysJyArIGg1RG9jdW1lbnRJbnN0YW5jZS5mb3JjZVJlbG9hZE51bWJlciArICfmrKEnO1xuICAgICAgICAgICAgc3dpdGNoIChoNURvY3VtZW50SW5zdGFuY2UubGFuZ3VhZ2VUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndHcnOlxuICAgICAgICAgICAgICAgICAgICBmb3JjZVJlbG9hZE51bWJlclRpcCA9ICfnlbbliY3ntrLntaHkuI3nqanlrprvvIzmraPlnKjlmJfoqabph43mlrDmiZPplovoqrLku7bigKbigKbnrKwnICsgaDVEb2N1bWVudEluc3RhbmNlLmZvcmNlUmVsb2FkTnVtYmVyICsgJ+asoSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2VuJzpcbiAgICAgICAgICAgICAgICAgICAgZm9yY2VSZWxvYWROdW1iZXJUaXAgPSAnVGhlIG5ldHdvcmsgaXMgdW5zdGFibGUgLCBUcnlpbmcgdG8gcmVvcGVuIHRoZSBjb3Vyc2V3YXJlIC4uLicgKyBoNURvY3VtZW50SW5zdGFuY2UuZm9yY2VSZWxvYWROdW1iZXIgKyAnJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZW4nOlxuICAgICAgICAgICAgICAgICAgICBmb3JjZVJlbG9hZE51bWJlclRpcCA9ICfjg43jg4Pjg4jjgYzkuI3lronlrprjgafjgZnjgIHmlZnmnZDjgpLplovjgY3jgarjgYrjgZfjgabjgYTjgb7jgZknICsgaDVEb2N1bWVudEluc3RhbmNlLmZvcmNlUmVsb2FkTnVtYmVyICsgJ+asoSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaDVEb2N1bWVudEluc3RhbmNlLmg1RG9jdW1lbnRSZWxvYWROdW1iZXJFbGVtZW50LmlubmVySFRNTCA9IGZvcmNlUmVsb2FkTnVtYmVyVGlwIHx8ICcnO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEg1RG9jdW1lbnRJbnRlcm1lZGlhdGVMYXllcjtcbn0oKTtcblxuO1xudmFyIEg1RG9jdW1lbnRJbnRlcm1lZGlhdGVMYXllckluc3RhbmNlID0gbmV3IEg1RG9jdW1lbnRJbnRlcm1lZGlhdGVMYXllcigpO1xuZXhwb3J0cy5kZWZhdWx0ID0gSDVEb2N1bWVudEludGVybWVkaWF0ZUxheWVySW5zdGFuY2U7IiwiLyoqXHJcbiAqIOeZveadv+eVjOmdouS4jueZveadv+W6leWxguayn+mAmueahOS4remXtOWxguWkhOeQhuexu1xyXG4gKiBAY2xhc3MgV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyXHJcbiAqIEBkZXNjcmlwdGlvbiAg5o+Q5L6b55m95p2/55WM6Z2i5LiO55m95p2/5bqV5bGC5rKf6YCa55qE5Lit6Ze05bGC5aSE55CG57G7XHJcbiAqIEBhdXRob3Ig6YKx5bm/55SfXHJcbiAqIEBkYXRlIDIwMTgtMDQtMThcclxuICovXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfcGRmb2JqZWN0ID0gcmVxdWlyZSgncGRmb2JqZWN0Jyk7XG5cbnZhciBfcGRmb2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BkZm9iamVjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbndpbmRvdy5QREZPYmplY3QgPSBfcGRmb2JqZWN0Mi5kZWZhdWx0O1xuaWYgKCEod2luZG93LkwgJiYgd2luZG93LkwuTG9nZ2VyICYmIHdpbmRvdy5MLkxvZ2dlci5kZWJ1ZyAmJiB3aW5kb3cuTC5Mb2dnZXIudHJhY2UgJiYgd2luZG93LkwuTG9nZ2VyLmluZm8gJiYgd2luZG93LkwuTG9nZ2VyLndhcm5pbmcgJiYgd2luZG93LkwuTG9nZ2VyLmVycm9yKSkge1xuICAgIHdpbmRvdy5MID0gd2luZG93LkwgfHwge307XG4gICAgd2luZG93LkwuTG9nZ2VyID0gd2luZG93LkwuTG9nZ2VyIHx8IHt9O1xuICAgIHdpbmRvdy5MLkxvZ2dlci5kZWJ1ZyA9IHdpbmRvdy5MLkxvZ2dlci5kZWJ1ZyB8fCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZGVidWcuYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgfTtcbiAgICB3aW5kb3cuTC5Mb2dnZXIudHJhY2UgPSB3aW5kb3cuTC5Mb2dnZXIudHJhY2UgfHwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLnRyYWNlLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xuICAgIH07XG4gICAgd2luZG93LkwuTG9nZ2VyLmluZm8gPSB3aW5kb3cuTC5Mb2dnZXIuaW5mbyB8fCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuaW5mby5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICB9O1xuICAgIHdpbmRvdy5MLkxvZ2dlci53YXJuaW5nID0gd2luZG93LkwuTG9nZ2VyLndhcm5pbmcgfHwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgfTtcbiAgICB3aW5kb3cuTC5Mb2dnZXIuZXJyb3IgPSB3aW5kb3cuTC5Mb2dnZXIuZXJyb3IgfHwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xuICAgIH07XG59O1xuXG5pZiAoIShPYmplY3QgJiYgT2JqZWN0LnNoYWxsb3dBc3NpZ24pIHx8ICEoT2JqZWN0ICYmIE9iamVjdC5jdXN0b21Bc3NpZ24pKSB7XG4gICAgLyrmtYXlkIjlubblr7nosaEqL1xuICAgIHZhciBzaGFsbG93QXNzaWduID0gZnVuY3Rpb24gc2hhbGxvd0Fzc2lnbihzb3VyY2UpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduLmFwcGx5KE9iamVjdC5hc3NpZ24sIGFyZ3VtZW50cyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdmFyIGNvcHlTb3VyY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcHlTb3VyY2UgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNvdXJjZSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcHlTb3VyY2UgPSBzb3VyY2Uuc2xpY2UoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvcHlTb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBhc3NpZ25PYmogPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGFzc2lnbk9iaiAmJiAodHlwZW9mIGFzc2lnbk9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYXNzaWduT2JqKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhc3NpZ25PYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlTb3VyY2Vba2V5XSA9IGFzc2lnbk9ialtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0eXBlb2YgY29weVNvdXJjZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29weVNvdXJjZSkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9rZXkgaW4gY29weVNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VbX2tleV0gPSBjb3B5U291cmNlW19rZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmICghKE9iamVjdCAmJiBPYmplY3Quc2hhbGxvd0Fzc2lnbikpIHtcbiAgICAgICAgT2JqZWN0LnNoYWxsb3dBc3NpZ24gPSBzaGFsbG93QXNzaWduO1xuICAgIH1cbiAgICBpZiAoIShPYmplY3QgJiYgT2JqZWN0LmN1c3RvbUFzc2lnbikpIHtcbiAgICAgICAgT2JqZWN0LmN1c3RvbUFzc2lnbiA9IHNoYWxsb3dBc3NpZ247XG4gICAgfVxufVxuXG5pZiAoIShPYmplY3QgJiYgT2JqZWN0LmRlZXBBc3NpZ24pKSB7XG4gICAgLyrmt7HlkIjlubblr7nosaEqL1xuICAgIE9iamVjdC5kZWVwQXNzaWduID0gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICB2YXIgY29weVNvdXJjZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCh0eXBlb2Ygc291cmNlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzb3VyY2UpKSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb3B5U291cmNlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzb3VyY2UpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb3B5U291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCh0eXBlb2Ygc291cmNlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzb3VyY2UpKSA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgICAgICBjb3B5U291cmNlID0gc291cmNlLnNsaWNlKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29weVNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGFzc2lnbk9iaiA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGlmIChhc3NpZ25PYmogJiYgKHR5cGVvZiBhc3NpZ25PYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGFzc2lnbk9iaikpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhc3NpZ25PYmopIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvcHlTb3VyY2Vba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3R5cGVvZihhc3NpZ25PYmpba2V5XSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXNzaWduT2JqW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlTb3VyY2Vba2V5XSA9IGFzc2lnbk9ialtrZXldLnNsaWNlKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlTb3VyY2Vba2V5XSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYXNzaWduT2JqW2tleV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlTb3VyY2Vba2V5XSA9IGFzc2lnbk9ialtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90eXBlb2YoYXNzaWduT2JqW2tleV0pID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlTb3VyY2Vba2V5XSA9IE9iamVjdC5kZWVwQXNzaWduKEFycmF5LmlzQXJyYXkoYXNzaWduT2JqW2tleV0pID8gW10gOiB7fSwgX3R5cGVvZihjb3B5U291cmNlW2tleV0pID09PSAnb2JqZWN0JyA/IGNvcHlTb3VyY2Vba2V5XSA6IEFycmF5LmlzQXJyYXkoYXNzaWduT2JqW2tleV0pID8gW10gOiB7fSwgYXNzaWduT2JqW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5U291cmNlW2tleV0gPSBhc3NpZ25PYmpba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKHR5cGVvZiBjb3B5U291cmNlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjb3B5U291cmNlKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfa2V5MiBpbiBjb3B5U291cmNlKSB7XG4gICAgICAgICAgICAgICAgc291cmNlW19rZXkyXSA9IGNvcHlTb3VyY2VbX2tleTJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfTtcbn1cblxuLypSR0LpopzoibLovazmjaLkuLoxNui/m+WItiovXG5TdHJpbmcucHJvdG90eXBlLmNvbG9ySGV4ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB2YXIgcmVnID0gL14jKFswLTlhLWZBLWZdezN9fFswLTlhLWZBLWZdezZ9KSQvO1xuICAgIGlmICgvXihyZ2J8UkdCKS8udGVzdCh0aGF0KSkge1xuICAgICAgICB2YXIgYUNvbG9yID0gdGhhdC5yZXBsYWNlKC8oPzpcXCh8XFwpfHJnYnxSR0IpKi9nLCBcIlwiKS5zcGxpdChcIixcIik7XG4gICAgICAgIHZhciBzdHJIZXggPSBcIiNcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhQ29sb3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBoZXggPSBOdW1iZXIoYUNvbG9yW2ldKS50b1N0cmluZygxNik7XG4gICAgICAgICAgICBpZiAoaGV4ID09PSBcIjBcIikge1xuICAgICAgICAgICAgICAgIGhleCArPSBoZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJIZXggKz0gaGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHJIZXgubGVuZ3RoICE9PSA3KSB7XG4gICAgICAgICAgICBzdHJIZXggPSB0aGF0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJIZXg7XG4gICAgfSBlbHNlIGlmIChyZWcudGVzdCh0aGF0KSkge1xuICAgICAgICB2YXIgYU51bSA9IHRoYXQucmVwbGFjZSgvIy8sIFwiXCIpLnNwbGl0KFwiXCIpO1xuICAgICAgICBpZiAoYU51bS5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgICB9IGVsc2UgaWYgKGFOdW0ubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICB2YXIgbnVtSGV4ID0gXCIjXCI7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYU51bS5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICAgICAgICAgICAgICBudW1IZXggKz0gYU51bVtfaV0gKyBhTnVtW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1IZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICB9XG59O1xuXG4vKjE26L+b5Yi26aKc6Imy6L2s5Li6UkdC5qC85byPKi9cblN0cmluZy5wcm90b3R5cGUuY29sb3JSZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNDb2xvciA9IHRoaXMudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgcmVnID0gL14jKFswLTlhLWZBLWZdezN9fFswLTlhLWZBLWZdezZ9KSQvO1xuICAgIGlmIChzQ29sb3IgJiYgcmVnLnRlc3Qoc0NvbG9yKSkge1xuICAgICAgICBpZiAoc0NvbG9yLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgdmFyIHNDb2xvck5ldyA9IFwiI1wiO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCA0OyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBzQ29sb3JOZXcgKz0gc0NvbG9yLnNsaWNlKGksIGkgKyAxKS5jb25jYXQoc0NvbG9yLnNsaWNlKGksIGkgKyAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzQ29sb3IgPSBzQ29sb3JOZXc7XG4gICAgICAgIH1cbiAgICAgICAgLy/lpITnkIblha3kvY3nmoTpopzoibLlgLxcbiAgICAgICAgdmFyIHNDb2xvckNoYW5nZSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaTIgPSAxOyBfaTIgPCA3OyBfaTIgKz0gMikge1xuICAgICAgICAgICAgc0NvbG9yQ2hhbmdlLnB1c2gocGFyc2VJbnQoXCIweFwiICsgc0NvbG9yLnNsaWNlKF9pMiwgX2kyICsgMikpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJSR0IoXCIgKyBzQ29sb3JDaGFuZ2Uuam9pbihcIixcIikgKyBcIilcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc0NvbG9yO1xuICAgIH1cbn07XG5cbi8q55m95p2/5YaF6YOo5L2/55So55qE5bel5YW3Ki9cbnZhciB3aGl0ZWJvYXJkSW5uZXJVdGlscyA9IHtcbiAgICAvKirnu5Hlrprkuovku7ZcclxuICAgICBAbWV0aG9kIGFkZEV2ZW50XHJcbiAgICAgQHBhcmFtICAge2VsZW1lbnR9IGVsZW1lbnQg5re75Yqg5LqL5Lu25YWD57SgXHJcbiAgICAgICAgICAgICB7c3RyaW5nfSBlVHlwZSDkuovku7bnsbvlnotcclxuICAgICAgICAgICAgIHtGdW5jdGlvbn0gaGFuZGxlIOS6i+S7tuWkhOeQhuWZqFxyXG4gICAgICAgICAgICAge0JvbGxlYW59IGJvbCBmYWxzZSDooajnpLrlnKjkuovku7bnrKzkuInpmLbmrrXvvIjlhpLms6HvvInop6blj5HvvIx0cnVl6KGo56S65Zyo5LqL5Lu256ys5LiA6Zi25q6177yI5o2V6I6377yJ6Kem5Y+R44CCXHJcbiAgICAgKi9cbiAgICBhZGRFdmVudDogZnVuY3Rpb24gYWRkRXZlbnQoZWxlbWVudCwgZVR5cGUsIGhhbmRsZSwgYm9sKSB7XG4gICAgICAgIGJvbCA9IGJvbCAhPSB1bmRlZmluZWQgJiYgYm9sICE9IG51bGwgPyBib2wgOiBmYWxzZTtcbiAgICAgICAgaWYgKGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgLy/lpoLmnpzmlK/mjIFhZGRFdmVudExpc3RlbmVyXG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZVR5cGUsIGhhbmRsZSwgYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmF0dGFjaEV2ZW50KSB7XG4gICAgICAgICAgICAvL+WmguaenOaUr+aMgWF0dGFjaEV2ZW50XG4gICAgICAgICAgICBlbGVtZW50LmF0dGFjaEV2ZW50KFwib25cIiArIGVUeXBlLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy/lkKbliJnkvb/nlKjlhbzlrrnnmoRvbmNsaWNr57uR5a6aXG4gICAgICAgICAgICBlbGVtZW50W1wib25cIiArIGVUeXBlXSA9IGhhbmRsZTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoq5LqL5Lu26Kej57uRXHJcbiAgICAgQG1ldGhvZCByZW1vdmVFdmVudFxyXG4gICAgIEBwYXJhbSAgIHtlbGVtZW50fSBlbGVtZW50IOWIoOmZpOS6i+S7tuWFg+e0oFxyXG4gICAgICAgICAgICAge3N0cmluZ30gZVR5cGUg5LqL5Lu257G75Z6LXHJcbiAgICAgICAgICAgICB7RnVuY3Rpb259IGhhbmRsZSDkuovku7blpITnkIblmahcclxuICAgICAgICAgICAgIHtCb2xsZWFufSBib2wgZmFsc2Ug6KGo56S65Zyo5LqL5Lu256ys5LiJ6Zi25q6177yI5YaS5rOh77yJ6Kem5Y+R77yMdHJ1ZeihqOekuuWcqOS6i+S7tuesrOS4gOmYtuaute+8iOaNleiOt++8ieinpuWPkeOAglxyXG4gICAgICovXG4gICAgcmVtb3ZlRXZlbnQ6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50KGVsZW1lbnQsIGVUeXBlLCBoYW5kbGUsIGJvbCkge1xuICAgICAgICBpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZVR5cGUsIGhhbmRsZSwgYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmF0dGFjaEV2ZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LmRldGFjaEV2ZW50KFwib25cIiArIGVUeXBlLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudFtcIm9uXCIgKyBlVHlwZV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBnZXRPZmZzZXQ6IGZ1bmN0aW9uIGdldE9mZnNldChlbGVtKSB7XG4gICAgICAgIHZhciBvYmogPSB7XG4gICAgICAgICAgICBsZWZ0OiBlbGVtLm9mZnNldExlZnQsXG4gICAgICAgICAgICB0b3A6IGVsZW0ub2Zmc2V0VG9wXG4gICAgICAgIH07XG4gICAgICAgIHdoaWxlIChlbGVtICE9IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLm9mZnNldFBhcmVudDtcbiAgICAgICAgICAgIG9iai5sZWZ0ICs9IGVsZW0ub2Zmc2V0TGVmdDtcbiAgICAgICAgICAgIG9iai50b3AgKz0gZWxlbS5vZmZzZXRUb3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG59O1xuXG4vKueZveadv+exuyovXG5cbnZhciBXaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyKTtcblxuICAgICAgICB0aGlzLndoaXRlYm9hcmRUb29sc0luZm8gPSB7IC8v55m95p2/5b2T5YmN5bel5YW355qE54q25oCBXG4gICAgICAgICAgICBwcmltYXJ5Q29sb3I6IFwiIzAwMDAwMFwiLCAvL+eUu+eslOeahOminOiJslxuICAgICAgICAgICAgc2Vjb25kYXJ5Q29sb3I6IFwiI2ZmZmZmZlwiLCAvL+Whq+WFheeahOminOiJslxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNmZmZmZmZcIiwgLy/og4zmma/popzoibJcbiAgICAgICAgICAgIHBlbmNpbFdpZHRoOiA1LCAvL+eslOeahOWkp+Wwj1xuICAgICAgICAgICAgc2hhcGVXaWR0aDogNSwgLy/lm77lvaLnlLvnrJTlpKflsI9cbiAgICAgICAgICAgIGVyYXNlcldpZHRoOiAxNSwgLy/mqaHnmq7lpKflsI9cbiAgICAgICAgICAgIGZvbnRTaXplOiAxOCwgLy/lrZfkvZPlpKflsI9cbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwi5b6u6L2v6ZuF6buRXCIsXG4gICAgICAgICAgICBmb250U3R5bGU6IFwibm9ybWFsXCIsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiBcIm5vcm1hbFwiXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGVmYXVsdFByb2R1Y3Rpb25PcHRpb25zID0geyAvL+m7mOiupOeahOeZveadv+eUn+S6p+mFjee9rumAiemhuVxuICAgICAgICAgICAgd2hpdGVib2FyZENsZWFyOiB0cnVlLCAvL+m7mOiupOa4hemZpOeZveadv1xuICAgICAgICAgICAgZGVmYXVsdFdoaXRlYm9hcmRTY2FsZTogMTYgLyA5LCAvL+m7mOiupOeahOeZveadv+avlOS+i1xuICAgICAgICAgICAgd2hpdGVib2FyZE1hZ25pZmljYXRpb246IDEsIC8v6buY6K6k55qE55m95p2/5pS+5aSn5q+U5L6LXG4gICAgICAgICAgICBjb250YWluZXJXaWR0aEFuZEhlaWdodDogeyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0sIC8v55m95p2/5om/6L295a655Zmo55qE5a695ZKM6auYXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IHVuZGVmaW5lZCwgLy/nmb3mnb/pu5jorqTnmoTmnIDlsI/pq5jluqZcbiAgICAgICAgICAgIHJvdGF0ZURlZzogMCwgLy/pu5jorqTnmoTml4vovazop5LluqZcbiAgICAgICAgICAgIGJhc2VXaGl0ZWJvYXJkV2lkdGg6IDk2MCwgLy/nmb3mnb/nmoTlrr3pq5jmr5Tkvovln7rmlbBcbiAgICAgICAgICAgIHByb3ByaWV0YXJ5VG9vbHM6IGZhbHNlLCAvL+eZveadv+aYr+WQpuaLpeacieS4k+WxnuW3peWFt1xuICAgICAgICAgICAgZGVhd1Blcm1pc3Npb246IHRydWUsIC8v55m95p2/5Y+v55S75p2D6ZmQXG4gICAgICAgICAgICB0ZW1wRGVhd1Blcm1pc3Npb246IHRydWUsIC8v55m95p2/5Li05pe25Y+v55S75p2D6ZmQ77yI5b+F6aG75Zyo5Y+v55S75p2D6ZmQ55qE5Z+656GA5LiK77yJXG4gICAgICAgICAgICBzYXZlUmVkb1N0YWNrOiB0cnVlLCAvL3NhdmVSZWRvU3RhY2vmnYPpmZBcbiAgICAgICAgICAgIHNhdmVVbmRvU3RhY2s6IHRydWUsIC8vc2F2ZVVuZG9TdGFja+adg+mZkFxuICAgICAgICAgICAgcmVtaW5kQ29udGVudFRpbWU6IDMwMDAsIC8v5o+Q56S65YaF5a655pi+56S65pe26Ze0XG4gICAgICAgICAgICBzaG93U2hhcGVBdXRob3I6IGZhbHNlLCAvL+aYr+WQpuaYvuekuui/nOeoi+aPkOekuuWGheWuuVxuICAgICAgICAgICAgc2hvd015c2VsZlJlbWluZENvbnRlbnQ6IGZhbHNlLCAvL+aYr+WQpuaYvuekuuiHquW3seeahOaPkOekuuWGheWuuVxuICAgICAgICAgICAgaXNPbmx5VW5kb1JlZG9DbGVhck15c2VsZlNoYXBlOiBmYWxzZSwgLy/mmK/lkKblj6/ku6VyZWRvICwgdW5kbyAsIGNsZWFyXG4gICAgICAgICAgICBzeW5jaHJvbml6YXRpb25XaGl0ZWJvYXJkOiB0cnVlIC8v5piv5ZCm5ZCM5q2l55m95p2/XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMud2hpdGVib2FyZEluc3RhbmNlSURQcmVmaXggPSBcIndoaXRlYm9hcmRfXCI7XG4gICAgICAgIHRoaXMud2hpdGVib2FyZEluc3RhbmNlRGVmYXVsdElEID0gXCJ3aGl0ZWJvYXJkX1wiICsgJ2RlZmF1bHQnO1xuICAgICAgICB0aGlzLndoaXRlYm9hcmRJbnN0YW5jZVN0b3JlID0ge307IC8v55m95p2/5a6e5L6L5a2Y5YKo5Lit5b+DXG4gICAgICAgIHRoaXMud2hpdGVib2FyZFRodW1ibmFpbFN0b3JlID0ge307IC8v55m95p2/57yp55Wl5Zu+5a2Y5YKo5Lit5b+DXG4gICAgICAgIHRoaXMudW5pcXVlV2hpdGVib2FyZCA9IGZhbHNlOyAvL+WUr+S4gOeahOeZveadv1xuICAgICAgICB0aGlzLm1pbk1hZ25pZmljYXRpb24gPSAxOyAvL+acgOWwj+eahOeZveadv+aUvuWkp+WAjeaVsFxuICAgICAgICB0aGlzLm1heE1hZ25pZmljYXRpb24gPSAzOyAvL+acgOWkp+eahOeZveadv+aUvuWkp+WAjeaVsFxuICAgICAgICB0aGlzLmhpc3RvcnlQZW5Ub29sID0gdW5kZWZpbmVkOyAvL+S9v+eUqOi/h+eahOeUu+eslOW3peWFt1xuICAgICAgICB0aGlzLmhpc3RvcnlTaGFwZVRvb2wgPSB1bmRlZmluZWQ7IC8v5L2/55So6L+H55qE5Zu+5b2i5bel5YW3XG4gICAgICAgIHRoaXMudXNlV2hpdGVib2FyZFRvb2wgPSB7XG4gICAgICAgICAgICB0b29sX3BlbmNpbDogZmFsc2UsIC8v55S756yUXG4gICAgICAgICAgICB0b29sX2hpZ2hsaWdodGVyOiBmYWxzZSwgLy/ojaflhYnnrJRcbiAgICAgICAgICAgIHRvb2xfbGluZTogZmFsc2UsIC8v55u057q/XG4gICAgICAgICAgICB0b29sX2Fycm93OiBmYWxzZSwgLy/nrq3lpLRcbiAgICAgICAgICAgIHRvb2xfZGFzaGVkOiBmYWxzZSwgLy/omZrnur9cbiAgICAgICAgICAgIHRvb2xfZXJhc2VyOiBmYWxzZSwgLy/mqaHnmq5cbiAgICAgICAgICAgIHRvb2xfdGV4dDogZmFsc2UsIC8v5paH5a2XXG4gICAgICAgICAgICB0b29sX3JlY3RhbmdsZTogZmFsc2UsIC8v5a6e5b+D55+p5b2iXG4gICAgICAgICAgICB0b29sX3JlY3RhbmdsZV9lbXB0eTogZmFsc2UsIC8v56m65b+D55+p5b2iXG4gICAgICAgICAgICB0b29sX2VsbGlwc2U6IGZhbHNlLCAvL+WunuW/g+akreWchlxuICAgICAgICAgICAgdG9vbF9lbGxpcHNlX2VtcHR5OiBmYWxzZSwgLy/nqbrlv4PmpK3lnIZcbiAgICAgICAgICAgIHRvb2xfcG9seWdvbjogZmFsc2UsIC8v5aSa6L655b2iXG4gICAgICAgICAgICB0b29sX2V5ZWRyb3BwZXI6IGZhbHNlLCAvL+WQuOeuoVxuICAgICAgICAgICAgdG9vbF9zZWxlY3RTaGFwZTogZmFsc2UsIC8v6YCJ5Lit5ouW5YqoXG4gICAgICAgICAgICB0b29sX21vdXNlOiBmYWxzZSwgLy/pvKDmoIdcbiAgICAgICAgICAgIHRvb2xfbGFzZXI6IGZhbHNlLCAvL+a/gOWFieeslFxuICAgICAgICAgICAgYWN0aW9uX3VuZG86IGZhbHNlLCAvL+aSpOmUgOWKqOS9nFxuICAgICAgICAgICAgYWN0aW9uX3JlZG86IGZhbHNlLCAvL+aBouWkjeWKqOS9nFxuICAgICAgICAgICAgYWN0aW9uX2NsZWFyOiBmYWxzZSwgLy/muIXpmaTliqjkvZxcbiAgICAgICAgICAgIHpvb21fYmlnOiBmYWxzZSwgLy/mlL7lpKdcbiAgICAgICAgICAgIHpvb21fc21hbGw6IGZhbHNlLCAvL+e8qeWwj1xuICAgICAgICAgICAgem9vbV9kZWZhdWx0OiBmYWxzZSAvL+m7mOiupFxuICAgICAgICB9OyAvL+S9v+eUqOeahOeZveadv+W3peWFt1xuICAgICAgICB0aGlzLnNwZWNpYWxXaGl0ZWJvYXJkSW5zdGFuY2VJRFByZWZpeCA9ICdzcGVjaWFsV2hpdGVib2FyZEluc3RhbmNlSURQcmVmaXhfJztcbiAgICAgICAgdGhpcy5hd2FpdFNhdmVUb1doaXRlYm9hcmRJbnN0YW5jZVNpZ25hbGxpbmdBcnJheSA9IFtdOyAvL+etieW+heS/neWtmOWIsOeZveadv+WunuS+i+eahOS/oeS7pOaVsOaNrumbhuWQiFxuICAgICAgICB0aGlzLmNvbW1vbkFjdGl2ZVRvb2wgPSAndG9vbF9wZW5jaWwnOyAvL+WFrOWFseeahOato+WcqOS9v+eUqOeahOeZveadv+W3peWFt1xuICAgICAgICB0aGlzLmJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0xpc3QgPSB7fTsgLy/ln7rmnKzmqKHmnb/kv6Hku6Tpm4blkIhcbiAgICAgICAgLy90aGlzLmJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0NoaWxkcmVuU3RhY2tTdG9yYWdlID0ge30gOyAvL+WfuuacrOaooeadv+eUu+eslOaVsOaNrumbhuWQiC3lranlrZDpm4blkIjvvIjnlKjmiLfkv53lrZjkvb/nlKjmqKHmnb/nmoTnmb3mnb/mlbDmja7moIjmlbDmja4s5LiN5YyF5ZCr5qih5p2/5pWw5o2u77yJXG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFdoaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllciwgW3tcbiAgICAgICAga2V5OiAnZ2V0U3BlY2lhbFdoaXRlYm9hcmRJbnN0YW5jZUlEUHJlZml4JyxcblxuXG4gICAgICAgIC8q6I635Y+W54m55q6K55m95p2/aWTliY3nvIAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3BlY2lhbFdoaXRlYm9hcmRJbnN0YW5jZUlEUHJlZml4KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3BlY2lhbFdoaXRlYm9hcmRJbnN0YW5jZUlEUHJlZml4O1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZXRVbmlxdWVXaGl0ZWJvYXJkJyxcblxuXG4gICAgICAgIC8q6K6+572u55m95p2/5piv5ZCm5piv5ZSv5LiA55qE55m95p2/Ki9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFVuaXF1ZVdoaXRlYm9hcmQoaXNVbmlxdWVXaGl0ZWJvYXJkKSB7XG4gICAgICAgICAgICB0aGlzLnVuaXF1ZVdoaXRlYm9hcmQgPSBpc1VuaXF1ZVdoaXRlYm9hcmQ7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2FjdGl2ZUNvbW1vbldoaXRlYm9hcmRUb29sJyxcblxuXG4gICAgICAgIC8q5r+A5rS75YWs5YWx55qE55m95p2/5bel5YW3Ki9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFjdGl2ZUNvbW1vbldoaXRlYm9hcmRUb29sKHRvb2xLZXkpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIGlmICgvXnRvb2xfLy50ZXN0KHRvb2xLZXkpKSB7XG4gICAgICAgICAgICAgICAgLy/nmb3mnb/lupXlsYLlt6XlhbdcbiAgICAgICAgICAgICAgICB0aGF0LmNvbW1vbkFjdGl2ZVRvb2wgPSB0b29sS2V5OyAvL+W9k+WJjeS9v+eUqOeahOWFrOWFseeahOa/gOa0u+W3peWFt1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gT2JqZWN0LnZhbHVlcyh0aGF0LndoaXRlYm9hcmRJbnN0YW5jZVN0b3JlKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UucHJvcHJpZXRhcnlUb29scykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy/nmb3mnb/mi6XmnInkuJPlsZ7lt6XlhbfliJnkuI3lj5flhazlhbHlt6XlhbfnmoTnrqHnkIZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IHdoaXRlYm9hcmRJbnN0YW5jZS5pZDtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5hY3RpdmVXaGl0ZWJvYXJkVG9vbCh0b29sS2V5LCBpZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndXBkYXRlQ29tbW9uV2hpdGVib2FyZFRvb2xzSW5mbycsXG5cblxuICAgICAgICAvKuabtOaWsHdoaXRlYm9hcmRUb29sc0luZm8qL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlQ29tbW9uV2hpdGVib2FyZFRvb2xzSW5mbyh3aGl0ZWJvYXJkVG9vbHNJbmZvKSB7XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZFRvb2xzSW5mbyAmJiAodHlwZW9mIHdoaXRlYm9hcmRUb29sc0luZm8gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHdoaXRlYm9hcmRUb29sc0luZm8pKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVlcEFzc2lnbih0aGlzLndoaXRlYm9hcmRUb29sc0luZm8sIHdoaXRlYm9hcmRUb29sc0luZm8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRXaGl0ZWJvYXJkRGVmYXVsdEZpbGVkYXRhJyxcblxuXG4gICAgICAgIC8q6I635Y+W55m95p2/55qE6buY6K6kZmlsZWRhdGHmlbDmja4qL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0V2hpdGVib2FyZERlZmF1bHRGaWxlZGF0YShyZXBsYWNlSnNvbikge1xuICAgICAgICAgICAgdmFyIGZpbGVkYXRhID0ge1xuICAgICAgICAgICAgICAgIGZpbGVpZDogMCxcbiAgICAgICAgICAgICAgICBjdXJycGFnZTogMSxcbiAgICAgICAgICAgICAgICBwYWdlbnVtOiAxLFxuICAgICAgICAgICAgICAgIGZpbGV0eXBlOiAnd2hpdGVib2FyZCcsXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6ICd3aGl0ZWJvYXJkJyxcbiAgICAgICAgICAgICAgICBzd2ZwYXRoOiAnJyxcbiAgICAgICAgICAgICAgICBwcHRzbGlkZTogMSxcbiAgICAgICAgICAgICAgICBwcHRzdGVwOiAwLFxuICAgICAgICAgICAgICAgIHN0ZXB0b3RhbDogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChyZXBsYWNlSnNvbiAmJiAodHlwZW9mIHJlcGxhY2VKc29uID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihyZXBsYWNlSnNvbikpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWVwQXNzaWduKGZpbGVkYXRhLCByZXBsYWNlSnNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmlsZWRhdGE7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZXJQdWJtc2dfU2hhcnBzQ2hhbmdlJyxcblxuXG4gICAgICAgIC8q5aSE55CGcHVibXNn55qEU2hhcnBzQ2hhbmdl5L+h5Luk5pWw5o2uKOazqOaEj++8muWPquiDveacieS4gOS4quWcsOaWueiwg+eUqCkqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlclB1Ym1zZ19TaGFycHNDaGFuZ2UocHVibXNnRGF0YSkge1xuICAgICAgICAgICAgaWYgKHB1Ym1zZ0RhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAocHVibXNnRGF0YS5kYXRhICYmIHR5cGVvZiBwdWJtc2dEYXRhLmRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHB1Ym1zZ0RhdGEuZGF0YSA9IEpTT04ucGFyc2UocHVibXNnRGF0YS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fc2F2ZUJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0RhdGEocHVibXNnRGF0YSwgJ3B1Ym1zZycpO1xuICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSUQgPSBwdWJtc2dEYXRhLmRhdGEud2hpdGVib2FyZElEO1xuICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGlzLl9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKHdoaXRlYm9hcmRJRCk7XG4gICAgICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVibXNnRGF0YS5zb3VyY2UgPSAncHVibXNnJztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hd2FpdFNhdmVUb1doaXRlYm9hcmRJbnN0YW5jZVNpZ25hbGxpbmdBcnJheS5wdXNoKHB1Ym1zZ0RhdGEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwdWJtc2dEYXRhICYmIHB1Ym1zZ0RhdGEuZGF0YSAhPSBudWxsICYmIChwdWJtc2dEYXRhLmRhdGEuZXZlbnRUeXBlID09PSBcInNoYXBlU2F2ZUV2ZW50XCIgfHwgcHVibXNnRGF0YS5kYXRhLmV2ZW50VHlwZSA9PT0gXCJjbGVhckV2ZW50XCIgfHwgcHVibXNnRGF0YS5kYXRhLmV2ZW50VHlwZSA9PT0gXCJyZWRvRXZlbnRcIiB8fCBwdWJtc2dEYXRhLmRhdGEuZXZlbnRUeXBlID09PSBcImxhc2VyTWFya0V2ZW50XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHB1Ym1zZ0RhdGEuc291cmNlID0gJ3B1Ym1zZyc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwdWJtc2dEYXRhLmRhdGEuZXZlbnRUeXBlID09PSBcImxhc2VyTWFya0V2ZW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlY2VpdmVTbmFwc2hvdChwdWJtc2dEYXRhLCB3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXBlTmFtZSA9IHB1Ym1zZ0RhdGEuaWQuc3Vic3RyaW5nKHB1Ym1zZ0RhdGEuaWQubGFzdEluZGV4T2YoXCIjIyNfXCIpICsgNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXBlTmFtZUFyciA9IHNoYXBlTmFtZS5zcGxpdChcIl9cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVOYW1lID0gc2hhcGVOYW1lQXJyWzBdICsgJ18nICsgc2hhcGVOYW1lQXJyWzFdICsgJ18nICsgc2hhcGVOYW1lQXJyWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW1vdGVGaWxlaWQgPSBzaGFwZU5hbWVBcnJbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbW90ZUN1cnJwYWdlID0gc2hhcGVOYW1lQXJyWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyRmlsZURhdGEgPSB0aGlzLmdldFdoaXRlYm9hcmRGaWxlZGF0YSh3aGl0ZWJvYXJkSUQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyRmlsZURhdGEuZmlsZWlkID09IHJlbW90ZUZpbGVpZCAmJiBjdXJyRmlsZURhdGEuY3VycnBhZ2UgPT0gcmVtb3RlQ3VycnBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjZWl2ZVNuYXBzaG90KHB1Ym1zZ0RhdGEsIHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1Ym1zZ0RhdGEucmVtaW5kQ29udGVudCA9IHB1Ym1zZ0RhdGEuZGF0YSAmJiBwdWJtc2dEYXRhLmRhdGEubmlja25hbWUgfHwgcHVibXNnRGF0YS5yZW1pbmRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLnNob3dTaGFwZUF1dGhvciAmJiBwdWJtc2dEYXRhLnJlbWluZENvbnRlbnQgJiYgcHVibXNnRGF0YS5mcm9tSUQgIT0gd2hpdGVib2FyZEluc3RhbmNlLm15c2VsZklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVyU2hvd1JlbW90ZVJlbWluZENvbnRlbnRGcm9tUHVibXNnRGF0YSh3aGl0ZWJvYXJkSW5zdGFuY2UsIHB1Ym1zZ0RhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2Uud2FpdGluZ1Byb2Nlc3NTaGFwZURhdGFbc2hhcGVOYW1lXSA9PT0gbnVsbCB8fCB3aGl0ZWJvYXJkSW5zdGFuY2Uud2FpdGluZ1Byb2Nlc3NTaGFwZURhdGFbc2hhcGVOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53YWl0aW5nUHJvY2Vzc1NoYXBlRGF0YVtzaGFwZU5hbWVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53YWl0aW5nUHJvY2Vzc1NoYXBlRGF0YVtzaGFwZU5hbWVdLnB1c2gocHVibXNnRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndhaXRpbmdQcm9jZXNzU2hhcGVEYXRhW3NoYXBlTmFtZV0ucHVzaChwdWJtc2dEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYW5kbGVyRGVsbXNnX1NoYXJwc0NoYW5nZScsXG5cblxuICAgICAgICAvKuWkhOeQhmRlbG1zZ+eahFNoYXJwc0NoYW5nZeS/oeS7pOaVsOaNrijms6jmhI/vvJrlj6rog73mnInkuIDkuKrlnLDmlrnosIPnlKgpKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZXJEZWxtc2dfU2hhcnBzQ2hhbmdlKGRlbG1zZ0RhdGEpIHtcbiAgICAgICAgICAgIGlmIChkZWxtc2dEYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlbG1zZ0RhdGEuZGF0YSAmJiB0eXBlb2YgZGVsbXNnRGF0YS5kYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBkZWxtc2dEYXRhLmRhdGEgPSBKU09OLnBhcnNlKGRlbG1zZ0RhdGEuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3NhdmVCYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdEYXRhKGRlbG1zZ0RhdGEsICdkZWxtc2cnKTtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZElEID0gZGVsbXNnRGF0YS5kYXRhLndoaXRlYm9hcmRJRDtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhpcy5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZCh3aGl0ZWJvYXJkSUQpO1xuICAgICAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbG1zZ0RhdGEuc291cmNlID0gJ2RlbG1zZyc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmF3YWl0U2F2ZVRvV2hpdGVib2FyZEluc3RhbmNlU2lnbmFsbGluZ0FycmF5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXdhaXRTYXZlVG9XaGl0ZWJvYXJkSW5zdGFuY2VTaWduYWxsaW5nID0gdGhpcy5hd2FpdFNhdmVUb1doaXRlYm9hcmRJbnN0YW5jZVNpZ25hbGxpbmdBcnJheVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhd2FpdFNhdmVUb1doaXRlYm9hcmRJbnN0YW5jZVNpZ25hbGxpbmcuaWQgPT09IGRlbG1zZ0RhdGEuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF3YWl0U2F2ZVRvV2hpdGVib2FyZEluc3RhbmNlU2lnbmFsbGluZ0FycmF5LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvL3RoaXMuYXdhaXRTYXZlVG9XaGl0ZWJvYXJkSW5zdGFuY2VTaWduYWxsaW5nQXJyYXkucHVzaChkZWxtc2dEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc2hhcGVOYW1lID0gZGVsbXNnRGF0YS5pZC5zdWJzdHJpbmcoZGVsbXNnRGF0YS5pZC5sYXN0SW5kZXhPZihcIiMjI19cIikgKyA0KTtcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaGFwZU5hbWVBcnIgPSBzaGFwZU5hbWUuc3BsaXQoXCJfXCIpO1xuICAgICAgICAgICAgICAgICAgICBzaGFwZU5hbWUgPSBzaGFwZU5hbWVBcnJbMF0gKyAnXycgKyBzaGFwZU5hbWVBcnJbMV0gKyAnXycgKyBzaGFwZU5hbWVBcnJbMl07XG4gICAgICAgICAgICAgICAgICAgIHZhciByZW1vdGVGaWxlaWQgPSBzaGFwZU5hbWVBcnJbMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciByZW1vdGVDdXJycGFnZSA9IHNoYXBlTmFtZUFyclsyXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJGaWxlRGF0YSA9IHRoaXMuZ2V0V2hpdGVib2FyZEZpbGVkYXRhKHdoaXRlYm9hcmRJRCk7XG4gICAgICAgICAgICAgICAgICAgIGRlbG1zZ0RhdGEuc291cmNlID0gJ2RlbG1zZyc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyRmlsZURhdGEuZmlsZWlkID09IHJlbW90ZUZpbGVpZCAmJiBjdXJyRmlsZURhdGEuY3VycnBhZ2UgPT0gcmVtb3RlQ3VycnBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlY2VpdmVTbmFwc2hvdChkZWxtc2dEYXRhLCB3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2Uud2FpdGluZ1Byb2Nlc3NTaGFwZURhdGFbc2hhcGVOYW1lXSAmJiBBcnJheS5pc0FycmF5KHdoaXRlYm9hcmRJbnN0YW5jZS53YWl0aW5nUHJvY2Vzc1NoYXBlRGF0YVtzaGFwZU5hbWVdKSAmJiB3aGl0ZWJvYXJkSW5zdGFuY2Uud2FpdGluZ1Byb2Nlc3NTaGFwZURhdGFbc2hhcGVOYW1lXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTMgPSB3aGl0ZWJvYXJkSW5zdGFuY2Uud2FpdGluZ1Byb2Nlc3NTaGFwZURhdGFbc2hhcGVOYW1lXS5sZW5ndGggLSAxOyBfaTMgPj0gMDsgX2kzLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2FpdGluZ1Byb2Nlc3NTaGFwZSA9IHdoaXRlYm9hcmRJbnN0YW5jZS53YWl0aW5nUHJvY2Vzc1NoYXBlRGF0YVtzaGFwZU5hbWVdW19pM107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdhaXRpbmdQcm9jZXNzU2hhcGUuaWQgPT09IGRlbG1zZ0RhdGEuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndhaXRpbmdQcm9jZXNzU2hhcGVEYXRhW3NoYXBlTmFtZV0uc3BsaWNlKF9pMywgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFuZGxlck1zZ2xpc3RfU2hhcnBzQ2hhbmdlJyxcblxuXG4gICAgICAgIC8q5aSE55CGbXNnbGlzdOeahFNoYXJwc0NoYW5nZeS/oeS7pOaVsOaNrijms6jmhI/vvJrlj6rog73mnInkuIDkuKrlnLDmlrnosIPnlKgpKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZXJNc2dsaXN0X1NoYXJwc0NoYW5nZShzaGFycHNDaGFuZ2VBcnJheSkge1xuICAgICAgICAgICAgdmFyIG5lZWRMb2FkQ3VycmVudFBhZ2VMaXN0ID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNoYXJwc0NoYW5nZUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdhaXRpbmdQcm9jZXNzRGF0YSA9IHNoYXJwc0NoYW5nZUFycmF5W2ldO1xuICAgICAgICAgICAgICAgIGlmICh3YWl0aW5nUHJvY2Vzc0RhdGEuZGF0YSAmJiB0eXBlb2Ygd2FpdGluZ1Byb2Nlc3NEYXRhLmRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhaXRpbmdQcm9jZXNzRGF0YS5kYXRhID0gSlNPTi5wYXJzZSh3YWl0aW5nUHJvY2Vzc0RhdGEuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qICBpZiggd2FpdGluZ1Byb2Nlc3NEYXRhLmRhdGEud2hpdGVib2FyZElEIT09dW5kZWZpbmVkICAmJiB3YWl0aW5nUHJvY2Vzc0RhdGEuZGF0YS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEICE9PSB1bmRlZmluZWQgICYmICB0aGlzLmJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0NoaWxkcmVuU3RhY2tTdG9yYWdlW3dhaXRpbmdQcm9jZXNzRGF0YS5kYXRhLmRlcGVuZGVuY2VCYXNlYm9hcmRXaGl0ZWJvYXJkSURdICYmIHRoaXMuYmFzaWNUZW1wbGF0ZVdoaXRlYm9hcmRTaWduYWxsaW5nQ2hpbGRyZW5TdGFja1N0b3JhZ2Vbd2FpdGluZ1Byb2Nlc3NEYXRhLmRhdGEuZGVwZW5kZW5jZUJhc2Vib2FyZFdoaXRlYm9hcmRJRF1bd2FpdGluZ1Byb2Nlc3NEYXRhLmRhdGEud2hpdGVib2FyZElEXSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdDaGlsZHJlblN0YWNrU3RvcmFnZVt3YWl0aW5nUHJvY2Vzc0RhdGEuZGF0YS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEXVt3YWl0aW5nUHJvY2Vzc0RhdGEuZGF0YS53aGl0ZWJvYXJkSURdID0gbnVsbCA7XHJcbiAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgIHRoaXMuYmFzaWNUZW1wbGF0ZVdoaXRlYm9hcmRTaWduYWxsaW5nQ2hpbGRyZW5TdGFja1N0b3JhZ2Vbd2FpdGluZ1Byb2Nlc3NEYXRhLmRhdGEuZGVwZW5kZW5jZUJhc2Vib2FyZFdoaXRlYm9hcmRJRF1bd2FpdGluZ1Byb2Nlc3NEYXRhLmRhdGEud2hpdGVib2FyZElEXSA7XHJcbiAgICAgICAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgICAgIHRoaXMuX3NhdmVCYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdEYXRhKHdhaXRpbmdQcm9jZXNzRGF0YSwgJ21zZ2xpc3QnKTtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZElEID0gd2FpdGluZ1Byb2Nlc3NEYXRhLmRhdGEud2hpdGVib2FyZElEO1xuICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGlzLl9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKHdoaXRlYm9hcmRJRCk7XG4gICAgICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FpdGluZ1Byb2Nlc3NEYXRhLnNvdXJjZSA9ICdtc2dsaXN0JztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hd2FpdFNhdmVUb1doaXRlYm9hcmRJbnN0YW5jZVNpZ25hbGxpbmdBcnJheS5wdXNoKHdhaXRpbmdQcm9jZXNzRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAod2FpdGluZ1Byb2Nlc3NEYXRhLmRhdGEgIT0gbnVsbCAmJiAod2FpdGluZ1Byb2Nlc3NEYXRhLmRhdGEuZXZlbnRUeXBlID09PSBcInNoYXBlU2F2ZUV2ZW50XCIgfHwgd2FpdGluZ1Byb2Nlc3NEYXRhLmRhdGEuZXZlbnRUeXBlID09PSBcImNsZWFyRXZlbnRcIiB8fCB3YWl0aW5nUHJvY2Vzc0RhdGEuZGF0YS5ldmVudFR5cGUgPT09IFwicmVkb0V2ZW50XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhaXRpbmdQcm9jZXNzRGF0YS5zb3VyY2UgPSAnbXNnbGlzdCc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaGFwZU5hbWUgPSB3YWl0aW5nUHJvY2Vzc0RhdGEuaWQuc3Vic3RyaW5nKHdhaXRpbmdQcm9jZXNzRGF0YS5pZC5sYXN0SW5kZXhPZihcIiMjI19cIikgKyA0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoYXBlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXBlTmFtZUFyciA9IHNoYXBlTmFtZS5zcGxpdChcIl9cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFwZU5hbWUgPSBzaGFwZU5hbWVBcnJbMF0gKyAnXycgKyBzaGFwZU5hbWVBcnJbMV0gKyAnXycgKyBzaGFwZU5hbWVBcnJbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3RlRmlsZWlkID0gc2hhcGVOYW1lQXJyWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbW90ZUN1cnJwYWdlID0gc2hhcGVOYW1lQXJyWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJGaWxlRGF0YSA9IHRoaXMuZ2V0V2hpdGVib2FyZEZpbGVkYXRhKHdoaXRlYm9hcmRJRCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyckZpbGVEYXRhLmZpbGVpZCA9PSByZW1vdGVGaWxlaWQgJiYgY3VyckZpbGVEYXRhLmN1cnJwYWdlID09IHJlbW90ZUN1cnJwYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVlZExvYWRDdXJyZW50UGFnZUxpc3Rbd2hpdGVib2FyZEluc3RhbmNlLmlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLndhaXRpbmdQcm9jZXNzU2hhcGVEYXRhW3NoYXBlTmFtZV0gPT09IG51bGwgfHwgd2hpdGVib2FyZEluc3RhbmNlLndhaXRpbmdQcm9jZXNzU2hhcGVEYXRhW3NoYXBlTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53YWl0aW5nUHJvY2Vzc1NoYXBlRGF0YVtzaGFwZU5hbWVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndhaXRpbmdQcm9jZXNzU2hhcGVEYXRhW3NoYXBlTmFtZV0ucHVzaCh3YWl0aW5nUHJvY2Vzc0RhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2FpdGluZ1Byb2Nlc3NTaGFwZURhdGFbc2hhcGVOYW1lXS5wdXNoKHdhaXRpbmdQcm9jZXNzRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmVlZExvYWRDdXJyZW50UGFnZUxpc3QgJiYgT2JqZWN0LmtleXMobmVlZExvYWRDdXJyZW50UGFnZUxpc3QpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gT2JqZWN0LmtleXMobmVlZExvYWRDdXJyZW50UGFnZUxpc3QpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZVdoaXRlYm9hcmRTdGFja1RvU3RvcmFnZShpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVdoaXRlYm9hcmRGaWxlZGF0YShpZCwge30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkQ3VycnBhZ2VXaGl0ZWJvYXJkKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncHJlbG9hZFdoaXRlYm9hcmRJbWcnLFxuXG5cbiAgICAgICAgLyrpooTliqDovb3nmb3mnb/nmoTlm77niYcqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJlbG9hZFdoaXRlYm9hcmRJbWcoaW1nVXJsLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKCFpbWdVcmwpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci53YXJuaW5nKCdwcmVsb2FkIGltZyB1cmwgaXMgbm90IGVzaXh0IScpO3JldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8v5Zu+54mH5Yqg6L295oiQ5Yqf5ZCOXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpbWcub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcigncHJlbG9hZCBpbWcgIGZhaWwgLCBpbWcgdXJsIGlzICcgKyBpbWdVcmwpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGltZy5zcmMgPSBpbWdVcmw7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Byb2R1Y3Rpb25XaGl0ZWJvYXJkJyxcblxuXG4gICAgICAgIC8q5Yid5aeL5YyW55m95p2/5p2D6ZmQXHJcbiAgICAgICAgICogQHBhcmFtc1xyXG4gICAgICAgICB3aGl0ZWJvYXJkRWxlbWVudElkOueZveadv+WFg+e0oGlk77yIc3RyaW5nICwgcmVxdWlyZWTvvIkgdGh1bWJuYWlsSWQ657yp55Wl5Zu+5YWD57SgaWTvvIhzdHJpbmcg77yJIO+8jFxyXG4gICAgICAgICBvcHRpb25zOumFjee9rumhuShvYmplY3QpXHJcbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9kdWN0aW9uV2hpdGVib2FyZCgpIHtcbiAgICAgICAgICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkRWxlbWVudElkID0gX3JlZi53aGl0ZWJvYXJkRWxlbWVudElkLFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbElkID0gX3JlZi50aHVtYm5haWxJZCxcbiAgICAgICAgICAgICAgICBfcmVmJHByb2R1Y3Rpb25PcHRpb24gPSBfcmVmLnByb2R1Y3Rpb25PcHRpb25zLFxuICAgICAgICAgICAgICAgIHByb2R1Y3Rpb25PcHRpb25zID0gX3JlZiRwcm9kdWN0aW9uT3B0aW9uID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkcHJvZHVjdGlvbk9wdGlvbixcbiAgICAgICAgICAgICAgICBfcmVmJGhhbmRsZXIgPSBfcmVmLmhhbmRsZXIsXG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IF9yZWYkaGFuZGxlciA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgaWQgPSBfcmVmLmlkO1xuXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRFbGVtZW50SWQpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignd2hpdGVib2FyZEVsZW1lbnRJZCBpcyByZXF1aXJlZCEnKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlSUQgPSB0aGF0Ll9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VJRChpZCk7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJRCh3aGl0ZWJvYXJkSW5zdGFuY2VJRCk7XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1RoZSBwcm9kdWN0aW9uIHdoaXRlYm9hcmQod2hpdGVib2FyZEluc3RhbmNlSUQ6JyArIHdoaXRlYm9hcmRJbnN0YW5jZUlEICsgJykgZmFpbHMsIHRoZSB3aGl0ZWJvYXJkIGFscmVhZHkgZXhpc3RzIScpO3JldHVybiB3aGl0ZWJvYXJkSW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB7fTtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHdoaXRlYm9hcmRFbGVtZW50SWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdXaGl0ZWJvYXJkIGVsZW1lbnRzIGRvIG5vdCBleGlzdCAsIGVsZW1lbnQgaWQgaXM6JyArIHdoaXRlYm9hcmRFbGVtZW50SWQgKyAnIScpO3JldHVybiB3aGl0ZWJvYXJkSW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZUVsZW1lbnRJZCA9IHdoaXRlYm9hcmRFbGVtZW50SWQgKyAnX3doaXRlYm9hcmRJbnN0YW5jZSc7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2VFbGVtZW50LmNsYXNzTmFtZSA9ICd3aGl0ZWJvYXJkLWluc3RhbmNlLWVsZW1lbnQnO1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlRWxlbWVudC5pZCA9IHdoaXRlYm9hcmRJbnN0YW5jZUVsZW1lbnRJZDtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRFbGVtZW50LmFwcGVuZENoaWxkKHdoaXRlYm9hcmRJbnN0YW5jZUVsZW1lbnQpO1xuICAgICAgICAgICAgcHJvZHVjdGlvbk9wdGlvbnMgPSBPYmplY3QuZGVlcEFzc2lnbih7fSwgdGhhdC5kZWZhdWx0UHJvZHVjdGlvbk9wdGlvbnMsIHByb2R1Y3Rpb25PcHRpb25zKTtcbiAgICAgICAgICAgIHRoYXQud2hpdGVib2FyZEluc3RhbmNlU3RvcmVbd2hpdGVib2FyZEluc3RhbmNlSURdID0gd2hpdGVib2FyZEluc3RhbmNlOyAvL+eZveadv+WunuS+i1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhID0gcHJvZHVjdGlvbk9wdGlvbnMuZmlsZWRhdGEgfHwgdGhpcy5nZXRXaGl0ZWJvYXJkRGVmYXVsdEZpbGVkYXRhKHtcbiAgICAgICAgICAgICAgICBmaWxlaWQ6IHdoaXRlYm9hcmRJbnN0YW5jZUlEID09PSAnd2hpdGVib2FyZF9kZWZhdWx0JyA/IDAgOiBpZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuYmFzZVdoaXRlYm9hcmRXaWR0aCA9IHByb2R1Y3Rpb25PcHRpb25zLmJhc2VXaGl0ZWJvYXJkV2lkdGg7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZEluc3RhbmNlSUQgPSB3aGl0ZWJvYXJkSW5zdGFuY2VJRDsgLy/nmb3mnb9pZFxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLnBhcmNlbEFuY2VzdG9yRWxlbWVudElkID0gcHJvZHVjdGlvbk9wdGlvbnMucGFyY2VsQW5jZXN0b3JFbGVtZW50SWQ7IC8v5YyF6KO555qE56WW5YWI5YWD57Sg55qEaWRcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5pc0Jhc2Vib2FyZCA9IHByb2R1Y3Rpb25PcHRpb25zLmlzQmFzZWJvYXJkOyAvL+aYr+WQpuaYr+aooeadv+eZveadv1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLm5lZWRMb29hZEJhc2Vib2FyZCA9IHByb2R1Y3Rpb25PcHRpb25zLm5lZWRMb29hZEJhc2Vib2FyZDsgLy/mmK/lkKbpnIDopoHliqDovb3mqKHmnb/mlbDmja5cbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEID0gcHJvZHVjdGlvbk9wdGlvbnMuZGVwZW5kZW5jZUJhc2Vib2FyZFdoaXRlYm9hcmRJRDsgLy/kvp3otZbnmoTmqKHmnb/nmb3mnb/nmoRpZFxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmRlZmF1bHRXaGl0ZWJvYXJkU2NhbGUgPSBwcm9kdWN0aW9uT3B0aW9ucy5kZWZhdWx0V2hpdGVib2FyZFNjYWxlOyAvL+eZveadv+m7mOiupOavlOS+i1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndhdGVybWFya0ltYWdlU2NhbGUgPSBwcm9kdWN0aW9uT3B0aW9ucy5kZWZhdWx0V2hpdGVib2FyZFNjYWxlOyAvL+eZveadv+avlOS+i1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRNYWduaWZpY2F0aW9uID0gcHJvZHVjdGlvbk9wdGlvbnMud2hpdGVib2FyZE1hZ25pZmljYXRpb247IC8v55m95p2/57yp5pS+5YCN5pWwXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UucmVtaW5kQ29udGVudFRpbWUgPSBwcm9kdWN0aW9uT3B0aW9ucy5yZW1pbmRDb250ZW50VGltZTsgLy/mj5DnpLrlhoXlrrnmmL7npLrml7bpl7RcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5zaG93U2hhcGVBdXRob3IgPSBwcm9kdWN0aW9uT3B0aW9ucy5zaG93U2hhcGVBdXRob3I7IC8v5piv5ZCm5pi+56S66L+c56iL5o+Q56S65YaF5a65XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uuc2hvd015c2VsZlJlbWluZENvbnRlbnQgPSBwcm9kdWN0aW9uT3B0aW9ucy5zaG93TXlzZWxmUmVtaW5kQ29udGVudDsgLy/mmK/lkKbmmL7npLroh6rlt7HnmoTmj5DnpLrlhoXlrrlcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5hc3NvY2lhdGVkTXNnSUQgPSBwcm9kdWN0aW9uT3B0aW9ucy5hc3NvY2lhdGVkTXNnSUQ7IC8v57uR5a6a55qE5L+h5Luk5raI5oGvaWRcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5hc3NvY2lhdGVkVXNlcklEID0gcHJvZHVjdGlvbk9wdGlvbnMuYXNzb2NpYXRlZFVzZXJJRDsgLy/nu5HlrprnmoTnlKjmiLdpZFxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLnByb3ByaWV0YXJ5VG9vbHMgPSBwcm9kdWN0aW9uT3B0aW9ucy5wcm9wcmlldGFyeVRvb2xzOyAvL+eZveadv+aYr+WQpuaLpeacieS4k+WxnuW3peWFt1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLm1pbkhlaWdodCA9IHByb2R1Y3Rpb25PcHRpb25zLm1pbkhlaWdodDsgLy/nmb3mnb/mnIDlsI/nmoTpq5jluqZcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5yb3RhdGVEZWcgPSBwcm9kdWN0aW9uT3B0aW9ucy5yb3RhdGVEZWc7IC8v55m95p2/55qE5peL6L2s6KeS5bqmXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuZGVhd1Blcm1pc3Npb24gPSBwcm9kdWN0aW9uT3B0aW9ucy5kZWF3UGVybWlzc2lvbjsgLy/nmb3mnb/lj6/nlLvmnYPpmZBcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS50ZW1wRGVhd1Blcm1pc3Npb24gPSBwcm9kdWN0aW9uT3B0aW9ucy50ZW1wRGVhd1Blcm1pc3Npb247IC8v55m95p2/5Li05pe25Y+v55S75p2D6ZmQ77yI5b+F6aG75Zyo5Y+v55S75p2D6ZmQ55qE5Z+656GA5LiK77yJXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uubmlja25hbWUgPSBwcm9kdWN0aW9uT3B0aW9ucy5uaWNrbmFtZTsgLy/nmb3mnb/lsZ7kuo7nmoTnlKjmiLfnmoRuaWNrbmFtZVxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLnVzZXJpZCA9IHByb2R1Y3Rpb25PcHRpb25zLnVzZXJpZDsgLy/nmb3mnb/lsZ7kuo7nmoTnlKjmiLfnmoR1c2VyaWRcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5pbnNlcnRQaWN0dXJlUnVsZSA9IHByb2R1Y3Rpb25PcHRpb25zLmluc2VydFBpY3R1cmVSdWxlIHx8ICdkZWZhdWx0JztcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5zeW5jaHJvbml6YXRpb25XaGl0ZWJvYXJkID0gcHJvZHVjdGlvbk9wdGlvbnMuc3luY2hyb25pemF0aW9uV2hpdGVib2FyZDsgLy/mmK/lkKblkIzmraXnmb3mnb9cbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkVG9vbHNJbmZvID0gT2JqZWN0LmRlZXBBc3NpZ24oe30sIHRoYXQud2hpdGVib2FyZFRvb2xzSW5mbyk7IC8v55m95p2/5bel5YW35L+h5oGvXG4gICAgICAgICAgICBpZiAocHJvZHVjdGlvbk9wdGlvbnMucHJpbWFyeUNvbG9yKSB7XG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8ucHJpbWFyeUNvbG9yID0gcHJvZHVjdGlvbk9wdGlvbnMucHJpbWFyeUNvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb2R1Y3Rpb25PcHRpb25zLnNlY29uZGFyeUNvbG9yKSB7XG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8uc2Vjb25kYXJ5Q29sb3IgPSBwcm9kdWN0aW9uT3B0aW9ucy5zZWNvbmRhcnlDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9kdWN0aW9uT3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5iYWNrZ3JvdW5kQ29sb3IgPSBwcm9kdWN0aW9uT3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvZHVjdGlvbk9wdGlvbnMucGVuY2lsV2lkdGgpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5wZW5jaWxXaWR0aCA9IHByb2R1Y3Rpb25PcHRpb25zLnBlbmNpbFdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb2R1Y3Rpb25PcHRpb25zLnNoYXBlV2lkdGgpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5zaGFwZVdpZHRoID0gcHJvZHVjdGlvbk9wdGlvbnMuc2hhcGVXaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9kdWN0aW9uT3B0aW9ucy5lcmFzZXJXaWR0aCkge1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkVG9vbHNJbmZvLmVyYXNlcldpZHRoID0gcHJvZHVjdGlvbk9wdGlvbnMuZXJhc2VyV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvZHVjdGlvbk9wdGlvbnMuZm9udFNpemUpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5mb250U2l6ZSA9IHByb2R1Y3Rpb25PcHRpb25zLmZvbnRTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb2R1Y3Rpb25PcHRpb25zLmZvbnRGYW1pbHkpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5mb250RmFtaWx5ID0gcHJvZHVjdGlvbk9wdGlvbnMuZm9udEZhbWlseTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9kdWN0aW9uT3B0aW9ucy5mb250U3R5bGUpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5mb250U3R5bGUgPSBwcm9kdWN0aW9uT3B0aW9ucy5mb250U3R5bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvZHVjdGlvbk9wdGlvbnMuZm9udFdlaWdodCkge1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkVG9vbHNJbmZvLmZvbnRXZWlnaHQgPSBwcm9kdWN0aW9uT3B0aW9ucy5mb250V2VpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLnNhdmVSZWRvU3RhY2sgPSBwcm9kdWN0aW9uT3B0aW9ucy5zYXZlUmVkb1N0YWNrOyAvL+eZveadv+eahHNhdmVSZWRvU3RhY2vmnYPpmZBcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5zYXZlVW5kb1N0YWNrID0gcHJvZHVjdGlvbk9wdGlvbnMuc2F2ZVVuZG9TdGFjazsgLy/nmb3mnb/nmoRzYXZlVW5kb1N0YWNr5p2D6ZmQXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuaW1hZ2VUaHVtYm5haWxJZCA9IHByb2R1Y3Rpb25PcHRpb25zLmltYWdlVGh1bWJuYWlsSWQ7IC8v55m95p2/55qE5Zu+54mH57yp55Wl5Zu+SWRcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5pbWFnZVRodW1ibmFpbFRpcENvbnRlbnQgPSBwcm9kdWN0aW9uT3B0aW9ucy5pbWFnZVRodW1ibmFpbFRpcENvbnRlbnQ7IC8v55m95p2/55qE5Zu+54mH57yp55Wl5Zu+5o+Q56S65L+h5oGvXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UucmVnaXN0ZXJXaGl0ZWJvYXJkVG9vbHNMaXN0ID0ge307IC8v55m95p2/5qCH5rOo5bel5YW35rOo5YaM6ZuG5ZCIXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uuc3RhY2tTdG9yYWdlID0ge307IC8v55m95p2/5pWw5o2u5qCI5a+56LGhXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlciA9IHt9OyAvL+WkhOeQhuWHveaVsOmbhuWQiFxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIuc2VuZFNpZ25hbGxpbmdUb1NlcnZlciA9IGhhbmRsZXIuc2VuZFNpZ25hbGxpbmdUb1NlcnZlcjtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5oYW5kbGVyLmRlbFNpZ25hbGxpbmdUb1NlcnZlciA9IGhhbmRsZXIuZGVsU2lnbmFsbGluZ1RvU2VydmVyO1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIucmVzaXplV2hpdGVib2FyZFNpemVDYWxsYmFjayA9IGhhbmRsZXIucmVzaXplV2hpdGVib2FyZFNpemVDYWxsYmFjaztcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5oYW5kbGVyLm5vdGljZVVwZGF0ZVRvb2xEZXNjQ2FsbGJhY2sgPSBoYW5kbGVyLm5vdGljZVVwZGF0ZVRvb2xEZXNjQ2FsbGJhY2s7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlci5ub3RpY2VVcGRhdGVXaGl0ZWJvYXJkRmlsZWRhdGFDYWxsYmFjayA9IGhhbmRsZXIubm90aWNlVXBkYXRlV2hpdGVib2FyZEZpbGVkYXRhQ2FsbGJhY2s7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlci53aGl0ZWJvYXJkV2F0ZXJtYXJrSW1hZ2VPbmxvYWRDYWxsYmFjayA9IGhhbmRsZXIud2hpdGVib2FyZFdhdGVybWFya0ltYWdlT25sb2FkQ2FsbGJhY2s7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlci53aGl0ZWJvYXJkV2F0ZXJtYXJrSW1hZ2VPbkZhaWx1cmVDYWxsYmFjayA9IGhhbmRsZXIud2hpdGVib2FyZFdhdGVybWFya0ltYWdlT25GYWlsdXJlQ2FsbGJhY2s7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlci5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrID0gaGFuZGxlci5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrO1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZSA9IHRydWU7IC8v55m95p2/5r+A5rS754q25oCBXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuY29udGFpbmVyV2lkdGhBbmRIZWlnaHQgPSBwcm9kdWN0aW9uT3B0aW9ucy5jb250YWluZXJXaWR0aEFuZEhlaWdodDtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS51c2VJbWdPcmlnaW5hbFNpemVUb0NvbnRhaW5lcldpZHRoQW5kSGVpZ2h0ID0gcHJvZHVjdGlvbk9wdGlvbnMudXNlSW1nT3JpZ2luYWxTaXplVG9Db250YWluZXJXaWR0aEFuZEhlaWdodDtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5teXNlbGZJZCA9IHByb2R1Y3Rpb25PcHRpb25zLm15c2VsZklkO1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmlzT25seVVuZG9SZWRvQ2xlYXJNeXNlbGZTaGFwZSA9IHByb2R1Y3Rpb25PcHRpb25zLmlzT25seVVuZG9SZWRvQ2xlYXJNeXNlbGZTaGFwZTtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5oaXN0b3J5UGVuVG9vbCA9IHRoaXMuaGlzdG9yeVBlblRvb2w7IC8v5L2/55So6L+H55qE55S756yU5bel5YW3XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuaGlzdG9yeVNoYXBlVG9vbCA9IHRoaXMuaGlzdG9yeVNoYXBlVG9vbDsgLy/kvb/nlKjov4fnmoTlm77lvaLlt6XlhbdcblxuICAgICAgICAgICAgLy90a3BjMi4wLjhcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS51c2VUb29sS2V5ID0gcHJvZHVjdGlvbk9wdGlvbnMudXNlVG9vbEtleTtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53YWl0aW5nUHJvY2Vzc1NoYXBlRGF0YSA9IHt9OyAvL+etieW+heWkhOeQhueahOeZveadv+aVsOaNrlxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRFbGVtZW50SWQgPSB3aGl0ZWJvYXJkRWxlbWVudElkOyAvL+eZveadv+iKgueCueeahGlkXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZEVsZW1lbnQgPSB3aGl0ZWJvYXJkRWxlbWVudDsgLy/nmb3mnb/nmoToioLngrnlhYPntKBcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkSW5zdGFuY2VFbGVtZW50SWQgPSB3aGl0ZWJvYXJkSW5zdGFuY2VFbGVtZW50SWQ7IC8v55m95p2/5a6e5L6L6IqC54K555qEaWRcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkSW5zdGFuY2VFbGVtZW50ID0gd2hpdGVib2FyZEluc3RhbmNlRWxlbWVudDsgLy/nmb3mnb/lrp7kvovoioLngrnlhYPntKBcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5pZCA9IGlkOyAvL+aWh+S7tmlkXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UudGh1bWJuYWlsSWQgPSB0aHVtYm5haWxJZDsgLy/nmb3mnb/nvKnnlaXlm77lhYPntKBpZFxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjID0gd2luZG93LkxDLmluaXQod2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRJbnN0YW5jZUVsZW1lbnQpOyAvL+eZveadv+WvueixoVxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLmJhY2tpbmdTY2FsZSA9IDE7IC8v6K6+572uY2FudmFz5LiN5Y+X55S16ISR5YiG6L6o546H5b2x5ZONXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuc2V0Q29sb3IoJ3ByaW1hcnknLCB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5wcmltYXJ5Q29sb3IpOyAvL+eUu+eslOminOiJslxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnNldENvbG9yKCdzZWNvbmRhcnknLCB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5zZWNvbmRhcnlDb2xvcik7IC8v5aGr5YWF6aKc6ImyXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuc2V0Q29sb3IoJ2JhY2tncm91bmQnLCB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5iYWNrZ3JvdW5kQ29sb3IpOyAvL+iDjOaZr+minOiJslxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnNldFdhdGVybWFya0ltYWdlVG9MY0JhY2tncm91bmQoZmFsc2UpO1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnNldFpvb20oMSk7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuc2V0UGFuKDAsIDApO1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLm9uKFwic2hhcGVTYXZlXCIsIHRoYXQuX2hhbmRsZXJTaGFwZVNhdmVFdmVudC5iaW5kKHRoYXQsIHdoaXRlYm9hcmRJbnN0YW5jZSkpO1xuICAgICAgICAgICAgLyogICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLm9uKCBcInVuZG9cIiAsIHRoYXQuX2hhbmRsZXJVbmRvRXZlbnQuYmluZCh0aGF0ICwgd2hpdGVib2FyZEluc3RhbmNlICkgKSA7XHJcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMub24oIFwicmVkb1wiICx0aGF0Ll9oYW5kbGVyUmVkb0V2ZW50LmJpbmQodGhhdCAsIHdoaXRlYm9hcmRJbnN0YW5jZSApICkgO1xyXG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLm9uKCBcImNsZWFyXCIgLHRoYXQuX2hhbmRsZXJDbGVhckV2ZW50LmJpbmQodGhhdCAsIHdoaXRlYm9hcmRJbnN0YW5jZSApICkgOyovXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMub24oXCJzZW5kVW5kb1wiLCB0aGF0Ll9oYW5kbGVyVW5kb0V2ZW50LmJpbmQodGhhdCwgd2hpdGVib2FyZEluc3RhbmNlKSk7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMub24oXCJzZW5kUmVkb1wiLCB0aGF0Ll9oYW5kbGVyUmVkb0V2ZW50LmJpbmQodGhhdCwgd2hpdGVib2FyZEluc3RhbmNlKSk7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMub24oXCJzZW5kQ2xlYXJcIiwgdGhhdC5faGFuZGxlckNsZWFyRXZlbnQuYmluZCh0aGF0LCB3aGl0ZWJvYXJkSW5zdGFuY2UpKTtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5vbignZHJhd2luZ0NoYW5nZScsIHRoaXMuX2hhbmRsZXJEcmF3aW5nQ2hhbmdlRXZlbnQuYmluZCh0aGF0LCB3aGl0ZWJvYXJkSW5zdGFuY2UpKTtcbiAgICAgICAgICAgIC8vICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLm9uKCdzbmFwc2hvdExvYWQgJywgdGhpcy5zbmFwc2hvdExvYWRFdmVudCk7XG4gICAgICAgICAgICAvLyAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5vbihcImRvQ2xlYXJSZWRvU3RhY2tcIix0aGlzLmRvQ2xlYXJSZWRvU3RhY2tFdmVudCkgO1xuICAgICAgICAgICAgLy8gICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMub24oXCJwcmltYXJ5Q29sb3JDaGFuZ2VcIix0aGlzLnByaW1hcnlDb2xvckNoYW5nZUV2ZW50KSA7XG4gICAgICAgICAgICAvLyAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5vbihcInNlY29uZGFyeUNvbG9yQ2hhbmdlXCIsdGhpcy5zZWNvbmRhcnlDb2xvckNoYW5nZUV2ZW50KSA7XG4gICAgICAgICAgICAvLyAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5vbihcImJhY2tncm91bmRDb2xvckNoYW5nZVwiLHRoaXMuYmFja2dyb3VuZENvbG9yQ2hhbmdlRXZlbnQpIDtcbiAgICAgICAgICAgIC8vICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLm9uKFwiZHJhd1N0YXJ0XCIsdGhpcy5kcmF3U3RhcnRFdmVudCkgO1xuICAgICAgICAgICAgLy8gICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMub24oXCJkcmF3Q29udGludWVcIix0aGlzLmRyYXdDb250aW51ZUV2ZW50KSA7XG4gICAgICAgICAgICAvLyAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5vbihcImRyYXdFbmRcIix0aGlzLmRyYXdFbmRFdmVudCkgO1xuICAgICAgICAgICAgLy8gICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMub24oXCJ0b29sQ2hhbmdlXCIsdGhpcy50b29sQ2hhbmdlRXZlbnQpIDtcbiAgICAgICAgICAgIC8vICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLm9uKCdwYW4nLCAgdGhpcy5wYW5FdmVudCk7XG4gICAgICAgICAgICAvLyAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5vbignem9vbScsICB0aGlzLnpvb21FdmVudCk7XG4gICAgICAgICAgICAvLyAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5vbihcInJlcGFpbnRcIix0aGlzLnJlcGFpbnRFdmVudCkgO1xuICAgICAgICAgICAgLy8gICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMub24oXCJsYy1wb2ludGVyZG93blwiLHdoaXRlYm9hcmRJbnN0YW5jZS5sY1BvaW50ZXJkb3duRXZlbnQpIDtcbiAgICAgICAgICAgIC8vICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLm9uKFwibGMtcG9pbnRlcnVwXCIsd2hpdGVib2FyZEluc3RhbmNlLmxjUG9pbnRlcnVwRXZlbnQpIDtcbiAgICAgICAgICAgIC8vICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLm9uKFwibGMtcG9pbnRlcm1vdmVcIix3aGl0ZWJvYXJkSW5zdGFuY2UubGNQb2ludGVybW92ZUV2ZW50KSA7XG4gICAgICAgICAgICAvLyAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5vbihcImxjLXBvaW50ZXJkcmFnXCIsd2hpdGVib2FyZEluc3RhbmNlLmxjUG9pbnRlcmRyYWdFdmVudCkgO1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZVRvb2wgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMubXlzZWxmSWQgPSB3aGl0ZWJvYXJkSW5zdGFuY2UubXlzZWxmSWQ7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuaXNPbmx5VW5kb1JlZG9DbGVhck15c2VsZlNoYXBlID0gd2hpdGVib2FyZEluc3RhbmNlLmlzT25seVVuZG9SZWRvQ2xlYXJNeXNlbGZTaGFwZTtcbiAgICAgICAgICAgIGlmIChwcm9kdWN0aW9uT3B0aW9ucy53aGl0ZWJvYXJkQ2xlYXIpIHtcbiAgICAgICAgICAgICAgICB0aGF0LmNsZWFyV2hpdGVib2FyZEFsbERhdGFCeUlkKGlkKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKiAgIGlmKCB3aGl0ZWJvYXJkSW5zdGFuY2UuZGVwZW5kZW5jZUJhc2Vib2FyZFdoaXRlYm9hcmRJRCAhPT0gdW5kZWZpbmVkICAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UuaWQgIT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICBpZih0aGF0LmJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0NoaWxkcmVuU3RhY2tTdG9yYWdlW3doaXRlYm9hcmRJbnN0YW5jZS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEXSAgJiYgdGhhdC5iYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdDaGlsZHJlblN0YWNrU3RvcmFnZVt3aGl0ZWJvYXJkSW5zdGFuY2UuZGVwZW5kZW5jZUJhc2Vib2FyZFdoaXRlYm9hcmRJRF1bd2hpdGVib2FyZEluc3RhbmNlLmlkXSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGlmKCF3aGl0ZWJvYXJkSW5zdGFuY2UuaXNCYXNlYm9hcmQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uuc3RhY2tTdG9yYWdlID0gT2JqZWN0LmRlZXBBc3NpZ24oe30gLCB0aGF0LmJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0NoaWxkcmVuU3RhY2tTdG9yYWdlW3doaXRlYm9hcmRJbnN0YW5jZS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEXVt3aGl0ZWJvYXJkSW5zdGFuY2UuaWRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5iYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdDaGlsZHJlblN0YWNrU3RvcmFnZVt3aGl0ZWJvYXJkSW5zdGFuY2UuZGVwZW5kZW5jZUJhc2Vib2FyZFdoaXRlYm9hcmRJRF1bd2hpdGVib2FyZEluc3RhbmNlLmlkXSAgPSBudWxsIDtcclxuICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhhdC5iYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdDaGlsZHJlblN0YWNrU3RvcmFnZVt3aGl0ZWJvYXJkSW5zdGFuY2UuZGVwZW5kZW5jZUJhc2Vib2FyZFdoaXRlYm9hcmRJRF1bd2hpdGVib2FyZEluc3RhbmNlLmlkXSAgO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICB9Ki9cbiAgICAgICAgICAgIHRoYXQuX2NoYW5nZVdoaXRlYm9hcmREZWF3UGVybWlzc2lvbih3aGl0ZWJvYXJkSW5zdGFuY2UuZGVhd1Blcm1pc3Npb24sIHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICB0aGF0Ll9jaGFuZ2VXaGl0ZWJvYXJkVGVtcG9yYXJ5RGVhd1Blcm1pc3Npb24od2hpdGVib2FyZEluc3RhbmNlLnRlbXBEZWF3UGVybWlzc2lvbiwgd2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgIHRoYXQuX3NhdmVBd2FpdFNhdmVUb1doaXRlYm9hcmRJbnN0YW5jZVNpZ25hbGxpbmdUb1doaXRlYm9hcmRJbnN0YW5jZSh3aGl0ZWJvYXJkSW5zdGFuY2UpOyAvL+S/neWtmOetieW+heeahOeZveadv+S/oeS7pOaVsOaNruWIsOebuOW6lOeahOeZveadv+WunuS+i+S4rVxuICAgICAgICAgICAgdGhhdC5hY3RpdmVXaGl0ZWJvYXJkVG9vbCghd2hpdGVib2FyZEluc3RhbmNlLnByb3ByaWV0YXJ5VG9vbHMgPyB0aGF0LmNvbW1vbkFjdGl2ZVRvb2wgOiB3aGl0ZWJvYXJkSW5zdGFuY2UudXNlVG9vbEtleSA/IHdoaXRlYm9hcmRJbnN0YW5jZS51c2VUb29sS2V5IDogJ3Rvb2xfcGVuY2lsJywgaWQpO1xuICAgICAgICAgICAgdGhhdC5fem9vbUlzRGlzYWJsZSh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgdGhhdC5fYWN0aW9uSXNEaXNhYmxlKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICB0aGF0Ll9ub3RpY2VVcGRhdGVUb29sRGVzYyh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgdGhhdC5fcmVzaXplV2hpdGVib2FyZEhhbmRsZXIod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgIHRoYXQuX25vdGljZU5wZGF0ZVdoaXRlYm9hcmRUb29sc0luZm8od2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgIHJldHVybiB3aGl0ZWJvYXJkSW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NoYW5nZVdoaXRlYm9hcmRFeGNsdXNpdmVBdHRyaWJ1dGUnLFxuXG5cbiAgICAgICAgLyrmlLnlj5jnmb3mnb/nmoTkuJPlsZ7lsZ7mgKcqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlV2hpdGVib2FyZEV4Y2x1c2l2ZUF0dHJpYnV0ZShpZCwgY2hhbmdlRXhjbHVzaXZlQXR0cmlidXRlKSB7XG4gICAgICAgICAgICBpZiAoY2hhbmdlRXhjbHVzaXZlQXR0cmlidXRlICYmICh0eXBlb2YgY2hhbmdlRXhjbHVzaXZlQXR0cmlidXRlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjaGFuZ2VFeGNsdXNpdmVBdHRyaWJ1dGUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhpcy5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tjaGFuZ2VXaGl0ZWJvYXJkRXhjbHVzaXZlQXR0cmlidXRlXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gY2hhbmdlRXhjbHVzaXZlQXR0cmlidXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlW2tleV0gPSBjaGFuZ2VFeGNsdXNpdmVBdHRyaWJ1dGVba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdteXNlbGZJZCcgfHwga2V5ID09PSAnaXNPbmx5VW5kb1JlZG9DbGVhck15c2VsZlNoYXBlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UubGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjW2tleV0gPSB3aGl0ZWJvYXJkSW5zdGFuY2Vba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2RlZmF1bHRXaGl0ZWJvYXJkU2NhbGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UuY3VycmVudFdhdGVybWFya0ltYWdlVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53YXRlcm1hcmtJbWFnZVNjYWxlID0gd2hpdGVib2FyZEluc3RhbmNlLmRlZmF1bHRXaGl0ZWJvYXJkU2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy53YXRlcm1hcmtJbWFnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZVdoaXRlYm9hcmRIYW5kbGVyKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbnNlcnRQaWN0dXJlUnVsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXNpemVXaGl0ZWJvYXJkSGFuZGxlcih3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmm7TmlrDlm77niYfnvKnnlaXlm75JRCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwZGF0ZUltYWdlVGh1bWJuYWlsSWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlSW1hZ2VUaHVtYm5haWxJZChpZCwgaW1hZ2VUaHVtYm5haWxJZCkge1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoaXMuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3VwZGF0ZUltYWdlVGh1bWJuYWlsSWRdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuaW1hZ2VUaHVtYm5haWxJZCA9IGltYWdlVGh1bWJuYWlsSWQ7XG4gICAgICAgICAgICB0aGlzLl9zYXZlSW1hZ2VCYXNlNjRUb0ltYWdlVGh1bWJuYWlsKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwZGF0ZVdoaXRlYm9hcmRTYXZlUmVkb1N0YWNrQW5kU2F2ZVVuZG9TdGFjaycsXG5cblxuICAgICAgICAvKuabtOaWsOeZveadv3NhdmVSZWRvU3RhY2vjgIFzYXZlVW5kb1N0YWNr5p2D6ZmQKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVdoaXRlYm9hcmRTYXZlUmVkb1N0YWNrQW5kU2F2ZVVuZG9TdGFjayhpZCwgX3JlZjIpIHtcbiAgICAgICAgICAgIHZhciBzYXZlUmVkb1N0YWNrID0gX3JlZjIuc2F2ZVJlZG9TdGFjayxcbiAgICAgICAgICAgICAgICBzYXZlVW5kb1N0YWNrID0gX3JlZjIuc2F2ZVVuZG9TdGFjaztcblxuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoaXMuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3VwZGF0ZVNhdmVSZWRvU3RhY2tBbmRTYXZlVW5kb1N0YWNrXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLnNhdmVSZWRvU3RhY2sgPSBzYXZlUmVkb1N0YWNrICE9PSB1bmRlZmluZWQgPyBzYXZlUmVkb1N0YWNrIDogd2hpdGVib2FyZEluc3RhbmNlLnNhdmVSZWRvU3RhY2s7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uuc2F2ZVVuZG9TdGFjayA9IHNhdmVVbmRvU3RhY2sgIT09IHVuZGVmaW5lZCA/IHNhdmVVbmRvU3RhY2sgOiB3aGl0ZWJvYXJkSW5zdGFuY2Uuc2F2ZVVuZG9TdGFjaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5pu05pawaXNCYXNlYm9hcmQqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICd1cGRhdGVJc0Jhc2Vib2FyZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJc0Jhc2Vib2FyZChpZCwgaXNCYXNlYm9hcmQpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGF0Ll9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1t1cGRhdGVJc0Jhc2Vib2FyZF1UaGVyZSBhcmUgbm8gd2hpdGUgYm9hcmQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5pc0Jhc2Vib2FyZCA9IGlzQmFzZWJvYXJkO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrmm7TmlrBkZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndXBkYXRlRGVwZW5kZW5jZUJhc2Vib2FyZFdoaXRlYm9hcmRJRCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVEZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEKGlkLCBkZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbdXBkYXRlRGVwZW5kZW5jZUJhc2Vib2FyZFdoaXRlYm9hcmRJRF1UaGVyZSBhcmUgbm8gd2hpdGUgYm9hcmQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEID0gZGVwZW5kZW5jZUJhc2Vib2FyZFdoaXRlYm9hcmRJRDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5pu05paw5o+Q56S65YaF5a655pi+56S65p2D6ZmQKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndXBkYXRlU2hvd1JlbWluZENvbnRlbnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlU2hvd1JlbWluZENvbnRlbnQoaWQsIHNob3dTaGFwZUF1dGhvciwgc2hvd015c2VsZlJlbWluZENvbnRlbnQpIHtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGlzLl9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1t1cGRhdGVTaG93UmVtaW5kQ29udGVudF1UaGVyZSBhcmUgbm8gd2hpdGUgYm9hcmQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5zaG93U2hhcGVBdXRob3IgPSBzaG93U2hhcGVBdXRob3IgfHwgd2hpdGVib2FyZEluc3RhbmNlLnNob3dTaGFwZUF1dGhvcjtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5zaG93TXlzZWxmUmVtaW5kQ29udGVudCA9IHNob3dNeXNlbGZSZW1pbmRDb250ZW50IHx8IHdoaXRlYm9hcmRJbnN0YW5jZS5zaG93TXlzZWxmUmVtaW5kQ29udGVudDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndXBkYXRlV2hpdGVib2FyZEFzc29jaWF0ZWRNc2dJRCcsXG5cblxuICAgICAgICAvKueUn+S6p+eZveadv+aPkOekuuWGheWuuSovXG4gICAgICAgIC8qcHJvZHVjdGlvbldoaXRlYm9hcmRSZW1pbmRDb250ZW50KGlkICwgeCAsIHkgLCBjb250ZW50KXtcclxuICAgICAgICAgICAgbGV0IHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoaXMuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xyXG4gICAgICAgICAgICBpZighd2hpdGVib2FyZEluc3RhbmNlKXtMLkxvZ2dlci5lcnJvciggJ1twcm9kdWN0aW9uV2hpdGVib2FyZFJlbWluZENvbnRlbnRdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJytpZCApIDtyZXR1cm4gO31cclxuICAgICAgICAgICAgdGhpcy5fcHJvZHVjdGlvbldoaXRlYm9hcmRSZW1pbmRDb250ZW50KGlkICwgeCAsIHkgLCBjb250ZW50KTtcclxuICAgICAgICB9Ki9cblxuICAgICAgICAvKuabtOaWsOeZveadv+S/oeS7pOe7keWumueahOa2iOaBr2lkKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVdoaXRlYm9hcmRBc3NvY2lhdGVkTXNnSUQoaWQsIGFzc29jaWF0ZWRNc2dJRCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoYXQuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3VwZGF0ZVdoaXRlYm9hcmRBc3NvY2lhdGVkTXNnSURdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuYXNzb2NpYXRlZE1zZ0lEID0gYXNzb2NpYXRlZE1zZ0lEO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrmm7TmlrDnmb3mnb/kv6Hku6Tnu5HlrprnmoTnlKjmiLdpZCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwZGF0ZVdoaXRlYm9hcmRBc3NvY2lhdGVkVXNlcklEJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVdoaXRlYm9hcmRBc3NvY2lhdGVkVXNlcklEKGlkLCBhc3NvY2lhdGVkVXNlcklEKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbdXBkYXRlV2hpdGVib2FyZEFzc29jaWF0ZWRVc2VySURdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuYXNzb2NpYXRlZFVzZXJJRCA9IGFzc29jaWF0ZWRVc2VySUQ7XG4gICAgICAgIH1cblxuICAgICAgICAvKueZveadv+WunuS+i+aYr+WQpuWtmOWcqO+8jOmAmui/h2lk5Yik5patKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFzV2hpdGVib2FyZEJ5SWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFzV2hpdGVib2FyZEJ5SWQoaWQpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGF0Ll9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKGlkKTtcbiAgICAgICAgICAgIHJldHVybiB3aGl0ZWJvYXJkSW5zdGFuY2UgIT09IHVuZGVmaW5lZCAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UgIT09IG51bGw7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NsZWFyV2hpdGVib2FyZEFsbERhdGFCeUlkJyxcblxuXG4gICAgICAgIC8q5riF6Zmk55m95p2/55qE5omA5pyJ5pWw5o2u77yM5YyF5ous5a2Y5YKo55qE5pWw5o2uLOmAmui/h2lkKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyV2hpdGVib2FyZEFsbERhdGFCeUlkKGlkKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbY2xlYXJdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGF0Ll9jbGVhcldoaXRlYm9hcmRBbGxEYXRhQnlJbnN0YW5jZSh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcm9kdWN0aW9uU3BlY2lhbElkJyxcblxuXG4gICAgICAgIC8q55Sf5Lqn54m55q6K55qEaWQqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJvZHVjdGlvblNwZWNpYWxJZChpZCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHNwZWNpYWxJZCA9IHRoYXQuc3BlY2lhbFdoaXRlYm9hcmRJbnN0YW5jZUlEUHJlZml4ICsgaWQ7XG4gICAgICAgICAgICByZXR1cm4gc3BlY2lhbElkO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrplIDmr4Hnmb3mnb/lrp7kvovvvIzpgJrov4dpZCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rlc3Ryb3lXaGl0ZWJvYXJkSW5zdGFuY2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveVdoaXRlYm9hcmRJbnN0YW5jZShpZCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoYXQuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW2Rlc3Ryb3ldVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhhdC5fZGVzdHJveVdoaXRlYm9hcmRJbnN0YW5jZSh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjbGVhclJlZG9BbmRVbmRvU3RhY2snLFxuXG5cbiAgICAgICAgLyrmuIXnqbrnmb3mnb/kuJTmuIXpmaTnmb3mnb/mlbDmja7moIgqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJSZWRvQW5kVW5kb1N0YWNrKGlkLCBjbGVhclJlZG9BbmRVbmRvU3RhY2tKc29uKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbY2xlYXJSZWRvQW5kVW5kb1N0YWNrXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoYXQuX2NsZWFyUmVkb0FuZFVuZG9TdGFjayh3aGl0ZWJvYXJkSW5zdGFuY2UsIGNsZWFyUmVkb0FuZFVuZG9TdGFja0pzb24pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZXNldERlZGF1bHRXaGl0ZWJvYXJkTWFnbmlmaWNhdGlvbicsXG5cblxuICAgICAgICAvKumHjee9rueZveadv+eahOe8qeaUvuavlCovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldERlZGF1bHRXaGl0ZWJvYXJkTWFnbmlmaWNhdGlvbihpZCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoYXQuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3Jlc2V0RGVkYXVsdFdoaXRlYm9hcmRNYWduaWZpY2F0aW9uXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkTWFnbmlmaWNhdGlvbiA9IHRoYXQuZGVmYXVsdFByb2R1Y3Rpb25PcHRpb25zLndoaXRlYm9hcmRNYWduaWZpY2F0aW9uO1xuICAgICAgICAgICAgdGhhdC5fem9vbUlzRGlzYWJsZSh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgdGhhdC5fcmVzaXplV2hpdGVib2FyZEhhbmRsZXIod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndXBkYXRlV2hpdGVib2FyZE1hZ25pZmljYXRpb24nLFxuXG5cbiAgICAgICAgLyrmm7TmlrDnmb3mnb/nmoTnvKnmlL7mr5QqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlV2hpdGVib2FyZE1hZ25pZmljYXRpb24oaWQsIHdoaXRlYm9hcmRNYWduaWZpY2F0aW9uKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbdXBkYXRlV2hpdGVib2FyZE1hZ25pZmljYXRpb25dVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRNYWduaWZpY2F0aW9uID0gd2hpdGVib2FyZE1hZ25pZmljYXRpb247XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwZGF0ZVdoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZVNjYWxlJyxcblxuXG4gICAgICAgIC8q5pu05paw55m95p2/55qEd2F0ZXJtYXJrSW1hZ2VTY2FsZSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVXaGl0ZWJvYXJkV2F0ZXJtYXJrSW1hZ2VTY2FsZShpZCkge1xuICAgICAgICAgICAgdmFyIHdhdGVybWFya0ltYWdlU2NhbGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMuZGVmYXVsdFByb2R1Y3Rpb25PcHRpb25zLndhdGVybWFya0ltYWdlU2NhbGU7XG5cbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGlzLl9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1t1cGRhdGVXaGl0ZWJvYXJkV2F0ZXJtYXJrSW1hZ2VTY2FsZV1UaGVyZSBhcmUgbm8gd2hpdGUgYm9hcmQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVXaGl0ZWJvYXJkV2F0ZXJtYXJrSW1hZ2VTY2FsZSh3aGl0ZWJvYXJkSW5zdGFuY2UsIHdhdGVybWFya0ltYWdlU2NhbGUpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRGaWxlRXh0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZpbGVFeHQoZmlsZXBhdGgpIHtcbiAgICAgICAgICAgIGlmIChmaWxlcGF0aCAhPSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvcyA9IFwiLlwiICsgZmlsZXBhdGgucmVwbGFjZSgvLitcXC4vLCBcIlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrorr7nva7nmb3mnb/nmoTlm77niYcqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZXRXaGl0ZWJvYXJkV2F0ZXJtYXJrSW1hZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0V2hpdGVib2FyZFdhdGVybWFya0ltYWdlKGlkLCB3YXRlcm1hcmtJbWFnZVVybCkge1xuICAgICAgICAgICAgdmFyIF9yZWYzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSxcbiAgICAgICAgICAgICAgICBfcmVmMyRyZXNldERlZGF1bHRXaGkgPSBfcmVmMy5yZXNldERlZGF1bHRXaGl0ZWJvYXJkTWFnbmlmaWNhdGlvbixcbiAgICAgICAgICAgICAgICByZXNldERlZGF1bHRXaGl0ZWJvYXJkTWFnbmlmaWNhdGlvbiA9IF9yZWYzJHJlc2V0RGVkYXVsdFdoaSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYzJHJlc2V0RGVkYXVsdFdoaSxcbiAgICAgICAgICAgICAgICBsb2FkU3VjY2VlZENhbGxiYWNrID0gX3JlZjMubG9hZFN1Y2NlZWRDYWxsYmFjayxcbiAgICAgICAgICAgICAgICBsb2FkRmFpbHVyZUNhbGxiYWNrID0gX3JlZjMubG9hZEZhaWx1cmVDYWxsYmFjaztcblxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1tzZXRXaGl0ZWJvYXJkV2F0ZXJtYXJrSW1hZ2Vdc2V0V2hpdGVib2FyZFdhdGVybWFya0ltYWdlIHdhdGVybWFya0ltYWdlVXJsOicgKyB3YXRlcm1hcmtJbWFnZVVybCk7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbc2V0V2hpdGVib2FyZFdhdGVybWFya0ltYWdlXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5jdXJyZW50V2F0ZXJtYXJrSW1hZ2VVcmwgPSB3YXRlcm1hcmtJbWFnZVVybDtcbiAgICAgICAgICAgIGlmIChyZXNldERlZGF1bHRXaGl0ZWJvYXJkTWFnbmlmaWNhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoYXQucmVzZXREZWRhdWx0V2hpdGVib2FyZE1hZ25pZmljYXRpb24oaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF3YXRlcm1hcmtJbWFnZVVybCkge1xuICAgICAgICAgICAgICAgIC8v5Zu+54mH5Zyw5Z2A5rKh5pyJ77yM5YiZ5L2/55So6buY6K6k55m95p2/XG4gICAgICAgICAgICAgICAgdGhhdC5oaWRlV2hpdGVib2FyZENhbnZhc0JhY2tncm91bmQoaWQpO1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy53YXRlcm1hcmtTY2FsZSA9IDE7XG4gICAgICAgICAgICAgICAgdGhhdC5fcmVzaXplV2hpdGVib2FyZEJ5U2NhbGUod2hpdGVib2FyZEluc3RhbmNlLCB7IGlzQ2hhbmdlV2F0ZXJtYXJrU2NhbGU6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgIHRoYXQuX2hpZGVXaGl0ZWJvYXJkTG9hZGluZyh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy53YXRlcm1hcmtJbWFnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLmN1c3RvbUNhbnZhc0JhY2tncm91bmRFbGVtZW50LnN0eWxlLmJhY2tncm91bmRJbWFnZSA9ICcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNob3dXaGl0ZWJvYXJkQ2FudmFzQmFja2dyb3VuZChpZCk7XG4gICAgICAgICAgICAgICAgdGhhdC5fc2hvd1doaXRlYm9hcmRMb2FkaW5nKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoYXQuZ2V0RmlsZUV4dCh3YXRlcm1hcmtJbWFnZVVybCkgPT0gJy5wZGYnICYmIF9wZGZvYmplY3QyLmRlZmF1bHQuc3VwcG9ydHNQREZzICYmIHdpbmRvdy5QREZPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnNldFBkZih3YXRlcm1hcmtJbWFnZVVybCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5faGlkZVdoaXRlYm9hcmRMb2FkaW5nKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh3aGl0ZWJvYXJkSW5zdGFuY2Uuc2V0V2hpdGVib2FyZFdhdGVybWFya0ltYWdlVGltZXIpO1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5zZXRXaGl0ZWJvYXJkV2F0ZXJtYXJrSW1hZ2VUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2F0ZXJtYXJrSW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgd2F0ZXJtYXJrSW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UuY3VycmVudFdhdGVybWFya0ltYWdlVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9IQUNLIOatpOWkhOWkhOeQhuWKqOaAgVBQVOWSjEg16K++5Lu25LiN5ZON5bqU5Zu+54mH5Yqg6L295a6M5ZCO5pu05pS555m95p2/5q+U5L6LXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hpdGVib2FyZEluc3RhbmNlLndhdGVybWFya0ltYWdlU2NhbGUgPSB3aGl0ZWJvYXJkSW5zdGFuY2UuZGVmYXVsdFdoaXRlYm9hcmRTY2FsZSA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLndhdGVybWFya0ltYWdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9yZXNpemVXaGl0ZWJvYXJkSGFuZGxlcih3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2F0ZXJtYXJrSW1hZ2VTY2FsZSA9IHdhdGVybWFya0ltYWdlLndpZHRoIC8gd2F0ZXJtYXJrSW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UudXNlSW1nT3JpZ2luYWxTaXplVG9Db250YWluZXJXaWR0aEFuZEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuY29udGFpbmVyV2lkdGhBbmRIZWlnaHQgPSB7IHdpZHRoOiB3YXRlcm1hcmtJbWFnZS53aWR0aCwgaGVpZ2h0OiB3YXRlcm1hcmtJbWFnZS5oZWlnaHQgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnNldFdhdGVybWFya0ltYWdlKHdhdGVybWFya0ltYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9yZXNpemVXaGl0ZWJvYXJkQnlTY2FsZSh3aGl0ZWJvYXJkSW5zdGFuY2UsIHsgd2F0ZXJtYXJrSW1hZ2U6IHdhdGVybWFya0ltYWdlLCB3YXRlcm1hcmtJbWFnZVNjYWxlOiB3YXRlcm1hcmtJbWFnZVNjYWxlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlci53aGl0ZWJvYXJkV2F0ZXJtYXJrSW1hZ2VPbmxvYWRDYWxsYmFjayAmJiB0eXBlb2Ygd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIud2hpdGVib2FyZFdhdGVybWFya0ltYWdlT25sb2FkQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIud2hpdGVib2FyZFdhdGVybWFya0ltYWdlT25sb2FkQ2FsbGJhY2soeyB3aWR0aDogd2F0ZXJtYXJrSW1hZ2Uud2lkdGgsIGhlaWdodDogd2F0ZXJtYXJrSW1hZ2UuaGVpZ2h0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX2hpZGVXaGl0ZWJvYXJkTG9hZGluZyh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvYWRTdWNjZWVkQ2FsbGJhY2sgJiYgdHlwZW9mIGxvYWRTdWNjZWVkQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkU3VjY2VlZENhbGxiYWNrKHdhdGVybWFya0ltYWdlVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgd2F0ZXJtYXJrSW1hZ2Uub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdpbWcgbG9hZCBmYWlsICwgaW1nIHVybCBpcyAnICsgd2F0ZXJtYXJrSW1hZ2VVcmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvYWRGYWlsdXJlQ2FsbGJhY2sgJiYgdHlwZW9mIGxvYWRGYWlsdXJlQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkRmFpbHVyZUNhbGxiYWNrKHdhdGVybWFya0ltYWdlVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UgJiYgd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIgJiYgd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIud2hpdGVib2FyZFdhdGVybWFya0ltYWdlT25GYWlsdXJlQ2FsbGJhY2sgJiYgd2hpdGVib2FyZEluc3RhbmNlLmN1cnJlbnRXYXRlcm1hcmtJbWFnZVVybCAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UuY3VycmVudFdhdGVybWFya0ltYWdlVXJsID09PSB3YXRlcm1hcmtJbWFnZVVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5oYW5kbGVyLndoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZU9uRmFpbHVyZUNhbGxiYWNrKHdhdGVybWFya0ltYWdlVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgd2F0ZXJtYXJrSW1hZ2Uuc3JjID0gd2F0ZXJtYXJrSW1hZ2VVcmw7XG4gICAgICAgICAgICAgICAgfSwgMTUwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVzaXplV2hpdGVib2FyZEhhbmRsZXInLFxuXG5cbiAgICAgICAgLyrmoLnmja5yZXNpemXmm7TmlrDnmb3mnb/nmoTlpKflsI8qL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzaXplV2hpdGVib2FyZEhhbmRsZXIoaWQpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSBPYmplY3QudmFsdWVzKHRoYXQud2hpdGVib2FyZEluc3RhbmNlU3RvcmUpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAzOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9yZXNpemVXaGl0ZWJvYXJkSGFuZGxlcih3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMyA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjMucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgX3doaXRlYm9hcmRJbnN0YW5jZSA9IHRoYXQuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgICAgIGlmICghX3doaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3Jlc2l6ZVdoaXRlYm9hcmRIYW5kbGVyXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhhdC5fcmVzaXplV2hpdGVib2FyZEhhbmRsZXIoX3doaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwZGF0ZUNvbnRhaW5lcldpZHRoQW5kSGVpZ2h0JyxcblxuXG4gICAgICAgIC8q5pu05paw5om/6L295a655Zmo55qE5a696auYKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUNvbnRhaW5lcldpZHRoQW5kSGVpZ2h0KGlkKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgICAgICAgICAgIHdpZHRoID0gX3JlZjQud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gX3JlZjQuaGVpZ2h0O1xuXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbdXBkYXRlQ29udGFpbmVyV2lkdGhBbmRIZWlnaHRdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQgfHwgaGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3VwZGF0ZUNvbnRhaW5lcldpZHRoQW5kSGVpZ2h0XXdpZHRoIG9yIGhlaWdodCBpcyBub3QgZXhpc3QgLCBbd2lkdGg6JyArIHdpZHRoICsgJyAsIGhlaWdodDonICsgaGVpZ2h0ICsgJ10hJyk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5jb250YWluZXJXaWR0aEFuZEhlaWdodCA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuICAgICAgICAgICAgdGhhdC5fcmVzaXplV2hpdGVib2FyZEhhbmRsZXIod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGlkZVdoaXRlYm9hcmRDYW52YXNCYWNrZ3JvdW5kJyxcblxuXG4gICAgICAgIC8q6ZqQ6JeP55m95p2/55qE6IOM5pmvY2FudmFzKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVXaGl0ZWJvYXJkQ2FudmFzQmFja2dyb3VuZChpZCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoYXQuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW2hpZGVXaGl0ZWJvYXJkQ2FudmFzQmFja2dyb3VuZF1UaGVyZSBhcmUgbm8gd2hpdGUgYm9hcmQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmxjICYmIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5iYWNrZ3JvdW5kQ2FudmFzKSB7XG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLmJhY2tncm91bmRDYW52YXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuY3VzdG9tQ2FudmFzQmFja2dyb3VuZEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2hvd1doaXRlYm9hcmRDYW52YXNCYWNrZ3JvdW5kJyxcblxuXG4gICAgICAgIC8q5pi+56S655m95p2/55qE6IOM5pmvY2FudmFzKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dXaGl0ZWJvYXJkQ2FudmFzQmFja2dyb3VuZChpZCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoYXQuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3Nob3dXaGl0ZWJvYXJkQ2FudmFzQmFja2dyb3VuZF1UaGVyZSBhcmUgbm8gd2hpdGUgYm9hcmQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmxjICYmIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5iYWNrZ3JvdW5kQ2FudmFzKSB7XG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLmJhY2tncm91bmRDYW52YXMuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5jdXN0b21DYW52YXNCYWNrZ3JvdW5kRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hpZGVXaGl0ZWJvYXJkJyxcblxuXG4gICAgICAgIC8q6ZqQ6JeP55m95p2/Ki9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVXaGl0ZWJvYXJkKGlkKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlICYmIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzaG93V2hpdGVib2FyZCcsXG5cblxuICAgICAgICAvKuaYvuekuueZveadvyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93V2hpdGVib2FyZChpZCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoYXQuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZSAmJiB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwZGF0ZVRleHRGb250JyxcblxuXG4gICAgICAgIC8q5pu05paw55m95p2/5a2X5L2TKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVRleHRGb250KGlkKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgICAgICAgICAgIGZvbnRTaXplID0gX3JlZjUuZm9udFNpemUsXG4gICAgICAgICAgICAgICAgZm9udEZhbWlseSA9IF9yZWY1LmZvbnRGYW1pbHksXG4gICAgICAgICAgICAgICAgZm9udFN0eWxlID0gX3JlZjUuZm9udFN0eWxlLFxuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQgPSBfcmVmNS5mb250V2VpZ2h0O1xuXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbdXBkYXRlVGV4dEZvbnRdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5mb250U2l6ZSA9IGZvbnRTaXplICE9PSB1bmRlZmluZWQgPyBmb250U2l6ZSA6IHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkVG9vbHNJbmZvLmZvbnRTaXplO1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8uZm9udEZhbWlseSA9IGZvbnRGYW1pbHkgIT09IHVuZGVmaW5lZCA/IGZvbnRGYW1pbHkgOiB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5mb250RmFtaWx5O1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8uZm9udFN0eWxlID0gZm9udFN0eWxlICE9PSB1bmRlZmluZWQgPyBmb250U3R5bGUgOiB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5mb250U3R5bGU7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5mb250V2VpZ2h0ID0gZm9udFdlaWdodCAhPT0gdW5kZWZpbmVkID8gZm9udFdlaWdodCA6IHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkVG9vbHNJbmZvLmZvbnRXZWlnaHQ7XG4gICAgICAgICAgICB0aGF0Ll9ub3RpY2VOcGRhdGVXaGl0ZWJvYXJkVG9vbHNJbmZvKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICB0aGF0Ll91cGRhdGVUZXh0Rm9udCh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICd1cGRhdGVFcmFzZXJXaWR0aCcsXG5cblxuICAgICAgICAvKuabtOaWsOapoeearuWuveW6piovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVFcmFzZXJXaWR0aChpZCkge1xuICAgICAgICAgICAgdmFyIF9yZWY2ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgICAgICAgICAgICBlcmFzZXJXaWR0aCA9IF9yZWY2LmVyYXNlcldpZHRoO1xuXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbdXBkYXRlRXJhc2VyV2lkdGhdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5lcmFzZXJXaWR0aCA9IGVyYXNlcldpZHRoICE9PSB1bmRlZmluZWQgPyBlcmFzZXJXaWR0aCA6IHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkVG9vbHNJbmZvLmVyYXNlcldpZHRoO1xuICAgICAgICAgICAgdGhhdC5fbm90aWNlTnBkYXRlV2hpdGVib2FyZFRvb2xzSW5mbyh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgdGhhdC5fdXBkYXRlRXJhc2VyV2lkdGgod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndXBkYXRlUGVuY2lsV2lkdGgnLFxuXG5cbiAgICAgICAgLyrmm7TmlrDnlLvnrJTnmoTlrr3luqYqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlUGVuY2lsV2lkdGgoaWQpIHtcbiAgICAgICAgICAgIHZhciBfcmVmNyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICAgICAgICAgICAgcGVuY2lsV2lkdGggPSBfcmVmNy5wZW5jaWxXaWR0aDtcblxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoYXQuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3VwZGF0ZVBlbmNpbFdpZHRoXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8ucGVuY2lsV2lkdGggPSBwZW5jaWxXaWR0aCAhPT0gdW5kZWZpbmVkID8gcGVuY2lsV2lkdGggOiB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5wZW5jaWxXaWR0aDtcbiAgICAgICAgICAgIHRoYXQuX25vdGljZU5wZGF0ZVdoaXRlYm9hcmRUb29sc0luZm8od2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgIHRoYXQuX3VwZGF0ZVBlbmNpbFdpZHRoKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwZGF0ZVdoaXRlYm9hcmRUb29sc0luZm8nLFxuXG5cbiAgICAgICAgLyrmm7TmlrB3aGl0ZWJvYXJkVG9vbHNJbmZvKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVdoaXRlYm9hcmRUb29sc0luZm8oaWQsIHdoaXRlYm9hcmRUb29sc0luZm8pIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGF0Ll9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1t1cGRhdGVXaGl0ZWJvYXJkVG9vbHNJbmZvXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRUb29sc0luZm8gJiYgKHR5cGVvZiB3aGl0ZWJvYXJkVG9vbHNJbmZvID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih3aGl0ZWJvYXJkVG9vbHNJbmZvKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZXBBc3NpZ24od2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8sIHdoaXRlYm9hcmRUb29sc0luZm8pO1xuICAgICAgICAgICAgICAgIHRoYXQuX25vdGljZU5wZGF0ZVdoaXRlYm9hcmRUb29sc0luZm8od2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndXBkYXRlU2hhcGVXaWR0aCcsXG5cblxuICAgICAgICAvKuabtOaWsOW9oueKtueahOWuveW6piovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVTaGFwZVdpZHRoKGlkKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgICAgICAgICAgIHNoYXBlV2lkdGggPSBfcmVmOC5zaGFwZVdpZHRoO1xuXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbdXBsb2FkU2hhcGVXaWR0aF1UaGVyZSBhcmUgbm8gd2hpdGUgYm9hcmQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkVG9vbHNJbmZvLnNoYXBlV2lkdGggPSBzaGFwZVdpZHRoICE9PSB1bmRlZmluZWQgPyBzaGFwZVdpZHRoIDogd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8uc2hhcGVXaWR0aDtcbiAgICAgICAgICAgIHRoYXQuX25vdGljZU5wZGF0ZVdoaXRlYm9hcmRUb29sc0luZm8od2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgIHRoYXQuX3VwZGF0ZVNoYXBlV2lkdGgod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndXBkYXRlQ29sb3InLFxuXG5cbiAgICAgICAgLyrmm7TmlrDpopzoibIqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlQ29sb3IoaWQsIGNvbG9ySnNvbikge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKGNvbG9ySnNvbiAmJiAodHlwZW9mIGNvbG9ySnNvbiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29sb3JKc29uKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoYXQuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbdXBkYXRlQ29sb3JdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjb2xvckpzb25Db3B5ID0ge307XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yNCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjQgPSBPYmplY3QuZW50cmllcyhjb2xvckpzb24pW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA0OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gKF9zdGVwNCA9IF9pdGVyYXRvcjQubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjkgPSBfc3RlcDQudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTAgPSBfc2xpY2VkVG9BcnJheShfcmVmOSwgMik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfcmVmMTBbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmMTBbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBwcmltYXJ5Q29sb3I6XCIjMDAwMDAwXCIgLCAvL+eUu+eslOeahOminOiJslxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5Q29sb3I6XCIjZmZmZmZmXCIgLCAvL+Whq+WFheeahOminOiJslxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOlwiI2ZmZmZmZlwiICwgLy/og4zmma/popzoibJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3JLZXkgPSBrZXkucmVwbGFjZSgvQ29sb3IvZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JKc29uQ29weVtjb2xvcktleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkVG9vbHNJbmZvW2NvbG9yS2V5ICsgXCJDb2xvclwiXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fbm90aWNlTnBkYXRlV2hpdGVib2FyZFRvb2xzSW5mbyh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yNCA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCAmJiBfaXRlcmF0b3I0LnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjQucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhhdC5fdXBkYXRlQ29sb3Iod2hpdGVib2FyZEluc3RhbmNlLCBjb2xvckpzb25Db3B5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q6I635Y+W55m95p2/5b2T5YmN5r+A5rS755qE5qCH5rOo5bel5YW3Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0QWN0aXZlVG9vbCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBY3RpdmVUb29sKGlkKSB7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhpcy5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbZ2V0QWN0aXZlVG9vbF1UaGVyZSBhcmUgbm8gd2hpdGUgYm9hcmQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3aGl0ZWJvYXJkSW5zdGFuY2UuYWN0aXZlVG9vbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5r+A5rS755m95p2/5bel5YW3Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYWN0aXZlV2hpdGVib2FyZFRvb2wnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWN0aXZlV2hpdGVib2FyZFRvb2wodG9vbEtleSwgaWQpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIGlmICh0aGF0LnVzZVdoaXRlYm9hcmRUb29sW3Rvb2xLZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignVGhlIHdoaXRlYm9hcmQgZG9lcyBub3QgaGF2ZSB0aGUgJyArIHRvb2xLZXkgKyAnIHRvb2whJyk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkIHx8IGlkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1thY3RpdmVXaGl0ZWJvYXJkVG9vbF1pZCBpcyB1bmRlZmluZWQgb3IgbnVsbCAnKTtyZXR1cm47XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoYXQuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW2FjdGl2ZVdoaXRlYm9hcmRUb29sXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKC9edG9vbF8vLnRlc3QodG9vbEtleSkpIHtcbiAgICAgICAgICAgICAgICAvL+eZveadv+W6leWxguW3peWFt1xuICAgICAgICAgICAgICAgIGlmICh0b29sS2V5ID09PSAndG9vbF9wZW5jaWwnIHx8IHRvb2xLZXkgPT09ICd0b29sX2hpZ2hsaWdodGVyJyB8fCB0b29sS2V5ID09PSAndG9vbF9saW5lJyB8fCB0b29sS2V5ID09PSAndG9vbF9hcnJvdycgfHwgdG9vbEtleSA9PT0gJ3Rvb2xfZGFzaGVkJykge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuaGlzdG9yeVBlblRvb2wgPSB0b29sS2V5O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9vbEtleSA9PT0gJ3Rvb2xfcmVjdGFuZ2xlJyB8fCB0b29sS2V5ID09PSAndG9vbF9yZWN0YW5nbGVfZW1wdHknIHx8IHRvb2xLZXkgPT09ICd0b29sX2VsbGlwc2UnIHx8IHRvb2xLZXkgPT09ICd0b29sX2VsbGlwc2VfZW1wdHknIHx8IHRvb2xLZXkgPT09ICd0b29sX3BvbHlnb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5oaXN0b3J5U2hhcGVUb29sID0gdG9vbEtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZVRvb2wgPSB0b29sS2V5OyAvL+W9k+WJjeS9v+eUqOeahOa/gOa0u+W3peWFt1xuICAgICAgICAgICAgICAgIHRoYXQuX3NldFdoaXRlYm9hcmRUb29scyh0b29sS2V5LCB3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIHRoYXQuX2hhbmRsZXJBY3RpdmVUb29sTGFzZXIodG9vbEtleSwgd2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICBpZiAodG9vbEtleSA9PT0gXCJ0b29sX3RleHRcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll91cGRhdGVUZXh0Rm9udCh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9vbEtleSA9PT0gXCJ0b29sX2VyYXNlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3VwZGF0ZUVyYXNlcldpZHRoKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0b29sS2V5ID09PSBcInRvb2xfcGVuY2lsXCIgfHwgdG9vbEtleSA9PT0gXCJ0b29sX2hpZ2hsaWdodGVyXCIgfHwgdG9vbEtleSA9PT0gXCJ0b29sX2xpbmVcIiB8fCB0b29sS2V5ID09IFwidG9vbF9hcnJvd1wiIHx8IHRvb2xLZXkgPT09IFwidG9vbF9kYXNoZWRcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll91cGRhdGVQZW5jaWxXaWR0aCh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9vbEtleSA9PT0gXCJ0b29sX3JlY3RhbmdsZVwiIHx8IHRvb2xLZXkgPT09IFwidG9vbF9yZWN0YW5nbGVfZW1wdHlcIiB8fCB0b29sS2V5ID09PSBcInRvb2xfZWxsaXBzZVwiIHx8IHRvb2xLZXkgPT09IFwidG9vbF9lbGxpcHNlX2VtcHR5XCIgfHwgdG9vbEtleSA9PT0gXCJ0b29sX3BvbHlnb25cIikge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll91cGRhdGVTaGFwZVdpZHRoKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRvb2xLZXkgPT09IFwidG9vbF9lbGxpcHNlX2VtcHR5XCIgfHwgdG9vbEtleSA9PT0gXCJ0b29sX3JlY3RhbmdsZV9lbXB0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8v56m65b+DXG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5zZXRDb2xvcignc2Vjb25kYXJ5JywgXCJ0cmFuc3BhcmVudFwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRvb2xLZXkgPT09IFwidG9vbF9yZWN0YW5nbGVcIiB8fCB0b29sS2V5ID09PSBcInRvb2xfZWxsaXBzZVwiIHx8IHRvb2xLZXkgPT09IFwidG9vbF9wb2x5Z29uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnNldENvbG9yKCdzZWNvbmRhcnknLCB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5wcmltYXJ5Q29sb3IpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5zZXRDb2xvcignc2Vjb25kYXJ5Jywgd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8uc2Vjb25kYXJ5Q29sb3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0b29sS2V5ID09PSAndG9vbF9oaWdobGlnaHRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgLy/ojaflhYnnrJRcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8ucHJpbWFyeUNvbG9yLmNvbG9yUmdiKCkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKFwicmdiXCIsIFwicmdiYVwiKS5yZXBsYWNlKFwiKVwiLCBcIiwwLjUpXCIpO1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuc2V0Q29sb3IoJ3ByaW1hcnknLCBjb2xvcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnNldENvbG9yKCdwcmltYXJ5Jywgd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8ucHJpbWFyeUNvbG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5oYW5kbGVyLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaygnY2hhbmdlV2hpdGVib2FyZEFjdGl2ZVRvb2wnLCB7IGlkOiB3aGl0ZWJvYXJkSW5zdGFuY2UuaWQsIGFjdGl2ZVRvb2w6IHdoaXRlYm9hcmRJbnN0YW5jZS5hY3RpdmVUb29sIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl90b29sSXNVc2Uod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL15hY3Rpb25fLy50ZXN0KHRvb2xLZXkpKSB7XG4gICAgICAgICAgICAgICAgLy/nmb3mnb/miafooYznmoTliqjkvZxcbiAgICAgICAgICAgICAgICBpZiAodG9vbEtleSA9PT0gJ2FjdGlvbl91bmRvJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9BdXRob3JVc2VySWQgPSB3aGl0ZWJvYXJkSW5zdGFuY2UuaXNPbmx5VW5kb1JlZG9DbGVhck15c2VsZlNoYXBlICYmIHdoaXRlYm9hcmRJbnN0YW5jZS5teXNlbGZJZCA/IHdoaXRlYm9hcmRJbnN0YW5jZS5teXNlbGZJZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5zeW5jaHJvbml6YXRpb25XaGl0ZWJvYXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuc2VuZFVuZG8odG9BdXRob3JVc2VySWQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnVuZG8oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9vbEtleSA9PT0gJ2FjdGlvbl9yZWRvJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RvQXV0aG9yVXNlcklkID0gd2hpdGVib2FyZEluc3RhbmNlLmlzT25seVVuZG9SZWRvQ2xlYXJNeXNlbGZTaGFwZSAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UubXlzZWxmSWQgPyB3aGl0ZWJvYXJkSW5zdGFuY2UubXlzZWxmSWQgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2Uuc3luY2hyb25pemF0aW9uV2hpdGVib2FyZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnNlbmRSZWRvKF90b0F1dGhvclVzZXJJZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMucmVkbygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0b29sS2V5ID09PSAnYWN0aW9uX2NsZWFyJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RvQXV0aG9yVXNlcklkMiA9IHdoaXRlYm9hcmRJbnN0YW5jZS5pc09ubHlVbmRvUmVkb0NsZWFyTXlzZWxmU2hhcGUgJiYgd2hpdGVib2FyZEluc3RhbmNlLm15c2VsZklkID8gd2hpdGVib2FyZEluc3RhbmNlLm15c2VsZklkIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLnN5bmNocm9uaXphdGlvbldoaXRlYm9hcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5zZW5kQ2xlYXIoX3RvQXV0aG9yVXNlcklkMik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGF0Ll9hY3Rpb25Jc0Rpc2FibGUod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL156b29tXy8udGVzdCh0b29sS2V5KSkge1xuICAgICAgICAgICAgICAgIC8v55m95p2/55qE57yp5pS+6LCD5pW0XG4gICAgICAgICAgICAgICAgaWYgKHRvb2xLZXkgPT09ICd6b29tX2JpZycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkTWFnbmlmaWNhdGlvbiA8IHRoYXQubWF4TWFnbmlmaWNhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRNYWduaWZpY2F0aW9uICs9IDAuNTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9vbEtleSA9PT0gJ3pvb21fc21hbGwnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZE1hZ25pZmljYXRpb24gPiB0aGF0Lm1pbk1hZ25pZmljYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkTWFnbmlmaWNhdGlvbiAtPSAwLjU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRvb2xLZXkgPT09ICd6b29tX2RlZmF1bHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkTWFnbmlmaWNhdGlvbiA9IHRoYXQuZGVmYXVsdFByb2R1Y3Rpb25PcHRpb25zLndoaXRlYm9hcmRNYWduaWZpY2F0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRNYWduaWZpY2F0aW9uID4gdGhhdC5tYXhNYWduaWZpY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkTWFnbmlmaWNhdGlvbiA9IHRoYXQubWF4TWFnbmlmaWNhdGlvbjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkTWFnbmlmaWNhdGlvbiA8IHRoYXQubWluTWFnbmlmaWNhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZE1hZ25pZmljYXRpb24gPSB0aGF0Lm1pbk1hZ25pZmljYXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoYXQuX3pvb21Jc0Rpc2FibGUod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB0aGF0Ll9yZXNpemVXaGl0ZWJvYXJkSGFuZGxlcih3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICd1c2VIaXN0b3J5UGVuVG9vbCcsXG5cblxuICAgICAgICAvKuS9v+eUqOWOhuWPsueahOeUu+eslOW3peWFtyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1c2VIaXN0b3J5UGVuVG9vbChpZCkge1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoaXMuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3VzZUhpc3RvcnlQZW5Ub29sXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRvb2xLZXkgPSB3aGl0ZWJvYXJkSW5zdGFuY2UuaGlzdG9yeVBlblRvb2wgfHwgJ3Rvb2xfcGVuY2lsJztcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlV2hpdGVib2FyZFRvb2wodG9vbEtleSwgaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrkvb/nlKjljoblj7LnmoTnlLvnrJTlt6XlhbcqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICd1c2VIaXN0b3J5U2hhcGVUb29sJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVzZUhpc3RvcnlTaGFwZVRvb2woaWQpIHtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGlzLl9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1t1c2VIaXN0b3J5U2hhcGVUb29sXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRvb2xLZXkgPSB3aGl0ZWJvYXJkSW5zdGFuY2UuaGlzdG9yeVNoYXBlVG9vbCB8fCAndG9vbF9yZWN0YW5nbGUnO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVXaGl0ZWJvYXJkVG9vbCh0b29sS2V5LCBpZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuaUueWPmOeZveadv+S4tOaXtuWPr+eUu+adg+mZkCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NoYW5nZVdoaXRlYm9hcmRUZW1wb3JhcnlEZWF3UGVybWlzc2lvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VXaGl0ZWJvYXJkVGVtcG9yYXJ5RGVhd1Blcm1pc3Npb24odmFsdWUsIGlkKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKGlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGF0Ll9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tjaGFuZ2VXaGl0ZWJvYXJkVGVtcG9yYXJ5RGVhd1Blcm1pc3Npb25dVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGF0Ll9jaGFuZ2VXaGl0ZWJvYXJkVGVtcG9yYXJ5RGVhd1Blcm1pc3Npb24odmFsdWUsIHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwZGF0ZVdoaXRlYm9hcmRQcm9wZXJ0eScsXG5cblxuICAgICAgICAvKuabtOaWsOeZveadv+eahOWxnuaApyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVXaGl0ZWJvYXJkUHJvcGVydHkoaWQsIHVwZGF0ZVByb3BlcnR5KSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodXBkYXRlUHJvcGVydHkgJiYgKHR5cGVvZiB1cGRhdGVQcm9wZXJ0eSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodXBkYXRlUHJvcGVydHkpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhpcy5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1t1cGRhdGVXaGl0ZWJvYXJkUHJvcGVydHldVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5kZWF3UGVybWlzc2lvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuY2hhbmdlV2hpdGVib2FyZERlYXdQZXJtaXNzaW9uKHVwZGF0ZVByb3BlcnR5LmRlYXdQZXJtaXNzaW9uLCBpZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5zaG93U2hhcGVBdXRob3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmNoYW5nZVdoaXRlYm9hcmRFeGNsdXNpdmVBdHRyaWJ1dGUoaWQsIHsgc2hvd1NoYXBlQXV0aG9yOiB1cGRhdGVQcm9wZXJ0eS5zaG93U2hhcGVBdXRob3IgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5teXNlbGZJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuY2hhbmdlV2hpdGVib2FyZEV4Y2x1c2l2ZUF0dHJpYnV0ZShpZCwgeyBteXNlbGZJZDogdXBkYXRlUHJvcGVydHkubXlzZWxmSWQgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5pc09ubHlVbmRvUmVkb0NsZWFyTXlzZWxmU2hhcGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmNoYW5nZVdoaXRlYm9hcmRFeGNsdXNpdmVBdHRyaWJ1dGUoaWQsIHsgaXNPbmx5VW5kb1JlZG9DbGVhck15c2VsZlNoYXBlOiB1cGRhdGVQcm9wZXJ0eS5pc09ubHlVbmRvUmVkb0NsZWFyTXlzZWxmU2hhcGUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5uaWNrbmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuY2hhbmdlV2hpdGVib2FyZEV4Y2x1c2l2ZUF0dHJpYnV0ZShpZCwgeyBuaWNrbmFtZTogdXBkYXRlUHJvcGVydHkubmlja25hbWUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5wcmltYXJ5ICE9PSB1bmRlZmluZWQgfHwgdXBkYXRlUHJvcGVydHkuc2Vjb25kYXJ5ICE9PSB1bmRlZmluZWQgfHwgdXBkYXRlUHJvcGVydHkuYmFja2dyb3VuZCAhPT0gdW5kZWZpbmVkIHx8IHVwZGF0ZVByb3BlcnR5LnByaW1hcnlDb2xvciAhPT0gdW5kZWZpbmVkIHx8IHVwZGF0ZVByb3BlcnR5LnNlY29uZGFyeUNvbG9yICE9PSB1bmRlZmluZWQgfHwgdXBkYXRlUHJvcGVydHkuYmFja2dyb3VuZENvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZUNvbG9yID0ge307XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGNvbG9yS2V5IGluIHVwZGF0ZVByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sb3JLZXkgPT09ICdwcmltYXJ5JyB8fCBjb2xvcktleSA9PT0gJ3NlY29uZGFyeScgfHwgY29sb3JLZXkgPT09ICdiYWNrZ3JvdW5kJyB8fCBjb2xvcktleSA9PT0gJ3ByaW1hcnlDb2xvcicgfHwgY29sb3JLZXkgPT09ICdzZWNvbmRhcnlDb2xvcicgfHwgY29sb3JLZXkgPT09ICdiYWNrZ3JvdW5kQ29sb3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29sb3JbY29sb3JLZXldID0gdXBkYXRlUHJvcGVydHlbY29sb3JLZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoYXQudXBkYXRlQ29sb3IoaWQsIHVwZGF0ZUNvbG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVByb3BlcnR5LnN5bmNocm9uaXphdGlvbldoaXRlYm9hcmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmNoYW5nZVdoaXRlYm9hcmRFeGNsdXNpdmVBdHRyaWJ1dGUoaWQsIHsgc3luY2hyb25pemF0aW9uV2hpdGVib2FyZDogdXBkYXRlUHJvcGVydHkuc3luY2hyb25pemF0aW9uV2hpdGVib2FyZCB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVByb3BlcnR5LmRlZmF1bHRXaGl0ZWJvYXJkU2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LmNoYW5nZVdoaXRlYm9hcmRFeGNsdXNpdmVBdHRyaWJ1dGUoaWQsIHsgZGVmYXVsdFdoaXRlYm9hcmRTY2FsZTogdXBkYXRlUHJvcGVydHkuZGVmYXVsdFdoaXRlYm9hcmRTY2FsZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVByb3BlcnR5LmFzc29jaWF0ZWRNc2dJRCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQudXBkYXRlV2hpdGVib2FyZEFzc29jaWF0ZWRNc2dJRChpZCwgdXBkYXRlUHJvcGVydHkuYXNzb2NpYXRlZE1zZ0lEKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVByb3BlcnR5LmFzc29jaWF0ZWRVc2VySUQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnVwZGF0ZVdoaXRlYm9hcmRBc3NvY2lhdGVkVXNlcklEKGlkLCB1cGRhdGVQcm9wZXJ0eS5hc3NvY2lhdGVkVXNlcklEKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVByb3BlcnR5LnBlbmNpbFdpZHRoICE9PSB1bmRlZmluZWQgfHwgdXBkYXRlUHJvcGVydHkuc2hhcGVXaWR0aCAhPT0gdW5kZWZpbmVkIHx8IHVwZGF0ZVByb3BlcnR5LmVyYXNlcldpZHRoICE9PSB1bmRlZmluZWQgfHwgdXBkYXRlUHJvcGVydHkuZm9udFNpemUgIT09IHVuZGVmaW5lZCB8fCB1cGRhdGVQcm9wZXJ0eS5mb250RmFtaWx5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRUb29sc0luZm8gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVByb3BlcnR5LnBlbmNpbFdpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRUb29sc0luZm8ucGVuY2lsV2lkdGggPSBOdW1iZXIodXBkYXRlUHJvcGVydHkucGVuY2lsV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5zaGFwZVdpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRUb29sc0luZm8uc2hhcGVXaWR0aCA9IE51bWJlcih1cGRhdGVQcm9wZXJ0eS5zaGFwZVdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlUHJvcGVydHkuZXJhc2VyV2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZFRvb2xzSW5mby5lcmFzZXJXaWR0aCA9IE51bWJlcih1cGRhdGVQcm9wZXJ0eS5lcmFzZXJXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVByb3BlcnR5LmZvbnRTaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRUb29sc0luZm8uZm9udFNpemUgPSBOdW1iZXIodXBkYXRlUHJvcGVydHkuZm9udFNpemUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5mb250RmFtaWx5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRUb29sc0luZm8uZm9udEZhbWlseSA9IHVwZGF0ZVByb3BlcnR5LmZvbnRGYW1pbHk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVXaGl0ZWJvYXJkVG9vbHNJbmZvKGlkLCB3aGl0ZWJvYXJkVG9vbHNJbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVByb3BlcnR5LmZvbnRTaXplICE9PSB1bmRlZmluZWQgfHwgdXBkYXRlUHJvcGVydHkuZm9udEZhbWlseSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRleHRGb250KGlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlUHJvcGVydHkucGVuY2lsV2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5hY3RpdmVUb29sID09PSAndG9vbF9wZW5jaWwnIHx8IHdoaXRlYm9hcmRJbnN0YW5jZS5hY3RpdmVUb29sID09PSAndG9vbF9oaWdobGlnaHRlcicgfHwgd2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZVRvb2wgPT09ICd0b29sX2xpbmUnIHx8IHdoaXRlYm9hcmRJbnN0YW5jZS5hY3RpdmVUb29sID09PSAndG9vbF9hcnJvdycgfHwgd2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZVRvb2wgPT09ICd0b29sX2Rhc2hlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVBlbmNpbFdpZHRoKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlUHJvcGVydHkuc2hhcGVXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZVRvb2wgPT09ICd0b29sX3JlY3RhbmdsZScgfHwgd2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZVRvb2wgPT09ICd0b29sX3JlY3RhbmdsZV9lbXB0eScgfHwgd2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZVRvb2wgPT09ICd0b29sX2VsbGlwc2UnIHx8IHdoaXRlYm9hcmRJbnN0YW5jZS5hY3RpdmVUb29sID09PSAndG9vbF9lbGxpcHNlX2VtcHR5JyB8fCB3aGl0ZWJvYXJkSW5zdGFuY2UuYWN0aXZlVG9vbCA9PT0gJ3Rvb2xfcG9seWdvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNoYXBlV2lkdGgoaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5lcmFzZXJXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZVRvb2wgPT09ICd0b29sX2VyYXNlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVyYXNlcldpZHRoKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVQcm9wZXJ0eS5pbnNlcnRQaWN0dXJlUnVsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuY2hhbmdlV2hpdGVib2FyZEV4Y2x1c2l2ZUF0dHJpYnV0ZShpZCwgeyBpbnNlcnRQaWN0dXJlUnVsZTogdXBkYXRlUHJvcGVydHkuaW5zZXJ0UGljdHVyZVJ1bGUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmlLnlj5jnmb3mnb/kuLTml7blj6/nlLvmnYPpmZAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjaGFuZ2VXaGl0ZWJvYXJkRGVhd1Blcm1pc3Npb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlV2hpdGVib2FyZERlYXdQZXJtaXNzaW9uKHZhbHVlLCBpZCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbY2hhbmdlV2hpdGVib2FyZERlYXdQZXJtaXNzaW9uXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhhdC5fY2hhbmdlV2hpdGVib2FyZERlYXdQZXJtaXNzaW9uKHZhbHVlLCB3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZWdpc3RlcldoaXRlYm9hcmRUb29scycsXG5cblxuICAgICAgICAvKuWIneWni+WMluagh+azqOW3peWFtyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlcldoaXRlYm9hcmRUb29scyhpZCwgdG9vbHNEZXNjKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoISh0b29sc0Rlc2MgJiYgKHR5cGVvZiB0b29sc0Rlc2MgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHRvb2xzRGVzYykpID09PSAnb2JqZWN0JykpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW2luaXRXaGl0ZWJvYXJkVG9vbHNdIHRvb2xzIGRlc2MgY2Fubm90IGJlIGVtcHR5IGFuZCB0eXBlIGpzb24hJyk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGF0Ll9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tyZWdpc3RlcldoaXRlYm9hcmRUb29sc11UaGVyZSBhcmUgbm8gd2hpdGUgYm9hcmQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0b29sc0Rlc2NNYXAgPSB7fTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I1ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I1ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjUgPSBPYmplY3QuZW50cmllcyh0b29sc0Rlc2MpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA1OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gKF9zdGVwNSA9IF9pdGVyYXRvcjUubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTEgPSBfc3RlcDUudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYxMiA9IF9zbGljZWRUb0FycmF5KF9yZWYxMSwgMik7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvb2xLZXkgPSBfcmVmMTJbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b29sVmFsdWUgPSBfcmVmMTJbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoYXQudXNlV2hpdGVib2FyZFRvb2xbdG9vbEtleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnVGhlIHdoaXRlYm9hcmQgZG9lcyBub3QgaGF2ZSB0aGUgJyArIHRvb2xLZXkgKyAnIHRvb2whJyk7Y29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdG9vbHNEZXNjTWFwW3Rvb2xLZXldID0gdGhhdC5fcHJvZHVjdGlvblRvb2xEZXNjKHRvb2xLZXksIHRvb2xWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQudXNlV2hpdGVib2FyZFRvb2xbdG9vbEtleV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNSA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I1ID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ICYmIF9pdGVyYXRvcjUucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I1LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I1O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UucmVnaXN0ZXJXaGl0ZWJvYXJkVG9vbHNMaXN0ID0gdG9vbHNEZXNjTWFwO1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmlzUmVnaXN0ZXJXaGl0ZWJvYXJkVG9vbCA9IHRydWU7XG4gICAgICAgICAgICB0aGF0Ll96b29tSXNEaXNhYmxlKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICB0aGF0Ll96b29tSXNEaXNhYmxlKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICB0aGF0Ll9ub3RpY2VVcGRhdGVUb29sRGVzYyh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYXNXaGl0ZWJvYXJkRmlsZWRhdGEnLFxuXG5cbiAgICAgICAgLyrmmK/lkKbmi6XmnIlmaWxlZGF0YeaVsOaNriovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNXaGl0ZWJvYXJkRmlsZWRhdGEoaWQpIHtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGlzLl9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1toYXNXaGl0ZWJvYXJkRmlsZWRhdGFdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhICYmIF90eXBlb2Yod2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhKSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMod2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwZGF0ZVdoaXRlYm9hcmRGaWxlZGF0YScsXG5cblxuICAgICAgICAvKuabtOaWsOeZveadv+eahGZpbGVkYXRh5pWw5o2uKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVdoaXRlYm9hcmRGaWxlZGF0YShpZCwgZmlsZWRhdGEpIHtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGlzLl9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1t1cGRhdGVXaGl0ZWJvYXJkRmlsZWRhdGFdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVXaGl0ZWJvYXJkRmlsZWRhdGEod2hpdGVib2FyZEluc3RhbmNlLCBmaWxlZGF0YSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldFJlZ2lzdGVyV2hpdGVib2FyZFRvb2xzTGlzdCcsXG5cblxuICAgICAgICAvKuiOt+WPluazqOWGjOeahOagh+azqOW3peWFt+eahOaPj+i/sCovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZWdpc3RlcldoaXRlYm9hcmRUb29sc0xpc3QoaWQpIHtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGlzLl9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tnZXRSZWdpc3RlcldoaXRlYm9hcmRUb29sc0xpc3RdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmRlZXBBc3NpZ24oe30sIHdoaXRlYm9hcmRJbnN0YW5jZS5yZWdpc3RlcldoaXRlYm9hcmRUb29sc0xpc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrojrflj5bnmb3mnb/nmoRmaWxlZGF0YSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldFdoaXRlYm9hcmRGaWxlZGF0YScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRXaGl0ZWJvYXJkRmlsZWRhdGEoaWQpIHtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGlzLl9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tnZXRXaGl0ZWJvYXJkRmlsZWRhdGFdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdoaXRlYm9hcmRJbnN0YW5jZS5maWxlZGF0YS5jdXJycGFnZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuZmlsZWRhdGEuY3VycnBhZ2UgPSBOdW1iZXIod2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhLmN1cnJwYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhLnBhZ2VudW0gIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhLnBhZ2VudW0gPSBOdW1iZXIod2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhLnBhZ2VudW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aGl0ZWJvYXJkSW5zdGFuY2UuZmlsZWRhdGEucHB0c2xpZGUgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhLnBwdHNsaWRlID0gTnVtYmVyKHdoaXRlYm9hcmRJbnN0YW5jZS5maWxlZGF0YS5wcHRzbGlkZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdoaXRlYm9hcmRJbnN0YW5jZS5maWxlZGF0YS5wcHRzdGVwICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5maWxlZGF0YS5wcHRzdGVwID0gTnVtYmVyKHdoaXRlYm9hcmRJbnN0YW5jZS5maWxlZGF0YS5wcHRzdGVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhLnN0ZXB0b3RhbCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuZmlsZWRhdGEuc3RlcHRvdGFsID0gTnVtYmVyKHdoaXRlYm9hcmRJbnN0YW5jZS5maWxlZGF0YS5zdGVwdG90YWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmRlZXBBc3NpZ24oe30sIHdoaXRlYm9hcmRJbnN0YW5jZS5maWxlZGF0YSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NsZWFyV2hpdGVib2FyZERhdGFCeUZpbGVpZEFuZEN1cnJwYWdlJyxcblxuXG4gICAgICAgIC8q5riF6Zmk5oyH5a6a5paH5Lu25ZKM6aG15pWw55qE55S756yU5pWw5o2uKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyV2hpdGVib2FyZERhdGFCeUZpbGVpZEFuZEN1cnJwYWdlKGlkLCBmaWxlaWQsIGN1cnJwYWdlKSB7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhpcy5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbY2xlYXJXaGl0ZWJvYXJkRGF0YUJ5RmlsZWlkQW5kQ3VycnBhZ2VdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmlsZWlkICE9IHVuZGVmaW5lZCAmJiBjdXJycGFnZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53YWl0aW5nUHJvY2Vzc1NoYXBlRGF0YVtcIlNoYXJwc0NoYW5nZV9cIiArIGZpbGVpZCArIFwiX1wiICsgY3VycnBhZ2VdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5zdGFja1N0b3JhZ2VbXCJyZWRvU3RhY2tfXCIgKyBmaWxlaWQgKyBcIl9cIiArIGN1cnJwYWdlXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uuc3RhY2tTdG9yYWdlW1widW5kb1N0YWNrX1wiICsgZmlsZWlkICsgXCJfXCIgKyBjdXJycGFnZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHdoaXRlYm9hcmRJbnN0YW5jZS53YWl0aW5nUHJvY2Vzc1NoYXBlRGF0YVtcIlNoYXJwc0NoYW5nZV9cIiArIGZpbGVpZCArIFwiX1wiICsgY3VycnBhZ2VdO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB3aGl0ZWJvYXJkSW5zdGFuY2Uuc3RhY2tTdG9yYWdlW1wicmVkb1N0YWNrX1wiICsgZmlsZWlkICsgXCJfXCIgKyBjdXJycGFnZV07XG4gICAgICAgICAgICAgICAgZGVsZXRlIHdoaXRlYm9hcmRJbnN0YW5jZS5zdGFja1N0b3JhZ2VbXCJ1bmRvU3RhY2tfXCIgKyBmaWxlaWQgKyBcIl9cIiArIGN1cnJwYWdlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5Yqg6L295b2T5YmN6aG155qE55m95p2/5pWw5o2uKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbG9hZEN1cnJwYWdlV2hpdGVib2FyZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkQ3VycnBhZ2VXaGl0ZWJvYXJkKGlkKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjEzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgICAgICAgICAgICBfcmVmMTMkbG9hZFJlZG9TdGFjayA9IF9yZWYxMy5sb2FkUmVkb1N0YWNrLFxuICAgICAgICAgICAgICAgIGxvYWRSZWRvU3RhY2sgPSBfcmVmMTMkbG9hZFJlZG9TdGFjayA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYxMyRsb2FkUmVkb1N0YWNrLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gX3JlZjEzLmNhbGxiYWNrO1xuXG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlID0gdGhpcy5fZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCk7XG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbbG9hZEN1cnJwYWdlV2hpdGVib2FyZF1UaGVyZSBhcmUgbm8gd2hpdGUgYm9hcmQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2NsZWFyUmVkb0FuZFVuZG9TdGFjayh3aGl0ZWJvYXJkSW5zdGFuY2UpOyAvL+a4heepuueZveadv+S4lOa4hemZpOeZveadv+aVsOaNruagiFxuICAgICAgICAgICAgdGhpcy5fYmFzaWNUZW1wbGF0ZVdoaXRlYm9hcmRTaWduYWxsaW5nTGlzdFRvV2hpdGVib2FyZEluc3RhbmNlKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICB2YXIgX3doaXRlYm9hcmRJbnN0YW5jZSRmID0gd2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhLFxuICAgICAgICAgICAgICAgIGZpbGVpZCA9IF93aGl0ZWJvYXJkSW5zdGFuY2UkZi5maWxlaWQsXG4gICAgICAgICAgICAgICAgY3VycnBhZ2UgPSBfd2hpdGVib2FyZEluc3RhbmNlJGYuY3VycnBhZ2U7XG5cbiAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2Uud2FpdGluZ1Byb2Nlc3NTaGFwZURhdGEgPT09IHVuZGVmaW5lZCB8fCB3aGl0ZWJvYXJkSW5zdGFuY2Uud2FpdGluZ1Byb2Nlc3NTaGFwZURhdGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2FpdGluZ1Byb2Nlc3NTaGFwZURhdGEgPSB7fTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJwYWdlV2FpdGluZ1Byb2Nlc3NTaGFwZURhdGEgPSB3aGl0ZWJvYXJkSW5zdGFuY2Uud2FpdGluZ1Byb2Nlc3NTaGFwZURhdGFbXCJTaGFycHNDaGFuZ2VfXCIgKyBmaWxlaWQgKyBcIl9cIiArIGN1cnJwYWdlXTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycnBhZ2VXYWl0aW5nUHJvY2Vzc1NoYXBlRGF0YSAhPT0gbnVsbCAmJiBjdXJycGFnZVdhaXRpbmdQcm9jZXNzU2hhcGVEYXRhICE9PSB1bmRlZmluZWQgJiYgY3VycnBhZ2VXYWl0aW5nUHJvY2Vzc1NoYXBlRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JhdGNoUmVjZWl2ZVNuYXBzaG90KGN1cnJwYWdlV2FpdGluZ1Byb2Nlc3NTaGFwZURhdGEsIHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxvYWRSZWRvU3RhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVkb1N0YWNrID0gd2hpdGVib2FyZEluc3RhbmNlLnN0YWNrU3RvcmFnZVtcInJlZG9TdGFja19cIiArIGZpbGVpZCArIFwiX1wiICsgY3VycnBhZ2VdO1xuICAgICAgICAgICAgICAgIGlmIChyZWRvU3RhY2sgJiYgcmVkb1N0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnJlZG9TdGFjayA9IHJlZG9TdGFjaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hY3Rpb25Jc0Rpc2FibGUod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NhdmVXaGl0ZWJvYXJkU3RhY2tUb1N0b3JhZ2UnLFxuXG5cbiAgICAgICAgLyrkv53lrZjnmb3mnb/mlbDmja7moIjliLDmlbDmja7moIjku5PlupPkuK0qL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZVdoaXRlYm9hcmRTdGFja1RvU3RvcmFnZShpZCkge1xuICAgICAgICAgICAgdmFyIF9yZWYxNCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICAgICAgICAgICAgc2F2ZVJlZG9TdGFjayA9IF9yZWYxNC5zYXZlUmVkb1N0YWNrLFxuICAgICAgICAgICAgICAgIHNhdmVVbmRvU3RhY2sgPSBfcmVmMTQuc2F2ZVVuZG9TdGFjaztcblxuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoaXMuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3NhdmVXaGl0ZWJvYXJkU3RhY2tUb1N0b3JhZ2VdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzYXZlUmVkb1N0YWNrID0gc2F2ZVJlZG9TdGFjayAhPT0gdW5kZWZpbmVkID8gc2F2ZVJlZG9TdGFjayA6IHdoaXRlYm9hcmRJbnN0YW5jZS5zYXZlUmVkb1N0YWNrO1xuICAgICAgICAgICAgc2F2ZVVuZG9TdGFjayA9IHNhdmVVbmRvU3RhY2sgIT09IHVuZGVmaW5lZCA/IHNhdmVVbmRvU3RhY2sgOiB3aGl0ZWJvYXJkSW5zdGFuY2Uuc2F2ZVVuZG9TdGFjaztcblxuICAgICAgICAgICAgdmFyIF9nZXRXaGl0ZWJvYXJkRmlsZWRhdCA9IHRoaXMuZ2V0V2hpdGVib2FyZEZpbGVkYXRhKGlkKSxcbiAgICAgICAgICAgICAgICBmaWxlaWQgPSBfZ2V0V2hpdGVib2FyZEZpbGVkYXQuZmlsZWlkLFxuICAgICAgICAgICAgICAgIGN1cnJwYWdlID0gX2dldFdoaXRlYm9hcmRGaWxlZGF0LmN1cnJwYWdlO1xuICAgICAgICAgICAgLyogIGlmKHNhdmVVbmRvU3RhY2spe1xyXG4gICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uuc3RhY2tTdG9yYWdlW1widW5kb1N0YWNrX1wiK2ZpbGVpZCtcIl9cIitjdXJycGFnZV0gID0gd2hpdGVib2FyZEluc3RhbmNlLmxjLnVuZG9TdGFjay5zbGljZSgwKSA7XHJcbiAgICAgICAgICAgICAgfSovXG5cblxuICAgICAgICAgICAgaWYgKHNhdmVSZWRvU3RhY2spIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uuc3RhY2tTdG9yYWdlW1wicmVkb1N0YWNrX1wiICsgZmlsZWlkICsgXCJfXCIgKyBjdXJycGFnZV0gPSB3aGl0ZWJvYXJkSW5zdGFuY2UubGMucmVkb1N0YWNrLnNsaWNlKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzaG93V2hpdGVib2FyZExvYWRpbmcnLFxuXG5cbiAgICAgICAgLyrmmL7npLrnmb3mnb/mraPlnKhsb2FkaW5nKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dXaGl0ZWJvYXJkTG9hZGluZyhpZCkge1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoaXMuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3Nob3dXaGl0ZWJvYXJkTG9hZGluZ11UaGVyZSBhcmUgbm8gd2hpdGUgYm9hcmQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3Nob3dXaGl0ZWJvYXJkTG9hZGluZyh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoaWRlV2hpdGVib2FyZExvYWRpbmcnLFxuXG5cbiAgICAgICAgLyrpmpDol4/nmb3mnb/mraPlnKhsb2FkaW5nKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVXaGl0ZWJvYXJkTG9hZGluZyhpZCkge1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoaXMuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW3Nob3dXaGl0ZWJvYXJkTG9hZGluZ11UaGVyZSBhcmUgbm8gd2hpdGUgYm9hcmQgTnVtYmVycyB0aGF0IGJlbG9uZyB0byBpZCAnICsgaWQpO3JldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2hpZGVXaGl0ZWJvYXJkTG9hZGluZyh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdpc1doaXRlYm9hcmRUZXh0RWRpdGluZycsXG5cblxuICAgICAgICAvKueZveadv+aYr+WQpuWkhOS6juaWh+acrOeCueWHu+eKtuaAgSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1doaXRlYm9hcmRUZXh0RWRpdGluZyhpZCkge1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoaXMuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW2lzV2hpdGVib2FyZFRleHRFZGl0aW5nXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGlzRWRpdGluZyA9IHdoaXRlYm9hcmRJbnN0YW5jZS5sYy50b29sLm5hbWUudG9TdHJpbmcoKSA9PSBcIlRleHRcIiAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UubGMudG9vbC5jdXJyZW50U2hhcGVTdGF0ZSA9PSBcImVkaXRpbmdcIjtcbiAgICAgICAgICAgIHJldHVybiBpc0VkaXRpbmc7XG4gICAgICAgIH1cblxuICAgICAgICAvKuajgOa1i+eZveadv0NhbnZhc+Wkp+WwjyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NoZWNrV2hpdGVib2FyZENhbnZhc1NpemUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tXaGl0ZWJvYXJkQ2FudmFzU2l6ZShpZCkge1xuICAgICAgICAgICAgdmFyIF9yZWYxNSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICAgICAgICAgICAgX3JlZjE1JGlzUmVzaXplID0gX3JlZjE1LmlzUmVzaXplLFxuICAgICAgICAgICAgICAgIGlzUmVzaXplID0gX3JlZjE1JGlzUmVzaXplID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYxNSRpc1Jlc2l6ZTtcblxuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoaXMuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW2NoZWNrV2hpdGVib2FyZENhbnZhc1NpemVdVGhlcmUgYXJlIG5vIHdoaXRlIGJvYXJkIE51bWJlcnMgdGhhdCBiZWxvbmcgdG8gaWQgJyArIGlkKTtyZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmxjICYmIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5jYW52YXMpIHtcbiAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmxjLmNhbnZhcy53aWR0aCA9PT0gMCB8fCB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuY2FudmFzLmhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZXNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZVdoaXRlYm9hcmRIYW5kbGVyKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rvd25DYW52YXNJbWFnZVRvTG9jYWxGaWxlJyxcblxuXG4gICAgICAgIC8q5LiL6L2955S75p2/Y2FudmFz5Zu+54mHKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRvd25DYW52YXNJbWFnZVRvTG9jYWxGaWxlKGlkKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3BuZyc7XG5cbiAgICAgICAgICAgIHZhciBfZml4dHlwZSA9IGZ1bmN0aW9uIF9maXh0eXBlKHR5cGUpIHtcbiAgICAgICAgICAgICAgICB0eXBlID0gdHlwZS50b0xvY2FsZUxvd2VyQ2FzZSgpLnJlcGxhY2UoL2pwZy9pLCAnanBlZycpO1xuICAgICAgICAgICAgICAgIHZhciByID0gdHlwZS5tYXRjaCgvcG5nfGpwZWd8Ym1wfGdpZi8pWzBdO1xuICAgICAgICAgICAgICAgIHJldHVybiAnaW1hZ2UvJyArIHI7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIF9zYXZhRmlsZSA9IGZ1bmN0aW9uIF9zYXZhRmlsZShkYXRhLCBmaWxlbmFtZSkge1xuICAgICAgICAgICAgICAgIC8v5bCG5Zu+54mH5L+d5a2Y5Yiw5pys5ZywXG4gICAgICAgICAgICAgICAgdmFyIHNhdmVfbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsICdhJyk7XG4gICAgICAgICAgICAgICAgc2F2ZV9saW5rLmhyZWYgPSBkYXRhO1xuICAgICAgICAgICAgICAgIHNhdmVfbGluay5kb3dubG9hZCA9IGZpbGVuYW1lO1xuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50cycpO1xuICAgICAgICAgICAgICAgIGV2ZW50LmluaXRNb3VzZUV2ZW50KCdjbGljaycsIHRydWUsIGZhbHNlLCB3aW5kb3csIDAsIDAsIDAsIDAsIDAsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsKTtcbiAgICAgICAgICAgICAgICBzYXZlX2xpbmsuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoaXMuX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcignW2Rvd25DYW52YXNJbWFnZVRvTG9jYWxGaWxlXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGltZ0Jhc2U2NCA9IHRoaXMuX2NvbnZlcnRDYW52YXNUb0ltYWdlQmFzZTY0KHdoaXRlYm9hcmRJbnN0YW5jZSwgdHlwZSk7XG4gICAgICAgICAgICBpbWdCYXNlNjQgPSBpbWdCYXNlNjQucmVwbGFjZShfZml4dHlwZSh0eXBlKSwgJ2ltYWdlL29jdGV0LXN0cmVhbScpOyAvL+Wwhm1pbWUtdHlwZeaUueS4umltYWdlL29jdGV0LXN0cmVhbSzlvLrliLborqnmtY/op4jlmajkuIvovb1cbiAgICAgICAgICAgIHZhciBmaWxlbmFtZSA9ICh3aGl0ZWJvYXJkSW5zdGFuY2Uubmlja25hbWUgPyB3aGl0ZWJvYXJkSW5zdGFuY2Uubmlja25hbWUgKyBcIl9cIiA6IFwiXCIpICsgd2hpdGVib2FyZEluc3RhbmNlLmlkICsgJ18nICsgbmV3IERhdGUoKS5nZXRUaW1lKCkgKyAnLicgKyB0eXBlO1xuICAgICAgICAgICAgX3NhdmFGaWxlKGltZ0Jhc2U2NCwgZmlsZW5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrojrflj5bnmb3mnb/lt6Xlhbfkv6Hmga8qL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRXaGl0ZWJvYXJkVG9vbHNJbmZvJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFdoaXRlYm9hcmRUb29sc0luZm8oaWQpIHtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGlzLl9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tnZXRXaGl0ZWJvYXJkVG9vbHNJbmZvXVRoZXJlIGFyZSBubyB3aGl0ZSBib2FyZCBOdW1iZXJzIHRoYXQgYmVsb25nIHRvIGlkICcgKyBpZCk7cmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5kZWVwQXNzaWduKHt9LCB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mbyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKua4heepuueZveadv+S4lOa4hemZpOeZveadv+aVsOaNruagiCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19jbGVhclJlZG9BbmRVbmRvU3RhY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2NsZWFyUmVkb0FuZFVuZG9TdGFjayh3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciBfcmVmMTYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgICAgICAgICAgIF9yZWYxNiRjbGVhciA9IF9yZWYxNi5jbGVhcixcbiAgICAgICAgICAgICAgICBjbGVhciA9IF9yZWYxNiRjbGVhciA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYxNiRjbGVhcixcbiAgICAgICAgICAgICAgICBfcmVmMTYkcmVkbyA9IF9yZWYxNi5yZWRvLFxuICAgICAgICAgICAgICAgIHJlZG8gPSBfcmVmMTYkcmVkbyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYxNiRyZWRvLFxuICAgICAgICAgICAgICAgIF9yZWYxNiR1bmRvID0gX3JlZjE2LnVuZG8sXG4gICAgICAgICAgICAgICAgdW5kbyA9IF9yZWYxNiR1bmRvID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZjE2JHVuZG87XG5cbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIGlmIChjbGVhcikge1xuICAgICAgICAgICAgICAgIHRoYXQuX2NsZWFyTGMod2hpdGVib2FyZEluc3RhbmNlLCB7IHRyaWdnZXJFdmVudDogZmFsc2UgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHJlZG8pIHtcbiAgICAgICAgICAgICAgICB0aGF0Ll9jbGVhckxjUmVkb1N0YWNrKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHVuZG8pIHtcbiAgICAgICAgICAgICAgICB0aGF0Ll9jbGVhckxjVW5kb1N0YWNrKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhhdC5fYWN0aW9uSXNEaXNhYmxlKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGF0Ll9yZXNpemVXaGl0ZWJvYXJkSGFuZGxlcih3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ191cGRhdGVXaGl0ZWJvYXJkRmlsZWRhdGEnLFxuXG5cbiAgICAgICAgLyrmm7TmlrDnmb3mnb/nmoRmaWxlZGF0YeaVsOaNriovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlV2hpdGVib2FyZEZpbGVkYXRhKHdoaXRlYm9hcmRJbnN0YW5jZSwgZmlsZWRhdGEpIHtcbiAgICAgICAgICAgIGlmIChmaWxlZGF0YSAmJiAodHlwZW9mIGZpbGVkYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihmaWxlZGF0YSkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGlmIChmaWxlZGF0YS5jdXJycGFnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVkYXRhLmN1cnJwYWdlID0gTnVtYmVyKGZpbGVkYXRhLmN1cnJwYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGZpbGVkYXRhLnBhZ2VudW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBmaWxlZGF0YS5wYWdlbnVtID0gTnVtYmVyKGZpbGVkYXRhLnBhZ2VudW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZmlsZWRhdGEucHB0c2xpZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBmaWxlZGF0YS5wcHRzbGlkZSA9IE51bWJlcihmaWxlZGF0YS5wcHRzbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmaWxlZGF0YS5wcHRzdGVwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZWRhdGEucHB0c3RlcCA9IE51bWJlcihmaWxlZGF0YS5wcHRzdGVwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGZpbGVkYXRhLnN0ZXB0b3RhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVkYXRhLnN0ZXB0b3RhbCA9IE51bWJlcihmaWxlZGF0YS5zdGVwdG90YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKmlmKCBmaWxlZGF0YS5jdXJycGFnZSAhPT0gdW5kZWZpbmVkICl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZmlsZWRhdGEuY3VycnBhZ2UgPiB3aGl0ZWJvYXJkSW5zdGFuY2UuZmlsZWRhdGEucGFnZW51bSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlZGF0YS5jdXJycGFnZSA9IHdoaXRlYm9hcmRJbnN0YW5jZS5maWxlZGF0YS5wYWdlbnVtIDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZmlsZWRhdGEuY3VycnBhZ2UgPCAxKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZWRhdGEuY3VycnBhZ2UgPSAxIDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiggZmlsZWRhdGEucHB0c2xpZGUgIT09IHVuZGVmaW5lZCApe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGZpbGVkYXRhLnBwdHNsaWRlID4gd2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhLnBhZ2VudW0gKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZWRhdGEucHB0c2xpZGUgPSB3aGl0ZWJvYXJkSW5zdGFuY2UuZmlsZWRhdGEucGFnZW51bSA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGZpbGVkYXRhLnBwdHNsaWRlIDwgMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVkYXRhLnBwdHNsaWRlID0gMSA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSovXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZXBBc3NpZ24od2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhLCBmaWxlZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZSAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlciAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlci5ub3RpY2VVcGRhdGVXaGl0ZWJvYXJkRmlsZWRhdGFDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAvKiBjbGVhclRpbWVvdXQoIHdoaXRlYm9hcmRJbnN0YW5jZS5ub3RpY2VVcGRhdGVXaGl0ZWJvYXJkRmlsZWRhdGFUaW1lciApIDtcclxuICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLm5vdGljZVVwZGF0ZVdoaXRlYm9hcmRGaWxlZGF0YVRpbWVyID0gc2V0VGltZW91dCggKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYod2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIgJiYgd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIubm90aWNlVXBkYXRlV2hpdGVib2FyZEZpbGVkYXRhQ2FsbGJhY2spe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5oYW5kbGVyLm5vdGljZVVwZGF0ZVdoaXRlYm9hcmRGaWxlZGF0YUNhbGxiYWNrKCB3aGl0ZWJvYXJkSW5zdGFuY2UuZmlsZWRhdGEgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICB9ICwgMTAwKTsqL1xuICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIgJiYgd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIubm90aWNlVXBkYXRlV2hpdGVib2FyZEZpbGVkYXRhQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5oYW5kbGVyLm5vdGljZVVwZGF0ZVdoaXRlYm9hcmRGaWxlZGF0YUNhbGxiYWNrKHdoaXRlYm9hcmRJbnN0YW5jZS5maWxlZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19iYXRjaFJlY2VpdmVTbmFwc2hvdCcsXG5cblxuICAgICAgICAvKuaJuemHj+aOpeaUtueZveadv+aVsOaNruaTjeS9nHNoYXBl55S75Zu+Ki9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9iYXRjaFJlY2VpdmVTbmFwc2hvdChzaGFwZXNBcnJheSwgd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2hhcGVzQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ3NoYXBlc0FycmF5IG11c3QgYmUgYW4gYXJyYXkhJyk7cmV0dXJuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNoYXBlc0FycmF5LmZvckVhY2goZnVuY3Rpb24gKHJlbW90ZURhdGEsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvTm90UGFpbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gc2hhcGVzQXJyYXkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBkb05vdFBhaW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoYXQuX2hhbmRsZXJSZW1vdGVEYXRhVG9XaGl0ZWJvYXJkKHJlbW90ZURhdGEsIGRvTm90UGFpbnQsIHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoYXQuX2FjdGlvbklzRGlzYWJsZSh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfcmVjZWl2ZVNuYXBzaG90JyxcblxuXG4gICAgICAgIC8qIOaOpeaUtueZveadv+aVsOaNruaTjeS9nHNoYXBl55S75Zu+Ki9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWNlaXZlU25hcHNob3QocmVtb3RlRGF0YSwgd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZG9Ob3RQYWludCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhhdC5faGFuZGxlclJlbW90ZURhdGFUb1doaXRlYm9hcmQocmVtb3RlRGF0YSwgZG9Ob3RQYWludCwgd2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgIHRoYXQuX2FjdGlvbklzRGlzYWJsZSh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfaGFuZGxlclJlbW90ZURhdGFUb1doaXRlYm9hcmQnLFxuXG5cbiAgICAgICAgLyrlpITnkIbov5znqIvnmoTmlbDmja7liLDnmb3mnb/kuIoqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZXJSZW1vdGVEYXRhVG9XaGl0ZWJvYXJkKHJlbW90ZURhdGEpIHtcbiAgICAgICAgICAgIHZhciBkb05vdFBhaW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSBhcmd1bWVudHNbMl07XG5cbiAgICAgICAgICAgIGlmIChyZW1vdGVEYXRhLmRhdGEgJiYgdHlwZW9mIHJlbW90ZURhdGEuZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZW1vdGVEYXRhLmRhdGEgPSBKU09OLnBhcnNlKHJlbW90ZURhdGEuZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVtb3RlRGF0YS5kYXRhICE9IG51bGwgJiYgcmVtb3RlRGF0YS5kYXRhLmV2ZW50VHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlbW90ZURhdGEuc291cmNlID09PSAnZGVsbXNnJykge1xuICAgICAgICAgICAgICAgICAgICAvL+WbnuaUvueahGRlbG1zZ+aVsOaNruS4jeaYr+WPkemAgeS4iuWOu+eahOaVsOaNru+8jOiAjOaYr+aSpOmUgOeahOWKqOS9nOeahOebuOWFs+aPj+i/sO+8jOaJgOS7pei/memHjOmcgOimgeWBmuWFvOWuue+8jOWmguaenOaYr+adpeiHquS6jmRlbG1zZ+eahOWImeS6i+S7tuexu+Wei+S4unNoYXBlU2F2ZUV2ZW505ZKMY2xlYXJFdmVudOS5n+aJp+ihjOaSpOmUgOaTjeS9nFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHJlbW90ZURhdGEuZGF0YS5ldmVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzaGFwZVNhdmVFdmVudFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNsZWFyRXZlbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1bmRvRXZlbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3RlRGF0YS5kYXRhLmFjdGlvbk5hbWUgJiYgcmVtb3RlRGF0YS5kYXRhLmFjdGlvbk5hbWUgPT09IFwiQWRkU2hhcGVBY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMudW5kbyhmYWxzZSwgcmVtb3RlRGF0YS5kYXRhLnNoYXBlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVSZW1pbmRDb250ZW50QnlFbGVtZW50SWQod2hpdGVib2FyZEluc3RhbmNlLCBcIndoaXRlYm9hcmRfcmVtaW5kX1wiICsgcmVtb3RlRGF0YS5kYXRhLnNoYXBlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVtb3RlRGF0YS5kYXRhLmFjdGlvbk5hbWUgJiYgcmVtb3RlRGF0YS5kYXRhLmFjdGlvbk5hbWUgPT09IFwiQ2xlYXJBY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMudW5kbyhmYWxzZSwgcmVtb3RlRGF0YS5kYXRhLmNsZWFyQWN0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocmVtb3RlRGF0YS5kYXRhLmV2ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNoYXBlU2F2ZUV2ZW50XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZSAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UubGMgJiYgd2hpdGVib2FyZEluc3RhbmNlLmxjLnVuZG9TdGFjayAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UubGMudW5kb1N0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzQnJlYWsgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHdoaXRlYm9hcmRJbnN0YW5jZS5sYy51bmRvU3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHdoaXRlYm9hcmRJbnN0YW5jZS5sYy51bmRvU3RhY2tbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHZhbHVlLmFjdGlvbk5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQWRkU2hhcGVBY3Rpb25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLnNoYXBlSWQgPT09IHJlbW90ZURhdGEuZGF0YS5zaGFwZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUudW5kbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnVuZG8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy51bmRvU3RhY2suc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNCcmVhayA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNCcmVhaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdGVEYXRhLmRhdGEgJiYgcmVtb3RlRGF0YS5kYXRhLmRhdGEgJiYgcmVtb3RlRGF0YS5kYXRhLmRhdGEuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVEYXRhLmRhdGEuZGF0YSA9IHdpbmRvdy5MQy5KU09OVG9TaGFwZShyZW1vdGVEYXRhLmRhdGEuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5zYXZlU2hhcGUocmVtb3RlRGF0YS5kYXRhLmRhdGEsIGZhbHNlLCBudWxsLCBkb05vdFBhaW50LCByZW1vdGVEYXRhLmZyb21JRCwgcmVtb3RlRGF0YS5zZXEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVuZG9FdmVudFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdGVEYXRhLmRhdGEuYWN0aW9uTmFtZSAmJiByZW1vdGVEYXRhLmRhdGEuYWN0aW9uTmFtZSA9PT0gXCJBZGRTaGFwZUFjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy51bmRvKGZhbHNlLCByZW1vdGVEYXRhLmRhdGEuc2hhcGVJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVJlbWluZENvbnRlbnRCeUVsZW1lbnRJZCh3aGl0ZWJvYXJkSW5zdGFuY2UsIFwid2hpdGVib2FyZF9yZW1pbmRfXCIgKyByZW1vdGVEYXRhLmRhdGEuc2hhcGVJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZW1vdGVEYXRhLmRhdGEuYWN0aW9uTmFtZSAmJiByZW1vdGVEYXRhLmRhdGEuYWN0aW9uTmFtZSA9PT0gXCJDbGVhckFjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy51bmRvKGZhbHNlLCByZW1vdGVEYXRhLmRhdGEuY2xlYXJBY3Rpb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJlZG9FdmVudFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdGVEYXRhLmRhdGEuYWN0aW9uTmFtZSAmJiByZW1vdGVEYXRhLmRhdGEuYWN0aW9uTmFtZSA9PT0gXCJBZGRTaGFwZUFjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1JlZG8gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTQgPSB3aGl0ZWJvYXJkSW5zdGFuY2UubGMudW5kb1N0YWNrLmxlbmd0aCAtIDE7IF9pNCA+PSAwOyBfaTQtLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW90ZURhdGEuZGF0YS5zaGFwZUlkID09PSB3aGl0ZWJvYXJkSW5zdGFuY2UubGMudW5kb1N0YWNrW19pNF0uc2hhcGVJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVkbyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JlZG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbGFnID0gZmFsc2U7IC8v5oGi5aSN5qCI5Lit5piv5ZCm5pyJ6K+lc2hhcGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pNSA9IHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5yZWRvU3RhY2subGVuZ3RoIC0gMTsgX2k1ID49IDA7IF9pNS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW90ZURhdGEuZGF0YS5zaGFwZUlkID09PSB3aGl0ZWJvYXJkSW5zdGFuY2UubGMucmVkb1N0YWNrW19pNV0uc2hhcGVJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3doaXRlYm9hcmRJbnN0YW5jZS5sYy5yZWRvU3RhY2suc3BsaWNlKGksMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmxhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5yZWRvKGZhbHNlLCByZW1vdGVEYXRhLmRhdGEuc2hhcGVJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdGVEYXRhLmRhdGEgJiYgcmVtb3RlRGF0YS5kYXRhLmRhdGEgJiYgcmVtb3RlRGF0YS5kYXRhLmRhdGEuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVEYXRhLmRhdGEuZGF0YSA9IHdpbmRvdy5MQy5KU09OVG9TaGFwZShyZW1vdGVEYXRhLmRhdGEuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVtb3RlRGF0YSRkYXRhJG90aGUgPSByZW1vdGVEYXRhLmRhdGEub3RoZXJJbmZvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlckluZm8gPSBfcmVtb3RlRGF0YSRkYXRhJG90aGUgPT09IHVuZGVmaW5lZCA/IHsgYXV0aG9yVXNlcklkOiByZW1vdGVEYXRhLmZyb21JRCwgc2VxOiByZW1vdGVEYXRhLnNlcSB9IDogX3JlbW90ZURhdGEkZGF0YSRvdGhlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnNhdmVTaGFwZShyZW1vdGVEYXRhLmRhdGEuZGF0YSwgZmFsc2UsIG51bGwsIGRvTm90UGFpbnQsIG90aGVySW5mby5hdXRob3JVc2VySWQsIG90aGVySW5mby5zZXEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZW1vdGVEYXRhLmRhdGEuYWN0aW9uTmFtZSAmJiByZW1vdGVEYXRhLmRhdGEuYWN0aW9uTmFtZSA9PT0gXCJDbGVhckFjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXNSZWRvID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2k2ID0gd2hpdGVib2FyZEluc3RhbmNlLmxjLnVuZG9TdGFjay5sZW5ndGggLSAxOyBfaTYgPj0gMDsgX2k2LS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdGVEYXRhLmRhdGEuY2xlYXJBY3Rpb25JZCA9PT0gd2hpdGVib2FyZEluc3RhbmNlLmxjLnVuZG9TdGFja1tfaTZdLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2lzUmVkbyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNSZWRvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2ZsYWcgPSBmYWxzZTsgLy/mgaLlpI3moIjkuK3mmK/lkKbmnInor6VzaGFwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2k3ID0gd2hpdGVib2FyZEluc3RhbmNlLmxjLnJlZG9TdGFjay5sZW5ndGggLSAxOyBfaTcgPj0gMDsgX2k3LS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3RlRGF0YS5kYXRhLmNsZWFyQWN0aW9uSWQgPT09IHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5yZWRvU3RhY2tbX2k3XS5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZmxhZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZmxhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5yZWRvKGZhbHNlLCByZW1vdGVEYXRhLmRhdGEuY2xlYXJBY3Rpb25JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQWxsUmVtaW5kQ29udGVudCh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3doaXRlYm9hcmRJbnN0YW5jZS5sYy5jbGVhcihmYWxzZSAsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVtb3RlRGF0YSRkYXRhJG90aGUyID0gcmVtb3RlRGF0YS5kYXRhLm90aGVySW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX290aGVySW5mbyA9IF9yZW1vdGVEYXRhJGRhdGEkb3RoZTIgPT09IHVuZGVmaW5lZCA/IHsgYXV0aG9yVXNlcklkOiByZW1vdGVEYXRhLmZyb21JRCwgdG9BdXRob3JVc2VySWQ6IHVuZGVmaW5lZCwgc2VxOiByZW1vdGVEYXRhLnNlcSB9IDogX3JlbW90ZURhdGEkZGF0YSRvdGhlMjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5jbGVhcihmYWxzZSwgcmVtb3RlRGF0YS5kYXRhLmNsZWFyQWN0aW9uSWQsIF9vdGhlckluZm8uYXV0aG9yVXNlcklkLCBfb3RoZXJJbmZvLnRvQXV0aG9yVXNlcklkLCBfb3RoZXJJbmZvLnNlcSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQWxsUmVtaW5kQ29udGVudCh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNsZWFyRXZlbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuY2xlYXIoZmFsc2UgLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuY2xlYXIoZmFsc2UsIHJlbW90ZURhdGEuZGF0YS5jbGVhckFjdGlvbklkLCByZW1vdGVEYXRhLmZyb21JRCwgcmVtb3RlRGF0YS5kYXRhLnRvQXV0aG9yVXNlcklkLCByZW1vdGVEYXRhLnNlcSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQWxsUmVtaW5kQ29udGVudCh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImxhc2VyTWFya0V2ZW50XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc2VyTWFyayA9IHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5jb250YWluZXJFbC5wYXJlbnROb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJsYXNlci1tYXJrXCIpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocmVtb3RlRGF0YS5kYXRhLmFjdGlvbk5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNob3dcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc2VyTWFyay5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaGlkZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzZXJNYXJrLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1vdmVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdGVEYXRhLmRhdGEgJiYgcmVtb3RlRGF0YS5kYXRhLmxhc2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlZnQgPSByZW1vdGVEYXRhLmRhdGEubGFzZXIubGVmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9wID0gcmVtb3RlRGF0YS5kYXRhLmxhc2VyLnRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXNlck1hcmsuc3R5bGUubGVmdCA9IGxlZnQgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXNlck1hcmsuc3R5bGUudG9wID0gdG9wICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3Byb2R1Y3Rpb25Ub29sRGVzYycsXG5cblxuICAgICAgICAvKueUn+S6p+agh+azqOW3peWFt+eahOaPj+i/sOS/oeaBryovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcHJvZHVjdGlvblRvb2xEZXNjKHRvb2xLZXksIHRvb2xWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHRvb2xEZXNjID0ge1xuICAgICAgICAgICAgICAgIHRvb2xLZXk6IHRvb2xLZXksXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHRvb2xEZXNjO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfbm90aWNlVXBkYXRlVG9vbERlc2MnLFxuXG5cbiAgICAgICAgLyrpgJrnn6Xnmb3mnb/lt6Xlhbfmm7TmlrDnmoTmtojmga/nu5nkuIrlsYIqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX25vdGljZVVwZGF0ZVRvb2xEZXNjKHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZSAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UuaXNSZWdpc3RlcldoaXRlYm9hcmRUb29sKSB7XG4gICAgICAgICAgICAgICAgLypjbGVhclRpbWVvdXQoIHdoaXRlYm9hcmRJbnN0YW5jZS5ub3RpY2VVcGRhdGVUb29sRGVzY1RpbWVyICkgO1xyXG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLm5vdGljZVVwZGF0ZVRvb2xEZXNjVGltZXIgPSBzZXRUaW1lb3V0KCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYod2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIgJiYgd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIubm90aWNlVXBkYXRlVG9vbERlc2NDYWxsYmFjayl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5oYW5kbGVyLm5vdGljZVVwZGF0ZVRvb2xEZXNjQ2FsbGJhY2sod2hpdGVib2FyZEluc3RhbmNlLnJlZ2lzdGVyV2hpdGVib2FyZFRvb2xzTGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSAsIDEwMCk7Ki9cbiAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIgJiYgd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIubm90aWNlVXBkYXRlVG9vbERlc2NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlci5ub3RpY2VVcGRhdGVUb29sRGVzY0NhbGxiYWNrKHdoaXRlYm9hcmRJbnN0YW5jZS5yZWdpc3RlcldoaXRlYm9hcmRUb29sc0xpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3VwZGF0ZVRvb2xEZXNjJyxcblxuXG4gICAgICAgIC8q5pu05paw5qCH5rOo5bel5YW355qE5o+P6L+w5L+h5oGvKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVUb29sRGVzYyh3aGl0ZWJvYXJkSW5zdGFuY2UsIHRvb2xLZXksIHRvb2xWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5yZWdpc3RlcldoaXRlYm9hcmRUb29sc0xpc3RbdG9vbEtleV0pIHtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjYgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I2ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNiA9IE9iamVjdC5lbnRyaWVzKHRvb2xWYWx1ZSlbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDY7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgPSAoX3N0ZXA2ID0gX2l0ZXJhdG9yNi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTcgPSBfc3RlcDYudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTggPSBfc2xpY2VkVG9BcnJheShfcmVmMTcsIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gX3JlZjE4WzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gX3JlZjE4WzFdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLnJlZ2lzdGVyV2hpdGVib2FyZFRvb2xzTGlzdFt0b29sS2V5XVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UucmVnaXN0ZXJXaGl0ZWJvYXJkVG9vbHNMaXN0W3Rvb2xLZXldW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjYgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjYgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgJiYgX2l0ZXJhdG9yNi5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I2LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I3ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I3ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjcgPSBPYmplY3Qua2V5cyh3aGl0ZWJvYXJkSW5zdGFuY2UucmVnaXN0ZXJXaGl0ZWJvYXJkVG9vbHNMaXN0KVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNyA9IChfc3RlcDcgPSBfaXRlcmF0b3I3Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb243ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2tleTMgPSBfc3RlcDcudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKC90b29sXy9nLnRlc3QoX2tleTMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UucmVnaXN0ZXJXaGl0ZWJvYXJkVG9vbHNMaXN0W19rZXkzXS5pc1VzZSA9IF9rZXkzID09PSB3aGl0ZWJvYXJkSW5zdGFuY2UuYWN0aXZlVG9vbDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvem9vbV8vZy50ZXN0KF9rZXkzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLnJlZ2lzdGVyV2hpdGVib2FyZFRvb2xzTGlzdFtfa2V5M10uem9vbSA9IHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkTWFnbmlmaWNhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNyA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I3ID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb243ICYmIF9pdGVyYXRvcjcucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I3LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I3O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfYmF0Y2hVcGRhdGVUb29sRGVzYycsXG5cblxuICAgICAgICAvKuaJuemHj+abtOaWsOW3peWFt+aPj+i/sCovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYmF0Y2hVcGRhdGVUb29sRGVzYyh3aGl0ZWJvYXJkSW5zdGFuY2UsIHVwZGF0ZURlc2NBcnJheSkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHVwZGF0ZURlc2NBcnJheSkpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci5lcnJvcigndXBkYXRlRGVzY0FycmF5IG11c3QgYmUgYW4gYXJyYXkgLCB3aGl0ZWJvYXJkIGlkIGlzICcgKyB3aGl0ZWJvYXJkSW5zdGFuY2UuaWQgKyAnIScpO3JldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjggPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yOCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yOCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I4ID0gdXBkYXRlRGVzY0FycmF5W1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA4OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb244ID0gKF9zdGVwOCA9IF9pdGVyYXRvcjgubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjggPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjID0gX3N0ZXA4LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRlc2MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll91cGRhdGVUb29sRGVzYyh3aGl0ZWJvYXJkSW5zdGFuY2UsIGRlc2NbMF0sIGRlc2NbMV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I4ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjggPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjggJiYgX2l0ZXJhdG9yOC5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjgucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19zZXRXaGl0ZWJvYXJkVG9vbHMnLFxuXG5cbiAgICAgICAgLyrorr7nva7nmb3mnb/nmoTmoIfms6jlt6XlhbcqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFdoaXRlYm9hcmRUb29scyh0b29sS2V5LCB3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciBfc2V0V2hpdGVib2FyZFRvb2xzRnJvbUlubmVyID0gZnVuY3Rpb24gX3NldFdoaXRlYm9hcmRUb29sc0Zyb21Jbm5lcih3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9vbCA9IHRoYXQuX3Byb2R1Y3Rpb25Ub29sQnlDb3JlKHRvb2xLZXksIHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnNldFRvb2wodG9vbCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhhdC5fYXV0b21hdGljVHJhdmVyc2VXaGl0ZWJvYXJkSW5zdGFuY2Uod2hpdGVib2FyZEluc3RhbmNlLCBfc2V0V2hpdGVib2FyZFRvb2xzRnJvbUlubmVyKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3Byb2R1Y3Rpb25Ub29sQnlDb3JlJyxcblxuXG4gICAgICAgIC8q55Sf5Lqn55m95p2/5qC45b+D5bGC5bel5YW377yM6YCa6L+H55m95p2/5qC45b+D5bGC5p2l55Sf5LqnKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9kdWN0aW9uVG9vbEJ5Q29yZSh0b29sS2V5LCB3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciB0b29sID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHRoYXQudXNlV2hpdGVib2FyZFRvb2xbdG9vbEtleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdUaGUgd2hpdGVib2FyZCBkb2VzIG5vdCBoYXZlIHRoZSAnICsgdG9vbEtleSArICcgdG9vbCEnKTtyZXR1cm4gdG9vbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAodG9vbEtleSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xfcGVuY2lsJzpcbiAgICAgICAgICAgICAgICAgICAgLy/nrJRcbiAgICAgICAgICAgICAgICAgICAgdG9vbCA9IG5ldyB3aW5kb3cuTEMudG9vbHMuUGVuY2lsKHdoaXRlYm9hcmRJbnN0YW5jZS5sYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xfaGlnaGxpZ2h0ZXInOlxuICAgICAgICAgICAgICAgICAgICAvL+iNp+WFieeslFxuICAgICAgICAgICAgICAgICAgICB0b29sID0gbmV3IHdpbmRvdy5MQy50b29scy5QZW5jaWwod2hpdGVib2FyZEluc3RhbmNlLmxjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndG9vbF9saW5lJzpcbiAgICAgICAgICAgICAgICAgICAgLy/nm7Tnur9cbiAgICAgICAgICAgICAgICAgICAgdG9vbCA9IG5ldyB3aW5kb3cuTEMudG9vbHMuTGluZSh3aGl0ZWJvYXJkSW5zdGFuY2UubGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd0b29sX2Fycm93JzpcbiAgICAgICAgICAgICAgICAgICAgLy/nrq3lpLRcbiAgICAgICAgICAgICAgICAgICAgdG9vbCA9IG5ldyB3aW5kb3cuTEMudG9vbHMuTGluZSh3aGl0ZWJvYXJkSW5zdGFuY2UubGMpO1xuICAgICAgICAgICAgICAgICAgICB0b29sLmhhc0VuZEFycm93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndG9vbF9kYXNoZWQnOlxuICAgICAgICAgICAgICAgICAgICAvL+iZmue6v1xuICAgICAgICAgICAgICAgICAgICB0b29sID0gbmV3IHdpbmRvdy5MQy50b29scy5MaW5lKHdoaXRlYm9hcmRJbnN0YW5jZS5sYyk7XG4gICAgICAgICAgICAgICAgICAgIHRvb2wuaXNEYXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd0b29sX2VyYXNlcic6XG4gICAgICAgICAgICAgICAgICAgIC8v5qmh55quXG4gICAgICAgICAgICAgICAgICAgIHRvb2wgPSBuZXcgd2luZG93LkxDLnRvb2xzLkVyYXNlcih3aGl0ZWJvYXJkSW5zdGFuY2UubGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd0b29sX3RleHQnOlxuICAgICAgICAgICAgICAgICAgICAvL+aWh+Wtl1xuICAgICAgICAgICAgICAgICAgICB0b29sID0gbmV3IHdpbmRvdy5MQy50b29scy5UZXh0KHdoaXRlYm9hcmRJbnN0YW5jZS5sYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xfcmVjdGFuZ2xlJzpcbiAgICAgICAgICAgICAgICAgICAgLy/nn6nlvaJcbiAgICAgICAgICAgICAgICAgICAgdG9vbCA9IG5ldyB3aW5kb3cuTEMudG9vbHMuUmVjdGFuZ2xlKHdoaXRlYm9hcmRJbnN0YW5jZS5sYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xfcmVjdGFuZ2xlX2VtcHR5JzpcbiAgICAgICAgICAgICAgICAgICAgLy/nqbrlv4Pnn6nlvaJcbiAgICAgICAgICAgICAgICAgICAgdG9vbCA9IG5ldyB3aW5kb3cuTEMudG9vbHMuUmVjdGFuZ2xlKHdoaXRlYm9hcmRJbnN0YW5jZS5sYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xfZWxsaXBzZSc6XG4gICAgICAgICAgICAgICAgICAgIC8v5qSt5ZyGXG4gICAgICAgICAgICAgICAgICAgIHRvb2wgPSBuZXcgd2luZG93LkxDLnRvb2xzLkVsbGlwc2Uod2hpdGVib2FyZEluc3RhbmNlLmxjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndG9vbF9lbGxpcHNlX2VtcHR5JzpcbiAgICAgICAgICAgICAgICAgICAgLy/nqbrlv4PmpK3lnIZcbiAgICAgICAgICAgICAgICAgICAgdG9vbCA9IG5ldyB3aW5kb3cuTEMudG9vbHMuRWxsaXBzZSh3aGl0ZWJvYXJkSW5zdGFuY2UubGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd0b29sX3BvbHlnb24nOlxuICAgICAgICAgICAgICAgICAgICAvL+Wkmui+ueW9olxuICAgICAgICAgICAgICAgICAgICB0b29sID0gbmV3IHdpbmRvdy5MQy50b29scy5Qb2x5Z29uKHdoaXRlYm9hcmRJbnN0YW5jZS5sYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xfZXllZHJvcHBlcic6XG4gICAgICAgICAgICAgICAgICAgIC8v5ZC4566hXG4gICAgICAgICAgICAgICAgICAgIHRvb2wgPSBuZXcgd2luZG93LkxDLnRvb2xzLkV5ZWRyb3BwZXIod2hpdGVib2FyZEluc3RhbmNlLmxjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndG9vbF9zZWxlY3RTaGFwZSc6XG4gICAgICAgICAgICAgICAgICAgIC8v6YCJ5Lit5ouW5YqoXG4gICAgICAgICAgICAgICAgICAgIHRvb2wgPSBuZXcgd2luZG93LkxDLnRvb2xzLlNlbGVjdFNoYXBlKHdoaXRlYm9hcmRJbnN0YW5jZS5sYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xfbW91c2UnOlxuICAgICAgICAgICAgICAgICAgICAvL+m8oOagh1xuICAgICAgICAgICAgICAgICAgICB0b29sID0gd2hpdGVib2FyZEluc3RhbmNlLmxjLnRvb2w7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xfbGFzZXInOlxuICAgICAgICAgICAgICAgICAgICAvL+a/gOWFieeslFxuICAgICAgICAgICAgICAgICAgICB0b29sID0gd2hpdGVib2FyZEluc3RhbmNlLmxjLnRvb2w7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ1Rvb2wgJyArIHRvb2xLZXkgKyAnIGlzIG5vdCBjcmVhdGVkIGluIHRoZSB3aGl0ZWJvYXJkIGNvcmUgbGF5ZXIhJyk7XG4gICAgICAgICAgICAgICAgICAgIHRvb2wgPSB3aGl0ZWJvYXJkSW5zdGFuY2UubGMudG9vbDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHRvb2w7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19nZXRXaGl0ZWJvYXJkSW5zdGFuY2VJRCcsXG5cblxuICAgICAgICAvKuiOt+WPlueZveadv+WunuS+i2lkLOagueaNrmlk6I635Y+WKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRXaGl0ZWJvYXJkSW5zdGFuY2VJRChpZCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZUlEID0gIXRoYXQudW5pcXVlV2hpdGVib2FyZCAmJiBpZCAhPT0gdW5kZWZpbmVkICYmIGlkICE9PSBudWxsID8gdGhhdC53aGl0ZWJvYXJkSW5zdGFuY2VJRFByZWZpeCArIGlkIDogdGhhdC53aGl0ZWJvYXJkSW5zdGFuY2VEZWZhdWx0SUQ7XG4gICAgICAgICAgICBpZiAoaWQgJiYgdHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHZhciBycSA9IG5ldyBSZWdFeHAodGhhdC5zcGVjaWFsV2hpdGVib2FyZEluc3RhbmNlSURQcmVmaXgsICdnJyk7XG4gICAgICAgICAgICAgICAgaWYgKHJxLnRlc3QoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZUlEID0gaWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdoaXRlYm9hcmRJbnN0YW5jZUlEO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZCcsXG5cblxuICAgICAgICAvKuiOt+WPlueZveadv+WunuS+iyzmoLnmja5pZOiOt+WPliovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0V2hpdGVib2FyZEluc3RhbmNlQnlJZChpZCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZUlEID0gdGhhdC5fZ2V0V2hpdGVib2FyZEluc3RhbmNlSUQoaWQpO1xuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZSA9IHRoYXQud2hpdGVib2FyZEluc3RhbmNlU3RvcmVbd2hpdGVib2FyZEluc3RhbmNlSURdO1xuICAgICAgICAgICAgcmV0dXJuIHdoaXRlYm9hcmRJbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SUQnLFxuXG5cbiAgICAgICAgLyrojrflj5bnmb3mnb/lrp7kvoss5qC55o2ud2hpdGVib2FyZEluc3RhbmNlSUTojrflj5YqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFdoaXRlYm9hcmRJbnN0YW5jZUJ5SUQod2hpdGVib2FyZEluc3RhbmNlSUQpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2UgPSB0aGF0LndoaXRlYm9hcmRJbnN0YW5jZVN0b3JlW3doaXRlYm9hcmRJbnN0YW5jZUlEXTtcbiAgICAgICAgICAgIHJldHVybiB3aGl0ZWJvYXJkSW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19yZXNpemVXaGl0ZWJvYXJkQnlTY2FsZScsXG5cblxuICAgICAgICAvKueZveadv+Wkp+Wwj+agueaNruavlOS+i+iHqumAguW6lCovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzaXplV2hpdGVib2FyZEJ5U2NhbGUod2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjE5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgICAgICAgICAgICB3YXRlcm1hcmtJbWFnZSA9IF9yZWYxOS53YXRlcm1hcmtJbWFnZSxcbiAgICAgICAgICAgICAgICBfcmVmMTkkaXNDaGFuZ2VDYW52YXMgPSBfcmVmMTkuaXNDaGFuZ2VDYW52YXMsXG4gICAgICAgICAgICAgICAgaXNDaGFuZ2VDYW52YXMgPSBfcmVmMTkkaXNDaGFuZ2VDYW52YXMgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmMTkkaXNDaGFuZ2VDYW52YXMsXG4gICAgICAgICAgICAgICAgX3JlZjE5JGlzQ2hhbmdlV2F0ZXJtID0gX3JlZjE5LmlzQ2hhbmdlV2F0ZXJtYXJrU2NhbGUsXG4gICAgICAgICAgICAgICAgaXNDaGFuZ2VXYXRlcm1hcmtTY2FsZSA9IF9yZWYxOSRpc0NoYW5nZVdhdGVybSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYxOSRpc0NoYW5nZVdhdGVybSxcbiAgICAgICAgICAgICAgICB3YXRlcm1hcmtJbWFnZVNjYWxlID0gX3JlZjE5LndhdGVybWFya0ltYWdlU2NhbGU7XG5cbiAgICAgICAgICAgIHdhdGVybWFya0ltYWdlU2NhbGUgPSB3YXRlcm1hcmtJbWFnZVNjYWxlICE9PSB1bmRlZmluZWQgPyB3YXRlcm1hcmtJbWFnZVNjYWxlIDogd2hpdGVib2FyZEluc3RhbmNlLndhdGVybWFya0ltYWdlU2NhbGU7XG4gICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlX2xjID0gd2hpdGVib2FyZEluc3RhbmNlLmxjO1xuICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZV9sYykge1xuICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkRWxlbWVudCA9IHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkRWxlbWVudDtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZEluc3RhbmNlRWxlbWVudCA9IHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkSW5zdGFuY2VFbGVtZW50O1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJXaWR0aCA9IHdoaXRlYm9hcmRJbnN0YW5jZS5jb250YWluZXJXaWR0aEFuZEhlaWdodFsnd2lkdGgnXTtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVySGVpZ2h0ID0gd2hpdGVib2FyZEluc3RhbmNlLmNvbnRhaW5lcldpZHRoQW5kSGVpZ2h0WydoZWlnaHQnXTtcbiAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLnBhcmNlbEFuY2VzdG9yRWxlbWVudElkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJjZWxBbmNlc3RvckVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh3aGl0ZWJvYXJkSW5zdGFuY2UucGFyY2VsQW5jZXN0b3JFbGVtZW50SWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyY2VsQW5jZXN0b3JFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJXaWR0aCA9IHBhcmNlbEFuY2VzdG9yRWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckhlaWdodCA9IHBhcmNlbEFuY2VzdG9yRWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGZhdGhlckNvbnRhaW5lckNvbmZpZ3VyYXRpb24gPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgZmF0aGVyQ29udGFpbmVyU3R5bGUgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSAwLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSAwLFxuICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aCA9IDAsXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lckhlaWdodCAqIHdhdGVybWFya0ltYWdlU2NhbGUgPCBjb250YWluZXJXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IE1hdGgucm91bmQoY29udGFpbmVySGVpZ2h0ICogd2F0ZXJtYXJrSW1hZ2VTY2FsZSAqIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkTWFnbmlmaWNhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IE1hdGgucm91bmQoY29udGFpbmVySGVpZ2h0ICogd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRNYWduaWZpY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5pbnNlcnRQaWN0dXJlUnVsZSA9PT0gJ3JlbGF0aXZlT3JpZ2luYWxTaXplJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdhdGVybWFya0ltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdhdGVybWFya0ltYWdlLndpZHRoIDwgY29udGFpbmVyV2lkdGggJiYgd2F0ZXJtYXJrSW1hZ2UuaGVpZ2h0IDwgY29udGFpbmVySGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gd2F0ZXJtYXJrSW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHdhdGVybWFya0ltYWdlLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEVsZW1lbnQuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRFbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZUVsZW1lbnQuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5taW5IZWlnaHQgIT09IHVuZGVmaW5lZCAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UubWluSGVpZ2h0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aCA9IHdoaXRlYm9hcmRJbnN0YW5jZS5taW5IZWlnaHQgKiB3YXRlcm1hcmtJbWFnZVNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0ID0gd2hpdGVib2FyZEluc3RhbmNlLm1pbkhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRFbGVtZW50LnN0eWxlLm1pbldpZHRoID0gbWluV2lkdGggKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEVsZW1lbnQuc3R5bGUubWluSGVpZ2h0ID0gbWluSGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZUVsZW1lbnQuc3R5bGUubWluV2lkdGggPSBtaW5XaWR0aCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2VFbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9IG1pbkhlaWdodCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYXRoZXJDb250YWluZXJTdHlsZVsnbWluV2lkdGgnXSA9IG1pbldpZHRoICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhdGhlckNvbnRhaW5lclN0eWxlWydtaW5IZWdpaHQnXSA9IG1pbkhlaWdodCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmF0aGVyQ29udGFpbmVyU3R5bGVbJ3RvcCddID0gMCArICclJztcbiAgICAgICAgICAgICAgICAgICAgZmF0aGVyQ29udGFpbmVyU3R5bGVbJ2xlZnQnXSA9IDUwICsgJyUnO1xuICAgICAgICAgICAgICAgICAgICBmYXRoZXJDb250YWluZXJTdHlsZVsnbWFyZ2luVG9wJ10gPSAwICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgZmF0aGVyQ29udGFpbmVyU3R5bGVbJ21hcmdpbkxlZnQnXSA9IC13aWR0aCAvIDIgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICBmYXRoZXJDb250YWluZXJTdHlsZVsnd2lkdGgnXSA9IHdpZHRoICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgZmF0aGVyQ29udGFpbmVyU3R5bGVbJ2hlaWdodCddID0gaGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IE1hdGgucm91bmQoY29udGFpbmVyV2lkdGggKiB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZE1hZ25pZmljYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLnJvdW5kKGNvbnRhaW5lcldpZHRoIC8gd2F0ZXJtYXJrSW1hZ2VTY2FsZSAqIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkTWFnbmlmaWNhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UuaW5zZXJ0UGljdHVyZVJ1bGUgPT09ICdyZWxhdGl2ZU9yaWdpbmFsU2l6ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3YXRlcm1hcmtJbWFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3YXRlcm1hcmtJbWFnZS53aWR0aCA8IGNvbnRhaW5lcldpZHRoICYmIHdhdGVybWFya0ltYWdlLmhlaWdodCA8IGNvbnRhaW5lckhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IHdhdGVybWFya0ltYWdlLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSB3YXRlcm1hcmtJbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRFbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2VFbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2VFbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UubWluSGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgd2hpdGVib2FyZEluc3RhbmNlLm1pbkhlaWdodCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluV2lkdGggPSB3aGl0ZWJvYXJkSW5zdGFuY2UubWluSGVpZ2h0ICogd2F0ZXJtYXJrSW1hZ2VTY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodCA9IHdoaXRlYm9hcmRJbnN0YW5jZS5taW5IZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkRWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRFbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9IG1pbkhlaWdodCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2VFbGVtZW50LnN0eWxlLm1pbldpZHRoID0gbWluV2lkdGggKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlRWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSBtaW5IZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmF0aGVyQ29udGFpbmVyU3R5bGVbJ21pbldpZHRoJ10gPSBtaW5XaWR0aCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYXRoZXJDb250YWluZXJTdHlsZVsnbWluSGVnaWh0J10gPSBtaW5IZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZhdGhlckNvbnRhaW5lclN0eWxlWyd0b3AnXSA9IDUwICsgJyUnO1xuICAgICAgICAgICAgICAgICAgICBmYXRoZXJDb250YWluZXJTdHlsZVsnbGVmdCddID0gMCArICclJztcbiAgICAgICAgICAgICAgICAgICAgZmF0aGVyQ29udGFpbmVyU3R5bGVbJ21hcmdpblRvcCddID0gLWhlaWdodCAvIDIgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICBmYXRoZXJDb250YWluZXJTdHlsZVsnbWFyZ2luTGVmdCddID0gMCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIGZhdGhlckNvbnRhaW5lclN0eWxlWyd3aWR0aCddID0gd2lkdGggKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICBmYXRoZXJDb250YWluZXJTdHlsZVsnaGVpZ2h0J10gPSBoZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNDaGFuZ2VDYW52YXMpIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlX2xjLnJlc3BvbmRUb1NpemVDaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZVdpZHRoID0gd2hpdGVib2FyZEluc3RhbmNlRWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZUhlaWdodCA9IHdoaXRlYm9hcmRJbnN0YW5jZUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFNjYWxlID0gKGVsZVdpZHRoICsgZWxlSGVpZ2h0KSAvICh3aGl0ZWJvYXJkSW5zdGFuY2UuYmFzZVdoaXRlYm9hcmRXaWR0aCArIHdoaXRlYm9hcmRJbnN0YW5jZS5iYXNlV2hpdGVib2FyZFdpZHRoICogd2F0ZXJtYXJrSW1hZ2VTY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZV9sYy5zZXRab29tKHdoaXRlYm9hcmRTY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZV9sYy5zZXRQYW4oMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0NoYW5nZVdhdGVybWFya1NjYWxlICYmIHdhdGVybWFya0ltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2F0ZXJtYXJrSW1hZ2VXaWR0aCA9IHdhdGVybWFya0ltYWdlLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdhdGVybWFya0ltYWdlSGVpZ2h0ID0gd2F0ZXJtYXJrSW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IGx2VyA9IHdoaXRlYm9hcmRJbnN0YW5jZV9sYy5iYWNrZ3JvdW5kQ2FudmFzLndpZHRoIC8gd2F0ZXJtYXJrSW1hZ2VXaWR0aCA7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgbHZIID0gIHdoaXRlYm9hcmRJbnN0YW5jZV9sYy5iYWNrZ3JvdW5kQ2FudmFzLmhlaWdodCAvIHdhdGVybWFya0ltYWdlSGVpZ2h0IDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsdlcgPSBlbGVXaWR0aCAvIHdhdGVybWFya0ltYWdlV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHZIID0gZWxlSGVpZ2h0IC8gd2F0ZXJtYXJrSW1hZ2VIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHYgPSAobHZXICsgbHZIKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmluc2VydFBpY3R1cmVSdWxlID09PSAncmVsYXRpdmVPcmlnaW5hbFNpemUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdhdGVybWFya0ltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3YXRlcm1hcmtJbWFnZS53aWR0aCA8IGNvbnRhaW5lcldpZHRoICYmIHdhdGVybWFya0ltYWdlLmhlaWdodCA8IGNvbnRhaW5lckhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHYgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlX2xjLndhdGVybWFya1NjYWxlID0gbHY7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2VfbGMuc2V0V2F0ZXJtYXJrSW1hZ2Uod2F0ZXJtYXJrSW1hZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZhdGhlckNvbnRhaW5lckNvbmZpZ3VyYXRpb24uc3R5bGUgPSBmYXRoZXJDb250YWluZXJTdHlsZTtcbiAgICAgICAgICAgICAgICBmYXRoZXJDb250YWluZXJDb25maWd1cmF0aW9uLmFkZENsYXNzTmFtZSA9IHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkTWFnbmlmaWNhdGlvbiA+IDEgPyAnY3VzdG9tLXNjcm9sbC1iYXInIDogJyc7XG4gICAgICAgICAgICAgICAgZmF0aGVyQ29udGFpbmVyQ29uZmlndXJhdGlvbi5sb2FkU2Nyb2xsQmFyID0gd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRNYWduaWZpY2F0aW9uID4gMTtcbiAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIgJiYgd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIucmVzaXplV2hpdGVib2FyZFNpemVDYWxsYmFjayAmJiB0eXBlb2Ygd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIucmVzaXplV2hpdGVib2FyZFNpemVDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlci5yZXNpemVXaGl0ZWJvYXJkU2l6ZUNhbGxiYWNrKGZhdGhlckNvbnRhaW5lckNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZhdGhlckNvbnRhaW5lckNvbmZpZ3VyYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5riF6Zmk55m95p2/55qE5omA5pyJ5pWw5o2u77yM5YyF5ous5a2Y5YKo55qE5pWw5o2uLOmAmui/h3doaXRlYm9hcmRJbnN0YW5jZUlEKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2NsZWFyV2hpdGVib2FyZEFsbERhdGFCeUluc3RhbmNlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jbGVhcldoaXRlYm9hcmRBbGxEYXRhQnlJbnN0YW5jZSh3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmICghd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tfY2xlYXJdVGhlIHdoaXRlYm9hcmQgaW5zdGFuY2UgZG9lcyBub3QgZXhpc3QhJyk7cmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLmNsZWFyKGZhbHNlKTtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5yZWRvU3RhY2subGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy51bmRvU3RhY2subGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5zdGFja1N0b3JhZ2UgPSB7fTsgLy/nmb3mnb/mlbDmja7moIjlr7nosaFcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53YWl0aW5nUHJvY2Vzc1NoYXBlRGF0YSA9IHt9OyAvL+etieW+heWkhOeQhueahOeZveadv+aVsOaNrlxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQWxsUmVtaW5kQ29udGVudCh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3Jlc2l6ZVdoaXRlYm9hcmRIYW5kbGVyKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3Jlc2l6ZVdoaXRlYm9hcmRIYW5kbGVyJyxcblxuXG4gICAgICAgIC8q5pu05paw55m95p2/55qE5aSn5bCPKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNpemVXaGl0ZWJvYXJkSGFuZGxlcih3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UgJiYgd2hpdGVib2FyZEluc3RhbmNlLmxjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdhdGVybWFya0ltYWdlID0gd2hpdGVib2FyZEluc3RhbmNlLmxjLndhdGVybWFya0ltYWdlO1xuICAgICAgICAgICAgICAgIGlmICh3YXRlcm1hcmtJbWFnZSAmJiB3YXRlcm1hcmtJbWFnZS5zcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdhdGVybWFya0ltYWdlU2NhbGUgPSB3YXRlcm1hcmtJbWFnZS53aWR0aCAvIHdhdGVybWFya0ltYWdlLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fcmVzaXplV2hpdGVib2FyZEJ5U2NhbGUod2hpdGVib2FyZEluc3RhbmNlLCB7IHdhdGVybWFya0ltYWdlOiB3YXRlcm1hcmtJbWFnZSwgd2F0ZXJtYXJrSW1hZ2VTY2FsZTogd2F0ZXJtYXJrSW1hZ2VTY2FsZSB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9yZXNpemVXaGl0ZWJvYXJkQnlTY2FsZSh3aGl0ZWJvYXJkSW5zdGFuY2UsIHsgaXNDaGFuZ2VXYXRlcm1hcmtTY2FsZTogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUFsbFJlbWluZENvbnRlbnQod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3VwZGF0ZVdoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZVNjYWxlJyxcblxuXG4gICAgICAgIC8q5pu05paw55m95p2/55qEd2F0ZXJtYXJrSW1hZ2VTY2FsZSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlV2hpdGVib2FyZFdhdGVybWFya0ltYWdlU2NhbGUod2hpdGVib2FyZEluc3RhbmNlLCB3YXRlcm1hcmtJbWFnZVNjYWxlKSB7XG4gICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2F0ZXJtYXJrSW1hZ2VTY2FsZSA9IHdhdGVybWFya0ltYWdlU2NhbGU7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemVXaGl0ZWJvYXJkSGFuZGxlcih3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrnlJ/kuqfnmb3mnb/mj5DnpLrlhoXlrrkqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfcHJvZHVjdGlvbldoaXRlYm9hcmRSZW1pbmRDb250ZW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9kdWN0aW9uV2hpdGVib2FyZFJlbWluZENvbnRlbnQod2hpdGVib2FyZEluc3RhbmNlLCB4LCB5LCBjb250ZW50LCBzaGFwZUlkKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZSAmJiBjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZSAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UubGMgJiYgd2hpdGVib2FyZEluc3RhbmNlLmxjLmNvbnRhaW5lckVsLnBhcmVudE5vZGUgJiYgdHlwZW9mIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5kcmF3aW5nQ29vcmRzVG9DbGllbnRDb29yZHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb29yZHMgPSB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuZHJhd2luZ0Nvb3Jkc1RvQ2xpZW50Q29vcmRzKHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvb3Jkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW1pbmRTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbWluZFNwYW4uY2xhc3NOYW1lID0gXCJyZW1pbmQtY29udGVudFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbWluZFNwYW4uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbWluZFNwYW4uc3R5bGUubGVmdCA9IGNvb3Jkcy54ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1pbmRTcGFuLnN0eWxlLnRvcCA9IGNvb3Jkcy55ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1pbmRTcGFuLmlubmVySFRNTCA9IGNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbWluZFNwYW5JZCA9IHNoYXBlSWQgPyAnd2hpdGVib2FyZF9yZW1pbmRfJyArIHNoYXBlSWQgOiBcIndoaXRlYm9hcmRfcmVtaW5kX1wiICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtaW5kU3Bhbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtcG9zaXRpb24teCcsIHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbWluZFNwYW4uc2V0QXR0cmlidXRlKCdkYXRhLXBvc2l0aW9uLXknLCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1pbmRTcGFuLnNldEF0dHJpYnV0ZSgnaWQnLCByZW1pbmRTcGFuSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5jb250YWluZXJFbC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHJlbWluZFNwYW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIuX3JlbW92ZVJlbWluZENvbnRlbnRCeUVsZW1lbnRJZCh3aGl0ZWJvYXJkSW5zdGFuY2UsIHJlbWluZFNwYW5JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5jb250YWluZXJFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJlbWluZFNwYW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1pbmRTcGFuID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB3aGl0ZWJvYXJkSW5zdGFuY2UucmVtaW5kQ29udGVudFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ3Byb2R1Y3Rpb25XaGl0ZWJvYXJkUmVtaW5kQ29udGVudCBlcnJvcjonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmm7TmlrDmiYDmnInmj5DnpLrlhoXlrrnnmoTlnZDmoIcqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfdXBkYXRlQWxsUmVtaW5kQ29udGVudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlQWxsUmVtaW5kQ29udGVudCh3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5sYyAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuY29udGFpbmVyRWwucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVtaW5kU3BhbkVsZW1lbnRzID0gd2hpdGVib2FyZEluc3RhbmNlLmxjLmNvbnRhaW5lckVsLnBhcmVudE5vZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInJlbWluZC1jb250ZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVtaW5kU3BhbkVsZW1lbnRzICYmIHJlbWluZFNwYW5FbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgcmVtaW5kU3BhbkVsZW1lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW1pbmRTcGFuRWxlbWVudCA9IHJlbWluZFNwYW5FbGVtZW50c1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBOdW1iZXIocmVtaW5kU3BhbkVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBvc2l0aW9uLXgnKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBOdW1iZXIocmVtaW5kU3BhbkVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBvc2l0aW9uLXknKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3JkcyA9IHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5kcmF3aW5nQ29vcmRzVG9DbGllbnRDb29yZHMoeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtaW5kU3BhbkVsZW1lbnQuc3R5bGUubGVmdCA9IGNvb3Jkcy54ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1pbmRTcGFuRWxlbWVudC5zdHlsZS50b3AgPSBjb29yZHMueSArICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCd1cGRhdGVBbGxSZW1pbmRDb250ZW50IGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q56e76Zmk5omA5pyJ5o+Q56S65YaF5a65Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3JlbW92ZVJlbWluZENvbnRlbnRCeUVsZW1lbnRJZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVtb3ZlUmVtaW5kQ29udGVudEJ5RWxlbWVudElkKHdoaXRlYm9hcmRJbnN0YW5jZSwgZWxlbWVudGlkKSB7XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlICYmIHdoaXRlYm9hcmRJbnN0YW5jZS5sYyAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuY29udGFpbmVyRWwucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciByZW1pbmRTcGFuRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRpZCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlbWluZFNwYW5FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbWluZFNwYW5FbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuY29udGFpbmVyRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyZW1pbmRTcGFuRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHJlbWluZFNwYW5FbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuenu+mZpOaJgOacieaPkOekuuWGheWuuSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19yZW1vdmVBbGxSZW1pbmRDb250ZW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW1vdmVBbGxSZW1pbmRDb250ZW50KHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZSAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UubGMgJiYgd2hpdGVib2FyZEluc3RhbmNlLmxjLmNvbnRhaW5lckVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmxjICYmIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5jb250YWluZXJFbC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVtaW5kU3BhbkVsZW1lbnRzID0gd2hpdGVib2FyZEluc3RhbmNlLmxjLmNvbnRhaW5lckVsLnBhcmVudE5vZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInJlbWluZC1jb250ZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbWluZFNwYW5FbGVtZW50cyAmJiByZW1pbmRTcGFuRWxlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gcmVtaW5kU3BhbkVsZW1lbnRzLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbWluZFNwYW5FbGVtZW50ID0gcmVtaW5kU3BhbkVsZW1lbnRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtaW5kU3BhbkVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5jb250YWluZXJFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJlbWluZFNwYW5FbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtaW5kU3BhbkVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdyZW1vdmVBbGxSZW1pbmRDb250ZW50IGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKueZveadv+S6i+S7tuWbnuiwg+WkhOeQhuWHveaVsDpzaGFwZVNhdmUqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfaGFuZGxlclNoYXBlU2F2ZUV2ZW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVyU2hhcGVTYXZlRXZlbnQod2hpdGVib2FyZEluc3RhbmNlLCBldmVudERhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbmRXaGl0ZWJvYXJkTWVzc2FnZVRvU2lnbmFsbGluZ1NlcnZlcih3aGl0ZWJvYXJkSW5zdGFuY2UsIFwic2hhcGVTYXZlRXZlbnRcIiwgZXZlbnREYXRhKTtcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbklzRGlzYWJsZSh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfaGFuZGxlclVuZG9FdmVudCcsXG5cblxuICAgICAgICAvKueZveadv+S6i+S7tuWbnuiwg+WkhOeQhuWHveaVsDp1bmRvKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVyVW5kb0V2ZW50KHdoaXRlYm9hcmRJbnN0YW5jZSwgZXZlbnREYXRhKSB7XG4gICAgICAgICAgICB0aGlzLl9zZW5kV2hpdGVib2FyZE1lc3NhZ2VUb1NpZ25hbGxpbmdTZXJ2ZXIod2hpdGVib2FyZEluc3RhbmNlLCBcInVuZG9FdmVudFwiLCBldmVudERhdGEpO1xuICAgICAgICAgICAgdGhpcy5fYWN0aW9uSXNEaXNhYmxlKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19oYW5kbGVyUmVkb0V2ZW50JyxcblxuXG4gICAgICAgIC8q55m95p2/5LqL5Lu25Zue6LCD5aSE55CG5Ye95pWwOnJlZG8qL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZXJSZWRvRXZlbnQod2hpdGVib2FyZEluc3RhbmNlLCBldmVudERhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbmRXaGl0ZWJvYXJkTWVzc2FnZVRvU2lnbmFsbGluZ1NlcnZlcih3aGl0ZWJvYXJkSW5zdGFuY2UsIFwicmVkb0V2ZW50XCIsIGV2ZW50RGF0YSk7XG4gICAgICAgICAgICB0aGlzLl9hY3Rpb25Jc0Rpc2FibGUod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2hhbmRsZXJDbGVhckV2ZW50JyxcblxuXG4gICAgICAgIC8q55m95p2/5LqL5Lu25Zue6LCD5aSE55CG5Ye95pWwOmNsZWFyKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVyQ2xlYXJFdmVudCh3aGl0ZWJvYXJkSW5zdGFuY2UsIGV2ZW50RGF0YSkge1xuICAgICAgICAgICAgdGhpcy5fc2VuZFdoaXRlYm9hcmRNZXNzYWdlVG9TaWduYWxsaW5nU2VydmVyKHdoaXRlYm9hcmRJbnN0YW5jZSwgXCJjbGVhckV2ZW50XCIsIGV2ZW50RGF0YSk7XG4gICAgICAgICAgICB0aGlzLl9hY3Rpb25Jc0Rpc2FibGUod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2hhbmRsZXJEcmF3aW5nQ2hhbmdlRXZlbnQnLFxuXG5cbiAgICAgICAgLyrnmb3mnb/nlLvkuobmlbDmja7kuYvlkI7nmoTlm57osIPlh73mlbAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZXJEcmF3aW5nQ2hhbmdlRXZlbnQod2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLl9zYXZlSW1hZ2VCYXNlNjRUb0ltYWdlVGh1bWJuYWlsKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19zYXZlSW1hZ2VCYXNlNjRUb0ltYWdlVGh1bWJuYWlsJyxcblxuXG4gICAgICAgIC8q5L+d5a2YY2FudmFz5pWw5o2u5Yiw5Zu+54mH57yp55Wl5Zu+5LitKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zYXZlSW1hZ2VCYXNlNjRUb0ltYWdlVGh1bWJuYWlsKHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5pbWFnZVRodW1ibmFpbElkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGltYWdlVGh1bWJuYWlsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQod2hpdGVib2FyZEluc3RhbmNlLmltYWdlVGh1bWJuYWlsSWQpO1xuICAgICAgICAgICAgICAgIGlmIChpbWFnZVRodW1ibmFpbCAmJiBpbWFnZVRodW1ibmFpbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW1nJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW1hZ2VCYXNlNjRVcmwgPSB0aGlzLl9jb252ZXJ0Q2FudmFzVG9JbWFnZUJhc2U2NCh3aGl0ZWJvYXJkSW5zdGFuY2UsICdqcGcnKTtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VUaHVtYm5haWwuc3JjID0gaW1hZ2VCYXNlNjRVcmw7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UuaW1hZ2VUaHVtYm5haWxUaXBDb250ZW50ICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHdoaXRlYm9hcmRJbnN0YW5jZS5pbWFnZVRodW1ibmFpbElkICsgJ19pbWFnZURlc2NyaWJlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHdoaXRlYm9hcmRJbnN0YW5jZS5pbWFnZVRodW1ibmFpbElkICsgJ19pbWFnZURlc2NyaWJlJykuaW5uZXJIVE1MID0gd2hpdGVib2FyZEluc3RhbmNlLmltYWdlVGh1bWJuYWlsVGlwQ29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2Uubmlja25hbWUgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQod2hpdGVib2FyZEluc3RhbmNlLmltYWdlVGh1bWJuYWlsSWQgKyAnX2ltYWdlRGVzY3JpYmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQod2hpdGVib2FyZEluc3RhbmNlLmltYWdlVGh1bWJuYWlsSWQgKyAnX2ltYWdlRGVzY3JpYmUnKS5pbm5lckhUTUwgPSB3aGl0ZWJvYXJkSW5zdGFuY2Uubmlja25hbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKumUgOavgeeZveadv+WunuS+i++8jOmAmui/h+WunuS+i3doaXRlYm9hcmRJbnN0YW5jZSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19kZXN0cm95V2hpdGVib2FyZEluc3RhbmNlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9kZXN0cm95V2hpdGVib2FyZEluc3RhbmNlKHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHdoaXRlYm9hcmRJbnN0YW5jZS5ub3RpY2VVcGRhdGVUb29sRGVzY1RpbWVyKTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh3aGl0ZWJvYXJkSW5zdGFuY2UubGFzZXJUaW1lcik7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQod2hpdGVib2FyZEluc3RhbmNlLnNldFdoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZVRpbWVyKTtcbiAgICAgICAgICAgIC8qICAgaWYoIHdoaXRlYm9hcmRJbnN0YW5jZS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEICE9PSB1bmRlZmluZWQgICYmICF3aGl0ZWJvYXJkSW5zdGFuY2UuaXNCYXNlYm9hcmQgJiYgd2hpdGVib2FyZEluc3RhbmNlLmlkICE9PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgaWYodGhhdC5iYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdMaXN0W3doaXRlYm9hcmRJbnN0YW5jZS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEXSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5zYXZlV2hpdGVib2FyZFN0YWNrVG9TdG9yYWdlKHdoaXRlYm9hcmRJbnN0YW5jZS5pZCAsIHtzYXZlUmVkb1N0YWNrOndoaXRlYm9hcmRJbnN0YW5jZS5zYXZlUmVkb1N0YWNrICwgc2F2ZVVuZG9TdGFjazp3aGl0ZWJvYXJkSW5zdGFuY2Uuc2F2ZVVuZG9TdGFjayB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0NoaWxkcmVuU3RhY2tTdG9yYWdlW3doaXRlYm9hcmRJbnN0YW5jZS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEXSA9IHRoYXQuYmFzaWNUZW1wbGF0ZVdoaXRlYm9hcmRTaWduYWxsaW5nQ2hpbGRyZW5TdGFja1N0b3JhZ2Vbd2hpdGVib2FyZEluc3RhbmNlLmRlcGVuZGVuY2VCYXNlYm9hcmRXaGl0ZWJvYXJkSURdIHx8IHt9IDtcclxuICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0NoaWxkcmVuU3RhY2tTdG9yYWdlW3doaXRlYm9hcmRJbnN0YW5jZS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEXVt3aGl0ZWJvYXJkSW5zdGFuY2UuaWRdID0gT2JqZWN0LmRlZXBBc3NpZ24oe30gLCAgd2hpdGVib2FyZEluc3RhbmNlLnN0YWNrU3RvcmFnZSkgO1xyXG4gICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoIHRoYXQuYmFzaWNUZW1wbGF0ZVdoaXRlYm9hcmRTaWduYWxsaW5nQ2hpbGRyZW5TdGFja1N0b3JhZ2Vbd2hpdGVib2FyZEluc3RhbmNlLmRlcGVuZGVuY2VCYXNlYm9hcmRXaGl0ZWJvYXJkSURdICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5iYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdDaGlsZHJlblN0YWNrU3RvcmFnZVt3aGl0ZWJvYXJkSW5zdGFuY2UuZGVwZW5kZW5jZUJhc2Vib2FyZFdoaXRlYm9hcmRJRF0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGF0LmJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0NoaWxkcmVuU3RhY2tTdG9yYWdlW3doaXRlYm9hcmRJbnN0YW5jZS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEXSA7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgaWYgKHRoYXQuYmFzaWNUZW1wbGF0ZVdoaXRlYm9hcmRTaWduYWxsaW5nTGlzdFt3aGl0ZWJvYXJkSW5zdGFuY2UuaWRdKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5iYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdMaXN0W3doaXRlYm9hcmRJbnN0YW5jZS5pZF0gPSBudWxsO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGF0LmJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0xpc3Rbd2hpdGVib2FyZEluc3RhbmNlLmlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qICAgaWYodGhhdC5iYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdDaGlsZHJlblN0YWNrU3RvcmFnZVt3aGl0ZWJvYXJkSW5zdGFuY2UuaWRdKXtcclxuICAgICAgICAgICAgICAgICAgIHRoYXQuYmFzaWNUZW1wbGF0ZVdoaXRlYm9hcmRTaWduYWxsaW5nQ2hpbGRyZW5TdGFja1N0b3JhZ2Vbd2hpdGVib2FyZEluc3RhbmNlLmlkXSA9IG51bGwgO1xyXG4gICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoYXQuYmFzaWNUZW1wbGF0ZVdoaXRlYm9hcmRTaWduYWxsaW5nQ2hpbGRyZW5TdGFja1N0b3JhZ2Vbd2hpdGVib2FyZEluc3RhbmNlLmlkXSA7XHJcbiAgICAgICAgICAgICAgIH0qL1xuICAgICAgICAgICAgdGhhdC5fY2xlYXJXaGl0ZWJvYXJkQWxsRGF0YUJ5SW5zdGFuY2Uod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2VJRCA9IHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkSW5zdGFuY2VJRDtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkRWxlbWVudCA9IHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkRWxlbWVudDtcbiAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UubGMgJiYgdHlwZW9mIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy50ZWFyZG93biA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy50ZWFyZG93bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ1tkZXN0cm95XSB3aGl0ZWJvYXJkIGVsZW1lbnRzIGRvIG5vdCBleGlzdCAsIGVsZW1lbnQgaWQgaXM6JyArIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkRWxlbWVudElkICsgJyEnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGh1bWJuYWlsRWxlbWVudCA9IHdoaXRlYm9hcmRJbnN0YW5jZS50aHVtYm5haWxJZCA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHdoaXRlYm9hcmRJbnN0YW5jZS50aHVtYm5haWxJZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAodGh1bWJuYWlsRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRodW1ibmFpbEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjkgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yOSA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yOSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I5ID0gT2JqZWN0LmtleXMod2hpdGVib2FyZEluc3RhbmNlKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOTsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOSA9IChfc3RlcDkgPSBfaXRlcmF0b3I5Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb245ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gX3N0ZXA5LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZVtrZXldID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHdoaXRlYm9hcmRJbnN0YW5jZVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yOSA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I5ID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb245ICYmIF9pdGVyYXRvcjkucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I5LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGF0LndoaXRlYm9hcmRJbnN0YW5jZVN0b3JlW3doaXRlYm9hcmRJbnN0YW5jZUlEXSA9IG51bGw7IC8v55m95p2/5a6e5L6LXG4gICAgICAgICAgICBkZWxldGUgdGhhdC53aGl0ZWJvYXJkSW5zdGFuY2VTdG9yZVt3aGl0ZWJvYXJkSW5zdGFuY2VJRF07XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19jbGVhckxjJyxcblxuXG4gICAgICAgIC8q5omn6KGM55m95p2/55qEY2xlYXLmlrnms5UqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2NsZWFyTGMod2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjIwID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgICAgICAgICAgICBfcmVmMjAkdHJpZ2dlckV2ZW50ID0gX3JlZjIwLnRyaWdnZXJFdmVudCxcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRXZlbnQgPSBfcmVmMjAkdHJpZ2dlckV2ZW50ID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZjIwJHRyaWdnZXJFdmVudDtcblxuICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZSAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UubGMpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuY2xlYXIoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUFsbFJlbWluZENvbnRlbnQod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnY2xlYXIgd2hpdGVib2FyZCBpcyBub3QgZXhpc3QhJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19jbGVhckxjUmVkb1N0YWNrJyxcblxuXG4gICAgICAgIC8q5omn6KGM55m95p2/55qEcmVkb1N0YWNr5pa55rOVKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jbGVhckxjUmVkb1N0YWNrKHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlICYmIHdoaXRlYm9hcmRJbnN0YW5jZS5sYyA/IHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5yZWRvU3RhY2subGVuZ3RoID0gMCA6IEwuTG9nZ2VyLndhcm5pbmcoJ2NsZWFyUmVkb1N0YWNrIHdoaXRlYm9hcmQgaXMgbm90IGV4aXN0IScpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfY2xlYXJMY1VuZG9TdGFjaycsXG5cblxuICAgICAgICAvKuaJp+ihjOeZveadv+eahFVuZG9TdGFja+aWueazlSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY2xlYXJMY1VuZG9TdGFjayh3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZSAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UubGMgPyB3aGl0ZWJvYXJkSW5zdGFuY2UubGMudW5kb1N0YWNrLmxlbmd0aCA9IDAgOiBMLkxvZ2dlci53YXJuaW5nKCdjbGVhclVuZG9TdGFjayB3aGl0ZWJvYXJkIGlzIG5vdCBleGlzdCEnKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3Nob3dXaGl0ZWJvYXJkTG9hZGluZycsXG5cblxuICAgICAgICAvKuaYvuekuueZveadv+ato+WcqGxvYWRpbmcqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3Nob3dXaGl0ZWJvYXJkTG9hZGluZyh3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UubGMubG9hZGluZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMubG9hZGluZ0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19oaWRlV2hpdGVib2FyZExvYWRpbmcnLFxuXG5cbiAgICAgICAgLyrpmpDol4/nmb3mnb/mraPlnKhsb2FkaW5nKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oaWRlV2hpdGVib2FyZExvYWRpbmcod2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmxjLmxvYWRpbmdFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLmxvYWRpbmdFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19jaGFuZ2VXaGl0ZWJvYXJkVGVtcG9yYXJ5RGVhd1Blcm1pc3Npb24nLFxuXG5cbiAgICAgICAgLyrmlLnlj5jnmb3mnb/kuLTml7blj6/nlLvmnYPpmZAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2NoYW5nZVdoaXRlYm9hcmRUZW1wb3JhcnlEZWF3UGVybWlzc2lvbih2YWx1ZSwgd2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgX2hhbmRlckNoYW5nZVdoaXRlYm9hcmRUZW1wb3JhcnlEZWF3UGVybWlzc2lvbiA9IGZ1bmN0aW9uIF9oYW5kZXJDaGFuZ2VXaGl0ZWJvYXJkVGVtcG9yYXJ5RGVhd1Blcm1pc3Npb24od2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRJbnN0YW5jZV9sYyA9IHdoaXRlYm9hcmRJbnN0YW5jZS5sYztcbiAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlX2xjLmlzVG1wRHJhd0FibGUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZV9sYy5pc1RtcERyYXdBYmxlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wb3JhcnlEcmF3UGVybWlzc2lvbiA9IHdoaXRlYm9hcmRJbnN0YW5jZV9sYy5jb250YWluZXJFbC5wYXJlbnROb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0ZW1wb3JhcnktZHJhdy1wZXJtaXNzaW9uXCIpWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlX2xjLmlzVG1wRHJhd0FibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBvcmFyeURyYXdQZXJtaXNzaW9uLmNsYXNzTmFtZSA9IHRlbXBvcmFyeURyYXdQZXJtaXNzaW9uLmNsYXNzTmFtZS5yZXBsYWNlKC8oIHllc3wgbm8pL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcG9yYXJ5RHJhd1Blcm1pc3Npb24uY2xhc3NOYW1lICs9IFwiIHllc1wiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcG9yYXJ5RHJhd1Blcm1pc3Npb24uY2xhc3NOYW1lID0gdGVtcG9yYXJ5RHJhd1Blcm1pc3Npb24uY2xhc3NOYW1lLnJlcGxhY2UoLyggeWVzfCBubykvZywgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wb3JhcnlEcmF3UGVybWlzc2lvbi5jbGFzc05hbWUgKz0gXCIgbm9cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGF0Ll9hdXRvbWF0aWNUcmF2ZXJzZVdoaXRlYm9hcmRJbnN0YW5jZSh3aGl0ZWJvYXJkSW5zdGFuY2UsIF9oYW5kZXJDaGFuZ2VXaGl0ZWJvYXJkVGVtcG9yYXJ5RGVhd1Blcm1pc3Npb24pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfY2hhbmdlV2hpdGVib2FyZERlYXdQZXJtaXNzaW9uJyxcblxuXG4gICAgICAgIC8q5pS55Y+Y55m95p2/5Y+v55S75p2D6ZmQKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jaGFuZ2VXaGl0ZWJvYXJkRGVhd1Blcm1pc3Npb24odmFsdWUsIHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIF9oYW5kZXJDaGFuZ2VXaGl0ZWJvYXJkRGVhd1Blcm1pc3Npb24gPSBmdW5jdGlvbiBfaGFuZGVyQ2hhbmdlV2hpdGVib2FyZERlYXdQZXJtaXNzaW9uKHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5kZWF3UGVybWlzc2lvbiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2VfbGMgPSB3aGl0ZWJvYXJkSW5zdGFuY2UubGM7XG4gICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZV9sYy5pc0RyYXdBYmxlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2VfbGMuaXNEcmF3QWJsZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHJhd1Blcm1pc3Npb24gPSB3aGl0ZWJvYXJkSW5zdGFuY2VfbGMuY29udGFpbmVyRWwucGFyZW50Tm9kZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZHJhdy1wZXJtaXNzaW9uXCIpWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlX2xjLmlzRHJhd0FibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYXdQZXJtaXNzaW9uLmNsYXNzTmFtZSA9IGRyYXdQZXJtaXNzaW9uLmNsYXNzTmFtZS5yZXBsYWNlKC8oIHllc3wgbm8pL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhd1Blcm1pc3Npb24uY2xhc3NOYW1lICs9IFwiIHllc1wiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhd1Blcm1pc3Npb24uY2xhc3NOYW1lID0gZHJhd1Blcm1pc3Npb24uY2xhc3NOYW1lLnJlcGxhY2UoLyggeWVzfCBubykvZywgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmF3UGVybWlzc2lvbi5jbGFzc05hbWUgKz0gXCIgbm9cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGF0Ll9hdXRvbWF0aWNUcmF2ZXJzZVdoaXRlYm9hcmRJbnN0YW5jZSh3aGl0ZWJvYXJkSW5zdGFuY2UsIF9oYW5kZXJDaGFuZ2VXaGl0ZWJvYXJkRGVhd1Blcm1pc3Npb24pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfaGFuZGxlckFjdGl2ZVRvb2xMYXNlcicsXG5cblxuICAgICAgICAvKuWkhOeQhua/gOWFieeslOW3peWFt+eahOa/gOa0uyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlckFjdGl2ZVRvb2xMYXNlcih0b29sS2V5LCB3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciBfaGFuZGxlckFjdGl2ZVRvb2xMYXNlckZyb21Jbm5lciA9IGZ1bmN0aW9uIF9oYW5kbGVyQWN0aXZlVG9vbExhc2VyRnJvbUlubmVyKHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2VfbGMgPSB3aGl0ZWJvYXJkSW5zdGFuY2UubGM7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lckVsUGFyZW50ID0gd2hpdGVib2FyZEluc3RhbmNlX2xjLmNvbnRhaW5lckVsLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgdmFyIHRlbXBvcmFyeURyYXdQZXJtaXNzaW9uID0gY29udGFpbmVyRWxQYXJlbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInRlbXBvcmFyeS1kcmF3LXBlcm1pc3Npb25cIilbMF07XG4gICAgICAgICAgICAgICAgdmFyIGxhc2VyTWFyayA9IGNvbnRhaW5lckVsUGFyZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJsYXNlci1tYXJrXCIpWzBdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRvb2xLZXkgPT09ICd0b29sX2xhc2VyJykge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5uZXJVdGlscy5yZW1vdmVFdmVudCh0ZW1wb3JhcnlEcmF3UGVybWlzc2lvbiwgJ21vdXNlbW92ZScsIHdoaXRlYm9hcmRJbnN0YW5jZS5fbGFzZXJFdmVudEhhbmRsZXJfbW91c2Vtb3ZlKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZElubmVyVXRpbHMucmVtb3ZlRXZlbnQoY29udGFpbmVyRWxQYXJlbnQsICdtb3VzZWVudGVyJywgd2hpdGVib2FyZEluc3RhbmNlLl9sYXNlckV2ZW50SGFuZGxlcl9tb3VzZWVudGVyKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZElubmVyVXRpbHMucmVtb3ZlRXZlbnQoY29udGFpbmVyRWxQYXJlbnQsICdtb3VzZWxlYXZlJywgd2hpdGVib2FyZEluc3RhbmNlLl9sYXNlckV2ZW50SGFuZGxlcl9tb3VzZWxlYXZlKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLl9sYXNlckV2ZW50SGFuZGxlcl9tb3VzZW1vdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5hY3RpdmVUb29sICE9PSAndG9vbF9sYXNlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1ldGVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbk5hbWU6IFwiaGlkZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3NlbmRXaGl0ZWJvYXJkTWVzc2FnZVRvU2lnbmFsbGluZ1NlcnZlcih3aGl0ZWJvYXJkSW5zdGFuY2UsIFwibGFzZXJNYXJrRXZlbnRcIiwgcGFyYW1ldGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXNlck1hcmsuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5uZXJVdGlscy5yZW1vdmVFdmVudCh0ZW1wb3JhcnlEcmF3UGVybWlzc2lvbiwgJ21vdXNlbW92ZScsIHdoaXRlYm9hcmRJbnN0YW5jZS5fbGFzZXJFdmVudEhhbmRsZXJfbW91c2Vtb3ZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IGUucGFnZVgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGUucGFnZVk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGVtcG9yYXJ5RHJhd1Blcm1pc3Npb24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeDEgPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTEgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFya0NvbnRhaW5lcldpZHRoID0gdGVtcG9yYXJ5RHJhd1Blcm1pc3Npb24uY2xpZW50V2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFya0NvbnRhaW5lckhlaWdodCA9IHRlbXBvcmFyeURyYXdQZXJtaXNzaW9uLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAod2hpdGVib2FyZEluc3RhbmNlLnJvdGF0ZURlZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSB4IC0gb2Zmc2V0LmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxID0geSAtIG9mZnNldC50b3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxID0geSAtIG9mZnNldC50b3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxID0gbWFya0NvbnRhaW5lckhlaWdodCAtICh4IC0gb2Zmc2V0LmxlZnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE4MDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSBtYXJrQ29udGFpbmVyV2lkdGggLSAoeCAtIG9mZnNldC5sZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTEgPSBtYXJrQ29udGFpbmVySGVpZ2h0IC0gKHkgLSBvZmZzZXQudG9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNzA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxID0gbWFya0NvbnRhaW5lcldpZHRoIC0gKHkgLSBvZmZzZXQudG9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTEgPSB4IC0gb2Zmc2V0LmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxID0geCAtIG9mZnNldC5sZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MSA9IHkgLSBvZmZzZXQudG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZWZ0ID0geDEgLyBtYXJrQ29udGFpbmVyV2lkdGggKiAxMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9wID0geTEgLyBtYXJrQ29udGFpbmVySGVpZ2h0ICogMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzZXJNYXJrLnN0eWxlLmxlZnQgPSBsZWZ0ICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXNlck1hcmsuc3R5bGUudG9wID0gdG9wICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQod2hpdGVib2FyZEluc3RhbmNlLmxhc2VyVGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxhc2VyVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmxhc2VyUG9zaXRpb24gJiYgKE1hdGguYWJzKGxlZnQgLSB3aGl0ZWJvYXJkSW5zdGFuY2UubGFzZXJQb3NpdGlvbi5sZWZ0KSA+IDAuMyB8fCBNYXRoLmFicyh0b3AgLSB3aGl0ZWJvYXJkSW5zdGFuY2UubGFzZXJQb3NpdGlvbi50b3ApID4gMC4zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3BhcmFtZXRlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc2VyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHRvcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbk5hbWU6IFwibW92ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYXNlclBvc2l0aW9uID0gX3BhcmFtZXRlci5sYXNlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fc2VuZFdoaXRlYm9hcmRNZXNzYWdlVG9TaWduYWxsaW5nU2VydmVyKHdoaXRlYm9hcmRJbnN0YW5jZSwgXCJsYXNlck1hcmtFdmVudFwiLCBfcGFyYW1ldGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuX2xhc2VyRXZlbnRIYW5kbGVyX21vdXNlZW50ZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5hY3RpdmVUb29sICE9PSAndG9vbF9sYXNlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3BhcmFtZXRlcjIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uTmFtZTogXCJoaWRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fc2VuZFdoaXRlYm9hcmRNZXNzYWdlVG9TaWduYWxsaW5nU2VydmVyKHdoaXRlYm9hcmRJbnN0YW5jZSwgXCJsYXNlck1hcmtFdmVudFwiLCBfcGFyYW1ldGVyMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzZXJNYXJrLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZElubmVyVXRpbHMucmVtb3ZlRXZlbnQoY29udGFpbmVyRWxQYXJlbnQsICdtb3VzZWVudGVyJywgd2hpdGVib2FyZEluc3RhbmNlLl9sYXNlckV2ZW50SGFuZGxlcl9tb3VzZWVudGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1ldGVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25OYW1lOiBcInNob3dcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9zZW5kV2hpdGVib2FyZE1lc3NhZ2VUb1NpZ25hbGxpbmdTZXJ2ZXIod2hpdGVib2FyZEluc3RhbmNlLCBcImxhc2VyTWFya0V2ZW50XCIsIHBhcmFtZXRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXNlck1hcmsuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5fbGFzZXJFdmVudEhhbmRsZXJfbW91c2VsZWF2ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1ldGVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25OYW1lOiBcImhpZGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9zZW5kV2hpdGVib2FyZE1lc3NhZ2VUb1NpZ25hbGxpbmdTZXJ2ZXIod2hpdGVib2FyZEluc3RhbmNlLCBcImxhc2VyTWFya0V2ZW50XCIsIHBhcmFtZXRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXNlck1hcmsuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UuYWN0aXZlVG9vbCAhPT0gJ3Rvb2xfbGFzZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZElubmVyVXRpbHMucmVtb3ZlRXZlbnQoY29udGFpbmVyRWxQYXJlbnQsICdtb3VzZWxlYXZlJywgd2hpdGVib2FyZEluc3RhbmNlLl9sYXNlckV2ZW50SGFuZGxlcl9tb3VzZWxlYXZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9jaGFuZ2VXaGl0ZWJvYXJkVGVtcG9yYXJ5RGVhd1Blcm1pc3Npb24oZmFsc2UsIHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5zZWxlY3RMYXNlclRvb2wgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5uZXJVdGlscy5yZW1vdmVFdmVudCh0ZW1wb3JhcnlEcmF3UGVybWlzc2lvbiwgJ21vdXNlbW92ZScsIHdoaXRlYm9hcmRJbnN0YW5jZS5fbGFzZXJFdmVudEhhbmRsZXJfbW91c2Vtb3ZlKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZElubmVyVXRpbHMucmVtb3ZlRXZlbnQoY29udGFpbmVyRWxQYXJlbnQsICdtb3VzZWVudGVyJywgd2hpdGVib2FyZEluc3RhbmNlLl9sYXNlckV2ZW50SGFuZGxlcl9tb3VzZWVudGVyKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZElubmVyVXRpbHMucmVtb3ZlRXZlbnQoY29udGFpbmVyRWxQYXJlbnQsICdtb3VzZWxlYXZlJywgd2hpdGVib2FyZEluc3RhbmNlLl9sYXNlckV2ZW50SGFuZGxlcl9tb3VzZWxlYXZlKTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcG9yYXJ5RHJhd1Blcm1pc3Npb24uY2xhc3NOYW1lID0gdGVtcG9yYXJ5RHJhd1Blcm1pc3Npb24uY2xhc3NOYW1lLnJlcGxhY2UoLyBjdXJzb3Itbm9uZS9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcG9yYXJ5RHJhd1Blcm1pc3Npb24uY2xhc3NOYW1lICs9IFwiIGN1cnNvci1ub25lXCI7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYXNlclBvc2l0aW9uID0gd2hpdGVib2FyZEluc3RhbmNlLmxhc2VyUG9zaXRpb24gfHwgeyBsZWZ0OiAwLCB0b3A6IDAgfTtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZElubmVyVXRpbHMuYWRkRXZlbnQodGVtcG9yYXJ5RHJhd1Blcm1pc3Npb24sICdtb3VzZW1vdmUnLCB3aGl0ZWJvYXJkSW5zdGFuY2UuX2xhc2VyRXZlbnRIYW5kbGVyX21vdXNlbW92ZSk7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbm5lclV0aWxzLmFkZEV2ZW50KGNvbnRhaW5lckVsUGFyZW50LCAnbW91c2VlbnRlcicsIHdoaXRlYm9hcmRJbnN0YW5jZS5fbGFzZXJFdmVudEhhbmRsZXJfbW91c2VlbnRlcik7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbm5lclV0aWxzLmFkZEV2ZW50KGNvbnRhaW5lckVsUGFyZW50LCAnbW91c2VsZWF2ZScsIHdoaXRlYm9hcmRJbnN0YW5jZS5fbGFzZXJFdmVudEhhbmRsZXJfbW91c2VsZWF2ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fY2hhbmdlV2hpdGVib2FyZFRlbXBvcmFyeURlYXdQZXJtaXNzaW9uKHRvb2xLZXkgIT09ICd0b29sX21vdXNlJywgd2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZElubmVyVXRpbHMucmVtb3ZlRXZlbnQodGVtcG9yYXJ5RHJhd1Blcm1pc3Npb24sICdtb3VzZW1vdmUnLCB3aGl0ZWJvYXJkSW5zdGFuY2UuX2xhc2VyRXZlbnRIYW5kbGVyX21vdXNlbW92ZSk7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbm5lclV0aWxzLnJlbW92ZUV2ZW50KGNvbnRhaW5lckVsUGFyZW50LCAnbW91c2VlbnRlcicsIHdoaXRlYm9hcmRJbnN0YW5jZS5fbGFzZXJFdmVudEhhbmRsZXJfbW91c2VlbnRlcik7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbm5lclV0aWxzLnJlbW92ZUV2ZW50KGNvbnRhaW5lckVsUGFyZW50LCAnbW91c2VsZWF2ZScsIHdoaXRlYm9hcmRJbnN0YW5jZS5fbGFzZXJFdmVudEhhbmRsZXJfbW91c2VsZWF2ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBvcmFyeURyYXdQZXJtaXNzaW9uLmNsYXNzTmFtZSA9IHRlbXBvcmFyeURyYXdQZXJtaXNzaW9uLmNsYXNzTmFtZS5yZXBsYWNlKC8gY3Vyc29yLW5vbmUvZywgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGxhc2VyTWFyay5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLnNlbGVjdExhc2VyVG9vbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtZXRlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uTmFtZTogXCJoaWRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fc2VuZFdoaXRlYm9hcmRNZXNzYWdlVG9TaWduYWxsaW5nU2VydmVyKHdoaXRlYm9hcmRJbnN0YW5jZSwgXCJsYXNlck1hcmtFdmVudFwiLCBwYXJhbWV0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLnNlbGVjdExhc2VyVG9vbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoYXQuX2F1dG9tYXRpY1RyYXZlcnNlV2hpdGVib2FyZEluc3RhbmNlKHdoaXRlYm9hcmRJbnN0YW5jZSwgX2hhbmRsZXJBY3RpdmVUb29sTGFzZXJGcm9tSW5uZXIpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfc2VuZFNpZ25hbGxpbmdUb1NlcnZlcicsXG5cblxuICAgICAgICAvKuWPkemAgeeZveadv+aVsOaNruS/oeS7pOe7meacjeWKoeWZqCovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VuZFNpZ25hbGxpbmdUb1NlcnZlcih3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciBfcmVmMjEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgICAgICAgICAgIGlkUHJlZml4ID0gX3JlZjIxLmlkUHJlZml4LFxuICAgICAgICAgICAgICAgIGRhdGEgPSBfcmVmMjEuZGF0YSxcbiAgICAgICAgICAgICAgICBuYW1lID0gX3JlZjIxLm5hbWUsXG4gICAgICAgICAgICAgICAgYXNzaWduSWQgPSBfcmVmMjEuYXNzaWduSWQsXG4gICAgICAgICAgICAgICAgZG9fbm90X3NhdmUgPSBfcmVmMjEuZG9fbm90X3NhdmUsXG4gICAgICAgICAgICAgICAgZXhwaXJlc2FicyA9IF9yZWYyMS5leHBpcmVzYWJzLFxuICAgICAgICAgICAgICAgIGFzc29jaWF0ZWRNc2dJRCA9IF9yZWYyMS5hc3NvY2lhdGVkTXNnSUQsXG4gICAgICAgICAgICAgICAgYXNzb2NpYXRlZFVzZXJJRCA9IF9yZWYyMS5hc3NvY2lhdGVkVXNlcklEO1xuXG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbX3NlbmRTaWduYWxsaW5nVG9TZXJ2ZXJdd2hpdGVib2FyZEluc3RhbmNlIGlzIG5vdCBleGlzdCEnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIgJiYgd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIuc2VuZFNpZ25hbGxpbmdUb1NlcnZlciAmJiB0eXBlb2Ygd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIuc2VuZFNpZ25hbGxpbmdUb1NlcnZlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHZhciBfd2hpdGVib2FyZEluc3RhbmNlJGYyID0gd2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhLFxuICAgICAgICAgICAgICAgICAgICBjdXJycGFnZSA9IF93aGl0ZWJvYXJkSW5zdGFuY2UkZjIuY3VycnBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGZpbGVpZCA9IF93aGl0ZWJvYXJkSW5zdGFuY2UkZjIuZmlsZWlkO1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJwYWdlID09PSB1bmRlZmluZWQgfHwgZmlsZWlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tfc2VuZFNpZ25hbGxpbmdUb1NlcnZlcl13aGl0ZWJvYXJkSW5zdGFuY2UuZmlsZWRhdGEgZG8gbm90IGNvbnRhaW4gIGN1cnJwYWdlIG9yIGZpbGVpZCAsIFsgY3VycnBhZ2UgLCBmaWxlaWQgXWlzIFsnICsgY3VycnBhZ2UgKyAnLCcgKyBmaWxlaWQgKyAnXSEnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEud2hpdGVib2FyZElEID0gd2hpdGVib2FyZEluc3RhbmNlLmlkO1xuICAgICAgICAgICAgICAgIGRhdGEuaXNCYXNlYm9hcmQgPSB3aGl0ZWJvYXJkSW5zdGFuY2UuaXNCYXNlYm9hcmQ7XG4gICAgICAgICAgICAgICAgZGF0YS5uaWNrbmFtZSA9IHdoaXRlYm9hcmRJbnN0YW5jZS5uaWNrbmFtZTtcbiAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmRlcGVuZGVuY2VCYXNlYm9hcmRXaGl0ZWJvYXJkSUQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmRlcGVuZGVuY2VCYXNlYm9hcmRXaGl0ZWJvYXJkSUQgPSB3aGl0ZWJvYXJkSW5zdGFuY2UuZGVwZW5kZW5jZUJhc2Vib2FyZFdoaXRlYm9hcmRJRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXNzb2NpYXRlZE1zZ0lEID0gYXNzb2NpYXRlZE1zZ0lEIHx8IHdoaXRlYm9hcmRJbnN0YW5jZS5hc3NvY2lhdGVkTXNnSUQ7XG4gICAgICAgICAgICAgICAgYXNzb2NpYXRlZFVzZXJJRCA9IGFzc29jaWF0ZWRVc2VySUQgfHwgd2hpdGVib2FyZEluc3RhbmNlLmFzc29jaWF0ZWRVc2VySUQ7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gYXNzaWduSWQgfHwgaWRQcmVmaXggKyBcIiMjI19cIiArIG5hbWUgKyBcIl9cIiArIGZpbGVpZCArIFwiX1wiICsgY3VycnBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHRvSUQgPSBcIl9fYWxsRXhjZXB0U2VuZGVyXCI7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuZXZlbnRUeXBlID09PSAnc2hhcGVTYXZlRXZlbnQnIHx8IGRhdGEuZXZlbnRUeXBlID09PSAndW5kb0V2ZW50JyB8fCBkYXRhLmV2ZW50VHlwZSA9PT0gJ3JlZG9FdmVudCcgfHwgZGF0YS5ldmVudFR5cGUgPT09ICdjbGVhckV2ZW50Jykge1xuICAgICAgICAgICAgICAgICAgICB0b0lEID0gJ19fYWxsJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNvcHlEYXRhID0gT2JqZWN0LmRlZXBBc3NpZ24oe30sIGRhdGEpO1xuICAgICAgICAgICAgICAgIGlmICh0b0lEICE9PSAnX19hbGwnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NhdmVCYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdEYXRhKHsgbmFtZTogbmFtZSwgaWQ6IGlkLCB0b0lEOiB0b0lELCBkYXRhOiBjb3B5RGF0YSwgZG9fbm90X3NhdmU6IGRvX25vdF9zYXZlLCBleHBpcmVzYWJzOiBleHBpcmVzYWJzLCBhc3NvY2lhdGVkTXNnSUQ6IGFzc29jaWF0ZWRNc2dJRCwgYXNzb2NpYXRlZFVzZXJJRDogYXNzb2NpYXRlZFVzZXJJRCB9LCAncHVibXNnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5oYW5kbGVyLnNlbmRTaWduYWxsaW5nVG9TZXJ2ZXIobmFtZSwgaWQsIHRvSUQsIGRhdGEsIGRvX25vdF9zYXZlLCBleHBpcmVzYWJzLCBhc3NvY2lhdGVkTXNnSUQsIGFzc29jaWF0ZWRVc2VySUQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfZGVsU2lnbmFsbGluZ1RvU2VydmVyJyxcblxuXG4gICAgICAgIC8q5Y+R6YCB55m95p2/5pWw5o2u5L+h5Luk57uZ5pyN5Yqh5ZmoKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxTaWduYWxsaW5nVG9TZXJ2ZXIod2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgX3JlZjIyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgICAgICAgICAgICBpZFByZWZpeCA9IF9yZWYyMi5pZFByZWZpeCxcbiAgICAgICAgICAgICAgICBkYXRhID0gX3JlZjIyLmRhdGEsXG4gICAgICAgICAgICAgICAgbmFtZSA9IF9yZWYyMi5uYW1lLFxuICAgICAgICAgICAgICAgIGFzc2lnbklkID0gX3JlZjIyLmFzc2lnbklkO1xuXG4gICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbX2RlbFNpZ25hbGxpbmdUb1NlcnZlcl13aGl0ZWJvYXJkSW5zdGFuY2UgaXMgbm90IGV4aXN0IScpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlciAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlci5kZWxTaWduYWxsaW5nVG9TZXJ2ZXIgJiYgdHlwZW9mIHdoaXRlYm9hcmRJbnN0YW5jZS5oYW5kbGVyLmRlbFNpZ25hbGxpbmdUb1NlcnZlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHZhciBfd2hpdGVib2FyZEluc3RhbmNlJGYzID0gd2hpdGVib2FyZEluc3RhbmNlLmZpbGVkYXRhLFxuICAgICAgICAgICAgICAgICAgICBjdXJycGFnZSA9IF93aGl0ZWJvYXJkSW5zdGFuY2UkZjMuY3VycnBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGZpbGVpZCA9IF93aGl0ZWJvYXJkSW5zdGFuY2UkZjMuZmlsZWlkO1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJwYWdlID09PSB1bmRlZmluZWQgfHwgZmlsZWlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tfZGVsU2lnbmFsbGluZ1RvU2VydmVyXXdoaXRlYm9hcmRJbnN0YW5jZS5maWxlZGF0YSBkbyBub3QgY29udGFpbiAgY3VycnBhZ2Ugb3IgZmlsZWlkICwgWyBjdXJycGFnZSAsIGZpbGVpZCBdaXMgWycgKyBjdXJycGFnZSArICcsJyArIGZpbGVpZCArICddIScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEud2hpdGVib2FyZElEID0gd2hpdGVib2FyZEluc3RhbmNlLmlkO1xuICAgICAgICAgICAgICAgIGRhdGEuaXNCYXNlYm9hcmQgPSB3aGl0ZWJvYXJkSW5zdGFuY2UuaXNCYXNlYm9hcmQ7XG4gICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEID0gd2hpdGVib2FyZEluc3RhbmNlLmRlcGVuZGVuY2VCYXNlYm9hcmRXaGl0ZWJvYXJkSUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBpZCA9IGFzc2lnbklkIHx8IGlkUHJlZml4ICsgXCIjIyNfXCIgKyBuYW1lICsgXCJfXCIgKyBmaWxlaWQgKyBcIl9cIiArIGN1cnJwYWdlLFxuICAgICAgICAgICAgICAgICAgICB0b0lEID0gXCJfX2FsbEV4Y2VwdFNlbmRlclwiO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmV2ZW50VHlwZSA9PT0gJ3NoYXBlU2F2ZUV2ZW50JyB8fCBkYXRhLmV2ZW50VHlwZSA9PT0gJ3VuZG9FdmVudCcgfHwgZGF0YS5ldmVudFR5cGUgPT09ICdyZWRvRXZlbnQnIHx8IGRhdGEuZXZlbnRUeXBlID09PSAnY2xlYXJFdmVudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9JRCA9ICdfX2FsbCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjb3B5RGF0YSA9IE9iamVjdC5kZWVwQXNzaWduKHt9LCBkYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAodG9JRCAhPT0gJ19fYWxsJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zYXZlQmFzaWNUZW1wbGF0ZVdoaXRlYm9hcmRTaWduYWxsaW5nRGF0YSh7IG5hbWU6IG5hbWUsIGlkOiBpZCwgdG9JRDogdG9JRCwgZGF0YTogY29weURhdGEgfSwgJ2RlbG1zZycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlci5kZWxTaWduYWxsaW5nVG9TZXJ2ZXIobmFtZSwgaWQsIHRvSUQsIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfc2VuZFdoaXRlYm9hcmRNZXNzYWdlVG9TaWduYWxsaW5nU2VydmVyJyxcblxuXG4gICAgICAgIC8q5Y+R6YCB55m95p2/5raI5oGv57uZ5L+h5Luk5pyN5Yqh5ZmoKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kV2hpdGVib2FyZE1lc3NhZ2VUb1NpZ25hbGxpbmdTZXJ2ZXIod2hpdGVib2FyZEluc3RhbmNlLCBldmVudFR5cGUsIHBhcmFtZXRlcikge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGlkUHJlZml4ID0gdm9pZCAwLFxuICAgICAgICAgICAgICAgIGRhdGEgPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgbmFtZSA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgICBhc3NpZ25JZCA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgICBkb19ub3Rfc2F2ZSA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgICBzaGFwZURhdGEgPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgdGVzdERhdGEgPSB2b2lkIDA7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzaGFwZVNhdmVFdmVudFwiOlxuICAgICAgICAgICAgICAgICAgICBzaGFwZURhdGEgPSB3aW5kb3cuTEMuc2hhcGVUb0pTT04ocGFyYW1ldGVyLnNoYXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoYXBlRGF0YSAhPSBudWxsICYmIHNoYXBlRGF0YS5jbGFzc05hbWUgIT0gbnVsbCAmJiAoc2hhcGVEYXRhLmNsYXNzTmFtZSA9PSBcIkxpbmVQYXRoXCIgfHwgc2hhcGVEYXRhLmNsYXNzTmFtZSA9PSBcIkVyYXNlZExpbmVQYXRoXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFwZURhdGEuZGF0YS5zbW9vdGhlZFBvaW50Q29vcmRpbmF0ZVBhaXJzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzaGFwZURhdGEuZGF0YS5zbW9vdGhlZFBvaW50Q29vcmRpbmF0ZVBhaXJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcERhdGEgPSBzaGFwZURhdGEuZGF0YS5wb2ludENvb3JkaW5hdGVQYWlycztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcERhdGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1bMF0gPSBNYXRoLnJvdW5kKGl0ZW1bMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1bMV0gPSBNYXRoLnJvdW5kKGl0ZW1bMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGVzdERhdGEgPSB7IGV2ZW50VHlwZTogZXZlbnRUeXBlLCBhY3Rpb25OYW1lOiBwYXJhbWV0ZXIuYWN0aW9uLmFjdGlvbk5hbWUsIHNoYXBlSWQ6IHBhcmFtZXRlci5zaGFwZUlkLCBkYXRhOiBzaGFwZURhdGEgfTtcbiAgICAgICAgICAgICAgICAgICAgaWRQcmVmaXggPSBwYXJhbWV0ZXIuc2hhcGVJZCwgZGF0YSA9IHRlc3REYXRhLCBuYW1lID0gXCJTaGFycHNDaGFuZ2VcIiwgYXNzaWduSWQgPSB1bmRlZmluZWQsIGRvX25vdF9zYXZlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9zZW5kU2lnbmFsbGluZ1RvU2VydmVyKHdoaXRlYm9hcmRJbnN0YW5jZSwgeyBpZFByZWZpeDogaWRQcmVmaXgsIGRhdGE6IGRhdGEsIG5hbWU6IG5hbWUsIGFzc2lnbklkOiBhc3NpZ25JZCwgZG9fbm90X3NhdmU6IGRvX25vdF9zYXZlIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwidW5kb0V2ZW50XCI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbWV0ZXIuYWN0aW9uLmFjdGlvbk5hbWUgPT09IFwiQWRkU2hhcGVBY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXBlSWQgPSBwYXJhbWV0ZXIuYWN0aW9uLnNoYXBlSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0RGF0YSA9IHsgZXZlbnRUeXBlOiBldmVudFR5cGUsIGFjdGlvbk5hbWU6IHBhcmFtZXRlci5hY3Rpb24uYWN0aW9uTmFtZSwgc2hhcGVJZDogc2hhcGVJZCB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRQcmVmaXggPSBzaGFwZUlkLCBkYXRhID0gdGVzdERhdGEsIG5hbWUgPSBcIlNoYXJwc0NoYW5nZVwiLCBhc3NpZ25JZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX2RlbFNpZ25hbGxpbmdUb1NlcnZlcih3aGl0ZWJvYXJkSW5zdGFuY2UsIHsgaWRQcmVmaXg6IGlkUHJlZml4LCBkYXRhOiBkYXRhLCBuYW1lOiBuYW1lLCBhc3NpZ25JZDogYXNzaWduSWQgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1ldGVyLmFjdGlvbi5hY3Rpb25OYW1lID09PSBcIkNsZWFyQWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfY2xlYXJBY3Rpb25JZCA9IHBhcmFtZXRlci5hY3Rpb24uaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0RGF0YSA9IHsgZXZlbnRUeXBlOiBldmVudFR5cGUsIGFjdGlvbk5hbWU6IHBhcmFtZXRlci5hY3Rpb24uYWN0aW9uTmFtZSwgY2xlYXJBY3Rpb25JZDogX2NsZWFyQWN0aW9uSWQgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkUHJlZml4ID0gX2NsZWFyQWN0aW9uSWQsIGRhdGEgPSB0ZXN0RGF0YSwgbmFtZSA9IFwiU2hhcnBzQ2hhbmdlXCIsIGFzc2lnbklkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fZGVsU2lnbmFsbGluZ1RvU2VydmVyKHdoaXRlYm9hcmRJbnN0YW5jZSwgeyBpZFByZWZpeDogaWRQcmVmaXgsIGRhdGE6IGRhdGEsIG5hbWU6IG5hbWUsIGFzc2lnbklkOiBhc3NpZ25JZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVkb0V2ZW50XCI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbWV0ZXIuYWN0aW9uLmFjdGlvbk5hbWUgPT09IFwiQWRkU2hhcGVBY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVEYXRhID0gd2luZG93LkxDLnNoYXBlVG9KU09OKHBhcmFtZXRlci5hY3Rpb24uc2hhcGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYXBlRGF0YSAhPSBudWxsICYmIHNoYXBlRGF0YS5jbGFzc05hbWUgIT0gbnVsbCAmJiAoc2hhcGVEYXRhLmNsYXNzTmFtZSA9PSBcIkxpbmVQYXRoXCIgfHwgc2hhcGVEYXRhLmNsYXNzTmFtZSA9PSBcIkVyYXNlZExpbmVQYXRoXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVEYXRhLmRhdGEuc21vb3RoZWRQb2ludENvb3JkaW5hdGVQYWlycyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNoYXBlRGF0YS5kYXRhLnNtb290aGVkUG9pbnRDb29yZGluYXRlUGFpcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90bXBEYXRhID0gc2hhcGVEYXRhLmRhdGEucG9pbnRDb29yZGluYXRlUGFpcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RtcERhdGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtWzBdID0gTWF0aC5yb3VuZChpdGVtWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVsxXSA9IE1hdGgucm91bmQoaXRlbVsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9zaGFwZUlkID0gcGFyYW1ldGVyLmFjdGlvbi5zaGFwZUlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG90aGVySW5mbyA9IHsgYXV0aG9yVXNlcklkOiBwYXJhbWV0ZXIuYWN0aW9uLmF1dGhvclVzZXJJZCwgc2VxOiBwYXJhbWV0ZXIuYWN0aW9uLnNlcSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdERhdGEgPSB7IGV2ZW50VHlwZTogZXZlbnRUeXBlLCBhY3Rpb25OYW1lOiBwYXJhbWV0ZXIuYWN0aW9uLmFjdGlvbk5hbWUsIHNoYXBlSWQ6IF9zaGFwZUlkLCBkYXRhOiBzaGFwZURhdGEsIG90aGVySW5mbzogb3RoZXJJbmZvIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2lkUHJlZml4ID0gX3NoYXBlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RhdGEgPSB0ZXN0RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbmFtZSA9IFwiU2hhcnBzQ2hhbmdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Fzc2lnbklkID0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kb19ub3Rfc2F2ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3NlbmRTaWduYWxsaW5nVG9TZXJ2ZXIod2hpdGVib2FyZEluc3RhbmNlLCB7IGlkUHJlZml4OiBfaWRQcmVmaXgsIGRhdGE6IF9kYXRhLCBuYW1lOiBfbmFtZSwgYXNzaWduSWQ6IF9hc3NpZ25JZCwgZG9fbm90X3NhdmU6IF9kb19ub3Rfc2F2ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbWV0ZXIuYWN0aW9uLmFjdGlvbk5hbWUgPT09IFwiQ2xlYXJBY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9jbGVhckFjdGlvbklkMiA9IHBhcmFtZXRlci5hY3Rpb24uaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX290aGVySW5mbzIgPSB7IGF1dGhvclVzZXJJZDogcGFyYW1ldGVyLmFjdGlvbi5hdXRob3JVc2VySWQsIHNlcTogcGFyYW1ldGVyLmFjdGlvbi5zZXEsIHRvQXV0aG9yVXNlcklkOiBwYXJhbWV0ZXIuYWN0aW9uLnRvQXV0aG9yVXNlcklkIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0RGF0YSA9IHsgZXZlbnRUeXBlOiBldmVudFR5cGUsIGFjdGlvbk5hbWU6IHBhcmFtZXRlci5hY3Rpb24uYWN0aW9uTmFtZSwgY2xlYXJBY3Rpb25JZDogX2NsZWFyQWN0aW9uSWQyLCBvdGhlckluZm86IF9vdGhlckluZm8yIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZFByZWZpeCA9IF9jbGVhckFjdGlvbklkMiwgZGF0YSA9IHRlc3REYXRhLCBuYW1lID0gXCJTaGFycHNDaGFuZ2VcIiwgYXNzaWduSWQgPSB1bmRlZmluZWQsIGRvX25vdF9zYXZlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fc2VuZFNpZ25hbGxpbmdUb1NlcnZlcih3aGl0ZWJvYXJkSW5zdGFuY2UsIHsgaWRQcmVmaXg6IGlkUHJlZml4LCBkYXRhOiBkYXRhLCBuYW1lOiBuYW1lLCBhc3NpZ25JZDogYXNzaWduSWQsIGRvX25vdF9zYXZlOiBkb19ub3Rfc2F2ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2xlYXJFdmVudFwiOlxuICAgICAgICAgICAgICAgICAgICB2YXIgY2xlYXJBY3Rpb25JZCA9IHBhcmFtZXRlci5jbGVhckFjdGlvbklkO1xuICAgICAgICAgICAgICAgICAgICB0ZXN0RGF0YSA9IHsgZXZlbnRUeXBlOiBldmVudFR5cGUsIGFjdGlvbk5hbWU6IHBhcmFtZXRlci5hY3Rpb24uYWN0aW9uTmFtZSwgY2xlYXJBY3Rpb25JZDogY2xlYXJBY3Rpb25JZCB9O1xuICAgICAgICAgICAgICAgICAgICBpZFByZWZpeCA9IGNsZWFyQWN0aW9uSWQsIGRhdGEgPSB0ZXN0RGF0YSwgbmFtZSA9IFwiU2hhcnBzQ2hhbmdlXCIsIGFzc2lnbklkID0gdW5kZWZpbmVkLCBkb19ub3Rfc2F2ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZSAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UuaXNPbmx5VW5kb1JlZG9DbGVhck15c2VsZlNoYXBlICYmIHdoaXRlYm9hcmRJbnN0YW5jZS5teXNlbGZJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdERhdGEudG9BdXRob3JVc2VySWQgPSB3aGl0ZWJvYXJkSW5zdGFuY2UubXlzZWxmSWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fc2VuZFNpZ25hbGxpbmdUb1NlcnZlcih3aGl0ZWJvYXJkSW5zdGFuY2UsIHsgaWRQcmVmaXg6IGlkUHJlZml4LCBkYXRhOiBkYXRhLCBuYW1lOiBuYW1lLCBhc3NpZ25JZDogYXNzaWduSWQsIGRvX25vdF9zYXZlOiBkb19ub3Rfc2F2ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImxhc2VyTWFya0V2ZW50XCI6XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXNlck1hcmtJZCA9IFwibGFzZXJNYXJrRXZlbnRcIjtcbiAgICAgICAgICAgICAgICAgICAgdGVzdERhdGEgPSB7IGV2ZW50VHlwZTogZXZlbnRUeXBlLCBhY3Rpb25OYW1lOiBwYXJhbWV0ZXIuYWN0aW9uLmFjdGlvbk5hbWUgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtZXRlciAmJiBwYXJhbWV0ZXIubGFzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3REYXRhLmxhc2VyID0gcGFyYW1ldGVyLmxhc2VyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlkUHJlZml4ID0gbGFzZXJNYXJrSWQsIGRhdGEgPSB0ZXN0RGF0YSwgbmFtZSA9IFwiU2hhcnBzQ2hhbmdlXCIsIGFzc2lnbklkID0gdW5kZWZpbmVkLCBkb19ub3Rfc2F2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3NlbmRTaWduYWxsaW5nVG9TZXJ2ZXIod2hpdGVib2FyZEluc3RhbmNlLCB7IGlkUHJlZml4OiBpZFByZWZpeCwgZGF0YTogZGF0YSwgbmFtZTogbmFtZSwgYXNzaWduSWQ6IGFzc2lnbklkLCBkb19ub3Rfc2F2ZTogZG9fbm90X3NhdmUgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3VwZGF0ZVRleHRGb250JyxcblxuXG4gICAgICAgIC8q5pu05paw55m95p2/5a2X5L2TKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVUZXh0Rm9udCh3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIC8q77yaZm9udC1zdHlsZSB8IGZvbnQtdmFyaWFudCB8IGZvbnQtd2VpZ2h0IHwgZm9udC1zaXplIHwgbGluZS1oZWlnaHQgfCBmb250LWZhbWlseSAqL1xuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgIGZvbnQ6aXRhbGljIHNtYWxsLWNhcHMgYm9sZCAxMnB4LzEuNWVtIGFyaWFsLHZlcmRhbmE7ICDvvIjms6jvvJrnroDlhpnml7bvvIxmb250LXNpemXlkoxsaW5lLWhlaWdodOWPquiDvemAmui/h+aWnOadoC/nu4TmiJDkuIDkuKrlgLzvvIzkuI3og73liIblvIDlhpnjgILvvIlcclxuICAgICAgICAgICAgIOetieaViOS6ju+8mlxyXG4gICAgICAgICAgICAgZm9udC1zdHlsZTppdGFsaWM7XHJcbiAgICAgICAgICAgICBmb250LXZhcmlhbnQ6c21hbGwtY2FwcztcclxuICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OmJvbGQ7XHJcbiAgICAgICAgICAgICBmb250LXNpemU6MTJweDtcclxuICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OjEuNWVtO1xyXG4gICAgICAgICAgICAgZm9udC1mYW1pbHk6YXJpYWwsdmVyZGFuYTtcclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgX3VwZGF0ZVRleHRGb250RnJvbUlubmVyID0gZnVuY3Rpb24gX3VwZGF0ZVRleHRGb250RnJvbUlubmVyKHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHZhciBmb250U2l6ZSA9IHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkVG9vbHNJbmZvLmZvbnRTaXplO1xuICAgICAgICAgICAgICAgIHZhciBmb250RmFtaWx5ID0gd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8uZm9udEZhbWlseTtcbiAgICAgICAgICAgICAgICB2YXIgZm9udFN0eWxlID0gd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8uZm9udFN0eWxlO1xuICAgICAgICAgICAgICAgIHZhciBmb250V2VpZ2h0ID0gd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8uZm9udFdlaWdodDtcbiAgICAgICAgICAgICAgICB2YXIgdG9vbCA9IHdoaXRlYm9hcmRJbnN0YW5jZS5sYy50b29sO1xuICAgICAgICAgICAgICAgIGlmICh0b29sLm5hbWUgPT09IFwiVGV4dFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2wuZm9udCA9IGZvbnRTdHlsZSArIFwiIFwiICsgZm9udFdlaWdodCArIFwiIFwiICsgZm9udFNpemUgKyBcInB4IFwiICsgZm9udEZhbWlseTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhhdC5fYXV0b21hdGljVHJhdmVyc2VXaGl0ZWJvYXJkSW5zdGFuY2Uod2hpdGVib2FyZEluc3RhbmNlLCBfdXBkYXRlVGV4dEZvbnRGcm9tSW5uZXIpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfdXBkYXRlRXJhc2VyV2lkdGgnLFxuXG5cbiAgICAgICAgLyrmm7TmlrDmqaHnmq7lrr3luqYqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZUVyYXNlcldpZHRoKHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIF91cGRhdGVFcmFzZXJXaWR0aEZyb21Jbm5lciA9IGZ1bmN0aW9uIF91cGRhdGVFcmFzZXJXaWR0aEZyb21Jbm5lcih3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJhc2VyV2lkdGggPSB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5lcmFzZXJXaWR0aDtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMudHJpZ2dlcignc2V0U3Ryb2tlV2lkdGgnLCBlcmFzZXJXaWR0aCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhhdC5fYXV0b21hdGljVHJhdmVyc2VXaGl0ZWJvYXJkSW5zdGFuY2Uod2hpdGVib2FyZEluc3RhbmNlLCBfdXBkYXRlRXJhc2VyV2lkdGhGcm9tSW5uZXIpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfdXBkYXRlUGVuY2lsV2lkdGgnLFxuXG5cbiAgICAgICAgLyrmm7TmlrDnlLvnrJTnmoTlrr3luqYqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZVBlbmNpbFdpZHRoKHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIF91cGRhdGVQZW5jaWxXaWR0aEZyb21Jbm5lciA9IGZ1bmN0aW9uIF91cGRhdGVQZW5jaWxXaWR0aEZyb21Jbm5lcih3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGVuY2lsV2lkdGggPSB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5wZW5jaWxXaWR0aDtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMudHJpZ2dlcignc2V0U3Ryb2tlV2lkdGgnLCBwZW5jaWxXaWR0aCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhhdC5fYXV0b21hdGljVHJhdmVyc2VXaGl0ZWJvYXJkSW5zdGFuY2Uod2hpdGVib2FyZEluc3RhbmNlLCBfdXBkYXRlUGVuY2lsV2lkdGhGcm9tSW5uZXIpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfdXBkYXRlU2hhcGVXaWR0aCcsXG5cblxuICAgICAgICAvKuabtOaWsOW9oueKtueahOWuveW6piovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlU2hhcGVXaWR0aCh3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciBfdXBkYXRlU2hhcGVXaWR0aEZyb21Jbm5lciA9IGZ1bmN0aW9uIF91cGRhdGVTaGFwZVdpZHRoRnJvbUlubmVyKHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHZhciBzaGFwZVdpZHRoID0gd2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRUb29sc0luZm8uc2hhcGVXaWR0aDtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMudHJpZ2dlcignc2V0U3Ryb2tlV2lkdGgnLCBzaGFwZVdpZHRoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGF0Ll9hdXRvbWF0aWNUcmF2ZXJzZVdoaXRlYm9hcmRJbnN0YW5jZSh3aGl0ZWJvYXJkSW5zdGFuY2UsIF91cGRhdGVTaGFwZVdpZHRoRnJvbUlubmVyKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3VwZGF0ZUNvbG9yJyxcblxuXG4gICAgICAgIC8q5pu05paw6aKc6ImyKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVDb2xvcih3aGl0ZWJvYXJkSW5zdGFuY2UsIGNvbG9ySnNvbikge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKGNvbG9ySnNvbiAmJiAodHlwZW9mIGNvbG9ySnNvbiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29sb3JKc29uKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdmFyIF91cGRhdGVDb2xvckZyb21Jbm5lciA9IGZ1bmN0aW9uIF91cGRhdGVDb2xvckZyb21Jbm5lcih3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjEwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjEwID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IxMCA9IE9iamVjdC5rZXlzKGNvbG9ySnNvbilbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDEwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMCA9IChfc3RlcDEwID0gX2l0ZXJhdG9yMTAubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEwID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfc3RlcDEwLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yS2V5ID0ga2V5LnJlcGxhY2UoL0NvbG9yL2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuc2V0Q29sb3IoY29sb3JLZXksIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkVG9vbHNJbmZvW2NvbG9yS2V5ICsgXCJDb2xvclwiXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChjb2xvcktleSA9PT0gXCJwcmltYXJ5XCIgfHwgY29sb3JLZXkgPT09IFwic2Vjb25kYXJ5XCIpICYmICh3aGl0ZWJvYXJkSW5zdGFuY2UuYWN0aXZlVG9vbCA9PT0gXCJ0b29sX3JlY3RhbmdsZVwiIHx8IHdoaXRlYm9hcmRJbnN0YW5jZS5hY3RpdmVUb29sID09PSBcInRvb2xfcmVjdGFuZ2xlX2VtcHR5XCIgfHwgd2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZVRvb2wgPT09IFwidG9vbF9lbGxpcHNlXCIgfHwgd2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZVRvb2wgPT09IFwidG9vbF9lbGxpcHNlX2VtcHR5XCIgfHwgd2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZVRvb2wgPT09IFwidG9vbF9wb2x5Z29uXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UuYWN0aXZlVG9vbCA9PT0gXCJ0b29sX2VsbGlwc2VfZW1wdHlcIiB8fCB3aGl0ZWJvYXJkSW5zdGFuY2UuYWN0aXZlVG9vbCA9PT0gXCJ0b29sX3JlY3RhbmdsZV9lbXB0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+epuuW/g1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnNldENvbG9yKCdzZWNvbmRhcnknLCBcInRyYW5zcGFyZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmxjLnNldENvbG9yKCdzZWNvbmRhcnknLCB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mby5wcmltYXJ5Q29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2xvcktleSA9PT0gXCJwcmltYXJ5XCIgJiYgd2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZVRvb2wgPT09ICd0b29sX2hpZ2hsaWdodGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3IgPSB3aGl0ZWJvYXJkSW5zdGFuY2Uud2hpdGVib2FyZFRvb2xzSW5mb1tjb2xvcktleSArIFwiQ29sb3JcIl0uY29sb3JSZ2IoKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoXCJyZ2JcIiwgXCJyZ2JhXCIpLnJlcGxhY2UoXCIpXCIsIFwiLDAuNSlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5zZXRDb2xvcihjb2xvcktleSwgY29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjEwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMTAgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEwICYmIF9pdGVyYXRvcjEwLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IxMC5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGF0Ll9hdXRvbWF0aWNUcmF2ZXJzZVdoaXRlYm9hcmRJbnN0YW5jZSh3aGl0ZWJvYXJkSW5zdGFuY2UsIF91cGRhdGVDb2xvckZyb21Jbm5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19hY3Rpb25Jc0Rpc2FibGUnLFxuXG5cbiAgICAgICAgLyp1bmRv44CBcmVkb+OAgWNsZWFy562J5Yqo5L2c5piv5ZCm56aB55SoKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hY3Rpb25Jc0Rpc2FibGUod2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgX2FjdGlvbklzRGlzYWJsZUZyb21Jbm5uZXIgPSBmdW5jdGlvbiBfYWN0aW9uSXNEaXNhYmxlRnJvbUlubm5lcih3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAvL+WmguaenOeZveadv+WkhOS6jua/gOa0u+WKqOaAgVxuICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmxjLnNoYXBlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v55m95p2/5rKh5pyJ55S756yU5pWw5o2uXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlRGVzY0FycmF5ID0gW1snYWN0aW9uX2NsZWFyJywgeyBkaXNhYmxlZDogdHJ1ZSB9XSwgWyd0b29sX2VyYXNlcicsIHsgZGlzYWJsZWQ6IHRydWUgfV0sIFsndG9vbF9leWVkcm9wcGVyJywgeyBkaXNhYmxlZDogdHJ1ZSB9XV07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9iYXRjaFVwZGF0ZVRvb2xEZXNjKHdoaXRlYm9hcmRJbnN0YW5jZSwgdXBkYXRlRGVzY0FycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX25vdGljZVVwZGF0ZVRvb2xEZXNjKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3VwZGF0ZURlc2NBcnJheSA9IFtbJ2FjdGlvbl9jbGVhcicsIHsgZGlzYWJsZWQ6IGZhbHNlIH1dLCBbJ3Rvb2xfZXJhc2VyJywgeyBkaXNhYmxlZDogZmFsc2UgfV0sIFsndG9vbF9leWVkcm9wcGVyJywgeyBkaXNhYmxlZDogZmFsc2UgfV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5pc09ubHlVbmRvUmVkb0NsZWFyTXlzZWxmU2hhcGUgJiYgd2hpdGVib2FyZEluc3RhbmNlLm15c2VsZklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3VwZGF0ZURlc2NBcnJheSA9IFtbJ2FjdGlvbl9jbGVhcicsIHsgZGlzYWJsZWQ6IHRydWUgfV0sIFsndG9vbF9lcmFzZXInLCB7IGRpc2FibGVkOiB0cnVlIH1dLCBbJ3Rvb2xfZXllZHJvcHBlcicsIHsgZGlzYWJsZWQ6IHRydWUgfV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd2hpdGVib2FyZEluc3RhbmNlLmxjLnNoYXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLmxjLnNoYXBlc1tpXS5hdXRob3JVc2VySWQgPT0gd2hpdGVib2FyZEluc3RhbmNlLm15c2VsZklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdXBkYXRlRGVzY0FycmF5ID0gW1snYWN0aW9uX2NsZWFyJywgeyBkaXNhYmxlZDogZmFsc2UgfV0sIFsndG9vbF9lcmFzZXInLCB7IGRpc2FibGVkOiBmYWxzZSB9XSwgWyd0b29sX2V5ZWRyb3BwZXInLCB7IGRpc2FibGVkOiBmYWxzZSB9XV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX2JhdGNoVXBkYXRlVG9vbERlc2Mod2hpdGVib2FyZEluc3RhbmNlLCBfdXBkYXRlRGVzY0FycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX25vdGljZVVwZGF0ZVRvb2xEZXNjKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2UubGMuY2FuUmVkbygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL+S4jeiDveWkn3JlZG9cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3VwZGF0ZVRvb2xEZXNjKHdoaXRlYm9hcmRJbnN0YW5jZSwgJ2FjdGlvbl9yZWRvJywgeyBkaXNhYmxlZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX25vdGljZVVwZGF0ZVRvb2xEZXNjKHdoaXRlYm9hcmRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll91cGRhdGVUb29sRGVzYyh3aGl0ZWJvYXJkSW5zdGFuY2UsICdhY3Rpb25fcmVkbycsIHsgZGlzYWJsZWQ6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fbm90aWNlVXBkYXRlVG9vbERlc2Mod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXdoaXRlYm9hcmRJbnN0YW5jZS5sYy5jYW5VbmRvKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5LiN6IO95aSfdW5kb1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdXBkYXRlVG9vbERlc2Mod2hpdGVib2FyZEluc3RhbmNlLCAnYWN0aW9uX3VuZG8nLCB7IGRpc2FibGVkOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fbm90aWNlVXBkYXRlVG9vbERlc2Mod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3VwZGF0ZVRvb2xEZXNjKHdoaXRlYm9hcmRJbnN0YW5jZSwgJ2FjdGlvbl91bmRvJywgeyBkaXNhYmxlZDogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9ub3RpY2VVcGRhdGVUb29sRGVzYyh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoYXQuX2F1dG9tYXRpY1RyYXZlcnNlV2hpdGVib2FyZEluc3RhbmNlKHdoaXRlYm9hcmRJbnN0YW5jZSwgX2FjdGlvbklzRGlzYWJsZUZyb21Jbm5uZXIpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfem9vbUlzRGlzYWJsZScsXG5cblxuICAgICAgICAvKueZveadv+e8qeaUvuavlOS+i+WGs+WumuWFtuaPj+i/sOS/oeaBryovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfem9vbUlzRGlzYWJsZSh3aGl0ZWJvYXJkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciBfem9vbUlzRGlzYWJsZUZyb21Jbm5uZXIgPSBmdW5jdGlvbiBfem9vbUlzRGlzYWJsZUZyb21Jbm5uZXIod2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy/lpoLmnpznmb3mnb/lpITkuo7mv4DmtLvliqjmgIFcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkTWFnbmlmaWNhdGlvbiA8PSB0aGF0Lm1pbk1hZ25pZmljYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVEZXNjQXJyYXkgPSBbWyd6b29tX3NtYWxsJywgeyBkaXNhYmxlZDogdHJ1ZSB9XSwgWyd6b29tX2RlZmF1bHQnLCB7IGRpc2FibGVkOiB0cnVlIH1dXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX2JhdGNoVXBkYXRlVG9vbERlc2Mod2hpdGVib2FyZEluc3RhbmNlLCB1cGRhdGVEZXNjQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fbm90aWNlVXBkYXRlVG9vbERlc2Mod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdXBkYXRlRGVzY0FycmF5MiA9IFtbJ3pvb21fc21hbGwnLCB7IGRpc2FibGVkOiBmYWxzZSB9XSwgWyd6b29tX2RlZmF1bHQnLCB7IGRpc2FibGVkOiBmYWxzZSB9XV07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9iYXRjaFVwZGF0ZVRvb2xEZXNjKHdoaXRlYm9hcmRJbnN0YW5jZSwgX3VwZGF0ZURlc2NBcnJheTIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fbm90aWNlVXBkYXRlVG9vbERlc2Mod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLndoaXRlYm9hcmRNYWduaWZpY2F0aW9uID49IHRoYXQubWF4TWFnbmlmaWNhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fdXBkYXRlVG9vbERlc2Mod2hpdGVib2FyZEluc3RhbmNlLCAnem9vbV9iaWcnLCB7IGRpc2FibGVkOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fbm90aWNlVXBkYXRlVG9vbERlc2Mod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX3VwZGF0ZVRvb2xEZXNjKHdoaXRlYm9hcmRJbnN0YW5jZSwgJ3pvb21fYmlnJywgeyBkaXNhYmxlZDogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9ub3RpY2VVcGRhdGVUb29sRGVzYyh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoYXQuX2F1dG9tYXRpY1RyYXZlcnNlV2hpdGVib2FyZEluc3RhbmNlKHdoaXRlYm9hcmRJbnN0YW5jZSwgX3pvb21Jc0Rpc2FibGVGcm9tSW5ubmVyKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3Rvb2xJc1VzZScsXG5cblxuICAgICAgICAvKuW3peWFt+aYr+WQpuWcqOS9v+eUqCovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdG9vbElzVXNlKHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMSA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IxMSA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMTEgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMTEgPSBPYmplY3Qua2V5cyh3aGl0ZWJvYXJkSW5zdGFuY2UucmVnaXN0ZXJXaGl0ZWJvYXJkVG9vbHNMaXN0KVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMTE7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjExID0gKF9zdGVwMTEgPSBfaXRlcmF0b3IxMS5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTEgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfc3RlcDExLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgvdG9vbF8vZy50ZXN0KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5yZWdpc3RlcldoaXRlYm9hcmRUb29sc0xpc3Rba2V5XS5pc1VzZSA9IGtleSA9PT0gd2hpdGVib2FyZEluc3RhbmNlLmFjdGl2ZVRvb2w7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoL3pvb21fL2cudGVzdChrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2UucmVnaXN0ZXJXaGl0ZWJvYXJkVG9vbHNMaXN0W2tleV0uem9vbSA9IHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkTWFnbmlmaWNhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMTEgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMTEgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjExICYmIF9pdGVyYXRvcjExLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMTEucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IxMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IxMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fbm90aWNlVXBkYXRlVG9vbERlc2Mod2hpdGVib2FyZEluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2F1dG9tYXRpY1RyYXZlcnNlV2hpdGVib2FyZEluc3RhbmNlJyxcblxuXG4gICAgICAgIC8q6Ieq5Yqo6YGN5Y6G55m95p2/5a6e5L6L77yM5aaC5p6c5a6e5L6L5rKh5pyJ5YiZ6YGN5Y6G5omA5pyJ5a6e5L6L5omn6KGM5aSE55CGKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hdXRvbWF0aWNUcmF2ZXJzZVdoaXRlYm9hcmRJbnN0YW5jZSh3aGl0ZWJvYXJkSW5zdGFuY2UsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMiA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMTIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IxMiA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjEyID0gT2JqZWN0LnZhbHVlcyh0aGF0LndoaXRlYm9hcmRJbnN0YW5jZVN0b3JlKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMTI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEyID0gKF9zdGVwMTIgPSBfaXRlcmF0b3IxMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTIgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3doaXRlYm9hcmRJbnN0YW5jZTIgPSBfc3RlcDEyLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soX3doaXRlYm9hcmRJbnN0YW5jZTIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMTIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjEyID0gZXJyO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMiAmJiBfaXRlcmF0b3IxMi5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IxMi5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjEyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IxMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3NhdmVBd2FpdFNhdmVUb1doaXRlYm9hcmRJbnN0YW5jZVNpZ25hbGxpbmdUb1doaXRlYm9hcmRJbnN0YW5jZScsXG5cblxuICAgICAgICAvKuS/neWtmOetieW+heeahOeZveadv+S/oeS7pOaVsOaNruWIsOebuOW6lOeahOeZveadv+WunuS+i+S4rSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2F2ZUF3YWl0U2F2ZVRvV2hpdGVib2FyZEluc3RhbmNlU2lnbmFsbGluZ1RvV2hpdGVib2FyZEluc3RhbmNlKHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgdmFyIGlzQ2xlYXIgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5hd2FpdFNhdmVUb1doaXRlYm9hcmRJbnN0YW5jZVNpZ25hbGxpbmdBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciB3YWl0aW5nUHJvY2Vzc0RhdGEgPSB0aGlzLmF3YWl0U2F2ZVRvV2hpdGVib2FyZEluc3RhbmNlU2lnbmFsbGluZ0FycmF5W2ldO1xuICAgICAgICAgICAgICAgIGlmICh3YWl0aW5nUHJvY2Vzc0RhdGEuZGF0YSAmJiB0eXBlb2Ygd2FpdGluZ1Byb2Nlc3NEYXRhLmRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhaXRpbmdQcm9jZXNzRGF0YS5kYXRhID0gSlNPTi5wYXJzZSh3YWl0aW5nUHJvY2Vzc0RhdGEuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh3YWl0aW5nUHJvY2Vzc0RhdGEuZGF0YS53aGl0ZWJvYXJkSUQgPT09IHdoaXRlYm9hcmRJbnN0YW5jZS5pZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcGVOYW1lID0gd2FpdGluZ1Byb2Nlc3NEYXRhLmlkLnN1YnN0cmluZyh3YWl0aW5nUHJvY2Vzc0RhdGEuaWQubGFzdEluZGV4T2YoXCIjIyNfXCIpICsgNCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaGFwZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaGFwZU5hbWVBcnIgPSBzaGFwZU5hbWUuc3BsaXQoXCJfXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVOYW1lID0gc2hhcGVOYW1lQXJyWzBdICsgJ18nICsgc2hhcGVOYW1lQXJyWzFdICsgJ18nICsgc2hhcGVOYW1lQXJyWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3aGl0ZWJvYXJkSW5zdGFuY2Uud2FpdGluZ1Byb2Nlc3NTaGFwZURhdGFbc2hhcGVOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS53YWl0aW5nUHJvY2Vzc1NoYXBlRGF0YVtzaGFwZU5hbWVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLndhaXRpbmdQcm9jZXNzU2hhcGVEYXRhW3NoYXBlTmFtZV0ucHVzaCh3YWl0aW5nUHJvY2Vzc0RhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkSW5zdGFuY2Uud2FpdGluZ1Byb2Nlc3NTaGFwZURhdGFbc2hhcGVOYW1lXS5wdXNoKHdhaXRpbmdQcm9jZXNzRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0NsZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXdhaXRTYXZlVG9XaGl0ZWJvYXJkSW5zdGFuY2VTaWduYWxsaW5nQXJyYXkuc3BsaWNlKGksIDEsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzQ2xlYXIpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTggPSB0aGlzLmF3YWl0U2F2ZVRvV2hpdGVib2FyZEluc3RhbmNlU2lnbmFsbGluZ0FycmF5Lmxlbmd0aCAtIDE7IF9pOCA+PSAwOyBfaTgtLSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hd2FpdFNhdmVUb1doaXRlYm9hcmRJbnN0YW5jZVNpZ25hbGxpbmdBcnJheVtfaThdID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF3YWl0U2F2ZVRvV2hpdGVib2FyZEluc3RhbmNlU2lnbmFsbGluZ0FycmF5LnNwbGljZShfaTgsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfYmFzaWNUZW1wbGF0ZVdoaXRlYm9hcmRTaWduYWxsaW5nTGlzdFRvV2hpdGVib2FyZEluc3RhbmNlJyxcblxuXG4gICAgICAgIC8q5qih5p2/5pWw5o2u5L+d5a2Y5YiwKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9iYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdMaXN0VG9XaGl0ZWJvYXJkSW5zdGFuY2Uod2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlLm5lZWRMb29hZEJhc2Vib2FyZCAmJiAhd2hpdGVib2FyZEluc3RhbmNlLmlzQmFzZWJvYXJkICYmIHdoaXRlYm9hcmRJbnN0YW5jZS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEICE9PSB1bmRlZmluZWQgJiYgIXdoaXRlYm9hcmRJbnN0YW5jZS5pc0hhbmRsZUJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0xpc3QgJiYgd2hpdGVib2FyZEluc3RhbmNlLmlkICE9PSB3aGl0ZWJvYXJkSW5zdGFuY2UuZGVwZW5kZW5jZUJhc2Vib2FyZFdoaXRlYm9hcmRJRCAmJiB0aGlzLmJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0xpc3Rbd2hpdGVib2FyZEluc3RhbmNlLmRlcGVuZGVuY2VCYXNlYm9hcmRXaGl0ZWJvYXJkSURdICYmIEFycmF5LmlzQXJyYXkodGhpcy5iYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdMaXN0W3doaXRlYm9hcmRJbnN0YW5jZS5kZXBlbmRlbmNlQmFzZWJvYXJkV2hpdGVib2FyZElEXSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9iYXRjaFJlY2VpdmVTbmFwc2hvdCh0aGlzLmJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0xpc3Rbd2hpdGVib2FyZEluc3RhbmNlLmRlcGVuZGVuY2VCYXNlYm9hcmRXaGl0ZWJvYXJkSURdLCB3aGl0ZWJvYXJkSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRJbnN0YW5jZS5pc0hhbmRsZUJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0xpc3QgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfY29udmVydENhbnZhc1RvSW1hZ2UnLFxuXG5cbiAgICAgICAgLyrku44gY2FudmFzIOaPkOWPluWbvueJhyBpbWFnZSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY29udmVydENhbnZhc1RvSW1hZ2Uod2hpdGVib2FyZEluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3BuZyc7XG5cbiAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkSW5zdGFuY2UgJiYgd2hpdGVib2FyZEluc3RhbmNlLmxjICYmIHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5jYW52YXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gd2hpdGVib2FyZEluc3RhbmNlLmxjLmNhbnZhcztcbiAgICAgICAgICAgICAgICAvL+aWsEltYWdl5a+56LGh77yM5Y+v5Lul55CG6Kej5Li6RE9NXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICAgICAgLy8gY2FudmFzLnRvRGF0YVVSTCDov5Tlm57nmoTmmK/kuIDkuLJCYXNlNjTnvJbnoIHnmoRVUkzvvIzlvZPnhLYs5rWP6KeI5Zmo6Ieq5bex6IKv5a6a5pSv5oyBXG4gICAgICAgICAgICAgICAgaW1hZ2Uuc3JjID0gY2FudmFzLnRvRGF0YVVSTChcImltYWdlL1wiICsgdHlwZSk7IC8vIOaMh+WumuagvOW8jyBQTkdcbiAgICAgICAgICAgICAgICByZXR1cm4gaW1hZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19jb252ZXJ0Q2FudmFzVG9JbWFnZUJhc2U2NCcsXG5cblxuICAgICAgICAvKuS7jiBjYW52YXMg5o+Q5Y+W5Zu+54mHIGltYWdlIGJhc2U2NCovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY29udmVydENhbnZhc1RvSW1hZ2VCYXNlNjQod2hpdGVib2FyZEluc3RhbmNlLCB0eXBlKSB7XG4gICAgICAgICAgICBpZiAod2hpdGVib2FyZEluc3RhbmNlICYmIHdoaXRlYm9hcmRJbnN0YW5jZS5sYyAmJiB3aGl0ZWJvYXJkSW5zdGFuY2UubGMuY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNhbnZhcyA9IHdoaXRlYm9hcmRJbnN0YW5jZS5sYy5jYW52YXM7XG4gICAgICAgICAgICAgICAgLy8gY2FudmFzLnRvRGF0YVVSTCDov5Tlm57nmoTmmK/kuIDkuLJCYXNlNjTnvJbnoIHnmoRVUkzvvIzlvZPnhLYs5rWP6KeI5Zmo6Ieq5bex6IKv5a6a5pSv5oyBXG4gICAgICAgICAgICAgICAgdmFyIGltZ0Jhc2U2NCA9IGNhbnZhcy50b0RhdGFVUkwoXCJpbWFnZS9cIiArIHR5cGUpOyAvLyDmjIflrprmoLzlvI8gUE5HXG4gICAgICAgICAgICAgICAgcmV0dXJuIGltZ0Jhc2U2NDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3NhdmVCYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdEYXRhJyxcblxuXG4gICAgICAgIC8q5L+d5a2Y5Z+656GA5qih5p2/5pWw5o2uKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zYXZlQmFzaWNUZW1wbGF0ZVdoaXRlYm9hcmRTaWduYWxsaW5nRGF0YShzaWduYWxsaW5nRGF0YSwgc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoc2lnbmFsbGluZ0RhdGEgJiYgc2lnbmFsbGluZ0RhdGEuZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChzaWduYWxsaW5nRGF0YS5kYXRhLmlzQmFzZWJvYXJkICYmIHNpZ25hbGxpbmdEYXRhLmRhdGEud2hpdGVib2FyZElEICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2lnbmFsbGluZ0RhdGEuc291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2ljVGVtcGxhdGVXaGl0ZWJvYXJkU2lnbmFsbGluZ0xpc3Rbc2lnbmFsbGluZ0RhdGEuZGF0YS53aGl0ZWJvYXJkSURdID0gdGhpcy5iYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdMaXN0W3NpZ25hbGxpbmdEYXRhLmRhdGEud2hpdGVib2FyZElEXSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNpY1RlbXBsYXRlV2hpdGVib2FyZFNpZ25hbGxpbmdMaXN0W3NpZ25hbGxpbmdEYXRhLmRhdGEud2hpdGVib2FyZElEXS5wdXNoKHNpZ25hbGxpbmdEYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19oYW5kbGVyU2hvd1JlbW90ZVJlbWluZENvbnRlbnRGcm9tUHVibXNnRGF0YScsXG5cblxuICAgICAgICAvKuaYvuekuui/nOeoi+aPkOekuuWGheWuue+8jOadpeiHquS6jnB1Ym1zZyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlclNob3dSZW1vdGVSZW1pbmRDb250ZW50RnJvbVB1Ym1zZ0RhdGEod2hpdGVib2FyZEluc3RhbmNlLCBwdWJtc2dEYXRhKSB7XG4gICAgICAgICAgICB2YXIgeCA9IHZvaWQgMCxcbiAgICAgICAgICAgICAgICB5ID0gdm9pZCAwLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAocHVibXNnRGF0YS5zb3VyY2UgPT09ICdwdWJtc2cnICYmIHB1Ym1zZ0RhdGEuZGF0YSAmJiBwdWJtc2dEYXRhLmRhdGEuZXZlbnRUeXBlID09PSAnc2hhcGVTYXZlRXZlbnQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHB1Ym1zZ0RhdGEuZGF0YS5kYXRhLmNsYXNzTmFtZSA9PSBcIkxpbmVQYXRoXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyckxlbmd0aCA9IHB1Ym1zZ0RhdGEuZGF0YS5kYXRhLnBvaW50cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcnJMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gcHVibXNnRGF0YS5kYXRhLmRhdGEucG9pbnRzW2Fyckxlbmd0aCAtIDFdLng7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gcHVibXNnRGF0YS5kYXRhLmRhdGEucG9pbnRzW2Fyckxlbmd0aCAtIDFdLnk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gcHVibXNnRGF0YS5yZW1pbmRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb2R1Y3Rpb25XaGl0ZWJvYXJkUmVtaW5kQ29udGVudCh3aGl0ZWJvYXJkSW5zdGFuY2UsIHgsIHksIGNvbnRlbnQsIHB1Ym1zZ0RhdGEuZGF0YS5zaGFwZUlkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHB1Ym1zZ0RhdGEuZGF0YS5kYXRhLmNsYXNzTmFtZSA9PSBcIlJlY3RhbmdsZVwiIHx8IHB1Ym1zZ0RhdGEuZGF0YS5kYXRhLmNsYXNzTmFtZSA9PSBcIkVsbGlwc2VcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHVibXNnRGF0YS5kYXRhLmRhdGEud2lkdGggPiAwICYmIHB1Ym1zZ0RhdGEuZGF0YS5kYXRhLmhlaWdodCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSBwdWJtc2dEYXRhLmRhdGEuZGF0YS54ICsgcHVibXNnRGF0YS5kYXRhLmRhdGEud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gcHVibXNnRGF0YS5kYXRhLmRhdGEueTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwdWJtc2dEYXRhLmRhdGEuZGF0YS53aWR0aCA+IDAgJiYgcHVibXNnRGF0YS5kYXRhLmRhdGEuaGVpZ2h0IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IHB1Ym1zZ0RhdGEuZGF0YS5kYXRhLnggKyBwdWJtc2dEYXRhLmRhdGEuZGF0YS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBwdWJtc2dEYXRhLmRhdGEuZGF0YS55ICsgcHVibXNnRGF0YS5kYXRhLmRhdGEuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHB1Ym1zZ0RhdGEuZGF0YS5kYXRhLndpZHRoIDwgMCAmJiBwdWJtc2dEYXRhLmRhdGEuZGF0YS5oZWlnaHQgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gcHVibXNnRGF0YS5kYXRhLmRhdGEueDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBwdWJtc2dEYXRhLmRhdGEuZGF0YS55ICsgcHVibXNnRGF0YS5kYXRhLmRhdGEuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHB1Ym1zZ0RhdGEuZGF0YS5kYXRhLndpZHRoIDwgMCAmJiBwdWJtc2dEYXRhLmRhdGEuZGF0YS5oZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gcHVibXNnRGF0YS5kYXRhLmRhdGEueDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBwdWJtc2dEYXRhLmRhdGEuZGF0YS55O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBwdWJtc2dEYXRhLnJlbWluZENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb2R1Y3Rpb25XaGl0ZWJvYXJkUmVtaW5kQ29udGVudCh3aGl0ZWJvYXJkSW5zdGFuY2UsIHgsIHksIGNvbnRlbnQsIHB1Ym1zZ0RhdGEuZGF0YS5zaGFwZUlkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHB1Ym1zZ0RhdGEuZGF0YS5kYXRhLmNsYXNzTmFtZSA9PSBcIlRleHRcIikge1xuICAgICAgICAgICAgICAgICAgICB4ID0gcHVibXNnRGF0YS5kYXRhLmRhdGEueCArIHB1Ym1zZ0RhdGEuZGF0YS5kYXRhLnJlbmRlcmVyLm1ldHJpY3Mud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBwdWJtc2dEYXRhLmRhdGEuZGF0YS55ICsgcHVibXNnRGF0YS5kYXRhLmRhdGEucmVuZGVyZXIubWV0cmljc2VzLmxlbmd0aCAqIDIwO1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gcHVibXNnRGF0YS5yZW1pbmRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9kdWN0aW9uV2hpdGVib2FyZFJlbWluZENvbnRlbnQod2hpdGVib2FyZEluc3RhbmNlLCB4LCB5LCBjb250ZW50LCBwdWJtc2dEYXRhLmRhdGEuc2hhcGVJZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwdWJtc2dEYXRhLmRhdGEuZGF0YS5jbGFzc05hbWUgPT0gXCJMaW5lXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IHB1Ym1zZ0RhdGEuZGF0YS5kYXRhLngyO1xuICAgICAgICAgICAgICAgICAgICB5ID0gcHVibXNnRGF0YS5kYXRhLmRhdGEueTI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBwdWJtc2dEYXRhLnJlbWluZENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb2R1Y3Rpb25XaGl0ZWJvYXJkUmVtaW5kQ29udGVudCh3aGl0ZWJvYXJkSW5zdGFuY2UsIHgsIHksIGNvbnRlbnQsIHB1Ym1zZ0RhdGEuZGF0YS5zaGFwZUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKumAmuefpeeZveadv+W3peWFt+S/oeaBr+abtOaWsCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19ub3RpY2VOcGRhdGVXaGl0ZWJvYXJkVG9vbHNJbmZvJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9ub3RpY2VOcGRhdGVXaGl0ZWJvYXJkVG9vbHNJbmZvKHdoaXRlYm9hcmRJbnN0YW5jZSkge1xuICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRJbnN0YW5jZS5oYW5kbGVyICYmIHR5cGVvZiB3aGl0ZWJvYXJkSW5zdGFuY2UuaGFuZGxlci5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgd2hpdGVib2FyZEluc3RhbmNlLmhhbmRsZXIucmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjaygndXBkYXRlV2hpdGVib2FyZFRvb2xzSW5mbycsIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHdoaXRlYm9hcmRJbnN0YW5jZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZFRvb2xzSW5mbzogT2JqZWN0LmRlZXBBc3NpZ24oe30sIHdoaXRlYm9hcmRJbnN0YW5jZS53aGl0ZWJvYXJkVG9vbHNJbmZvKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFdoaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjtcbn0oKTtcblxuO1xudmFyIFdoaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllckluc3RhbmNlID0gbmV3IFdoaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcigpO1xuLy8gd2luZG93LldoaXRlYm9hcmRJbnN0YW5jZSA9IFdoaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllckluc3RhbmNlIDtcbmV4cG9ydHMuZGVmYXVsdCA9IFdoaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllckluc3RhbmNlOyIsIi8qKlxyXG4gKiBzZGvnmb3mnb/lhajlsYDphY3nva7pobnlr7nosaFcclxuICogQGNsYXNzIENvbmZpZ3VyYXRpb25cclxuICogQGRlc2NyaXB0aW9uICAg5o+Q5L6bIOaJgOmcgOeahOWFqOWxgOmFjee9rumhuVxyXG4gKiBAYXV0aG9yIOmCseW5v+eUn1xyXG4gKiBAZGF0ZSAyMDE4LTA0LTIwXHJcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgQ29uZmlndXJhdGlvbiA9IHt9O1xuLyrmiYDmnInnmb3mnb/lhazmnInphY3nva4qL1xuQ29uZmlndXJhdGlvbi5jb21tb25XaGl0ZWJvYXJkID0ge1xuICAgIHdlYkFkZHJlc3M6IC9odHRwOi8udGVzdCh3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wpID8gJ2h0dHA6Ly9nbG9iYWwudGFsay1jbG91ZC5uZXQ6ODAnIDogJ2h0dHBzOi8vZ2xvYmFsLnRhbGstY2xvdWQubmV0OjQ0MycsIC8vcGhw5pyN5Yqh5Zmo5Zyw5Z2AKOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqClcbiAgICBkb2NBZGRyZXNzOiAvaHR0cDovLnRlc3Qod2luZG93LmxvY2F0aW9uLnByb3RvY29sKSA/ICdodHRwOi8vZ2xvYmFsLnRhbGstY2xvdWQubmV0OjgwJyA6ICdodHRwczovL2dsb2JhbC50YWxrLWNsb3VkLm5ldDo0NDMnLCAvL+aWh+aho+acjeWKoeWZqOWcsOWdgCjms6jvvJrkuI3mj5Dkvpvnu5nnlKjmiLfvvIzoh6rlt7HlhoXpg6jkvb/nlKgpXG4gICAgYmFja3VwRG9jQWRkcmVzc0xpc3Q6IFtdLCAvL+Wkh+S7veaWh+aho+Wfn+WQjeWIl+ihqCjms6jvvJrkuI3mj5Dkvpvnu5nnlKjmiLfvvIzoh6rlt7HlhoXpg6jkvb/nlKgpXG4gICAgbXlVc2VySWQ6IHVuZGVmaW5lZCwgLy/miJHnmoR1c2VySUQo5rOo77ya5LiN5o+Q5L6b57uZ55So5oi377yM6Ieq5bex5YaF6YOo5L2/55SoKVxuICAgIG15Um9sZTogdW5kZWZpbmVkLCAvL+aIkeeahOinkuiJsijms6jvvJrkuI3mj5Dkvpvnu5nnlKjmiLfvvIzoh6rlt7HlhoXpg6jkvb/nlKgpXG4gICAgbXlOYW1lOiB1bmRlZmluZWQsIC8v5oiR55qE5ZCN5a2XKOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqClcbiAgICBpc0Nvbm5lY3RlZFJvb206IGZhbHNlLCAvL+aYr+WQpuW3sue7j+i/nuaOpeaIv+mXtO+8jOm7mOiupGZhbHNlKOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqClcbiAgICBpc1BsYXliYWNrOiBmYWxzZSwgLy/mmK/lkKbmmK/lm57mlL4s6buY6K6kZmFsc2Uo5rOo77ya5LiN5o+Q5L6b57uZ55So5oi377yM6Ieq5bex5YaF6YOo5L2/55SoKVxuICAgIGRldmljZVR5cGU6IHVuZGVmaW5lZCwgLy/orr7lpIfnsbvlnovvvIxwaG9uZSAsIHBhZCAgLCB3aW5kb3dDbGllbnQgLCBtYWNDbGllbnQgKOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqO+8jOW5tuS4lOWPquacieenu+WKqOerr+S9v+eUqClcbiAgICBjbGllbnRUeXBlOiB1bmRlZmluZWQgLy9hbmRyb2lkICwgaW9zXG59O1xuXG4vL1RPRE8g5Yqo5oCBUFBU6KeG6aKR5pKt5pS+5Y+v6IO96ZyA6KaB5a6a5LmJ5paw55qE5p2D6ZmQXG4vKum7mOiupOeZveadv+mFjee9rumhuSovXG5Db25maWd1cmF0aW9uLmRlZmF1bHRXaGl0ZWJvYXJkID0ge1xuICAgIGlzQmFja0V2ZW50OiB0cnVlLCAvL+aYr+WQpui/lOWbnuivvuS7tum8oOagh+S9jee9ruS/oeaBryDkvJrorq7niYhcbiAgICBoYXNFeHRlbmREb2N1bWVudDogZmFsc2UsIC8v5piv5ZCm5pSv5oyB5omp5bGV5paH5qGjXG4gICAgc2hvd3BhZ2VOb3RpY2U6IGZhbHNlLCAvL+e/u+mhtea2iOaBr+aYr+WQpumAmuefpee7meWOn+eUn+eoi+W6jyjms6jvvJrkuI3mj5Dkvpvnu5nnlKjmiLfvvIzoh6rlt7HlhoXpg6jkvb/nlKgpXG4gICAgbG9hZER5bmFtaWNQcHRWaWV3OiB0cnVlLCAvL+WKoOi9veWKqOaAgXBwdOinhuWbvijms6jvvJrkuI3mj5Dkvpvnu5nnlKjmiLfvvIzoh6rlt7HlhoXpg6jkvb/nlKgpXG4gICAgbG9hZEg1RG9jdW1lbnRWaWV3OiB0cnVlLCAvL+WKoOi9vWg16K++5Lu26KeG5Zu+KOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqClcbiAgICBpc01vYmlsZTogZmFsc2UsIC8v5piv5ZCm5piv56e75Yqo56uvIO+8jCDpu5jorqRmYWxzZSjms6jvvJrkuI3mj5Dkvpvnu5nnlKjmiLfvvIzoh6rlt7HlhoXpg6jkvb/nlKgpXG4gICAgbWVkaWFTaGFyZVRvSUQ6IHVuZGVmaW5lZCwgLy/lqpLkvZPlhbHkuqvnu5nosIEg77yMIOS4jeaMh+WumuWImem7mOiupOWFseS6q+e7meaJgOacieS6uijms6jvvJrkuI3mj5Dkvpvnu5nnlKjmiLfvvIzoh6rlt7HlhoXpg6jkvb/nlKgpXG4gICAgYXNzb2NpYXRlZE1zZ0lEOiB1bmRlZmluZWQsIC8v57uR5a6a55qE5L+h5Luk5raI5oGvaWQgKOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqClcbiAgICBhc3NvY2lhdGVkVXNlcklEOiB1bmRlZmluZWQsIC8v57uR5a6a55qE55So5oi3aWQgKOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqClcbiAgICBjbGllbnRNZWRpYVNoYXJlOiBmYWxzZSwgLy/mmK/lkKbmmK/lrqLmiLfnq6/lhbHkuqvlqpLkvZMgLCDpu5jorqRmYWxzZSjms6jvvJrkuI3mj5Dkvpvnu5nnlKjmiLfvvIzoh6rlt7HlhoXpg6jkvb/nlKgpXG4gICAgbWVkaWFTaGFyZVBhdXNlV2hlbk92ZXI6IGZhbHNlLCAvL+aYr+WQpuaSreaUvue7k+adn+aaguWBnOS4jeiHquWKqOWFs+mXrSAsIOm7mOiupOiHquWKqOWFs+mXreS4jeaaguWBnCjms6jvvJrkuI3mj5Dkvpvnu5nnlKjmiLfvvIzoh6rlt7HlhoXpg6jkvb/nlKgpXG4gICAgaXNMb2FkQXVkaW9QbGF5ZXI6IHRydWUsIC8v5piv5ZCm5Yqg6L296Z+z6aKR5pKt5pS+5ZmoIO+8jOm7mOiupHRydWUgKOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqClcbiAgICBpc0xvYWRWaWRlb1BsYXllcjogdHJ1ZSwgLy/mmK/lkKbliqDovb3op4bpopHmkq3mlL7lmagg77yM6buY6K6kdHJ1ZSAgKOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqClcbiAgICBpc0xvYWREb2N1bWVudFJlbWFyazogdHJ1ZSwgLy/mmK/lkKbliqDovb3or77ku7blpIfms6gg77yM6buY6K6kdHJ1ZSAgKOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqClcbiAgICBjYW5SZW1hcms6IGZhbHNlLCAvL+iOt+WPluivvuS7tuWkh+azqOadg+mZkO+8jOm7mOiupGZhbHNlICjms6jvvJrkuI3mj5Dkvpvnu5nnlKjmiLfvvIzoh6rlt7HlhoXpg6jkvb/nlKgpXG4gICAgc2Vjb25kYXJ5Q29sb3I6ICcjZmZmZmZmJywgLy/loavlhYXpopzoibIgLOm7mOiupCAjZmZmZmZmKOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqCzmmoLml7bml6DnlKgpXG4gICAgaW5pdFdoaXRlYm9hcmRQcm9kdWN0aW9uT3B0aW9uczoge30sIC8v5Yid5aeL5YyW55m95p2/6YWN572u6aG577yM6buY6K6k56m65a+56LGhKOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqClcbiAgICBkb2N1bWVudFRvb2xCYXJDb25maWc6IHsgLy/mlofmoaPlt6XlhbfmnaHphY3nva4o5rOo77ya5LiN5o+Q5L6b57uZ55So5oi377yM6Ieq5bex5YaF6YOo5L2/55SoKVxuICAgICAgICBwYXJlbnROb2RlOiB1bmRlZmluZWQsIC8v54i26IqC54K5XG4gICAgICAgIGlzRHJhZzogdHJ1ZSwgLy/mmK/lkKbmi5bmi71cbiAgICAgICAgaXNMb2FkRnVsbFNjcmVlbjogdHJ1ZSwgLy/mmK/lkKbliqDovb3lhajlsY/vvIxmYWxzZVxuICAgICAgICBpc0xvYWRSZW1hcms6IGZhbHNlLCAvL+aYr+WQpuWKoOi9veaWh+aho+Wkh+azqO+8jGZhbHNlXG4gICAgICAgIGlzTG9hZFZvbHVtZTogZmFsc2UsIC8v5piv5ZCm5Yqg6L295Yqo5oCBcHB06Z+z6YeP6K6+572u77yMZmFsc2VcbiAgICAgICAgaW5pdERyYWdQb3NpdGlvbjogeyAvL+WIneWni+WMluaLluaLveS9jee9ru+8iOeZvuWIhuavlO+8iVxuICAgICAgICAgICAgbGVmdDogNTAsXG4gICAgICAgICAgICB0b3A6IDk4XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bGxTY3JlZW5FbGVtZW50SWQ6IHVuZGVmaW5lZCAvL+WFqOWxj+WFg+e0oOeahGlkXG4gICAgfSxcbiAgICBkb2N1bWVudFJlbWFya0NvbmZpZzogeyAvL+aWh+aho+W3peWFt+adoemFjee9rijms6jvvJrkuI3mj5Dkvpvnu5nnlKjmiLfvvIzoh6rlt7HlhoXpg6jkvb/nlKgpXG4gICAgICAgIHBhcmVudE5vZGU6IHVuZGVmaW5lZCwgLy/niLboioLngrlcbiAgICAgICAgaXNEcmFnOiB0cnVlLCAvL+aYr+WQpuaLluaLvVxuICAgICAgICBpbml0RHJhZ1Bvc2l0aW9uOiB7IC8v5Yid5aeL5YyW5ouW5ou95L2N572u77yI55m+5YiG5q+U77yJXG4gICAgICAgICAgICBsZWZ0OiA1MCxcbiAgICAgICAgICAgIHRvcDogOThcbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2hpdGVib2FyZFRvb2xCYXJDb25maWc6IHsgLy/mlofmoaPlt6XlhbfmnaHphY3nva4o5rOo77ya5LiN5o+Q5L6b57uZ55So5oi377yM6Ieq5bex5YaF6YOo5L2/55SoKVxuICAgICAgICBwYXJlbnROb2RlOiB1bmRlZmluZWQsIC8v54i26IqC54K5XG4gICAgICAgIGlzRHJhZzogdHJ1ZSwgLy/mmK/lkKbmi5bmi71cbiAgICAgICAgcGVuY2lsV2lkdGhTY2FsZTogMSwgLy/nlLvnrJTlrr3luqbnvKnmlL7mr5TkvotcbiAgICAgICAgZXJhc2VyV2lkdGhTY2FsZTogMiwgLy/mqaHnmq7lrr3luqbnvKnmlL7mr5TkvotcbiAgICAgICAgaW5pdERyYWdQb3NpdGlvbjogeyAvL+WIneWni+WMluaLluaLveS9jee9ru+8iOeZvuWIhuavlO+8iVxuICAgICAgICAgICAgbGVmdDogMixcbiAgICAgICAgICAgIHRvcDogMlxuICAgICAgICB9LFxuICAgICAgICBsb2FkV2hpdGVib2FyZFRvb2xzOiB7IC8v5Yqg6L2955m95p2/5qCH5rOo5bel5YW36ZuG5ZCIXG4gICAgICAgICAgICBtb3VzZTogdHJ1ZSwgLy/pvKDmoIdcbiAgICAgICAgICAgIGxhc2VyOiB0cnVlLCAvL+a/gOWFieeslFxuICAgICAgICAgICAgcGVuOiB0cnVlLCAvL+eUu+eslFxuICAgICAgICAgICAgdGV4dDogdHJ1ZSwgLy/mloflrZdcbiAgICAgICAgICAgIHNoYXBlOiB0cnVlLCAvL+WbvuW9olxuICAgICAgICAgICAgZXJhc2VyOiB0cnVlLCAvL+apoeearlxuICAgICAgICAgICAgY2xlYXI6IHRydWUsIC8v5riF6ZmkXG4gICAgICAgICAgICB1bmRvOiB0cnVlLCAvL+aSpOmUgOaTjeS9nFxuICAgICAgICAgICAgcmVkbzogdHJ1ZSwgLy/mgaLlpI3mk43kvZxcbiAgICAgICAgICAgIHNldHRpbmc6IHRydWUgLy/mm7TlpJrorr7nva5cbiAgICAgICAgfVxuICAgIH0sXG4gICAgaXNTaG93UmVsb2FkRmlsZVRpcDogdHJ1ZSwgLy/mmK/lkKbmmL7npLrph43mlrDliqDovb3mlofmoaPnmoTmj5DnpLrvvIzpu5jorqR0cnVlICjms6jvvJrkuI3mj5Dkvpvnu5nnlKjmiLfvvIzoh6rlt7HlhoXpg6jkvb/nlKgpXG4gICAgcHB0Vm9sdW1lU3luY2hyb25pemF0aW9uOiBmYWxzZSwgLy9QUFTpn7Pph4/mmK/lkKblkIzmraXvvIzpu5jorqRmYWxzZSjms6jvvJrkuI3mj5Dkvpvnu5nnlKjmiLfvvIzoh6rlt7HlhoXpg6jkvb/nlKgpXG5cbiAgICBpbnNlcnRQaWN0dXJlUnVsZTogJ2RlZmF1bHQnLCAvL+WbvueJh+WxleekuuinhOWImSAsIOm7mOiupCdkZWZhdWx0J++8jOWPr+S7peWPluWAvO+8midkZWZhdWx0J+ihqOekuuWbvueJh+agueaNruavlOS+i+acgOWkp+eoi+W6pui/m+ihjOe8qeaUvu+8jOKAmHJlbGF0aXZlT3JpZ2luYWxTaXpl4oCZ6KGo56S65L+d5oyB5Zu+54mH5Y6f5aSn5bCP77yM5aaC5p6c5Zu+54mH5Y6f5aSn5bCP6LaF5Ye65a655Zmo5aSn5bCP5YiZ6L+b6KGM57yp5pS+XG4gICAgbGFuZ3VhZ2VUeXBlOiAnY2gnLCAvLyDor63oqIDnsbvlnovvvIzpu5jorqRjaCAsICBsYW5ndWFnZVR5cGXnmoTlgLzmnIkgY2ggLyB0dyAvIGVuICAsIGNoOueugOS9k+S4reaWh++8jHR3Oue5geS9k+S4reaWhyDvvIwgZW466Iux5paHXG4gICAgcm9vdEJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JywgLy/mlbTkuKrnmb3mnb/nlYzpnaLnmoTog4zmma/popzoibIgLOm7mOiupCB0cmFuc3BhcmVudFxuICAgIHByaW1hcnlDb2xvcjogJyMwMDAwMDAnLCAvL+eUu+eslOminOiJsiAs6buY6K6kICMwMDAwMDBcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmZmZmJywgLy/og4zmma/popzoibIgLOm7mOiupCAjZmZmZmZmXG4gICAgcGVuY2lsV2lkdGg6IDUsIC8v55S756yU5aSn5bCPICwg6buY6K6kNVxuICAgIHNoYXBlV2lkdGg6IDUsIC8v5Zu+5b2i55S756yU5aSn5bCPICwg6buY6K6kNVxuICAgIGVyYXNlcldpZHRoOiAxNSwgLy/mqaHnmq7lpKflsI8g77yMIOm7mOiupDE1XG4gICAgZm9udFNpemU6IDE4LCAvL+Wtl+S9k+Wkp+WwjyDvvIwg6buY6K6kMThcbiAgICBmb250RmFtaWx5OiBcIuW+rui9r+mbhem7kVwiLCAvL+S9v+eUqOeahOWtl+S9kyDvvIzpu5jorqRcIuW+rui9r+mbhem7kVwiXG4gICAgc2hvd1NoYXBlQXV0aG9yOiBmYWxzZSwgLy/mmK/lkKbmmL7npLrnlLvnrJTnmoTmk43kvZzogIVuYW1lIO+8jOm7mOiupGZhbHNlXG4gICAgc3luY2hyb25pemF0aW9uOiB0cnVlLCAvL+aYr+WQpuWQjOatpee7meWFtuWug+eUqOaItywg6buY6K6kdHJ1ZVxuICAgIGlzT25seVVuZG9SZWRvQ2xlYXJNeXNlbGZTaGFwZTogZmFsc2UsIC8v5piv5ZCm5Y+q5pKk6ZSA44CB5oGi5aSN44CB5riF6Zmk6Ieq5bex55qE55S756yULOm7mOiupGZhbHNlXG4gICAgY2FuRHJhdzogdHJ1ZSwgLy/lj6/nlLvmnYPpmZAs6buY6K6kdHJ1ZVxuICAgIGNhblBhZ2U6IHRydWUsIC8v57+76aG15p2D6ZmQ77yM6buY6K6kdHJ1ZVxuICAgIGFkZFBhZ2U6IHRydWUsIC8v5Yqg6aG15p2D6ZmQ77yM6buY6K6kdHJ1ZSjms6jvvJrliqDpobXmnYPpmZDlkoznv7vpobXmnYPpmZDlkIzml7bkuLp0cnVl5pe25omN6IO95Yqg6aG1KVxuICAgIGFjdGlvbkNsaWNrOiB0cnVlLCAvL+WKqOaAgVBQVOOAgUg15paH5qGj562J5Yqo5L2c54K55Ye75p2D6ZmQ77yM6buY6K6kdHJ1ZVxuICAgIGRlZmF1bHRXaGl0ZWJvYXJkU2NhbGU6IDE2IC8gOSwgLy/pu5jorqTnmoTnuq/nmb3mnb/mr5Tkvosg77yMIOm7mOiupOS4ujE2LzlcbiAgICBpc1VzZUtleWJvYXJkUGFnZTogdHJ1ZSwgLy/mmK/lkKblkK/nlKjplK7nm5jnv7vpobXvvIzpu5jorqR0cnVlIO+8jOmUruebmOeahOaWueWQkemUruaTjeS9nOe/u+mhte+8iOW3pueureWktO+8muS4iuS4gOmhte+8jOWPs+eureWktO+8muS4i+S4gOmhte+8jOS4iueureWktO+8muS4iuS4gOatpS3lj6rlnKjliqjmgIFwcHTotbfmlYgg77yM5LiL566t5aS077ya5LiL5LiA5q2lLeWPquWcqOWKqOaAgXBwdOi1t+aViCDvvIlcbiAgICBpc0xvYWREb2N1bWVudFRvb2xCYXI6IHRydWUsIC8v5Yqg6L295paH5qGj5bel5YW35p2hIO+8jCDpu5jorqR0cnVlXG4gICAgaXNMb2FkV2hpdGVib2FyZFRvb2xCYXI6IHRydWUsIC8v5Yqg6L2955m95p2/5qCH5rOo5bel5YW35p2hIO+8jCDpu5jorqR0cnVlXG4gICAgaXNEaXNjb25uZWN0ZWRDbGVhcldoaXRlYm9hcmREYXRhOiBmYWxzZSwgLy/mmK/lkKblpLHljrvov57mjqXlsLHmuIXpmaTnmb3mnb/nlLvnrJTmlbDmja4s6buY6K6kZmFsc2VcbiAgICBpc05hdGl2ZVBsYXlBdWRpbzogZmFsc2UsIC8vIOaYr+WQpuWOn+eUn+aSreaUvk1QM1xuICAgIGF1ZGlvUGxheWVyQ29uZmlnOiB7IC8v6Z+z6aKR5pKt5pS+5Zmo6YWN572uXG4gICAgICAgIHBhcmVudE5vZGU6IHVuZGVmaW5lZCwgLy/niLboioLngrko5rOo77ya5LiN5o+Q5L6b57uZ55So5oi377yM6Ieq5bex5YaF6YOo5L2/55SoKVxuICAgICAgICBjb250cm9sQ2FsbGJhY2s6IHsgLy/mjqfliLblmajmk43kvZznmoTlm57osIPlh73mlbAo5rOo77ya5LiN5o+Q5L6b57uZ55So5oi377yM6Ieq5bex5YaF6YOo5L2/55SoKVxuICAgICAgICAgICAgcGxheTogdW5kZWZpbmVkLCAvL+eCueWHu+aSreaUvueahOWbnuiwg+WHveaVsCAo5rOo77ya5LiN5o+Q5L6b57uZ55So5oi377yM6Ieq5bex5YaF6YOo5L2/55SoKVxuICAgICAgICAgICAgcGF1c2U6IHVuZGVmaW5lZCAvL+eCueWHu+aaguWBnOeahOWbnuiwg+WHveaVsCAo5rOo77ya5LiN5o+Q5L6b57uZ55So5oi377yM6Ieq5bex5YaF6YOo5L2/55SoKVxuICAgICAgICB9LFxuICAgICAgICBpc0xvYWRDb250cm9sOiB0cnVlLCAvL+aYr+WQpuWKoOi9veaOp+WItuWZqCzpu5jorqR0cnVlKOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqClcbiAgICAgICAgY29udHJvbFBlcm1pc3Npb25zOiB7IC8v5o6n5Yi25Zmo55qE55u45YWz5o6n5Yi25p2D6ZmQXG4gICAgICAgICAgICBoYXNQbGF5T3JQYXVzZTogdHJ1ZSwgLy/mkq3mlL7mmoLlgZzmnYPpmZAs6buY6K6kdHJ1ZVxuICAgICAgICAgICAgaGFzQ2hhbmdlUHJvZ3Jlc3M6IHRydWUsIC8v5pS55Y+Y6L+b5bqm5p2D6ZmQ77yM6buY6K6kdHJ1ZVxuICAgICAgICAgICAgaGFzQ2xvc2U6IHRydWUgLy/lhbPpl63mnYPpmZDvvIzpu5jorqR0cnVlXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHZpZGVvUGxheWVyQ29uZmlnOiB7IC8v6KeG6aKR5pKt5pS+5Zmo6YWN572uXG4gICAgICAgIHBhcmVudE5vZGU6IHVuZGVmaW5lZCwgLy/niLboioLngrko5rOo77ya5LiN5o+Q5L6b57uZ55So5oi377yM6Ieq5bex5YaF6YOo5L2/55SoKVxuICAgICAgICBjb250cm9sQ2FsbGJhY2s6IHsgLy/mjqfliLblmajmk43kvZznmoTlm57osIPlh73mlbAo5rOo77ya5LiN5o+Q5L6b57uZ55So5oi377yM6Ieq5bex5YaF6YOo5L2/55SoKVxuICAgICAgICAgICAgcGxheTogdW5kZWZpbmVkLCAvL+eCueWHu+aSreaUvueahOWbnuiwg+WHveaVsCAo5rOo77ya5LiN5o+Q5L6b57uZ55So5oi377yM6Ieq5bex5YaF6YOo5L2/55SoKVxuICAgICAgICAgICAgcGF1c2U6IHVuZGVmaW5lZCAvL+eCueWHu+aaguWBnOeahOWbnuiwg+WHveaVsCAo5rOo77ya5LiN5o+Q5L6b57uZ55So5oi377yM6Ieq5bex5YaF6YOo5L2/55SoKVxuICAgICAgICB9LFxuICAgICAgICBpc0xvYWRDb250cm9sOiB0cnVlLCAvL+aYr+WQpuWKoOi9veaOp+WItuWZqCzpu5jorqR0cnVlKOazqO+8muS4jeaPkOS+m+e7meeUqOaIt++8jOiHquW3seWGhemDqOS9v+eUqClcbiAgICAgICAgY29udHJvbFBlcm1pc3Npb25zOiB7IC8v5o6n5Yi25Zmo55qE55u45YWz5o6n5Yi25p2D6ZmQXG4gICAgICAgICAgICBoYXNQbGF5T3JQYXVzZTogdHJ1ZSwgLy/mkq3mlL7mmoLlgZzmnYPpmZAs6buY6K6kdHJ1ZVxuICAgICAgICAgICAgaGFzQ2hhbmdlUHJvZ3Jlc3M6IHRydWUsIC8v5pS55Y+Y6L+b5bqm5p2D6ZmQ77yM6buY6K6kdHJ1ZVxuICAgICAgICAgICAgaGFzQ2xvc2U6IHRydWUgLy/lhbPpl63mnYPpmZDvvIzpu5jorqR0cnVlXG4gICAgICAgIH1cbiAgICB9XG59OyAvL+eZveadv+m7mOiupOmFjee9rumhuVxuXG5leHBvcnRzLmRlZmF1bHQgPSBDb25maWd1cmF0aW9uOyIsIi8qc2Rr55m95p2/5bi46YeP5a+56LGhXHJcbiAqIEBtb2R1bGUgQ29uc3RhbnRcclxuICogQGRlc2NyaXB0aW9uICDmj5DkvptzZGvnmb3mnb/miYDpnIDnmoTluLjph49cclxuICogQGF1dGhvciDpgrHlub/nlJ9cclxuICogQGRhdGUgMjAxOC0wNC0yMlxyXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbndpbmRvdy5XaGl0ZWJvYXJkR2xvYmFsU2hhcmUgPSB3aW5kb3cuV2hpdGVib2FyZEdsb2JhbFNoYXJlIHx8IHt9O1xudmFyIENvbnN0YW50ID0ge307XG5Db25zdGFudC5XSElURUJPQVJEX1NES19WRVJTSU9OID0gJ3YyLjEuMCc7IC8v55m95p2/c2Rr55qE54mI5pys5Y+3XG5Db25zdGFudC5XSElURUJPQVJEX1NES19USU1FID0gJzIwMTgxMDIzMTMnOyAvL+eZveadv3Nka+abtOaWsOaXtumXtFxuQ29uc3RhbnQuZHluYW1pY1BwdFZlcnNpb25zID0gMjAxNzA5MTQwMTsgLy/liqjmgIFwcHTnmoTniYjmnKxcbkNvbnN0YW50LnJlbW90ZUR5bmFtaWNQcHRVcGRhdGVUaW1lID0gMjAxODA0MjIyMzsgLy/ov5znqIvliqjmgIFQUFTmlofku7bmm7TmlrDml7bpl7RcbkNvbnN0YW50LmR5bmFtaWNQcHREZWJ1Z0xvZyA9IGZhbHNlOyAvL+WKqOaAgXBwdOaYr+WQpmRlYnVnIGxvZ1xuY29uc29sZS5pbmZvKCdbd2hpdGVib2FyZC1zZGtdd2hpdGVib2FyZCBzZGsgdmVyc2lvbiBpcyAnICsgQ29uc3RhbnQuV0hJVEVCT0FSRF9TREtfVkVSU0lPTiArICcgLCB1cGRhdGUgdGltZSBpcyAnICsgQ29uc3RhbnQuV0hJVEVCT0FSRF9TREtfVElNRSk7XG5leHBvcnRzLmRlZmF1bHQgPSBDb25zdGFudDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qZG9t5bel5YW357G7XHJcbiAqIEBtb2R1bGUgRG9tVXRpbHNcclxuICogQGRlc2NyaXB0aW9uICBkb23mk43kvZzlt6XlhbfnsbtcclxuICogQGF1dGhvciDpgrHlub/nlJ9cclxuICogQGRhdGUgMjAxOC0wNC0xOFxyXG4gKi9cblxudmFyIERvbVV0aWxzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERvbVV0aWxzKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRG9tVXRpbHMpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhEb21VdGlscywgW3tcbiAgICAgICAga2V5OiAnY3JlYXRlRWxlbWVudCcsXG5cblxuICAgICAgICAvKuWIm+W7uuiKgueCuVxyXG4gICAgICAgICogQHBhcmFtcyBlbGVtZW50TmFtZTroioLngrluYW1lICwgU3RyaW5nXHJcbiAgICAgICAgKiBAcGFyYW1zIGlkOuiKgueCuWlkICwgU3RyaW5nXHJcbiAgICAgICAgKiBAcGFyYW1zIGNsYXNzTmFtZTroioLngrljbGFzc05hbWUgLCBTdHJpbmdcclxuICAgICAgICAqIEBwYXJhbXMgc3R5bGVKc29uOuiKgueCuXN0eWxl5qC35byP5a+56LGhICwgSnNvblxyXG4gICAgICAgICogKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoZWxlbWVudE5hbWUsIGlkLCBjbGFzc05hbWUsIHN0eWxlSnNvbiwgYXR0cnNKc29uKSB7XG4gICAgICAgICAgICB2YXIgZWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50TmFtZSk7XG4gICAgICAgICAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGVsZS5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZWxlLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdHlsZUpzb24gJiYgKHR5cGVvZiBzdHlsZUpzb24gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHN0eWxlSnNvbikpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBPYmplY3QuZW50cmllcyhzdHlsZUpzb24pW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfcmVmMlswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9yZWYyWzFdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGUuc3R5bGVba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXR0cnNKc29uICYmICh0eXBlb2YgYXR0cnNKc29uID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhdHRyc0pzb24pKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IE9iamVjdC5lbnRyaWVzKGF0dHJzSnNvbilbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMyA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjMsIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2tleSA9IF9yZWY0WzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF92YWx1ZSA9IF9yZWY0WzFdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGUuc2V0QXR0cmlidXRlKF9rZXksIF92YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZWxlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdhcHBlbmRDaGlsZCcsXG5cblxuICAgICAgICAvKua3u+WKoOWtkOiKgueCuSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmRDaGlsZChmYXRoZXJFbGVtZW50LCBjaGlsZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGZhdGhlckVsZW1lbnQgJiYgY2hpbGRFbGVtZW50ICYmIGZhdGhlckVsZW1lbnQuYXBwZW5kQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmF0aGVyRWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1tzZGstd2hpdGVib2FyZF1Eb29tVXRpbHMuYXBwZW5kQ2hpbGQgZXJyb3IgJywgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrliKDpmaTlrZDoioLngrkqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW1vdmVDaGlsZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVDaGlsZChjaGlsZEVsZW1lbnQsIGZhdGhlckVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmF0aGVyRWxlbWVudCAmJiBmYXRoZXJFbGVtZW50LnJlbW92ZUNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYXRoZXJFbGVtZW50LnJlbW92ZUNoaWxkKGNoaWxkRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRFbGVtZW50LnBhcmVudE5vZGUgJiYgY2hpbGRFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNoaWxkRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdbc2RrLXdoaXRlYm9hcmRdRG9vbVV0aWxzLnJlbW92ZUNoaWxkIGVycm9yICcsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5Yig6Zmk5omA5pyJ5a2Q6IqC54K5Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVtb3ZlQWxsQ2hpbGQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQWxsQ2hpbGQoZmF0aGVyRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGZhdGhlckVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBmYXRoZXJFbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoYXNDbGFzcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50ICYmIHR5cGVvZiBjbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJyAnICsgY2xhc3NOYW1lICsgJyAnKS50ZXN0KGVsZW1lbnQuY2xhc3NOYW1lKSB8fCBuZXcgUmVnRXhwKCcgJyArIGNsYXNzTmFtZSkudGVzdChlbGVtZW50LmNsYXNzTmFtZSkgfHwgbmV3IFJlZ0V4cChjbGFzc05hbWUgKyAnICcpLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKumHjee9ruagt+W8jyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Jlc2V0Q2xhc3MnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50ICYmIHR5cGVvZiBjbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSAnICcgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKua3u+WKoOagt+W8jyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2FkZENsYXNzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50LmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSAnICcgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cCgnICcgKyBjbGFzc05hbWUsICdnJyksICcnKS5yZXBsYWNlKG5ldyBSZWdFeHAoY2xhc3NOYW1lICsgJyAnLCAnZycpLCAnJykgKyAnICcgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSBjbGFzc05hbWVbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xzID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50LmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9ICcgJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cCgnICcgKyBjbHMsICdnJyksICcnKS5yZXBsYWNlKG5ldyBSZWdFeHAoY2xzICsgJyAnLCAnZycpLCAnJykgKyAnICcgKyBjbHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjMgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5re75Yqg5qC35byPKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVtb3ZlQ2xhc3MnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnQuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9ICcgJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCcgJyArIGNsYXNzTmFtZSwgJ2cnKSwgJycpLnJlcGxhY2UobmV3IFJlZ0V4cChjbGFzc05hbWUgKyAnICcsICdnJyksICcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yNCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNCA9IGNsYXNzTmFtZVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IChfc3RlcDQgPSBfaXRlcmF0b3I0Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbHMgPSBfc3RlcDQudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnQuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCcgJyArIGNscywgJ2cnKSwgJycpLnJlcGxhY2UobmV3IFJlZ0V4cChjbHMgKyAnICcsICdnJyksICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yNCA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCAmJiBfaXRlcmF0b3I0LnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I0LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmm7TmlrBzdHlsZSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwZGF0ZVN0eWxlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKGVsZW1lbnQsIHVwZGF0ZVN0eWxlSnNvbikge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgdXBkYXRlU3R5bGVKc29uICYmICh0eXBlb2YgdXBkYXRlU3R5bGVKc29uID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih1cGRhdGVTdHlsZUpzb24pKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I1ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNSA9IE9iamVjdC5lbnRyaWVzKHVwZGF0ZVN0eWxlSnNvbilbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDU7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSAoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmNSA9IF9zdGVwNS52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWY2ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjUsIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gX3JlZjZbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmNlsxXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I1ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I1ID0gZXJyO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ICYmIF9pdGVyYXRvcjUucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNS5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Nob3cnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdyhlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjYgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I2ID0gZWxlbWVudFtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiA9IChfc3RlcDYgPSBfaXRlcmF0b3I2Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb242ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZSA9IF9zdGVwNi52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdHlsZShlbGUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I2ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I2ID0gZXJyO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb242ICYmIF9pdGVyYXRvcjYucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNi5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjY7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3R5bGUoZWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdoaWRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUoZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I3ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNyA9IGVsZW1lbnRbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDc7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgPSAoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNyA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGUgPSBfc3RlcDcudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3R5bGUoZWxlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjcgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgJiYgX2l0ZXJhdG9yNy5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I3LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdHlsZShlbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIERvbVV0aWxzO1xufSgpO1xuXG47XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG5ldyBEb21VdGlscygpOyIsIi8qc2Rr55m95p2/5YWo5bGA5a+56LGhXHJcbiAqIEBtb2R1bGUgR2xvYmFsXHJcbiAqIEBkZXNjcmlwdGlvbiAg5o+Q5L6bc2Rr55m95p2/5omA6ZyA55qE5YWo5bGA5Y+Y6YePXHJcbiAqIEBhdXRob3Ig6YKx5bm/55SfXHJcbiAqIEBkYXRlIDIwMTgtMDQtMThcclxuICovXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfVXRpbHMgPSByZXF1aXJlKCcuL1V0aWxzJyk7XG5cbnZhciBfVXRpbHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXRpbHMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgR2xvYmFsID0ge307XG5HbG9iYWwubmV3cHB0VmVyc2lvbnMgPSAyMDE3MDkxNDAxOyAvL+WKqOaAgXBwdOeahOeJiOacrFxuR2xvYmFsLnJlbW90ZU5ld3BwdFVwZGF0ZVRpbWUgPSAyMDE4MDMyMTEzOyAvL+i/nOeoi+WKqOaAgVBQVOaWh+S7tuabtOaWsOaXtumXtFxuLy8gR2xvYmFsLmZvcmNlVXNlRG9jQWRkcmVzcyA9IHVuZGVmaW5lZCA7IC8v5by65Yi25L2/55So55qE5paH5qGj5Yqg6L295Zyw5Z2AXG5HbG9iYWwuaXNTa2lwUGFnZWluZyA9IGZhbHNlOyAvL+aYr+WQpuato+WcqOi3s+i9rOe/u+mhtVxuR2xvYmFsLmlzUGxheVZpZGVvaW5nID0gZmFsc2U7IC8v5piv5ZCm5q2j5Zyo5pKt5pS+6KeG6aKRXG5HbG9iYWwuYWxsRG9jdW1lbnRSZW1hcmtJbmZvTWFwID0gbmV3IE1hcCgpOyAvL+aJgOacieaWh+aho+Wkh+azqOeahE1hcFxuR2xvYmFsLmRvY0FkZHJlc3MgPSAvaHR0cDovLnRlc3Qod2luZG93LmxvY2F0aW9uLnByb3RvY29sKSA/ICdodHRwOi8vZ2xvYmFsLnRhbGstY2xvdWQubmV0OjgwJyA6ICdodHRwczovL2dsb2JhbC50YWxrLWNsb3VkLm5ldDo0NDMnLCAvL+aWh+aho+acjeWKoeWZqOWcsOWdgFxuR2xvYmFsLmxhdGVyQWRkcmVzc0xpc3QgPSBbXTsgLy/kuI3lnKhzZGvmj5DkvpvnmoTmlofmoaPlnLDlnYDliJfooajph4znmoTlnLDlnYDliJfooahcbkdsb2JhbC5iYWNrdXBEb2NBZGRyZXNzTGlzdCA9IFtdOyAvL+Wkh+S7veaWh+aho+WcsOWdgOWIl+ihqFxuR2xvYmFsLmRvY0FkZHJlc3NMaXN0ID0gW107IC8v5paH5qGj5Zyw5Z2A5YiX6KGoLOS4i+aghzDvvJrmraPluLjmlofmoaPlnLDlnYAg77yM5LiL5qCHMe+8muWkh+S7veaWh+aho+WcsOWdgFxuR2xvYmFsLmhhc0dldERvY0FkZHJlc3NJbmRleEJ5TG9jYWxTdG9yYWdlID0gZmFsc2U7IC8v5piv5ZCm5LuO5pys5Zyw5a2Y5YKo5Lit6I635Y+W6L+H5paH5qGj5Zyw5Z2A57Si5byVXG5HbG9iYWwuZG9jQWRkcmVzc0tleSA9ICcnOyAvL+aWh+aho+WcsOWdgOWIl+ihqOe0ouW8leWAvFxuR2xvYmFsLmxvY2FsU3RvcmFnZURvY0FkZHJlc3NLZXkgPSAnJzsgLy/mnKzlnLDnvJPlrZjnmoTmlofmoaPlnLDlnYDliJfooajntKLlvJXlgLxcbkdsb2JhbC5ub3dVc2VEb2NBZGRyZXNzID0gX1V0aWxzMi5kZWZhdWx0LmdldEl0ZW0oR2xvYmFsLmRvY0FkZHJlc3NMaXN0LCBHbG9iYWwuZG9jQWRkcmVzc0tleSk7IC8v546w5Zyo5L2/55So55qE5paH5qGj5Zyw5Z2AXG5HbG9iYWwuc2hvd1BhZ2VGcm9tSWQgPSB1bmRlZmluZWQ7IC8v57+76aG16ICF55qEaWRcbkdsb2JhbC5leHRlbmRTaG93UGFnZUZyb21JZCA9IHVuZGVmaW5lZDsgLy/mianlsZXnmb3mnb/nv7vpobXogIXnmoRpZFxuR2xvYmFsLnByb3RvY29sID0gJyc7XG5HbG9iYWwucG9ydCA9ICcnO1xuXG53aW5kb3cuV0JHbG9iYWwgPSBHbG9iYWw7XG5leHBvcnRzLmRlZmF1bHQgPSBHbG9iYWw7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4vKipcclxuICog5ouT6K++6K+t6KiA5YyFXHJcbiAqIEBtb2R1bGUgdGFsa0xhbmd1YWdlXHJcbiAqIEBkZXNjcmlwdGlvbiAgIOaPkOS+myDmi5Por77kuK3mlofor63oqIDljIVcclxuICogQGF1dGhvciBRaXVTaGFvXHJcbiAqIEBkYXRlIDIwMTcvMDkvMDFcclxuICovXG5cbnZhciBUYWxrTGFuZ3VhZ2UgPSBuZXcgTWFwKCk7XG52YXIgY2hMdWFudWFnZSA9IHtcbiAgICBkb2N1bWVudFRvb2xiYXI6IHtcbiAgICAgICAgcHJldlBhZ2U6ICfkuIrkuIDpobUnLFxuICAgICAgICBuZXh0UGFnZTogJ+S4i+S4gOmhtScsXG4gICAgICAgIHByZXZTdGVwOiAn5LiK5LiA6aG1JyxcbiAgICAgICAgbmV4dFN0ZXA6ICfkuIvkuIDpobUnLFxuICAgICAgICBhZGRQYWdlOiAn5Yqg6aG1JyxcbiAgICAgICAgZW5sYXJnZVdoaXRlYm9hcmQ6ICfmlL7lpKcnLFxuICAgICAgICBuYXJyb3dXaGl0ZWJvYXJkOiAn57yp5bCPJyxcbiAgICAgICAgcHB0Vm9sdW1lOiAn6Z+z6YePJyxcbiAgICAgICAgb25SZW1hcms6ICfmiZPlvIDlpIfms6gnLFxuICAgICAgICBvZmZSZW1hcms6ICflhbPpl63lpIfms6gnLFxuICAgICAgICBvbkdlbmVyYWxEb2N1bWVudEZ1bGxTY3JlZW46ICfnu5jliLbljLrln5/lhajlsY8nLFxuICAgICAgICBvZmZHZW5lcmFsRG9jdW1lbnRGdWxsU2NyZWVuOiAn57uY5Yi25Yy65Z+f5Y+W5raI5YWo5bGPJyxcbiAgICAgICAgb25EeW5hbWljUFBURnVsbFNjcmVlbjogJ1BQVOWFqOWxjycsXG4gICAgICAgIG9mZkR5bmFtaWNQUFRGdWxsU2NyZWVuOiAnUFBU5Y+W5raI5YWo5bGPJyxcbiAgICAgICAgb25INURvY3VtZW50RnVsbFNjcmVlbjogJ0g16K++5Lu25YWo5bGPJyxcbiAgICAgICAgb2ZmSDVEb2N1bWVudEZ1bGxTY3JlZW46ICdINeivvuS7tuWPlua2iOWFqOWxjydcbiAgICB9LFxuICAgIHdoaXRlYm9hcmRUb29sYmFyOiB7XG4gICAgICAgIGZvbnRGYW1pbHk6IHtcbiAgICAgICAgICAgIHRpdGxlOiAn5paH5a2X5qC35byPJyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBNc3loOiAn5b6u6L2v6ZuF6buRJyxcbiAgICAgICAgICAgICAgICBNaW5nOiAn5a6L5L2TJyxcbiAgICAgICAgICAgICAgICBBcmlhbDogJ0FyaWFsJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmb250U2l6ZVRleHQ6ICflj7cnLFxuICAgICAgICBwZW5jaWxXaWR0aFRpdGxlOiAn57q/5p2h5a695bqmJyxcbiAgICAgICAgZXJhc2VyV2lkdGhUaXRsZTogJ+apoeearuaTpuWkp+WwjycsXG4gICAgICAgIHRvb2xUZXh0TGlzdDoge1xuICAgICAgICAgICAgdG9vbF9tb3VzZTogJ+m8oOaghycsXG4gICAgICAgICAgICB0b29sX2xhc2VyOiAn5r+A5YWJ56yUJyxcbiAgICAgICAgICAgIHBlbkxpc3Q6ICfnrJQnLFxuICAgICAgICAgICAgdG9vbF9wZW5jaWw6ICfpk4XnrJQnLFxuICAgICAgICAgICAgdG9vbF9oaWdobGlnaHRlcjogJ+iNp+WFieeslCcsXG4gICAgICAgICAgICB0b29sX2xpbmU6ICfnur/mnaEnLFxuICAgICAgICAgICAgdG9vbF9hcnJvdzogJ+eureWktCcsXG4gICAgICAgICAgICB0b29sX3RleHQ6ICfmloflrZcnLFxuICAgICAgICAgICAgc2hhcGVMaXN0OiAn5b2i54q2JyxcbiAgICAgICAgICAgIHRvb2xfcmVjdGFuZ2xlX2VtcHR5OiAn56m65b+D55+p5b2iJyxcbiAgICAgICAgICAgIHRvb2xfcmVjdGFuZ2xlOiAn55+p5b2iJyxcbiAgICAgICAgICAgIHRvb2xfZWxsaXBzZV9lbXB0eTogJ+epuuW/g+akreWchicsXG4gICAgICAgICAgICB0b29sX2VsbGlwc2U6ICfmpK3lnIYnLFxuICAgICAgICAgICAgdG9vbF9lcmFzZXI6ICfmqaHnmq7mqqsnLFxuICAgICAgICAgICAgYWN0aW9uX3VuZG86ICfmkqTplIAnLFxuICAgICAgICAgICAgYWN0aW9uX3JlZG86ICfmgaLlpI0nLFxuICAgICAgICAgICAgYWN0aW9uX2NsZWFyOiAn5riF5bGPJyxcbiAgICAgICAgICAgIHNldHRpbmdMaXN0OiAn5pu05aSa6K6+572uJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkb2N1bWVudFJlbWFyazoge1xuICAgICAgICBuYW1lOiAn5aSH5rOoJyxcbiAgICAgICAgY2xvc2VUaXRsZTogJ+WFs+mXreWkh+azqCdcbiAgICB9XG59O1xudmFyIHR3THVhbnVhZ2UgPSB7XG4gICAgZG9jdW1lbnRUb29sYmFyOiB7XG4gICAgICAgIHByZXZQYWdlOiAn5LiK5aO56aCBJyxcbiAgICAgICAgbmV4dFBhZ2U6ICfkuIvlo7npoIEnLFxuICAgICAgICBwcmV2U3RlcDogJ+S4iuWjuemggScsXG4gICAgICAgIG5leHRTdGVwOiAn5LiL5aO56aCBJyxcbiAgICAgICAgYWRkUGFnZTogJ+WKoOmggScsXG4gICAgICAgIGVubGFyZ2VXaGl0ZWJvYXJkOiAn5pS+5aSnJyxcbiAgICAgICAgbmFycm93V2hpdGVib2FyZDogJ+e4ruWwjycsXG4gICAgICAgIHBwdFZvbHVtZTogJ+mfs+mHjycsXG4gICAgICAgIG9uUmVtYXJrOiAn5omT6ZaL5YKZ6Ki7JyxcbiAgICAgICAgb2ZmUmVtYXJrOiAn6Zec6ZaJ5YKZ6Ki7JyxcbiAgICAgICAgb25HZW5lcmFsRG9jdW1lbnRGdWxsU2NyZWVuOiAn57mq5Yi25Y2A5Z+f5YWo5bGPJyxcbiAgICAgICAgb2ZmR2VuZXJhbERvY3VtZW50RnVsbFNjcmVlbjogJ+e5quWItuWNgOWfn+WPlua2iOWFqOWxjycsXG4gICAgICAgIG9uRHluYW1pY1BQVEZ1bGxTY3JlZW46ICdQUFTlhajlsY8nLFxuICAgICAgICBvZmZEeW5hbWljUFBURnVsbFNjcmVlbjogJ1BQVOWPlua2iOWFqOWxjycsXG4gICAgICAgIG9uSDVEb2N1bWVudEZ1bGxTY3JlZW46ICdINeiqsuS7tuWFqOWxjycsXG4gICAgICAgIG9mZkg1RG9jdW1lbnRGdWxsU2NyZWVuOiAnSDXoqrLku7blj5bmtojlhajlsY8nXG4gICAgfSxcbiAgICB3aGl0ZWJvYXJkVG9vbGJhcjoge1xuICAgICAgICBmb250RmFtaWx5OiB7XG4gICAgICAgICAgICB0aXRsZTogJ+aWh+Wtl+aoo+W8jycsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgTXN5aDogJ+W+rui7n+mbhem7kScsXG4gICAgICAgICAgICAgICAgTWluZzogJ+Wui+mrlCcsXG4gICAgICAgICAgICAgICAgQXJpYWw6ICdBcmlhbCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZm9udFNpemVUZXh0OiAn6JmfJyxcbiAgICAgICAgcGVuY2lsV2lkdGhUaXRsZTogJ+e3muaineWvrOW6picsXG4gICAgICAgIGVyYXNlcldpZHRoVGl0bGU6ICfmqaHnmq7mk6blpKflsI8nLFxuICAgICAgICB0b29sVGV4dExpc3Q6IHtcbiAgICAgICAgICAgIHRvb2xfbW91c2U6ICfpvKDmqJknLFxuICAgICAgICAgICAgdG9vbF9sYXNlcjogJ+a/gOWFieethicsXG4gICAgICAgICAgICBwZW5MaXN0OiAn562GJyxcbiAgICAgICAgICAgIHRvb2xfcGVuY2lsOiAn6Ymb562GJyxcbiAgICAgICAgICAgIHRvb2xfaGlnaGxpZ2h0ZXI6ICfnhpLlhYnnrYYnLFxuICAgICAgICAgICAgdG9vbF9saW5lOiAn57ea5qKdJyxcbiAgICAgICAgICAgIHRvb2xfYXJyb3c6ICfnrq3poK0nLFxuICAgICAgICAgICAgdG9vbF90ZXh0OiAn5paH5a2XJyxcbiAgICAgICAgICAgIHNoYXBlTGlzdDogJ+W9oueLgCcsXG4gICAgICAgICAgICB0b29sX3JlY3RhbmdsZV9lbXB0eTogJ+epuuW/g+efqeW9oicsXG4gICAgICAgICAgICB0b29sX3JlY3RhbmdsZTogJ+efqeW9oicsXG4gICAgICAgICAgICB0b29sX2VsbGlwc2VfZW1wdHk6ICfnqbrlv4PmqaLlnJMnLFxuICAgICAgICAgICAgdG9vbF9lbGxpcHNlOiAn5qmi5ZyTJyxcbiAgICAgICAgICAgIHRvb2xfZXJhc2VyOiAn5qmh55qu5qqrJyxcbiAgICAgICAgICAgIGFjdGlvbl91bmRvOiAn5pKk6Yq3JyxcbiAgICAgICAgICAgIGFjdGlvbl9yZWRvOiAn5oGi5b6pJyxcbiAgICAgICAgICAgIGFjdGlvbl9jbGVhcjogJ+a4heWxjycsXG4gICAgICAgICAgICBzZXR0aW5nTGlzdDogJ+abtOWkmuioree9ridcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZG9jdW1lbnRSZW1hcms6IHtcbiAgICAgICAgbmFtZTogJ+WCmeiouycsXG4gICAgICAgIGNsb3NlVGl0bGU6ICfpl5zplonlgpnoqLsnXG4gICAgfVxufTtcbnZhciBlbkx1YW51YWdlID0ge1xuICAgIGRvY3VtZW50VG9vbGJhcjoge1xuICAgICAgICBwcmV2UGFnZTogJ1ByZXZpb3VzIFBhZ2UnLFxuICAgICAgICBuZXh0UGFnZTogJ05leHQgUGFnZScsXG4gICAgICAgIHByZXZTdGVwOiAnUHJldmlvdXMgUGFnZScsXG4gICAgICAgIG5leHRTdGVwOiAnTmV4dCBQYWdlJyxcbiAgICAgICAgYWRkUGFnZTogJ0FkZCBQYWdlJyxcbiAgICAgICAgZW5sYXJnZVdoaXRlYm9hcmQ6ICdab29tIEluJyxcbiAgICAgICAgbmFycm93V2hpdGVib2FyZDogJ1pvb20gT3V0JyxcbiAgICAgICAgcHB0Vm9sdW1lOiAnVm9sdW1lJyxcbiAgICAgICAgb25SZW1hcms6ICdPcGVuIENvdXJzZXdhcmUgUmVtYXJrcycsXG4gICAgICAgIG9mZlJlbWFyazogJ0Nsb3NlIENvdXJzZXdhcmUgUmVtYXJrcycsXG4gICAgICAgIG9uR2VuZXJhbERvY3VtZW50RnVsbFNjcmVlbjogJ0Z1bGwgU2NyZWVuIG9mIERyYXdpbmcgQXJlYScsXG4gICAgICAgIG9mZkdlbmVyYWxEb2N1bWVudEZ1bGxTY3JlZW46ICdDYW5jZWwgRnVsbCBTY3JlZW4gb2YgRHJhd2luZyBBcmVhJyxcbiAgICAgICAgb25EeW5hbWljUFBURnVsbFNjcmVlbjogJ0Z1bGwgU2NyZWVuICBvZiBQUFQnLFxuICAgICAgICBvZmZEeW5hbWljUFBURnVsbFNjcmVlbjogJ0NhbmNlbCBGdWxsIFNjcmVlbiAgb2YgUFBUJyxcbiAgICAgICAgb25INURvY3VtZW50RnVsbFNjcmVlbjogJ0Z1bGwgU2NyZWVuICBvZiBDb3Vyc2V3YXJlJyxcbiAgICAgICAgb2ZmSDVEb2N1bWVudEZ1bGxTY3JlZW46ICdDYW5jZWwgRnVsbCBTY3JlZW4gIG9mIENvdXJzZXdhcmUnXG4gICAgfSxcbiAgICB3aGl0ZWJvYXJkVG9vbGJhcjoge1xuICAgICAgICBmb250RmFtaWx5OiB7XG4gICAgICAgICAgICB0aXRsZTogJ0ZvbnQgRm9ybWF0JyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBNc3loOiAnTWljcm9zb2Z0IFlhSGVpJyxcbiAgICAgICAgICAgICAgICBNaW5nOiAnU2ltU3VuJyxcbiAgICAgICAgICAgICAgICBBcmlhbDogJ0FyaWFsJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmb250U2l6ZVRleHQ6ICdGb250JyxcbiAgICAgICAgcGVuY2lsV2lkdGhUaXRsZTogJ0xpbmUgV2lkdGgnLFxuICAgICAgICBlcmFzZXJXaWR0aFRpdGxlOiAnRXJhc2VyIFNpemUnLFxuICAgICAgICB0b29sVGV4dExpc3Q6IHtcbiAgICAgICAgICAgIHRvb2xfbW91c2U6ICdNb3VzZScsXG4gICAgICAgICAgICB0b29sX2xhc2VyOiAnTGFzZXIgUGVuJyxcbiAgICAgICAgICAgIHBlbkxpc3Q6ICdQZW4nLFxuICAgICAgICAgICAgdG9vbF9wZW5jaWw6ICdQZW5jaWwnLFxuICAgICAgICAgICAgdG9vbF9oaWdobGlnaHRlcjogJ0hpZ2hsaWdodGVyJyxcbiAgICAgICAgICAgIHRvb2xfbGluZTogJ0xpbmUnLFxuICAgICAgICAgICAgdG9vbF9hcnJvdzogJ0Fycm93JyxcbiAgICAgICAgICAgIHRvb2xfdGV4dDogJ1RleHQgSW5wdXQnLFxuICAgICAgICAgICAgc2hhcGVMaXN0OiAnU2hhcGUnLFxuICAgICAgICAgICAgdG9vbF9yZWN0YW5nbGVfZW1wdHk6ICdTcXVhcmUnLFxuICAgICAgICAgICAgdG9vbF9yZWN0YW5nbGU6ICdTb2xpZCBTcXVhcmUnLFxuICAgICAgICAgICAgdG9vbF9lbGxpcHNlX2VtcHR5OiAnQ2lyY2xlJyxcbiAgICAgICAgICAgIHRvb2xfZWxsaXBzZTogJ1NvbGlkIENpcmNsZScsXG4gICAgICAgICAgICB0b29sX2VyYXNlcjogJ0VyYXNlcicsXG4gICAgICAgICAgICBhY3Rpb25fdW5kbzogJ1VuZG8nLFxuICAgICAgICAgICAgYWN0aW9uX3JlZG86ICdSZWNvdmVyJyxcbiAgICAgICAgICAgIGFjdGlvbl9jbGVhcjogJ0NsZWFyIFNjcmVlbicsXG4gICAgICAgICAgICBzZXR0aW5nTGlzdDogJ01vcmUnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRvY3VtZW50UmVtYXJrOiB7XG4gICAgICAgIG5hbWU6ICdDb3Vyc2V3YXJlIFJlbWFya3MnLFxuICAgICAgICBjbG9zZVRpdGxlOiAnQ2xvc2UgQ291cnNld2FyZSBSZW1hcmtzJ1xuICAgIH1cbn07XG52YXIgamFMdWFudWFnZSA9IHtcbiAgICBkb2N1bWVudFRvb2xiYXI6IHtcbiAgICAgICAgcHJldlBhZ2U6ICfliY3jga7jg5rjg7zjgrgnLFxuICAgICAgICBuZXh0UGFnZTogJ+asoeOBruODmuODvOOCuCcsXG4gICAgICAgIHByZXZTdGVwOiAn5YmN44Gu44Oa44O844K4JyxcbiAgICAgICAgbmV4dFN0ZXA6ICfmrKHjga7jg5rjg7zjgrgnLFxuICAgICAgICBhZGRQYWdlOiAn44Oa44O844K444KS6L+95Yqg44GZ44KLJyxcbiAgICAgICAgZW5sYXJnZVdoaXRlYm9hcmQ6ICfmi6HlpKcnLFxuICAgICAgICBuYXJyb3dXaGl0ZWJvYXJkOiAn57iu5bCPJyxcbiAgICAgICAgcHB0Vm9sdW1lOiAn44Oc44Oq44Ol44O844OgJyxcbiAgICAgICAgb25SZW1hcms6ICflgpnogIPjgpLplovjgY8nLFxuICAgICAgICBvZmZSZW1hcms6ICflgpnogIPjgpLplonjgZjjgosnLFxuICAgICAgICBvbkdlbmVyYWxEb2N1bWVudEZ1bGxTY3JlZW46ICfmj4/nlLvpoJjln5/lhajnlLvpnaInLFxuICAgICAgICBvZmZHZW5lcmFsRG9jdW1lbnRGdWxsU2NyZWVuOiAn5omL5pu444GN6YOo5YiG5YWo55S76Z2i6KGo56S644Gu57WC5LqGJyxcbiAgICAgICAgb25EeW5hbWljUFBURnVsbFNjcmVlbjogJ1BQVOWFqOeUu+mdoicsXG4gICAgICAgIG9mZkR5bmFtaWNQUFRGdWxsU2NyZWVuOiAnUFBU5YWo55S76Z2i6KGo56S644Gu57WC5LqGJyxcbiAgICAgICAgb25INURvY3VtZW50RnVsbFNjcmVlbjogJ2g15pWZ5p2Q5YWo55S76Z2iJyxcbiAgICAgICAgb2ZmSDVEb2N1bWVudEZ1bGxTY3JlZW46ICdINeaVmeadkOWFqOeUu+mdouOBrue1guS6hidcbiAgICB9LFxuICAgIHdoaXRlYm9hcmRUb29sYmFyOiB7XG4gICAgICAgIGZvbnRGYW1pbHk6IHtcbiAgICAgICAgICAgIHRpdGxlOiAn44OV44Kp44Oz44OI5qeY5byPJyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBNc3loOiAnTWljcm9zb2Z044CAWWFoZWknLFxuICAgICAgICAgICAgICAgIE1pbmc6ICflrovkvZMnLFxuICAgICAgICAgICAgICAgIEFyaWFsOiAnQXJpYWwnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZvbnRTaXplVGV4dDogJ+eVquWPtycsXG4gICAgICAgIHBlbmNpbFdpZHRoVGl0bGU6ICfnt5rjga7lpKrjgZUnLFxuICAgICAgICBlcmFzZXJXaWR0aFRpdGxlOiAn5raI44GX44K044Og44Gu5aSn44GN44GVJyxcbiAgICAgICAgdG9vbFRleHRMaXN0OiB7XG4gICAgICAgICAgICB0b29sX21vdXNlOiAn44Oe44Km44K5JyxcbiAgICAgICAgICAgIHRvb2xfbGFzZXI6ICfjg6zjg7zjgrbjg7zjg5rjg7MnLFxuICAgICAgICAgICAgcGVuTGlzdDogJ+mJm+ethicsXG4gICAgICAgICAgICB0b29sX3BlbmNpbDogJ+mJm+ethicsXG4gICAgICAgICAgICB0b29sX2hpZ2hsaWdodGVyOiAn6JuN5YWJ44Oa44OzJyxcbiAgICAgICAgICAgIHRvb2xfbGluZTogJ+e3micsXG4gICAgICAgICAgICB0b29sX2Fycm93OiAn55+i5Y2wJyxcbiAgICAgICAgICAgIHRvb2xfdGV4dDogJ+aWh+WtlycsXG4gICAgICAgICAgICBzaGFwZUxpc3Q6ICflvaLnirYnLFxuICAgICAgICAgICAgdG9vbF9yZWN0YW5nbGVfZW1wdHk6ICfplbfmlrnlvaLvvIjloZfjgorjgaTjgbbjgZfjgarjgZfvvIknLFxuICAgICAgICAgICAgdG9vbF9yZWN0YW5nbGU6ICfplbfmlrnlvaInLFxuICAgICAgICAgICAgdG9vbF9lbGxpcHNlX2VtcHR5OiAn5qWV5YaG77yI5aGX44KK44Gk44G244GX44Gq44GX77yJJyxcbiAgICAgICAgICAgIHRvb2xfZWxsaXBzZTogJ+alleWGhicsXG4gICAgICAgICAgICB0b29sX2VyYXNlcjogJ+a2iOOBl+OCtOODoCcsXG4gICAgICAgICAgICBhY3Rpb25fdW5kbzogJ+OCreODo+ODs+OCu+ODqycsXG4gICAgICAgICAgICBhY3Rpb25fcmVkbzogJ+WFg+OBq+aIu+OBmScsXG4gICAgICAgICAgICBhY3Rpb25fY2xlYXI6ICfjgq/jg6rjgqInLFxuICAgICAgICAgICAgc2V0dGluZ0xpc3Q6ICfoqbPntLDoqK3lrponXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRvY3VtZW50UmVtYXJrOiB7XG4gICAgICAgIG5hbWU6ICflgpnogIMnLFxuICAgICAgICBjbG9zZVRpdGxlOiAn5YWz6Zet5aSH5rOoJ1xuICAgIH1cbn07XG5UYWxrTGFuZ3VhZ2Uuc2V0KCdjaCcsIGNoTHVhbnVhZ2UpO1xuVGFsa0xhbmd1YWdlLnNldCgndHcnLCB0d0x1YW51YWdlKTtcblRhbGtMYW5ndWFnZS5zZXQoJ2VuJywgZW5MdWFudWFnZSk7XG5UYWxrTGFuZ3VhZ2Uuc2V0KCdqYScsIGphTHVhbnVhZ2UpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUYWxrTGFuZ3VhZ2U7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgLyoqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIOaLk+ivvuW8gOWPkeS9v+eUqOeahOaXpeW/l+exu1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbW9kdWxlIExvZ0RldmVsb3BtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiAgIOaPkOS+myDmi5Por77lvIDlj5Hkvb/nlKjnmoTml6Xlv5fnsbtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGF1dGhvciBRaXVTaGFvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBkYXRlIDIwMTcvNy8yMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuXG52YXIgX1V0aWxzID0gcmVxdWlyZSgnLi9VdGlscycpO1xuXG52YXIgX1V0aWxzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1V0aWxzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIExvZ0RldmVsb3BtZW50ID0gd2luZG93LkxvZyB8fCB7XG4gICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTC5Mb2dnZXIucGFuZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIHRtcCA9ICcnO1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgYXJncy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgdG1wID0gdG1wICsgKF90eXBlb2YoYXJnc1tpZHhdKSA9PT0gJ29iamVjdCcgPyBfVXRpbHMyLmRlZmF1bHQudG9Kc29uU3RyaW5naWZ5KGFyZ3NbaWR4XSkgOiBhcmdzW2lkeF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTC5Mb2dnZXIucGFuZWwudmFsdWUgPSBMLkxvZ2dlci5wYW5lbC52YWx1ZSArICdcXG4nICsgdG1wO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZXJyb3IuYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgfSxcbiAgICBsb2c6IGZ1bmN0aW9uIGxvZygpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEwuTG9nZ2VyLnBhbmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciB0bXAgPSAnJztcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGFyZ3MubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIHRtcCA9IHRtcCArIChfdHlwZW9mKGFyZ3NbaWR4XSkgPT09ICdvYmplY3QnID8gX1V0aWxzMi5kZWZhdWx0LnRvSnNvblN0cmluZ2lmeShhcmdzW2lkeF0pIDogYXJnc1tpZHhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEwuTG9nZ2VyLnBhbmVsLnZhbHVlID0gTC5Mb2dnZXIucGFuZWwudmFsdWUgKyAnXFxuJyArIHRtcDtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICB9LFxuICAgIGluZm86IGZ1bmN0aW9uIGluZm8oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChMLkxvZ2dlci5wYW5lbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgdG1wID0gJyc7XG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBhcmdzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICB0bXAgPSB0bXAgKyAoX3R5cGVvZihhcmdzW2lkeF0pID09PSAnb2JqZWN0JyA/IF9VdGlsczIuZGVmYXVsdC50b0pzb25TdHJpbmdpZnkoYXJnc1tpZHhdKSA6IGFyZ3NbaWR4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBMLkxvZ2dlci5wYW5lbC52YWx1ZSA9IEwuTG9nZ2VyLnBhbmVsLnZhbHVlICsgJ1xcbicgKyB0bXA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xuICAgIH0sXG4gICAgd2FybjogZnVuY3Rpb24gd2FybigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEwuTG9nZ2VyLnBhbmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciB0bXAgPSAnJztcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGFyZ3MubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIHRtcCA9IHRtcCArIChfdHlwZW9mKGFyZ3NbaWR4XSkgPT09ICdvYmplY3QnID8gX1V0aWxzMi5kZWZhdWx0LnRvSnNvblN0cmluZ2lmeShhcmdzW2lkeF0pIDogYXJnc1tpZHhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEwuTG9nZ2VyLnBhbmVsLnZhbHVlID0gTC5Mb2dnZXIucGFuZWwudmFsdWUgKyAnXFxuJyArIHRtcDtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgfSxcbiAgICB3YXJuaW5nOiBmdW5jdGlvbiB3YXJuaW5nKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTC5Mb2dnZXIucGFuZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIHRtcCA9ICcnO1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgYXJncy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgdG1wID0gdG1wICsgKF90eXBlb2YoYXJnc1tpZHhdKSA9PT0gJ29iamVjdCcgPyBfVXRpbHMyLmRlZmF1bHQudG9Kc29uU3RyaW5naWZ5KGFyZ3NbaWR4XSkgOiBhcmdzW2lkeF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTC5Mb2dnZXIucGFuZWwudmFsdWUgPSBMLkxvZ2dlci5wYW5lbC52YWx1ZSArICdcXG4nICsgdG1wO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICB9LFxuICAgIHRyYWNlOiBmdW5jdGlvbiB0cmFjZSgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEwuTG9nZ2VyLnBhbmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciB0bXAgPSAnJztcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGFyZ3MubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIHRtcCA9IHRtcCArIChfdHlwZW9mKGFyZ3NbaWR4XSkgPT09ICdvYmplY3QnID8gX1V0aWxzMi5kZWZhdWx0LnRvSnNvblN0cmluZ2lmeShhcmdzW2lkeF0pIDogYXJnc1tpZHhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEwuTG9nZ2VyLnBhbmVsLnZhbHVlID0gTC5Mb2dnZXIucGFuZWwudmFsdWUgKyAnXFxuJyArIHRtcDtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLnRyYWNlLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xuICAgIH0sXG4gICAgZGVidWc6IGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTC5Mb2dnZXIucGFuZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIHRtcCA9ICcnO1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgYXJncy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgdG1wID0gdG1wICsgKF90eXBlb2YoYXJnc1tpZHhdKSA9PT0gJ29iamVjdCcgPyBfVXRpbHMyLmRlZmF1bHQudG9Kc29uU3RyaW5naWZ5KGFyZ3NbaWR4XSkgOiBhcmdzW2lkeF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTC5Mb2dnZXIucGFuZWwudmFsdWUgPSBMLkxvZ2dlci5wYW5lbC52YWx1ZSArICdcXG4nICsgdG1wO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZGVidWcuYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgfVxufTtcbndpbmRvdy5Mb2cgPSBMb2dEZXZlbG9wbWVudDtcbmV4cG9ydHMuZGVmYXVsdCA9IExvZ0RldmVsb3BtZW50OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG47KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKCdhamF4JywgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAoKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihleHBvcnRzKSkgPT09ICdvYmplY3QnKSB7XG4gICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuYWpheCA9IGZhY3RvcnkoKTtcbiAgfVxufSkodW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBhamF4KG9wdGlvbnMpIHtcbiAgICB2YXIgbWV0aG9kcyA9IFsnZ2V0JywgJ3Bvc3QnLCAncHV0JywgJ2RlbGV0ZSddO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMuYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVybCB8fCAnJztcbiAgICBpZiAob3B0aW9ucy5tZXRob2QgJiYgb3B0aW9ucy51cmwpIHtcbiAgICAgIHJldHVybiB4aHJDb25uZWN0aW9uKG9wdGlvbnMubWV0aG9kLCBvcHRpb25zLmJhc2VVcmwgKyBvcHRpb25zLnVybCwgbWF5YmVEYXRhKG9wdGlvbnMuZGF0YSksIG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgbWV0aG9kKSB7XG4gICAgICBhY2NbbWV0aG9kXSA9IGZ1bmN0aW9uICh1cmwsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHhockNvbm5lY3Rpb24obWV0aG9kLCBvcHRpb25zLmJhc2VVcmwgKyB1cmwsIG1heWJlRGF0YShkYXRhKSwgb3B0aW9ucyk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXliZURhdGEoZGF0YSkge1xuICAgIHJldHVybiBkYXRhIHx8IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiB4aHJDb25uZWN0aW9uKHR5cGUsIHVybCwgZGF0YSwgb3B0aW9ucykge1xuICAgIHZhciByZXR1cm5NZXRob2RzID0gWyd0aGVuJywgJ2NhdGNoJywgJ2Fsd2F5cyddO1xuICAgIHZhciBwcm9taXNlTWV0aG9kcyA9IHJldHVybk1ldGhvZHMucmVkdWNlKGZ1bmN0aW9uIChwcm9taXNlLCBtZXRob2QpIHtcbiAgICAgIHByb21pc2VbbWV0aG9kXSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBwcm9taXNlW21ldGhvZF0gPSBjYWxsYmFjaztcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfSwge30pO1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgZmVhdHVyZWRVcmwgPSBnZXRVcmxXaXRoRGF0YSh1cmwsIGRhdGEsIHR5cGUpO1xuICAgIHhoci5vcGVuKHR5cGUsIGZlYXR1cmVkVXJsLCB0cnVlKTtcbiAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnd2l0aENyZWRlbnRpYWxzJyk7XG4gICAgc2V0SGVhZGVycyh4aHIsIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ3JlYWR5c3RhdGVjaGFuZ2UnLCByZWFkeShwcm9taXNlTWV0aG9kcywgeGhyKSwgZmFsc2UpO1xuICAgIHhoci5zZW5kKG9iamVjdFRvUXVlcnlTdHJpbmcoZGF0YSkpO1xuICAgIHByb21pc2VNZXRob2RzLmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHhoci5hYm9ydCgpO1xuICAgIH07XG4gICAgcmV0dXJuIHByb21pc2VNZXRob2RzO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VXJsV2l0aERhdGEodXJsLCBkYXRhLCB0eXBlKSB7XG4gICAgaWYgKHR5cGUudG9Mb3dlckNhc2UoKSAhPT0gJ2dldCcgfHwgIWRhdGEpIHtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICAgIHZhciBkYXRhQXNRdWVyeVN0cmluZyA9IG9iamVjdFRvUXVlcnlTdHJpbmcoZGF0YSk7XG4gICAgdmFyIHF1ZXJ5U3RyaW5nU2VwYXJhdG9yID0gdXJsLmluZGV4T2YoJz8nKSA+IC0xID8gJyYnIDogJz8nO1xuICAgIHJldHVybiB1cmwgKyBxdWVyeVN0cmluZ1NlcGFyYXRvciArIGRhdGFBc1F1ZXJ5U3RyaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0SGVhZGVycyh4aHIsIGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzID0gaGVhZGVycyB8fCB7fTtcbiAgICBpZiAoIWhhc0NvbnRlbnRUeXBlKGhlYWRlcnMpKSB7XG4gICAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBoZWFkZXJzW25hbWVdICYmIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIGhlYWRlcnNbbmFtZV0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzQ29udGVudFR5cGUoaGVhZGVycykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhoZWFkZXJzKS5zb21lKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJztcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWR5KHByb21pc2VNZXRob2RzLCB4aHIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlUmVhZHkoKSB7XG4gICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IHhoci5ET05FKSB7XG4gICAgICAgIHhoci5yZW1vdmVFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgaGFuZGxlUmVhZHksIGZhbHNlKTtcbiAgICAgICAgcHJvbWlzZU1ldGhvZHMuYWx3YXlzLmFwcGx5KHByb21pc2VNZXRob2RzLCBwYXJzZVJlc3BvbnNlKHhocikpO1xuXG4gICAgICAgIGlmICh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgcHJvbWlzZU1ldGhvZHMudGhlbi5hcHBseShwcm9taXNlTWV0aG9kcywgcGFyc2VSZXNwb25zZSh4aHIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9taXNlTWV0aG9kcy5jYXRjaC5hcHBseShwcm9taXNlTWV0aG9kcywgcGFyc2VSZXNwb25zZSh4aHIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVJlc3BvbnNlKHhocikge1xuICAgIHZhciByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmVzdWx0ID0geGhyLnJlc3BvbnNlVGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIFtyZXN1bHQsIHhocl07XG4gIH1cblxuICBmdW5jdGlvbiBvYmplY3RUb1F1ZXJ5U3RyaW5nKGRhdGEpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoZGF0YSkgPyBnZXRRdWVyeVN0cmluZyhkYXRhKSA6IGRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiBpc09iamVjdChkYXRhKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRhKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRRdWVyeVN0cmluZyhvYmplY3QpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqZWN0KS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgaXRlbSkge1xuICAgICAgdmFyIHByZWZpeCA9ICFhY2MgPyAnJyA6IGFjYyArICcmJztcbiAgICAgIHJldHVybiBwcmVmaXggKyBlbmNvZGUoaXRlbSkgKyAnPScgKyBlbmNvZGUob2JqZWN0W2l0ZW1dKTtcbiAgICB9LCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGUodmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBhamF4O1xufSk7IiwiLypzZGvnmb3mnb/lt6XlhbfnsbtcclxuICogQG1vZHVsZSBVdGlsc1xyXG4gKiBAZGVzY3JpcHRpb24gIOaPkOS+m3Nka+eZveadv+aJgOmcgOeahOW3peWFt1xyXG4gKiBAYXV0aG9yIOmCseW5v+eUn1xyXG4gKiBAZGF0ZSAyMDE4LTA0LTE4XHJcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgX2lzSnNvbiA9IGZ1bmN0aW9uIF9pc0pzb24ob2JqKSB7XG4gICAgdmFyIGlzanNvbiA9ICh0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKSkgPT09IFwib2JqZWN0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikudG9Mb3dlckNhc2UoKSA9PT0gXCJbb2JqZWN0IG9iamVjdF1cIiAmJiAhb2JqLmxlbmd0aDtcbiAgICByZXR1cm4gaXNqc29uO1xufTtcblxuaWYgKCEoT2JqZWN0ICYmIE9iamVjdC5zaGFsbG93QXNzaWduKSB8fCAhKE9iamVjdCAmJiBPYmplY3QuY3VzdG9tQXNzaWduKSkge1xuICAgIC8q5rWF5ZCI5bm25a+56LGhKi9cbiAgICB2YXIgc2hhbGxvd0Fzc2lnbiA9IGZ1bmN0aW9uIHNoYWxsb3dBc3NpZ24oc291cmNlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbi5hcHBseShPYmplY3QuYXNzaWduLCBhcmd1bWVudHMpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHZhciBjb3B5U291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYXNzaWduT2JqID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChhc3NpZ25PYmogJiYgKHR5cGVvZiBhc3NpZ25PYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihhc3NpZ25PYmopKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGFzc2lnbk9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29weVNvdXJjZVtrZXldID0gYXNzaWduT2JqW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiBpZih0eXBlb2YgY29weVNvdXJjZSA9PT0gJ29iamVjdCcpe1xyXG4gICAgICAgICAgICAgICAgIGZvcihsZXQga2V5IGluIGNvcHlTb3VyY2Upe1xyXG4gICAgICAgICAgICAgICAgICAgICBzb3VyY2Vba2V5XSA9IGNvcHlTb3VyY2Vba2V5XTtcclxuICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICB9Ki9cbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmICghKE9iamVjdCAmJiBPYmplY3Quc2hhbGxvd0Fzc2lnbikpIHtcbiAgICAgICAgT2JqZWN0LnNoYWxsb3dBc3NpZ24gPSBzaGFsbG93QXNzaWduO1xuICAgIH1cbiAgICBpZiAoIShPYmplY3QgJiYgT2JqZWN0LmN1c3RvbUFzc2lnbikpIHtcbiAgICAgICAgT2JqZWN0LmN1c3RvbUFzc2lnbiA9IHNoYWxsb3dBc3NpZ247XG4gICAgfVxufVxuXG5pZiAoIShPYmplY3QgJiYgT2JqZWN0LmRlZXBBc3NpZ24pKSB7XG4gICAgLyrmt7HlkIjlubblr7nosaEqL1xuICAgIE9iamVjdC5kZWVwQXNzaWduID0gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICB2YXIgY29weVNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhc3NpZ25PYmogPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBpZiAoYXNzaWduT2JqICYmICh0eXBlb2YgYXNzaWduT2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoYXNzaWduT2JqKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGFzc2lnbk9iaikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29weVNvdXJjZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdHlwZW9mKGFzc2lnbk9ialtrZXldKSA9PT0gJ29iamVjdCcgJiYgKEFycmF5LmlzQXJyYXkoYXNzaWduT2JqW2tleV0pIHx8IF9pc0pzb24oYXNzaWduT2JqW2tleV0pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlTb3VyY2Vba2V5XSA9IE9iamVjdC5kZWVwQXNzaWduKEFycmF5LmlzQXJyYXkoYXNzaWduT2JqW2tleV0pID8gW10gOiB7fSwgYXNzaWduT2JqW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5U291cmNlW2tleV0gPSBhc3NpZ25PYmpba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdHlwZW9mKGFzc2lnbk9ialtrZXldKSA9PT0gJ29iamVjdCcgJiYgKEFycmF5LmlzQXJyYXkoYXNzaWduT2JqW2tleV0pIHx8IF9pc0pzb24oYXNzaWduT2JqW2tleV0pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlTb3VyY2Vba2V5XSA9IE9iamVjdC5kZWVwQXNzaWduKEFycmF5LmlzQXJyYXkoYXNzaWduT2JqW2tleV0pID8gW10gOiB7fSwgX3R5cGVvZihjb3B5U291cmNlW2tleV0pID09PSAnb2JqZWN0JyA/IGNvcHlTb3VyY2Vba2V5XSA6IEFycmF5LmlzQXJyYXkoYXNzaWduT2JqW2tleV0pID8gW10gOiB7fSwgYXNzaWduT2JqW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5U291cmNlW2tleV0gPSBhc3NpZ25PYmpba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKmlmKHR5cGVvZiBjb3B5U291cmNlID09PSAnb2JqZWN0Jyl7XHJcbiAgICAgICAgICAgIGZvcihsZXQga2V5IGluIGNvcHlTb3VyY2Upe1xyXG4gICAgICAgICAgICAgICAgc291cmNlW2tleV0gPSBjb3B5U291cmNlW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9Ki9cbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9O1xufVxuXG4vLyBzY3JvbGwgcGFzc2l2ZSBldmVudHNcbnZhciBwYXNzaXZlRXZlbnRzID0gZmFsc2U7XG50cnkge1xuICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICBwYXNzaXZlRXZlbnRzID0geyBwYXNzaXZlOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdHMpO1xufSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcignW3doaXRlYm9hcnJkLXNka11wYXNzaXZlRXZlbnRzIGVycjonLCBlcnIpO1xufVxuXG52YXIgVXRpbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVXRpbHMoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVdGlscyk7XG4gICAgfVxuXG4gICAgLyoq57uR5a6a5LqL5Lu2XHJcbiAgICAgQG1ldGhvZCBhZGRFdmVudFxyXG4gICAgIEBwYXJhbSAgIHtlbGVtZW50fSBlbGVtZW50IOa3u+WKoOS6i+S7tuWFg+e0oFxyXG4gICAgICAgICAgICAge3N0cmluZ30gZVR5cGUg5LqL5Lu257G75Z6LXHJcbiAgICAgICAgICAgICB7RnVuY3Rpb259IGhhbmRsZSDkuovku7blpITnkIblmahcclxuICAgICAgICAgICAgIHtCb2xsZWFufSBib2wgZmFsc2Ug6KGo56S65Zyo5LqL5Lu256ys5LiJ6Zi25q6177yI5YaS5rOh77yJ6Kem5Y+R77yMdHJ1ZeihqOekuuWcqOS6i+S7tuesrOS4gOmYtuaute+8iOaNleiOt++8ieinpuWPkeOAglxyXG4gICAgICovXG5cblxuICAgIF9jcmVhdGVDbGFzcyhVdGlscywgW3tcbiAgICAgICAga2V5OiBcImFkZEV2ZW50XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFdmVudChlbGVtZW50LCBlVHlwZSwgaGFuZGxlKSB7XG4gICAgICAgICAgICB2YXIgYm9sID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8v5aaC5p6c5pSv5oyBYWRkRXZlbnRMaXN0ZW5lclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZVR5cGUsIGhhbmRsZSwgYm9sKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy/lpoLmnpzmlK/mjIFhdHRhY2hFdmVudFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmF0dGFjaEV2ZW50KFwib25cIiArIGVUeXBlLCBoYW5kbGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8v5ZCm5YiZ5L2/55So5YW85a6555qEb25jbGlja+e7keWumlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50W1wib25cIiArIGVUeXBlXSA9IGhhbmRsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ2FkZCBkb20gZXZlbnQgZmFpbCAsIGV2ZW50IHR5cGUgaXMgJyArIGVUeXBlICsgJyAsIGVsZW1lbnQ6JywgZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJyZW1vdmVFdmVudFwiLFxuXG5cbiAgICAgICAgLyoq5LqL5Lu26Kej57uRXHJcbiAgICAgICAgIEBtZXRob2QgcmVtb3ZlRXZlbnRcclxuICAgICAgICAgQHBhcmFtICAge2VsZW1lbnR9IGVsZW1lbnQg5Yig6Zmk5LqL5Lu25YWD57SgXHJcbiAgICAgICAgICAgICB7c3RyaW5nfSBlVHlwZSDkuovku7bnsbvlnotcclxuICAgICAgICAgICAgIHtGdW5jdGlvbn0gaGFuZGxlIOS6i+S7tuWkhOeQhuWZqFxyXG4gICAgICAgICAgICAge0JvbGxlYW59IGJvbCBmYWxzZSDooajnpLrlnKjkuovku7bnrKzkuInpmLbmrrXvvIjlhpLms6HvvInop6blj5HvvIx0cnVl6KGo56S65Zyo5LqL5Lu256ys5LiA6Zi25q6177yI5o2V6I6377yJ6Kem5Y+R44CCXHJcbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVFdmVudChlbGVtZW50LCBlVHlwZSwgaGFuZGxlLCBib2wpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZVR5cGUsIGhhbmRsZSwgYm9sKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5kZXRhY2hFdmVudChcIm9uXCIgKyBlVHlwZSwgaGFuZGxlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50W1wib25cIiArIGVUeXBlXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmVycm9yKCdyZW1vdmUgZG9tIGV2ZW50IGZhaWwgLCBldmVudCB0eXBlIGlzICcgKyBlVHlwZSArICcgLCBlbGVtZW50OicsIGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiaXNFbXB0eUpzb25cIixcblxuXG4gICAgICAgIC8q5piv5ZCm5piv56m655qEanNvbiovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0VtcHR5SnNvbihqc29uKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGpzb24pO1xuICAgICAgICAgICAgcmV0dXJuIGtleXMubGVuZ3RoID09PSAwO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiaXNGdWxsU2NyZWVuU3RhdHVzXCIsXG5cblxuICAgICAgICAvKuaYr+WQpuWkhOS6juWFqOWxj+eKtuaAgVxyXG4gICAgICAgICBAcmV0dXJuIOi/lOWbnuaYr+WQpuWFqOWxj+eKtuaAgVxyXG4gICAgICAgICAqICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0Z1bGxTY3JlZW5TdGF0dXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZnVsbHNjcmVlbiB8fCBkb2N1bWVudC5tb3pGdWxsU2NyZWVuIHx8IGRvY3VtZW50LndlYmtpdElzRnVsbFNjcmVlbiB8fCBkb2N1bWVudC53ZWJraXRGdWxsU2NyZWVuIHx8IGRvY3VtZW50Lm1zRnVsbFNjcmVlbiB8fCBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImxhdW5jaEZ1bGxzY3JlZW5cIixcblxuXG4gICAgICAgIC8qKuWQr+WKqOWFqOWxj1xyXG4gICAgICAgICBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQg5YWo5bGP5YWD57SgXHJcbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsYXVuY2hGdWxsc2NyZWVuKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm1zUmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJleGl0RnVsbHNjcmVlblwiLFxuXG5cbiAgICAgICAgLyoq6YCA5Ye65YWo5bGPKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4aXRGdWxsc2NyZWVuKCkge1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmV4aXRGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhpdEZ1bGxTY3JlZW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50Lm1zRXhpdEZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldEZ1bGxzY3JlZW5FbGVtZW50XCIsXG5cblxuICAgICAgICAvKirov5Tlm57mraPlpITkuo7lhajlsY/nirbmgIHnmoRFbGVtZW506IqC54K577yM5aaC5p6c5b2T5YmN5rKh5pyJ6IqC54K55aSE5LqO5YWo5bGP54q25oCB77yM5YiZ6L+U5ZuebnVsbOOAgiovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGdWxsc2NyZWVuRWxlbWVudCgpIHtcbiAgICAgICAgICAgIHZhciBmdWxsc2NyZWVuRWxlbWVudCA9IGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50O1xuICAgICAgICAgICAgcmV0dXJuIGZ1bGxzY3JlZW5FbGVtZW50O1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYWRkRnVsbHNjcmVlbmNoYW5nZVwiLFxuXG5cbiAgICAgICAgLyoq5Li65YWo5bGP5re75Yqg5YWo5bGP5LqL5Lu2ZnVsbHNjcmVlbmNoYW5nZVxyXG4gICAgICAgICBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGUg5LqL5Lu25aSE55CG5ZmoXHJcbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRGdWxsc2NyZWVuY2hhbmdlKGhhbmRsZSkge1xuICAgICAgICAgICAgdGhpcy5hZGRFdmVudChkb2N1bWVudCwgXCJmdWxsc2NyZWVuY2hhbmdlXCIsIGhhbmRsZSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5hZGRFdmVudChkb2N1bWVudCwgXCJ3ZWJraXRmdWxsc2NyZWVuY2hhbmdlXCIsIGhhbmRsZSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5hZGRFdmVudChkb2N1bWVudCwgXCJtb3pmdWxsc2NyZWVuY2hhbmdlXCIsIGhhbmRsZSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5hZGRFdmVudChkb2N1bWVudCwgXCJNU0Z1bGxzY3JlZW5DaGFuZ2VcIiwgaGFuZGxlLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLmFkZEV2ZW50KGRvY3VtZW50LCBcIm1zZnVsbHNjcmVlbmNoYW5nZVwiLCBoYW5kbGUsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuYWRkRXZlbnQoZG9jdW1lbnQsIFwiZnVsbHNjcmVlbmV2ZW50Y2hhbmdlXCIsIGhhbmRsZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwicmVtb3ZlRnVsbHNjcmVlbmNoYW5nZVwiLFxuXG5cbiAgICAgICAgLyoq56e76Zmk5YWo5bGP5re75Yqg5YWo5bGP5LqL5Lu2ZnVsbHNjcmVlbmNoYW5nZVxyXG4gICAgICAgICBAcGFyYW0gICB7RnVuY3Rpb259IGhhbmRsZSDkuovku7blpITnkIblmahcclxuICAgICAgICAgKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUZ1bGxzY3JlZW5jaGFuZ2UoaGFuZGxlKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50KGRvY3VtZW50LCBcImZ1bGxzY3JlZW5jaGFuZ2VcIiwgaGFuZGxlLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50KGRvY3VtZW50LCBcIndlYmtpdGZ1bGxzY3JlZW5jaGFuZ2VcIiwgaGFuZGxlLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50KGRvY3VtZW50LCBcIm1vemZ1bGxzY3JlZW5jaGFuZ2VcIiwgaGFuZGxlLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50KGRvY3VtZW50LCBcIk1TRnVsbHNjcmVlbkNoYW5nZVwiLCBoYW5kbGUsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnQoZG9jdW1lbnQsIFwibXNmdWxsc2NyZWVuY2hhbmdlXCIsIGhhbmRsZSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudChkb2N1bWVudCwgXCJmdWxsc2NyZWVuZXZlbnRjaGFuZ2VcIiwgaGFuZGxlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJzaGFsbG93Q29tcGFyZUpzb25cIixcblxuXG4gICAgICAgIC8q5rWF5q+U6L6D5a+56LGhXHJcbiAgICAgICAgKiBAcGFyYW1zIGpzb24xOuavlOi+g+esrOS4gOS4quWvueixoe+8jEpzb25cclxuICAgICAgICAqIEBwYXJhbXMganNvbjI65q+U6L6D56ys5LqM5Liq5a+56LGh77yMSnNvblxyXG4gICAgICAgICogKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNoYWxsb3dDb21wYXJlSnNvbihqc29uMSwganNvbjIpIHtcbiAgICAgICAgICAgIHJldHVybiBqc29uMSA9PT0ganNvbjI7XG4gICAgICAgIH1cblxuICAgICAgICAvKua3seavlOi+g+WvueixoVxyXG4gICAgICAgICAqIEBwYXJhbXMganNvbjE65q+U6L6D56ys5LiA5Liq5a+56LGh77yMSnNvblxyXG4gICAgICAgICAqIEBwYXJhbXMganNvbjI65q+U6L6D56ys5LqM5Liq5a+56LGh77yMSnNvblxyXG4gICAgICAgICAqICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJkZWVwQ29tcGFyZUpzb25cIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlZXBDb21wYXJlSnNvbihqc29uMSwganNvbjIpIHtcbiAgICAgICAgICAgIGlmICgodHlwZW9mIGpzb24xID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoanNvbjEpKSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoanNvbjEpICYmICh0eXBlb2YganNvbjEgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihqc29uMSkpID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShqc29uMSkpIHtcbiAgICAgICAgICAgICAgICB2YXIganNvbjJDb3B5ID0gT2JqZWN0LmRlZXBBc3NpZ24oe30sIGpzb24yKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNFcXVhbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IE9iamVjdC5lbnRyaWVzKGpzb24xKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gX3JlZjJbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmMlsxXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb24yQ29weS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBqc29uMkNvcHlba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0VxdWFsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBqc29uMkNvcHlba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGpzb24yQ29weVtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNFcXVhbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNFcXVhbCAmJiAhT2JqZWN0LmtleXMoanNvbjJDb3B5KS5sZW5ndGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ2RlZXBDb21wYXJlSnNvbiBhcmd1bWVudHMgbXVzdCBpcyBqc29uIScpO1xuICAgICAgICAgICAgICAgIHJldHVybiBqc29uMSA9PT0ganNvbjI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWIpOaWreaYr+WQpuaYr+S4gOS4quaWueazlSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJpc0Z1bmN0aW9uXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmMpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5piv5ZCm5piv5LiA5LiqanNvbiovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJpc0pzb25cIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzSnNvbihvYmopIHtcbiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaikpID09PSBcIm9iamVjdFwiICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopLnRvTG93ZXJDYXNlKCkgPT09IFwiW29iamVjdCBvYmplY3RdXCIgJiYgIW9iai5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICAvKuiuvue9ruacrOWcsOWtmOWCqCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJzZXRMb2NhbFN0b3JhZ2VJdGVtXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMb2NhbFN0b3JhZ2VJdGVtKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnW3doaXRlYm9hcmQtc2RrXUJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSAsIGtleSBpcyAnICsga2V5ICsgJyAsIHZhbHVlIGlzICcgKyB2YWx1ZSArICchJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNQcmludE5vdFN1cHBvcnRMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNQcmludE5vdFN1cHBvcnRMb2NhbFN0b3JhZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnW3doaXRlYm9hcmQtc2RrXUJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBsb2NhbFN0b3JhZ2UhJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNQcmludE5vdFN1cHBvcnRMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1ByaW50Tm90U3VwcG9ydExvY2FsU3RvcmFnZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ1t3aGl0ZWJvYXJkLXNka11Ccm93c2VyIGRvZXMgbm90IHN1cHBvcnQgbG9jYWxTdG9yYWdlICwgZXJyb3IgaW5mbzonLCBlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q6I635Y+W5pys5Zyw5a2Y5YKoKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldExvY2FsU3RvcmFnZUl0ZW1cIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldExvY2FsU3RvcmFnZUl0ZW0oa2V5KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ1t3aGl0ZWJvYXJkLXNka11Ccm93c2VyIGRvZXMgbm90IHN1cHBvcnQgbG9jYWxTdG9yYWdlLmdldEl0ZW0gLCBrZXkgaXMgJyArIGtleSArICcgIScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNQcmludE5vdFN1cHBvcnRMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNQcmludE5vdFN1cHBvcnRMb2NhbFN0b3JhZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnW3doaXRlYm9hcmQtc2RrXUJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBsb2NhbFN0b3JhZ2UhJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzUHJpbnROb3RTdXBwb3J0TG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNQcmludE5vdFN1cHBvcnRMb2NhbFN0b3JhZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBMLkxvZ2dlci53YXJuaW5nKCdbd2hpdGVib2FyZC1zZGtdQnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGxvY2FsU3RvcmFnZSAsIGVycm9yIGluZm86JywgZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKui9rOS4umpzb27lrZfnrKbkuLIqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwidG9Kc29uU3RyaW5naWZ5XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pzb25TdHJpbmdpZnkoanNvbikge1xuICAgICAgICAgICAgaWYgKCFqc29uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGpzb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghX2lzSnNvbihqc29uKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ganNvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShqc29uKTtcbiAgICAgICAgICAgICAgICBpZiAoanNvblN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICBqc29uID0ganNvblN0cmluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgcmV0dXJuIGpzb247XG4gICAgICAgIH1cblxuICAgICAgICAvKmpzb27lrZfnrKbkuLLovaxqc29uKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInRvSnNvblBhcnNlXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pzb25QYXJzZShqc29uU3RyKSB7XG4gICAgICAgICAgICBpZiAoIWpzb25TdHIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ganNvblN0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBqc29uU3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ganNvblN0cjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKGpzb25TdHIpO1xuICAgICAgICAgICAgICAgIGlmIChqc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIGpzb25TdHIgPSBqc29uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICByZXR1cm4ganNvblN0cjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q6I635Y+WUEPnmoRzZGvniYjmnKwqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZ2V0UGNTREtWZXJzaW9uXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQY1NES1ZlcnNpb24oKSB7XG4gICAgICAgICAgICBpZiAoVEsgJiYgVEsuZ2V0U2RrVmVyc2lvbiAmJiBUSy5nZXRTZGtWZXJzaW9uKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyKFRLLmdldFNka1ZlcnNpb24oKS5yZXBsYWNlKC8uL2csICcnKS5yZXBsYWNlKC92L2csICcnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmi7zmjqVDRE7lnLDlnYAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZ2V0SXRlbVwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SXRlbShjdXJBcnJheSwga2V5U3RyLCBhZGQpIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gdm9pZCAwO1xuICAgICAgICAgICAgdmFyIGluZGV4TnVtID0gdm9pZCAwO1xuICAgICAgICAgICAgdmFyIGNkbkNvbm5lY3QgPSBmdW5jdGlvbiBjZG5Db25uZWN0KGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSArICc6Ly8nICsgYiArICc6JyArIGM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY3VyQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgaXRlbSA9IGN1ckFycmF5LmZpbmQoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCArIDEgPT09IGN1ckFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhOdW0gPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4TnVtID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uaG9zdG5hbWUgPT09IGtleVN0cjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoYWRkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleE51bSAmJiAhaXNOYU4oaW5kZXhOdW0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQXJyYXlbaW5kZXhOdW0gKyAxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJBcnJheVtpbmRleE51bSArIDFdLmhvc3RuYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSAmJiBpdGVtLnByb3RvY29sICYmIGl0ZW0uaG9zdG5hbWUgJiYgaXRlbS5wb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2RuQ29ubmVjdChpdGVtLnByb3RvY29sLCBpdGVtLmhvc3RuYW1lLCBpdGVtLnBvcnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwib25FbGVtZW50UmVzaXplXCIsXG5cblxuICAgICAgICAvKuWFg+e0oOWkp+Wwj+aUueWPmOeahOebkeWQrCovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkVsZW1lbnRSZXNpemUoZWwsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoZWwgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlBhcmFtZXRlciAxIGlzIG5vdCBpbnN0YW5jZSBvZiAnSFRNTEVsZW1lbnQnLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWwvc3ludGF4Lmh0bWwjd3JpdGluZy1odG1sLWRvY3VtZW50cy1lbGVtZW50c1xuICAgICAgICAgICAgICAgIGlmICgvXihhcmVhfGJhc2V8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxrZXlnZW58bGlua3xtZW51aXRlbXxtZXRhfHBhcmFtfHNvdXJjZXx0cmFja3x3YnJ8c2NyaXB0fHN0eWxlfHRleHRhcmVhfHRpdGxlKSQvaS50ZXN0KGVsLnRhZ05hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vuc3VwcG9ydGVkIHRhZyB0eXBlLiBDaGFuZ2UgdGhlIHRhZyBvciB3cmFwIGl0IGluIGEgc3VwcG9ydGVkIHRhZyhlLmcuIGRpdikuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGFyYW1ldGVyIDIgaXMgbm90IG9mIHR5cGUgJ2Z1bmN0aW9uJy5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RXaWR0aCA9IGVsLm9mZnNldFdpZHRoIHx8IDE7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RIZWlnaHQgPSBlbC5vZmZzZXRIZWlnaHQgfHwgMTtcbiAgICAgICAgICAgICAgICB2YXIgbWF4V2lkdGggPSAxMDAwMCAqIGxhc3RXaWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgbWF4SGVpZ2h0ID0gMTAwMDAgKiBsYXN0SGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgdmFyIGV4cGFuZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGV4cGFuZC5zdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2JvdHRvbTowO2xlZnQ6MDtyaWdodDowO3otaW5kZXg9LTEwMDAwO292ZXJmbG93OmhpZGRlbjt2aXNpYmlsaXR5OmhpZGRlbjsnO1xuICAgICAgICAgICAgICAgIHZhciBzaHJpbmsgPSBleHBhbmQuY2xvbmVOb2RlKGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIHZhciBleHBhbmRDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGV4cGFuZENoaWxkLnN0eWxlLmNzc1RleHQgPSAndHJhbnNpdGlvbjowczthbmltYXRpb246bm9uZTsnO1xuICAgICAgICAgICAgICAgIHZhciBzaHJpbmtDaGlsZCA9IGV4cGFuZENoaWxkLmNsb25lTm9kZShmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICBleHBhbmRDaGlsZC5zdHlsZS53aWR0aCA9IG1heFdpZHRoICsgJ3B4JztcbiAgICAgICAgICAgICAgICBleHBhbmRDaGlsZC5zdHlsZS5oZWlnaHQgPSBtYXhIZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgICAgIHNocmlua0NoaWxkLnN0eWxlLndpZHRoID0gJzI1MCUnO1xuICAgICAgICAgICAgICAgIHNocmlua0NoaWxkLnN0eWxlLmhlaWdodCA9ICcyNTAlJztcblxuICAgICAgICAgICAgICAgIGV4cGFuZC5hcHBlbmRDaGlsZChleHBhbmRDaGlsZCk7XG4gICAgICAgICAgICAgICAgc2hyaW5rLmFwcGVuZENoaWxkKHNocmlua0NoaWxkKTtcbiAgICAgICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChleHBhbmQpO1xuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKHNocmluayk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXhwYW5kLm9mZnNldFBhcmVudCAhPT0gZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGV4cGFuZC5zY3JvbGxUb3AgPSBzaHJpbmsuc2Nyb2xsVG9wID0gbWF4SGVpZ2h0O1xuICAgICAgICAgICAgICAgIGV4cGFuZC5zY3JvbGxMZWZ0ID0gc2hyaW5rLnNjcm9sbExlZnQgPSBtYXhXaWR0aDtcblxuICAgICAgICAgICAgICAgIHZhciBuZXdXaWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIG5ld0hlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIG9uUmVzaXplID0gZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdXaWR0aCAhPT0gbGFzdFdpZHRoIHx8IG5ld0hlaWdodCAhPT0gbGFzdEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFdpZHRoID0gbmV3V2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0SGVpZ2h0ID0gbmV3SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBvblNjcm9sbCA9IGZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdXaWR0aCA9IGVsLm9mZnNldFdpZHRoIHx8IDE7XG4gICAgICAgICAgICAgICAgICAgIG5ld0hlaWdodCA9IGVsLm9mZnNldEhlaWdodCB8fCAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3V2lkdGggIT09IGxhc3RXaWR0aCB8fCBuZXdIZWlnaHQgIT09IGxhc3RIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShvblJlc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kLnNjcm9sbFRvcCA9IHNocmluay5zY3JvbGxUb3AgPSBtYXhIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGV4cGFuZC5zY3JvbGxMZWZ0ID0gc2hyaW5rLnNjcm9sbExlZnQgPSBtYXhXaWR0aDtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZXhwYW5kLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsLCBwYXNzaXZlRXZlbnRzKTtcbiAgICAgICAgICAgICAgICBzaHJpbmsuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwsIHBhc3NpdmVFdmVudHMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ1t3aGl0ZWJvYXJyZC1zZGtdb25FbGVtZW50UmVzaXplIGVycjonLCBlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFV0aWxzO1xufSgpO1xuXG47XG5leHBvcnRzLmRlZmF1bHQgPSBuZXcgVXRpbHMoKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnJlcXVpcmUoJ2JhYmVsLXBvbHlmaWxsJyk7XG5cbnJlcXVpcmUoJy4vdXRpbHMvTG9nJyk7XG5cbnZhciBfVEtXaGl0ZUJvYXJkTWFuYWdlciA9IHJlcXVpcmUoJy4vVEtXaGl0ZUJvYXJkTWFuYWdlcicpO1xuXG52YXIgX1RLV2hpdGVCb2FyZE1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVEtXaGl0ZUJvYXJkTWFuYWdlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9US1doaXRlQm9hcmRNYW5hZ2VyMi5kZWZhdWx0OyAvKueZveadv3Nka+WFpeWPo1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uICDnmb3mnb9zZGvlhaXlj6NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBhdXRob3Ig6YKx5bm/55SfXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZGF0ZSAyMDE4LTA0LTE4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi8iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfVGFsa2Nsb3VkUmVhY3QyID0gcmVxdWlyZSgnLi4vY29tcG9uZW50cy9UYWxrY2xvdWRSZWFjdCcpO1xuXG52YXIgX1RhbGtjbG91ZFJlYWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhbGtjbG91ZFJlYWN0Mik7XG5cbnZhciBfRG9tVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9Eb21VdGlscycpO1xuXG52YXIgX0RvbVV0aWxzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RvbVV0aWxzKTtcblxudmFyIF9VdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL1V0aWxzJyk7XG5cbnZhciBfVXRpbHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXRpbHMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9IC8qKlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBNZWRpYVBsYXllckNvbnRyb2xsZXJEdW1iIOWqkuS9k+aSreaUvuWZqOaOp+WItuWZqFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbW9kdWxlIE1lZGlhUGxheWVyQ29udHJvbGxlckR1bWJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uICAg5o+Q5L6bIOWqkuS9k+aSreaUvuWZqOeahOaOp+WItuWZqFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAYXV0aG9yIOmCseW5v+eUn1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZGF0ZSAyMDE4LzA1LzAxMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuXG52YXIgTWVkaWFQbGF5ZXJDb250cm9sbGVyRHVtYiA9IGZ1bmN0aW9uIChfVGFsa2Nsb3VkUmVhY3QpIHtcbiAgICBfaW5oZXJpdHMoTWVkaWFQbGF5ZXJDb250cm9sbGVyRHVtYiwgX1RhbGtjbG91ZFJlYWN0KTtcblxuICAgIGZ1bmN0aW9uIE1lZGlhUGxheWVyQ29udHJvbGxlckR1bWIoKSB7XG4gICAgICAgIHZhciBwYXJlbnROb2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkb2N1bWVudC5ib2R5O1xuICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2RlZmF1bHQnO1xuICAgICAgICB2YXIgd2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSA9IGFyZ3VtZW50c1syXTtcbiAgICAgICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcblxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVkaWFQbGF5ZXJDb250cm9sbGVyRHVtYik7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE1lZGlhUGxheWVyQ29udHJvbGxlckR1bWIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNZWRpYVBsYXllckNvbnRyb2xsZXJEdW1iKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnBhcmVudE5vZGUgPSBwYXJlbnROb2RlO1xuICAgICAgICBfdGhpcy5pbnN0YW5jZUlkID0gaW5zdGFuY2VJZDtcbiAgICAgICAgX3RoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSA9IHdoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2U7XG4gICAgICAgIF90aGlzLmVsZW1lbnRzID0ge307XG4gICAgICAgIF90aGlzLnZpZGVvRHVtYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgX3RoaXMuX2NyZWF0ZUVsZW1lbnRzKCk7XG4gICAgICAgIF90aGlzLl9jb25uZWN0RWxlbWVudHMoKTtcbiAgICAgICAgX3RoaXMucmVuZGVyKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTWVkaWFQbGF5ZXJDb250cm9sbGVyRHVtYiwgW3tcbiAgICAgICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlUHJvcHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlUHJvcHMocHJldlByb3BzKSB7XG4gICAgICAgICAgICBpZiAocHJldlByb3BzLnN0cmVhbUluZm8gIT09IHRoaXMucHJvcHMuc3RyZWFtSW5mbykge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2UHJvcHMuc3RyZWFtSW5mbyAmJiB0aGlzLnByb3BzLnN0cmVhbUluZm8gJiYgcHJldlByb3BzLnN0cmVhbUluZm8uYXR0cmlidXRlcyAmJiB0aGlzLnByb3BzLnN0cmVhbUluZm8uYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNSZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBPYmplY3QuZW50cmllcyh0aGlzLnByb3BzLnN0cmVhbUluZm8uYXR0cmlidXRlcylbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9yZWYyWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9yZWYyWzFdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gJ3Bvc2l0aW9uJyAmJiB2YWx1ZSAhPT0gcHJldlByb3BzLnN0cmVhbUluZm8uYXR0cmlidXRlc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZQcm9wcy5zdHJlYW1JbmZvLmF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHRoaXMucHJvcHMuc3RyZWFtSW5mby5hdHRyaWJ1dGVzLnBvc2l0aW9uICYmICFpc1JlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZVByb3BzKHByZXZQcm9wcykge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmIChwcmV2UHJvcHMuc3RyZWFtSW5mbyAhPT0gdGhpcy5wcm9wcy5zdHJlYW1JbmZvKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzU3RhcnQgPSBwcmV2UHJvcHMuc3RyZWFtSW5mbyA9PT0gdW5kZWZpbmVkICYmIHRoaXMucHJvcHMuc3RyZWFtSW5mbzsgLy/mkq3mlL7lmajliJrlvIDlp4vmkq3mlL5cbiAgICAgICAgICAgICAgICB2YXIgaXNFbmQgPSAhdGhpcy5wcm9wcy5zdHJlYW1JbmZvOyAvL+aSreaUvuWZqOW3suWBnOatouaSreaUvlxuICAgICAgICAgICAgICAgIHZhciBpc0NoYW5nZVBvc2l0aW9uID0gcHJldlByb3BzLnN0cmVhbUluZm8gJiYgdGhpcy5wcm9wcy5zdHJlYW1JbmZvICYmIHByZXZQcm9wcy5zdHJlYW1JbmZvLmF0dHJpYnV0ZXMgJiYgdGhpcy5wcm9wcy5zdHJlYW1JbmZvLmF0dHJpYnV0ZXMgJiYgcHJldlByb3BzLnN0cmVhbUluZm8uYXR0cmlidXRlcy5wb3NpdGlvbiAhPT0gdGhpcy5wcm9wcy5zdHJlYW1JbmZvLmF0dHJpYnV0ZXMucG9zaXRpb247IC8v6L+b5bqm5pS55Y+YXG4gICAgICAgICAgICAgICAgaWYgKGlzU3RhcnQgfHwgaXNFbmQgfHwgaXNDaGFuZ2VQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm93VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMudXBkYXRlVGltZSB8fCBub3dUaW1lIC0gdGhpcy51cGRhdGVUaW1lID4gNTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRpbWUgPSBub3dUaW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3VwZGF0ZVByb2dyZXNzVGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl91cGRhdGVQcm9ncmVzc1RpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVByb2dyZXNzVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3dUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnVwZGF0ZVRpbWUgPSBub3dUaW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5fdXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDc1MCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJldlByb3BzLnZvbHVtZSAhPT0gdGhpcy5wcm9wcy52b2x1bWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52b2x1bWVTbGlkZXIgJiYgdHlwZW9mIHRoaXMudm9sdW1lU2xpZGVyLnNldFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIF90eXBlb2YodGhpcy52b2x1bWVTbGlkZXIuc2V0UHJvZ3Jlc3ModGhpcy5wcm9wcy52b2x1bWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJldlByb3BzLm11dGVWb2x1bWUgIT09IHRoaXMucHJvcHMubXV0ZVZvbHVtZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZvbHVtZVNsaWRlciAmJiB0eXBlb2YgdGhpcy52b2x1bWVTbGlkZXIuc2V0UHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgX3R5cGVvZih0aGlzLnZvbHVtZVNsaWRlci5zZXRQcm9ncmVzcyh0aGlzLnByb3BzLm11dGVWb2x1bWUgPyAwIDogdGhpcy5wcm9wcy52b2x1bWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJldlByb3BzLmlzUGxheWJhY2sgIT09IHRoaXMucHJvcHMuaXNQbGF5YmFjaykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmlzUGxheWJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFkZENsYXNzKHRoaXMuZWxlbWVudHMubWVkaWFUb3RhbENvbnRyb2xFbGVtZW50LCAndGstcGxheWJhY2snKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50cy5tZWRpYVRvdGFsQ29udHJvbEVsZW1lbnQsICd0ay1wbGF5YmFjaycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByZXZQcm9wcy5teVVzZXJJZCAhPT0gdGhpcy5wcm9wcy5teVVzZXJJZCB8fCBwcmV2UHJvcHMuc3RyZWFtSW5mbyAhPT0gdGhpcy5wcm9wcy5zdHJlYW1JbmZvICYmICFwcmV2UHJvcHMuc3RyZWFtSW5mbyAmJiB0aGlzLnByb3BzLnN0cmVhbUluZm8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVDb250cm9sQnlQZXJtaXNzaW9ucygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoX1V0aWxzMi5kZWZhdWx0LmRlZXBDb21wYXJlSnNvbihwcmV2UHJvcHMuY29udHJvbFBlcm1pc3Npb25zLCB0aGlzLnByb3BzLmNvbnRyb2xQZXJtaXNzaW9ucykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVDb250cm9sQnlQZXJtaXNzaW9ucygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkZXN0cm95VmlldycsXG5cblxuICAgICAgICAvKumUgOavgeinhuWbviovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95VmlldygpIHtcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnRzLm1lZGlhVG90YWxDb250cm9sRWxlbWVudCwgdGhpcy5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnRzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3BsYXlPclBhdXNlQ2xpY2snLFxuXG5cbiAgICAgICAgLyrmkq3mlL7mmoLlgZwqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGxheU9yUGF1c2VDbGljaygpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vblBsYXlPclBhdXNlQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uUGxheU9yUGF1c2VDbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrlhbPpl63ngrnlh7vkuovku7blpITnkIYqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjbG9zZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlQ2xpY2soKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMub25DbG9zZUNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNsb3NlQ2xpY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5YWo5bGP54K55Ye75LqL5Lu25aSE55CGKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZnVsbFNjcmVlbkNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZ1bGxTY3JlZW5DbGljaygpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vbkZ1bGxTY3JlZW5DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25GdWxsU2NyZWVuQ2xpY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q6Z2Z6Z+z54K55Ye75LqL5Lu25aSE55CGKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndm9sdW1lTXV0ZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZvbHVtZU11dGVDbGljaygpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vblZvbHVtZU11dGVDbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25Wb2x1bWVNdXRlQ2xpY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2Zvcm1hdFRpbWUnLFxuXG5cbiAgICAgICAgLyrlsIbml7bpl7TmoLzlvI/ljJbkuLrliIY656eSKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9mb3JtYXRUaW1lKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBtaW51dGUgPSBwYXJzZUludChkYXRhIC8gNjApO1xuICAgICAgICAgICAgdmFyIHNlY29uZCA9IE1hdGgucm91bmQoZGF0YSAlIDYwKTtcbiAgICAgICAgICAgIGlmIChzZWNvbmQgPT09IDYwKSB7XG4gICAgICAgICAgICAgICAgbWludXRlICs9IDE7XG4gICAgICAgICAgICAgICAgc2Vjb25kID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJzZUludChtaW51dGUgLyAxMCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvL+aXtumXtOS4quS9jeaVsOi9rOWNgeS9jeaVsFxuICAgICAgICAgICAgICAgIG1pbnV0ZSA9ICcwJyArIG1pbnV0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJzZUludChzZWNvbmQgLyAxMCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvL+aXtumXtOS4quS9jeaVsOi9rOWNgeS9jeaVsFxuICAgICAgICAgICAgICAgIHNlY29uZCA9ICcwJyArIHNlY29uZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtaW51dGUgKyAnOicgKyBzZWNvbmQ7XG4gICAgICAgIH1cblxuICAgICAgICAvKuWIm+W7uuaJgOmcgOiKgueCuSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19jcmVhdGVFbGVtZW50cycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudHMoKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLm1lZGlhVG90YWxDb250cm9sRWxlbWVudCA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdhcnRpY2xlJywgdGhpcy5pbnN0YW5jZUlkICsgKHRoaXMucHJvcHMuaXNWaWRlb1BsYXllciA/ICdWaWRlb1BsYXllcicgOiAnTWVkaWFQbGF5ZXInKSArICdUYWxrTWVkaWFQbGF5ZXJUb3RhbENvbnRyb2wnLCAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkIHRrLW1lZGlhLXBsYXllciAnICsgJyB0ay1tZWRpYS1wbGF5ZXItdG90YWwtY29udHJvbCAnICsgKHRoaXMucHJvcHMuaXNWaWRlb1BsYXllciA/ICd2aWRlby1wbGF5ZXItY29udHJvbC1jb250YWluZXIgJyA6ICdhdWRpby1wbGF5ZXItY29udHJvbC1jb250YWluZXIgJykgKyAodGhpcy5wcm9wcy5pc1BsYXliYWNrID8gJ3RrLXBsYXliYWNrICcgOiAnICcpKTsgLy/lqpLkvZPmkq3mlL7lmajmiYDmnInmjqfku7boioLngrlcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2Nvbm5lY3RFbGVtZW50cycsXG5cblxuICAgICAgICAvKui/nuaOpeaJgOacieiKgueCuSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY29ubmVjdEVsZW1lbnRzKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMucGFyZW50Tm9kZSwgdGhpcy5lbGVtZW50cy5tZWRpYVRvdGFsQ29udHJvbEVsZW1lbnQpO1xuXG4gICAgICAgICAgICB2YXIgX3JlZjMgPSB0aGlzLnByb3BzLnN0cmVhbUluZm8gfHwge30sXG4gICAgICAgICAgICAgICAgX3JlZjMkYXR0cmlidXRlcyA9IF9yZWYzLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcyA9IF9yZWYzJGF0dHJpYnV0ZXMgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZjMkYXR0cmlidXRlcztcblxuICAgICAgICAgICAgdmFyIF9hdHRyaWJ1dGVzJGZpbGVuYW1lID0gYXR0cmlidXRlcy5maWxlbmFtZSxcbiAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IF9hdHRyaWJ1dGVzJGZpbGVuYW1lID09PSB1bmRlZmluZWQgPyAnJyA6IF9hdHRyaWJ1dGVzJGZpbGVuYW1lLFxuICAgICAgICAgICAgICAgIF9hdHRyaWJ1dGVzJHBvc2l0aW9uID0gYXR0cmlidXRlcy5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IF9hdHRyaWJ1dGVzJHBvc2l0aW9uID09PSB1bmRlZmluZWQgPyAwIDogX2F0dHJpYnV0ZXMkcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgX2F0dHJpYnV0ZXMkZHVyYXRpb24gPSBhdHRyaWJ1dGVzLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gX2F0dHJpYnV0ZXMkZHVyYXRpb24gPT09IHVuZGVmaW5lZCA/IDAgOiBfYXR0cmlidXRlcyRkdXJhdGlvbixcbiAgICAgICAgICAgICAgICBwYXVzZSA9IGF0dHJpYnV0ZXMucGF1c2U7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRzLm1lZGlhVG90YWxDb250cm9sRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMubWVkaWFUb3RhbENvbnRyb2xFbGVtZW50LmlubmVySFRNTCA9ICcgXFxuICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPVwibWVkaWEtcGxheWVyLWJveCBjbGVhci1mbG9hdCBcIiA+XFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1lZGlhLXBsYXllci1pY29uIGFkZC1mbCAnICsgKHBhdXNlID8gJ3BsYXknIDogJ3BhdXNlJykgKyAnXCIgPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZWRpYS1wbGF5ZXItY29udHJvbC1jb250YWluZXIgYWRkLWZsIGNsZWFyLWZsb2F0XCI+IFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gIGNsYXNzPVwicGxheS1wYXVzZS1idG4gYWRkLWN1cnNvci1wb2ludGVyIGFkZC1mbCAnICsgKHBhdXNlID8gJ3BsYXknIDogJ3BhdXNlJykgKyAnXCIgID48L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVkaWEtcGxheWVyLWluZm8tY29udGFpbmVyIGFkZC1mbFwiPiBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lZGlhLXBsYXllci1uYW1lLXRpbWUtY29udGFpbmVyIGNsZWFyLWZsb2F0XCI+IFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZWRpYS1wbGF5ZXItbmFtZSBhZGQtZmwgYWRkLW5vd3JhcFwiID4nICsgZmlsZW5hbWUgKyAnPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZWRpYS1wbGF5ZXItdGltZS1jb250YWluZXIgYWRkLWZyXCIgPiBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW0gY2xhc3M9XCJjdXJyLXRpbWVcIiA+JyArIHRoaXMuX2Zvcm1hdFRpbWUocG9zaXRpb24gLyAxMDAwKSArICc8L2VtPiAvIDxlbSBjbGFzcz1cInRvdGFsLXRpbWVcIiA+JyArIHRoaXMuX2Zvcm1hdFRpbWUoZHVyYXRpb24gLyAxMDAwKSArICc8L2VtPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lZGlhLXBsYXllci1wcm9ncmVzcy1jb250YWluZXJcIiBpZD1cIicgKyAodGhpcy5pbnN0YW5jZUlkICsgKHRoaXMucHJvcHMuaXNWaWRlb1BsYXllciA/ICdWaWRlb1BsYXllcicgOiAnTWVkaWFQbGF5ZXInKSkgKyAnTWVkaWFQbGF5ZXJQcm9ncmVzc0JhclwiID4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZvbHVtZS1pbmZvLWNvbnRhaW5lciBhZGQtZmwgY2xlYXItZmxvYXRcIiA+IFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uICBjbGFzcz1cInZvbHVtZS1pY29uIGFkZC1jdXJzb3ItcG9pbnRlciBhZGQtZmxcIiA+PC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2b2x1bWUtYmFyLWNvbnRhaW5lciBhZGQtZmxcIiAgaWQ9XCInICsgKHRoaXMuaW5zdGFuY2VJZCArICh0aGlzLnByb3BzLmlzVmlkZW9QbGF5ZXIgPyAnVmlkZW9QbGF5ZXInIDogJ01lZGlhUGxheWVyJykpICsgJ01lZGlhUGxheWVyVm9sdW1lQmFyXCIgPjwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gIGNsYXNzPVwiY2xvc2UtYnRuIGFkZC1jdXJzb3ItcG9pbnRlciBhZGQtZmxcIiA+PC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiAgY2xhc3M9XCJmdWxsLXNjcmVlbi1idG4gYWRkLWN1cnNvci1wb2ludGVyIGFkZC1mbFwiID48L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2FydGljbGU+IFxcbiAgICAgICAgICAgICc7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5wbGF5UGF1c2VCdG5FbGVtZW50ID0gdGhpcy5lbGVtZW50cy5tZWRpYVRvdGFsQ29udHJvbEVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncGxheS1wYXVzZS1idG4nKVswXTtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnBsYXlQYXVzZUljb25FbGVtZW50ID0gdGhpcy5lbGVtZW50cy5tZWRpYVRvdGFsQ29udHJvbEVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbWVkaWEtcGxheWVyLWljb24nKVswXTtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnZvbHVtZU11dGVCdG5FbGVtZW50ID0gdGhpcy5lbGVtZW50cy5tZWRpYVRvdGFsQ29udHJvbEVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndm9sdW1lLWljb24nKVswXTtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmNsb3NlQnRuRWxlbWVudCA9IHRoaXMuZWxlbWVudHMubWVkaWFUb3RhbENvbnRyb2xFbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Nsb3NlLWJ0bicpWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZnVsbFNjcmVlbkJ0bkVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzLm1lZGlhVG90YWxDb250cm9sRWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdmdWxsLXNjcmVlbi1idG4nKVswXTtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmZpbGVuYW1lRWxlbWVudCA9IHRoaXMuZWxlbWVudHMubWVkaWFUb3RhbENvbnRyb2xFbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21lZGlhLXBsYXllci1uYW1lJylbMF07XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5jdXJyVGltZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzLm1lZGlhVG90YWxDb250cm9sRWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjdXJyLXRpbWUnKVswXTtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnRvdGFsVGltZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzLm1lZGlhVG90YWxDb250cm9sRWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0b3RhbC10aW1lJylbMF07XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5tZWRpYVBsYXllclByb2dyZXNzRWxlbWVudCA9IHRoaXMuZWxlbWVudHMubWVkaWFUb3RhbENvbnRyb2xFbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21lZGlhLXBsYXllci1wcm9ncmVzcy1jb250YWluZXInKVswXTtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnBsYXlQYXVzZUJ0bkVsZW1lbnQub25jbGljayA9IHRoaXMucGxheU9yUGF1c2VDbGljay5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMudm9sdW1lTXV0ZUJ0bkVsZW1lbnQub25jbGljayA9IHRoaXMudm9sdW1lTXV0ZUNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5jbG9zZUJ0bkVsZW1lbnQub25jbGljayA9IHRoaXMuY2xvc2VDbGljay5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZnVsbFNjcmVlbkJ0bkVsZW1lbnQub25jbGljayA9IHRoaXMuZnVsbFNjcmVlbkNsaWNrLmJpbmQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAod2luZG93LlRhbGtTbGlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzc1NsaWRlciA9IG5ldyB3aW5kb3cuVGFsa1NsaWRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXJDb250YWluZXI6IHsgLy9zbGlkZXLmlbTkuKrnu4Tku7blrrnlmajnmoTnmoTorr7nva5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdGhhdC5pbnN0YW5jZUlkICsgKHRoYXQucHJvcHMuaXNWaWRlb1BsYXllciA/ICdWaWRlb1BsYXllcicgOiAnTWVkaWFQbGF5ZXInKSArICdNZWRpYVBsYXllclByb2dyZXNzQmFyJywgLy/lv4XkvKAhISEhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcgLy/mlrnlkJHvvIjmsLTlubMo6buY6K6k77yaaG9yaXpvbnRhbHx85Z6C55u077yadmVydGlrYWzvvIlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkJlZm9yZUNoYW5nZTogZnVuY3Rpb24gb25CZWZvcmVDaGFuZ2UocHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm1lZGlhUGxheWVyUHJvZ3Jlc3NTbGlkZXJpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQWZ0ZXJDaGFuZ2U6IGZ1bmN0aW9uIG9uQWZ0ZXJDaGFuZ2UocHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0Lm1lZGlhUGxheWVyUHJvZ3Jlc3NTbGlkZXJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoYXQucHJvcHMub25DaGFuZ2VQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnByb3BzLm9uQ2hhbmdlUHJvZ3Jlc3MocHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll91cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudGVtcFN0b3BVcGRhdGVQb3NpdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudGVtcFN0b3BVcGRhdGVQb3NpdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudm9sdW1lU2xpZGVyID0gbmV3IHdpbmRvdy5UYWxrU2xpZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlckNvbnRhaW5lcjogeyAvL3NsaWRlcuaVtOS4que7hOS7tuWuueWZqOeahOeahOiuvue9rlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0aGF0Lmluc3RhbmNlSWQgKyAodGhhdC5wcm9wcy5pc1ZpZGVvUGxheWVyID8gJ1ZpZGVvUGxheWVyJyA6ICdNZWRpYVBsYXllcicpICsgJ01lZGlhUGxheWVyVm9sdW1lQmFyJywgLy/lv4XkvKAhISEhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcgLy/mlrnlkJHvvIjmsLTlubMo6buY6K6k77yaaG9yaXpvbnRhbHx85Z6C55u077yadmVydGlrYWzvvIlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkFmdGVyQ2hhbmdlOiBmdW5jdGlvbiBvbkFmdGVyQ2hhbmdlKHZvbHVtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhhdC5wcm9wcy5vbkNoYW5nZVZvbHVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnByb3BzLm9uQ2hhbmdlVm9sdW1lKHZvbHVtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVDb250cm9sQnlQZXJtaXNzaW9ucygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmoLnmja7mnYPpmZDmm7TmlrDmjqfliLblmagqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfdXBkYXRlQ29udHJvbEJ5UGVybWlzc2lvbnMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZUNvbnRyb2xCeVBlcm1pc3Npb25zKCkge1xuICAgICAgICAgICAgdmFyIGlzUmVtb3RlTG9jYWxTaGFyZU1lZGlhID0gZmFsc2U7IC8v5piv5ZCm5piv6L+c56iL55qE5pys5Zyw55S15b2x5YWx5LqrXG5cbiAgICAgICAgICAgIHZhciBfcmVmNCA9IHRoaXMucHJvcHMuc3RyZWFtSW5mbyB8fCB7fSxcbiAgICAgICAgICAgICAgICBzdHJlYW1UeXBlID0gX3JlZjQuc3RyZWFtVHlwZSxcbiAgICAgICAgICAgICAgICB1c2VyaWQgPSBfcmVmNC51c2VyaWQ7XG5cbiAgICAgICAgICAgIGlmIChzdHJlYW1UeXBlID09PSAnZmlsZScgJiYgdXNlcmlkICE9IHRoaXMucHJvcHMubXlVc2VySWQpIHtcbiAgICAgICAgICAgICAgICBpc1JlbW90ZUxvY2FsU2hhcmVNZWRpYSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQudXBkYXRlU3R5bGUodGhpcy5lbGVtZW50cy5wbGF5UGF1c2VCdG5FbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogIXRoaXMucHJvcHMuY29udHJvbFBlcm1pc3Npb25zLmhhc1BsYXlPclBhdXNlIHx8IGlzUmVtb3RlTG9jYWxTaGFyZU1lZGlhID8gJ25vbmUnIDogJydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5wbGF5UGF1c2VCdG5FbGVtZW50LmRpc2FibGVkID0gIXRoaXMucHJvcHMuY29udHJvbFBlcm1pc3Npb25zLmhhc1BsYXlPclBhdXNlIHx8IGlzUmVtb3RlTG9jYWxTaGFyZU1lZGlhO1xuXG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQudXBkYXRlU3R5bGUodGhpcy5lbGVtZW50cy5jbG9zZUJ0bkVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAhdGhpcy5wcm9wcy5jb250cm9sUGVybWlzc2lvbnMuaGFzQ2xvc2UgPyAnbm9uZScgOiAnJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmNsb3NlQnRuRWxlbWVudC5kaXNhYmxlZCA9ICF0aGlzLnByb3BzLmNvbnRyb2xQZXJtaXNzaW9ucy5oYXNDbG9zZTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucHJvZ3Jlc3NTbGlkZXIgJiYgX1V0aWxzMi5kZWZhdWx0LmlzRnVuY3Rpb24odGhpcy5wcm9ncmVzc1NsaWRlci51cGRhdGVEaXNhYmxlZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzU2xpZGVyLnVwZGF0ZURpc2FibGVkKCF0aGlzLnByb3BzLmNvbnRyb2xQZXJtaXNzaW9ucy5oYXNDaGFuZ2VQcm9ncmVzcyB8fCBpc1JlbW90ZUxvY2FsU2hhcmVNZWRpYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvcHMuY29udHJvbFBlcm1pc3Npb25zLmhhc0NoYW5nZVByb2dyZXNzIHx8IGlzUmVtb3RlTG9jYWxTaGFyZU1lZGlhKSB7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFkZENsYXNzKHRoaXMuZWxlbWVudHMubWVkaWFQbGF5ZXJQcm9ncmVzc0VsZW1lbnQsICdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50cy5tZWRpYVBsYXllclByb2dyZXNzRWxlbWVudCwgJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuabtOaWsOi/m+W6piovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ191cGRhdGVQcm9ncmVzcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlUHJvZ3Jlc3MoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5zdHJlYW1JbmZvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1lZGlhUGxheWVyUHJvZ3Jlc3NTbGlkZXJpbmcgJiYgIXRoaXMudGVtcFN0b3BVcGRhdGVQb3NpdGlvbiAmJiB0aGlzLnByb2dyZXNzU2xpZGVyICYmIHR5cGVvZiB0aGlzLnByb2dyZXNzU2xpZGVyLnNldFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWY1ID0gdGhpcy5wcm9wcy5zdHJlYW1JbmZvICYmIHRoaXMucHJvcHMuc3RyZWFtSW5mby5hdHRyaWJ1dGVzID8gdGhpcy5wcm9wcy5zdHJlYW1JbmZvLmF0dHJpYnV0ZXMgOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZWY1JHBvc2l0aW9uID0gX3JlZjUucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IF9yZWY1JHBvc2l0aW9uID09PSB1bmRlZmluZWQgPyAwIDogX3JlZjUkcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVmNSRkdXJhdGlvbiA9IF9yZWY1LmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSBfcmVmNSRkdXJhdGlvbiA9PT0gdW5kZWZpbmVkID8gMCA6IF9yZWY1JGR1cmF0aW9uO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MgPSBwb3NpdGlvbiAvIGR1cmF0aW9uICogMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKHByb2dyZXNzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MgPiAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzID0gMTAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuY3VyclRpbWVFbGVtZW50LmlubmVySFRNTCA9IHRoaXMuX2Zvcm1hdFRpbWUocG9zaXRpb24gLyAxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzc1NsaWRlci5zZXRQcm9ncmVzcyhwcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgX3Byb3BzJHN0cmVhbUluZm8gPSBfcHJvcHMuc3RyZWFtSW5mbyxcbiAgICAgICAgICAgICAgICBzdHJlYW1JbmZvID0gX3Byb3BzJHN0cmVhbUluZm8gPT09IHVuZGVmaW5lZCA/IHt9IDogX3Byb3BzJHN0cmVhbUluZm8sXG4gICAgICAgICAgICAgICAgbXV0ZVZvbHVtZSA9IF9wcm9wcy5tdXRlVm9sdW1lLFxuICAgICAgICAgICAgICAgIGlzRnVsbFNjcmVlbiA9IF9wcm9wcy5pc0Z1bGxTY3JlZW47XG4gICAgICAgICAgICB2YXIgX3N0cmVhbUluZm8kYXR0cmlidXRlID0gc3RyZWFtSW5mby5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSBfc3RyZWFtSW5mbyRhdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCA/IHt9IDogX3N0cmVhbUluZm8kYXR0cmlidXRlO1xuICAgICAgICAgICAgdmFyIF9hdHRyaWJ1dGVzJGZpbGVuYW1lMiA9IGF0dHJpYnV0ZXMuZmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBfYXR0cmlidXRlcyRmaWxlbmFtZTIgPT09IHVuZGVmaW5lZCA/ICcnIDogX2F0dHJpYnV0ZXMkZmlsZW5hbWUyLFxuICAgICAgICAgICAgICAgIF9hdHRyaWJ1dGVzJHBvc2l0aW9uMiA9IGF0dHJpYnV0ZXMucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBfYXR0cmlidXRlcyRwb3NpdGlvbjIgPT09IHVuZGVmaW5lZCA/IDAgOiBfYXR0cmlidXRlcyRwb3NpdGlvbjIsXG4gICAgICAgICAgICAgICAgX2F0dHJpYnV0ZXMkZHVyYXRpb24yID0gYXR0cmlidXRlcy5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IF9hdHRyaWJ1dGVzJGR1cmF0aW9uMiA9PT0gdW5kZWZpbmVkID8gMCA6IF9hdHRyaWJ1dGVzJGR1cmF0aW9uMixcbiAgICAgICAgICAgICAgICBwYXVzZSA9IGF0dHJpYnV0ZXMucGF1c2U7XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZmlsZW5hbWVFbGVtZW50LmlubmVySFRNTCA9IGZpbGVuYW1lO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5jdXJyVGltZUVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5fZm9ybWF0VGltZShwb3NpdGlvbiAvIDEwMDApO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy50b3RhbFRpbWVFbGVtZW50LmlubmVySFRNTCA9IHRoaXMuX2Zvcm1hdFRpbWUoZHVyYXRpb24gLyAxMDAwKTtcbiAgICAgICAgICAgIGlmIChwYXVzZSkge1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzLnBsYXlQYXVzZUJ0bkVsZW1lbnQsICdwYXVzZScpO1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzLnBsYXlQYXVzZUJ0bkVsZW1lbnQsICdwbGF5Jyk7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHMucGxheVBhdXNlSWNvbkVsZW1lbnQsICdwYXVzZScpO1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzLnBsYXlQYXVzZUljb25FbGVtZW50LCAncGxheScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50cy5wbGF5UGF1c2VCdG5FbGVtZW50LCAncGxheScpO1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzLnBsYXlQYXVzZUJ0bkVsZW1lbnQsICdwYXVzZScpO1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzLnBsYXlQYXVzZUljb25FbGVtZW50LCAncGxheScpO1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzLnBsYXlQYXVzZUljb25FbGVtZW50LCAncGF1c2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtdXRlVm9sdW1lKSB7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFkZENsYXNzKHRoaXMuZWxlbWVudHMudm9sdW1lTXV0ZUJ0bkVsZW1lbnQsICdtdXRlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzLnZvbHVtZU11dGVCdG5FbGVtZW50LCAnbXV0ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzLmZ1bGxTY3JlZW5CdG5FbGVtZW50LCAneWVzJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzLmZ1bGxTY3JlZW5CdG5FbGVtZW50LCAneWVzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTWVkaWFQbGF5ZXJDb250cm9sbGVyRHVtYjtcbn0oX1RhbGtjbG91ZFJlYWN0My5kZWZhdWx0KTtcblxuO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBNZWRpYVBsYXllckNvbnRyb2xsZXJEdW1iOyIsIi8qU2VsZWN05LiL5ouJ5qGG57uE5Lu2XHJcbiAqIEBtb2R1bGUgRG9jdW1lbnRUb29sYmFyVmlld1xyXG4gKiBAZGVzY3JpcHRpb24gIHNka+eZveadv+aWh+aho+e/u+mhteetieW3peWFt+adoVxyXG4gKiBAYXV0aG9yIOmCseW5v+eUn1xyXG4gKiBAZGF0ZSAyMDE4LTA0LTI1XHJcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfVGFsa2Nsb3VkUmVhY3QyID0gcmVxdWlyZSgnLi9UYWxrY2xvdWRSZWFjdCcpO1xuXG52YXIgX1RhbGtjbG91ZFJlYWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhbGtjbG91ZFJlYWN0Mik7XG5cbnZhciBfRG9tVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9Eb21VdGlscycpO1xuXG52YXIgX0RvbVV0aWxzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RvbVV0aWxzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgU2VsZWN0RHVtYiA9IGZ1bmN0aW9uIChfVGFsa2Nsb3VkUmVhY3QpIHtcbiAgICBfaW5oZXJpdHMoU2VsZWN0RHVtYiwgX1RhbGtjbG91ZFJlYWN0KTtcblxuICAgIGZ1bmN0aW9uIFNlbGVjdER1bWIocGFyZW50Tm9kZSkge1xuICAgICAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWxlY3REdW1iKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU2VsZWN0RHVtYi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNlbGVjdER1bWIpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMucGFyZW50Tm9kZSA9IHBhcmVudE5vZGU7XG4gICAgICAgIF90aGlzLmVsZW1lbnRzID0ge307XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZXh0ZW5kU2hvdzogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMubGlzdERpcmVjdGlvbiA9ICdkb3duJzsgLy9kb3duICwgdXBcbiAgICAgICAgX3RoaXMuX2NyZWF0ZUNvbm5lY3RFbGVtZW50cygpO1xuICAgICAgICBfdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhTZWxlY3REdW1iLCBbe1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGVTdGF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVTdGF0ZShwcmV2U3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChwcmV2U3RhdGUuZXh0ZW5kU2hvdyAhPT0gdGhpcy5zdGF0ZS5leHRlbmRTaG93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWNlU2VsZWN0RXh0ZW5kTGlzdFNob3dPckhpZGUodGhpcy5zdGF0ZS5leHRlbmRTaG93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlUHJvcHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlUHJvcHMocHJldlByb3BzKSB7XG4gICAgICAgICAgICBpZiAocHJldlByb3BzLnNlbGVjdE9wdGlvbnMgIT09IHRoaXMuc3RhdGUuc2VsZWN0T3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25DbGFzc05hbWUgPSBfcHJvcHMub3B0aW9uQ2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgICAgICBfcHJvcHMkc2VsZWN0T3B0aW9ucyA9IF9wcm9wcy5zZWxlY3RPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RPcHRpb25zID0gX3Byb3BzJHNlbGVjdE9wdGlvbnMgPT09IHVuZGVmaW5lZCA/IFtdIDogX3Byb3BzJHNlbGVjdE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBfcHJvcHMuY3VycmVudFZhbHVlO1xuXG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUFsbENoaWxkKHRoaXMuZWxlbWVudHMuc2VsZWN0TGlzdFZpZXdFbGVtZW50KTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc2VsZWN0T3B0aW9ucy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbkVsZW1lbnQgPSBfRG9tVXRpbHMyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnbGknLCB1bmRlZmluZWQsIFwic2VsZWN0LW9wdGlvbiBcIiArIChvcHRpb25DbGFzc05hbWUgfHwgJyAnKSArIChjdXJyZW50VmFsdWUgPT09IHNlbGVjdE9wdGlvbnNbaW5kZXhdLnZhbHVlID8gJyBzZWxlY3RlZCcgOiAnICcpKTsgLy9vcHRpb24g6IqC54K5XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQuaW5uZXJIVE1MID0gc2VsZWN0T3B0aW9uc1tpbmRleF0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQub25jbGljayA9IHRoaXMub3B0aW9uT25DbGljay5iaW5kKHRoaXMsIHNlbGVjdE9wdGlvbnNbaW5kZXhdLnZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25FbGVtZW50Lm9uY2xpY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudHMuc2VsZWN0TGlzdFZpZXdFbGVtZW50LCBvcHRpb25FbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rlc3Ryb3lWaWV3JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lWaWV3KCkge1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudHMuc2VsZWN0Vmlld1Jvb3RFbGVtZW50LCB0aGlzLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZWxlbWVudHNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZm9yY2VIaWRlU2VsZWN0RXh0ZW5kTGlzdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JjZUhpZGVTZWxlY3RFeHRlbmRMaXN0KCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGV4dGVuZFNob3c6IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjdXJyZW50VGV4dE9uQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3VycmVudFRleHRPbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBleHRlbmRTaG93OiAhdGhpcy5zdGF0ZS5leHRlbmRTaG93IH0pO1xuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnb3B0aW9uT25DbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvcHRpb25PbkNsaWNrKHNlbGVjdFZhbHVlLCBpbmRleCwgZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGVjdFZhbHVlICE9PSB0aGlzLnByb3BzLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlICYmIHR5cGVvZiB0aGlzLnByb3BzLm9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2Uoc2VsZWN0VmFsdWUsIGluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXh0ZW5kU2hvdzogZmFsc2UgfSk7XG4gICAgICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZWxlY3RDb250YWluZXJPbk1vdXNlTGVhdmUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0Q29udGFpbmVyT25Nb3VzZUxlYXZlKGV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXh0ZW5kU2hvdzogZmFsc2UgfSk7XG4gICAgICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfbm90aWNlU2VsZWN0RXh0ZW5kTGlzdFNob3dPckhpZGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX25vdGljZVNlbGVjdEV4dGVuZExpc3RTaG93T3JIaWRlKGV4dGVuZFNob3cpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm5vdGljZVNlbGVjdEV4dGVuZExpc3RTaG93T3JIaWRlICYmIHR5cGVvZiB0aGlzLnByb3BzLm5vdGljZVNlbGVjdEV4dGVuZExpc3RTaG93T3JIaWRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5ub3RpY2VTZWxlY3RFeHRlbmRMaXN0U2hvd09ySGlkZShleHRlbmRTaG93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2dldFJlY3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFJlY3QoZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdmFyIGNsaWVudFRvcCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRUb3A7XG4gICAgICAgICAgICB2YXIgY2xpZW50TGVmdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRMZWZ0O1xuICAgICAgICAgICAgcmV0dXJuIHsgLy8g5YW85a65aWXlpJrlh7rnmoTkuKTkuKpweFxuICAgICAgICAgICAgICAgIHRvcDogcmVjdC50b3AgLSBjbGllbnRUb3AsIC8vIOi3neemu+mhtumDqOeahOS9jee9rlxuICAgICAgICAgICAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20gLSBjbGllbnRUb3AsIC8vIOi3neemu+mhtumDqOWKoOS4iuWFg+e0oOacrOi6q+eahOmrmOW6puWwseetieS6jmJvdHRvbeeahOS9jee9rlxuICAgICAgICAgICAgICAgIGxlZnQ6IHJlY3QubGVmdCAtIGNsaWVudExlZnQsIC8vIOi3neemu+W3pui+ueeahOS9jee9rlxuICAgICAgICAgICAgICAgIHJpZ2h0OiByZWN0LnJpZ2h0IC0gY2xpZW50TGVmdCwgLy8g6Led56a75Y+z6L6555qE5L2N572u5bCx5pivIOi3neemu+W3pui+ueeahOS9jee9ruWKoOS4iuWFg+e0oOacrOi6q+eahOWuveW6plxuICAgICAgICAgICAgICAgIHdpZHRoOiByZWN0LndpZHRoLCAvL+WFg+e0oOWuveW6plxuICAgICAgICAgICAgICAgIGhlaWdodDogcmVjdC5oZWlnaHQgLy/lhYPntKDpq5jluqZcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19jcmVhdGVDb25uZWN0RWxlbWVudHMnLFxuXG5cbiAgICAgICAgLyrliJvlu7rov57mjqXoioLngrkqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZUNvbm5lY3RFbGVtZW50cygpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuc2VsZWN0Vmlld1Jvb3RFbGVtZW50ID0gX0RvbVV0aWxzMi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2FydGljbGUnLCB0aGlzLnByb3BzLmlkLCB1bmRlZmluZWQsIHt9KTsgLy9zZWxlY3TmoLnoioLngrlcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuY3VycmVudFNlbGVjdFRleHRFbGVtZW50ID0gX0RvbVV0aWxzMi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB7fSk7IC8v5b2T5YmN6YCJ5Lit55qE5paH5pys6IqC54K5XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmFycm93RWxlbWVudCA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7IC8v566t5aS0XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmFycm93RWxlbWVudC5pbm5lckhUTUwgPSAnPGVtIGNsYXNzPVwiYXJyb3cgXCI+PC9lbT4nO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5zZWxlY3RMaXN0Vmlld0VsZW1lbnQgPSBfRG9tVXRpbHMyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnb2wnKTsgLy9zZWxlY3QgbGlzdCDoioLngrlcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnRzLnNlbGVjdFZpZXdSb290RWxlbWVudCwgdGhpcy5lbGVtZW50cy5jdXJyZW50U2VsZWN0VGV4dEVsZW1lbnQpO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudHMuc2VsZWN0Vmlld1Jvb3RFbGVtZW50LCB0aGlzLmVsZW1lbnRzLmFycm93RWxlbWVudCk7XG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50cy5zZWxlY3RWaWV3Um9vdEVsZW1lbnQsIHRoaXMuZWxlbWVudHMuc2VsZWN0TGlzdFZpZXdFbGVtZW50KTtcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hcHBlbmRDaGlsZCh0aGlzLnBhcmVudE5vZGUsIHRoaXMuZWxlbWVudHMuc2VsZWN0Vmlld1Jvb3RFbGVtZW50KTtcblxuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5jdXJyZW50U2VsZWN0VGV4dEVsZW1lbnQub25jbGljayA9IHRoaXMuY3VycmVudFRleHRPbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnNlbGVjdFZpZXdSb290RWxlbWVudC5vbm1vdXNlbGVhdmUgPSB0aGlzLnNlbGVjdENvbnRhaW5lck9uTW91c2VMZWF2ZS5iaW5kKHRoaXMpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzMi5kaXNhYmxlZCxcbiAgICAgICAgICAgICAgICBfcHJvcHMyJGN1cnJlbnRWYWx1ZSA9IF9wcm9wczIuY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IF9wcm9wczIkY3VycmVudFZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IF9wcm9wczIkY3VycmVudFZhbHVlO1xuXG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQudXBkYXRlU3R5bGUodGhpcy5lbGVtZW50cy5zZWxlY3RMaXN0Vmlld0VsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBkaXNhYmxlZCA/ICdub25lJyA6IHRoaXMuc3RhdGUuZXh0ZW5kU2hvdyA/ICdibG9jaycgOiAnbm9uZSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5saXN0RGlyZWN0aW9uID0gdGhpcy5wcm9wcy5saXN0RGlyZWN0aW9uIHx8IHRoaXMubGlzdERpcmVjdGlvbjtcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZXNldENsYXNzKHRoaXMuZWxlbWVudHMuc2VsZWN0Vmlld1Jvb3RFbGVtZW50LCAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkICcgKyAnIHNlbGVjdC1yb290IHRrLXNlbGVjdC1jb250YWluZXIgY2xlYXItZmxvYXQgJyArIChkaXNhYmxlZCA/ICcgZGlzYWJsZWQgJyA6ICcgICcpICsgKGNsYXNzTmFtZSB8fCAnJykgKyAoZGlzYWJsZWQgPyAnIGhpZGVFeHRlbmRMaXN0JyA6IHRoaXMuc3RhdGUuZXh0ZW5kU2hvdyA/ICcgc2hvd0V4dGVuZExpc3QnIDogJyBoaWRlRXh0ZW5kTGlzdCcpKTtcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZXNldENsYXNzKHRoaXMuZWxlbWVudHMuY3VycmVudFNlbGVjdFRleHRFbGVtZW50LCAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkICcgKyAnIHNlbGVjdC1idG4gY3VycmVudC1zZWxlY3QtdGV4dC1idG4gJyArIFwiY3VycmVudC1zZWxlY3QtdGV4dCBcIiArIChkaXNhYmxlZCA/ICdkaXNhYmxlZCAnIDogJyAnKSk7XG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVzZXRDbGFzcyh0aGlzLmVsZW1lbnRzLmFycm93RWxlbWVudCwgXCJhcnJvdy1jb250YWluZXIgXCIgKyAoZGlzYWJsZWQgPyAnZGlzYWJsZWQgJyA6ICcgJykpO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlc2V0Q2xhc3ModGhpcy5lbGVtZW50cy5zZWxlY3RMaXN0Vmlld0VsZW1lbnQsIFwic2VsZWN0LWV4dGVuZC1saXN0LWNvbnRhaW5lciBcIiArICh0aGlzLnByb3BzLmlzTW9iaWxlID8gJyAnIDogJ2N1c3RvbS1zY3JvbGwtYmFyJykgKyAoZGlzYWJsZWQgPyAnIGRpc2FibGVkICcgOiAnICAnKSArIChkaXNhYmxlZCA/ICcgaGlkZScgOiB0aGlzLnN0YXRlLmV4dGVuZFNob3cgPyAnIHNob3cnIDogJyBoaWRlJykpO1xuICAgICAgICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5jdXJyZW50U2VsZWN0VGV4dEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuY3VycmVudFNlbGVjdFRleHRFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuY3VycmVudFNlbGVjdFRleHRFbGVtZW50LnZhbHVlID0gY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5jdXJyZW50U2VsZWN0VGV4dEVsZW1lbnQuaW5uZXJUZXh0ID0gY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMucGFyZW50Tm9kZSAmJiB0aGlzLnN0YXRlLmV4dGVuZFNob3cgJiYgIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgIXRoaXMucHJvcHMubGlzdERpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnROb2RlUmVjdCA9IHRoaXMuX2dldFJlY3QodGhpcy5wcm9wcy5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0TGlzdFZpZXdFbGVtZW50UmVjdCA9IHRoaXMuX2dldFJlY3QodGhpcy5lbGVtZW50cy5zZWxlY3RMaXN0Vmlld0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RMaXN0Vmlld0VsZW1lbnRSZWN0LnRvcCAtIHBhcmVudE5vZGVSZWN0LnRvcCA+IHBhcmVudE5vZGVSZWN0LmhlaWdodCAtIHNlbGVjdExpc3RWaWV3RWxlbWVudFJlY3QuaGVpZ2h0ICsgNSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3REaXJlY3Rpb24gPSAndXAnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdERpcmVjdGlvbiA9ICdkb3duJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHMuc2VsZWN0Vmlld1Jvb3RFbGVtZW50LCBbJ2Rvd24nLCAndXAnXSk7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHMuc2VsZWN0TGlzdFZpZXdFbGVtZW50LCBbJ2Rvd24nLCAndXAnXSk7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFkZENsYXNzKHRoaXMuZWxlbWVudHMuc2VsZWN0Vmlld1Jvb3RFbGVtZW50LCB0aGlzLmxpc3REaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzLnNlbGVjdExpc3RWaWV3RWxlbWVudCwgdGhpcy5saXN0RGlyZWN0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHMuc2VsZWN0Vmlld1Jvb3RFbGVtZW50LCBbJ2Rvd24nLCAndXAnXSk7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHMuc2VsZWN0TGlzdFZpZXdFbGVtZW50LCBbJ2Rvd24nLCAndXAnXSk7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFkZENsYXNzKHRoaXMuZWxlbWVudHMuc2VsZWN0Vmlld1Jvb3RFbGVtZW50LCB0aGlzLmxpc3REaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzLnNlbGVjdExpc3RWaWV3RWxlbWVudCwgdGhpcy5saXN0RGlyZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBTZWxlY3REdW1iO1xufShfVGFsa2Nsb3VkUmVhY3QzLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTZWxlY3REdW1iOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxyXG4gKiDmi5Por77omZrmi59SZWFjdFxyXG4gKiBAbW9kdWxlIFZpZGVvUGxheWVyU21hcnRcclxuICogQGRlc2NyaXB0aW9uICAg5o+Q5L6bIFZpZGVvUGxheWVy5pKt5pS+5Zmo5omA6ZyA57uE5Lu2XHJcbiAqIEBhdXRob3Ig6YKx5bm/55SfXHJcbiAqIEBkYXRlIDIwMTgvMDUvMDFcclxuICovXG5cbnZhciBUYWxrY2xvdWRSZWFjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWxrY2xvdWRSZWFjdChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFsa2Nsb3VkUmVhY3QpO1xuXG4gICAgICAgIGlmICgodHlwZW9mIHByb3BzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwcm9wcykpID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMgPSBPYmplY3Quc2hhbGxvd0Fzc2lnbih7fSwgcHJvcHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcm9wcyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBfdHlwZW9mKHRoaXMuc3RhdGUpID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh0aGlzLnN0YXRlKSA/IHRoaXMuc3RhdGUgOiB7fTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVGFsa2Nsb3VkUmVhY3QsIFt7XG4gICAgICAgIGtleTogJ3NldFN0YXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgICAgICAgICB2YXIgcHJldlN0YXRlID0gT2JqZWN0LmRlZXBBc3NpZ24oe30sIHRoaXMuc3RhdGUpO1xuICAgICAgICAgICAgT2JqZWN0LnNoYWxsb3dBc3NpZ24odGhpcy5zdGF0ZSwgc3RhdGUpO1xuICAgICAgICAgICAgdmFyIGlzTm90UmVuZGVyID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGVTdGF0ZSAmJiB0eXBlb2YgdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGVTdGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGlzTm90UmVuZGVyID0gdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGVTdGF0ZShwcmV2U3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc05vdFJlbmRlciAmJiB0aGlzLnJlbmRlciAmJiB0eXBlb2YgdGhpcy5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50RGlkVXBkYXRlU3RhdGUgJiYgdHlwZW9mIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlU3RhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZVN0YXRlKHByZXZTdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NldFByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFByb3BzKHByb3BzKSB7XG4gICAgICAgICAgICB2YXIgcHJldlByb3BzID0gT2JqZWN0LmRlZXBBc3NpZ24oe30sIHRoaXMucHJvcHMpO1xuICAgICAgICAgICAgT2JqZWN0LnNoYWxsb3dBc3NpZ24odGhpcy5wcm9wcywgcHJvcHMpO1xuICAgICAgICAgICAgdmFyIGlzTm90UmVuZGVyID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGVQcm9wcyAmJiB0eXBlb2YgdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGlzTm90UmVuZGVyID0gdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGVQcm9wcyhwcmV2UHJvcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc05vdFJlbmRlciAmJiB0aGlzLnJlbmRlciAmJiB0eXBlb2YgdGhpcy5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50RGlkVXBkYXRlUHJvcHMgJiYgdHlwZW9mIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZVByb3BzKHByZXZQcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVGFsa2Nsb3VkUmVhY3Q7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRhbGtjbG91ZFJlYWN0OyIsIi8qKlxyXG4gKiB2aWRlbyBEdW1i57uE5Lu2XHJcbiAqIEBtb2R1bGUgVmlkZW9EdW1iXHJcbiAqIEBkZXNjcmlwdGlvbiAgIOaPkOS+myBWaWRlb+aYvuekuuWMuue7hOS7tlxyXG4gKiBAYXV0aG9yIHhpYWdkXHJcbiAqIEBkYXRlIDIwMTcvMDgvMTBcclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX1RhbGtjbG91ZFJlYWN0MiA9IHJlcXVpcmUoJy4vVGFsa2Nsb3VkUmVhY3QnKTtcblxudmFyIF9UYWxrY2xvdWRSZWFjdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UYWxrY2xvdWRSZWFjdDIpO1xuXG52YXIgX0RvbVV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvRG9tVXRpbHMnKTtcblxudmFyIF9Eb21VdGlsczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Eb21VdGlscyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFZpZGVvRHVtYiA9IGZ1bmN0aW9uIChfVGFsa2Nsb3VkUmVhY3QpIHtcbiAgICBfaW5oZXJpdHMoVmlkZW9EdW1iLCBfVGFsa2Nsb3VkUmVhY3QpO1xuXG4gICAgZnVuY3Rpb24gVmlkZW9EdW1iKCkge1xuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZG9jdW1lbnQuYm9keTtcbiAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdkZWZhdWx0JztcbiAgICAgICAgdmFyIHdoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UgPSBhcmd1bWVudHNbMl07XG4gICAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZGVvRHVtYik7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFZpZGVvRHVtYi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFZpZGVvRHVtYikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcbiAgICAgICAgX3RoaXMuaW5zdGFuY2VJZCA9IGluc3RhbmNlSWQ7XG4gICAgICAgIF90aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UgPSB3aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlO1xuICAgICAgICBfdGhpcy5lbGVtZW50cyA9IHt9O1xuICAgICAgICBfdGhpcy51c2VyaWQgPSBfdGhpcy5wcm9wcy5zdHJlYW1JbmZvID8gX3RoaXMucHJvcHMuc3RyZWFtSW5mby51c2VyaWQgOiB1bmRlZmluZWQ7XG4gICAgICAgIF90aGlzLnN0cmVhbVR5cGUgPSBfdGhpcy5wcm9wcy5zdHJlYW1JbmZvID8gX3RoaXMucHJvcHMuc3RyZWFtSW5mby5zdHJlYW1UeXBlIDogdW5kZWZpbmVkO1xuICAgICAgICBfdGhpcy5fY3JlYXRlRWxlbWVudHMoKTtcbiAgICAgICAgX3RoaXMuX2Nvbm5lY3RFbGVtZW50cygpO1xuICAgICAgICBfdGhpcy5fcGxheUFWKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVmlkZW9EdW1iLCBbe1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGVQcm9wcycsXG5cblxuICAgICAgICAvKnByb3Bz54q25oCB5pu05paw55Sf5ZG95ZGo5pyfKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZVByb3BzKHByZXZQcm9wcykge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudm9sdW1lICE9PSBwcmV2UHJvcHMudm9sdW1lIHx8IHRoaXMucHJvcHMubXV0ZVZvbHVtZSAhPT0gcHJldlByb3BzLm11dGVWb2x1bWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VWb2x1bWUodGhpcy5wcm9wcy5tdXRlVm9sdW1lID8gMCA6IHRoaXMucHJvcHMudm9sdW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZGVzdHJveVZpZXcnLFxuXG5cbiAgICAgICAgLyrplIDmr4Hop4blm74qL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveVZpZXcoKSB7XG4gICAgICAgICAgICB0aGlzLl91bnBsYXlBVigpO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudHMucm9vdEVsZW1lbnQsIHRoaXMucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5lbGVtZW50cykge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5lbGVtZW50c1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRFbGVtZW50SWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RWxlbWVudElkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHMucm9vdEVsZW1lbnQuaWQ7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19jaGFuZ2VWb2x1bWUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2NoYW5nZVZvbHVtZSh2b2x1bWUpIHtcbiAgICAgICAgICAgIGlmICh2b2x1bWUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygdm9sdW1lID09PSAnbnVtYmVyJyAmJiB0aGlzLnByb3BzLnN0cmVhbUluZm8gJiYgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5nZXRSb29tRGVsZWdhdGUoKSkge1xuICAgICAgICAgICAgICAgIHZhciBfcmVmID0gdGhpcy5wcm9wcy5zdHJlYW1JbmZvIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICB1c2VyaWQgPSBfcmVmLnVzZXJpZCxcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtVHlwZSA9IF9yZWYuc3RyZWFtVHlwZTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkuc2V0UmVtb3RlQXVkaW9Wb2x1bWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLmdldFJvb21EZWxlZ2F0ZSgpLnNldFJlbW90ZUF1ZGlvVm9sdW1lKHZvbHVtZSwgdXNlcmlkLCB1bmRlZmluZWQsIHN0cmVhbVR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5Yib5bu65omA6ZyA6IqC54K5Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2NyZWF0ZUVsZW1lbnRzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50cygpIHtcbiAgICAgICAgICAgIHZhciBfcmVmMiA9IHRoaXMucHJvcHMuc3RyZWFtSW5mbyB8fCB7fSxcbiAgICAgICAgICAgICAgICB1c2VyaWQgPSBfcmVmMi51c2VyaWQ7XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMucm9vdEVsZW1lbnQgPSBfRG9tVXRpbHMyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgdGhpcy5wcm9wcy52aWRlb0R1bWJFbGVtZW50SWRQcmVmaXggKyB1c2VyaWQsICd0ay1hdWRpby1vci12aWRlby1wbGF5ZXIgJyArICcgdGstYXVkaW8tcGxheWVyLXZpZGVvLWR1bWInKTsgLy/moLnoioLngrlcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2Nvbm5lY3RFbGVtZW50cycsXG5cblxuICAgICAgICAvKui/nuaOpeaJgOacieiKgueCuSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY29ubmVjdEVsZW1lbnRzKCkge1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMucGFyZW50Tm9kZSwgdGhpcy5lbGVtZW50cy5yb290RWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuaSreaUvuinhumikSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19wbGF5QVYnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3BsYXlBVigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnN0cmVhbUluZm8gJiYgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5nZXRSb29tRGVsZWdhdGUoKSAmJiB0aGlzLmVsZW1lbnRzLnJvb3RFbGVtZW50ICYmIHRoaXMuZWxlbWVudHMucm9vdEVsZW1lbnQuaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3JlZjMgPSB0aGlzLnByb3BzLnN0cmVhbUluZm8gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJpZCA9IF9yZWYzLnVzZXJpZCxcbiAgICAgICAgICAgICAgICAgICAgdmlkZW8gPSBfcmVmMy52aWRlbyxcbiAgICAgICAgICAgICAgICAgICAgYXVkaW8gPSBfcmVmMy5hdWRpbyxcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtVHlwZSA9IF9yZWYzLnN0cmVhbVR5cGU7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0cmVhbVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWVkaWEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5nZXRSb29tRGVsZWdhdGUoKS5wbGF5UmVtb3RlTWVkaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudElkID0gdGhpcy5lbGVtZW50cy5yb290RWxlbWVudC5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkucGxheVJlbW90ZU1lZGlhKHVzZXJpZCwgZWxlbWVudElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdmaWxlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkucGxheVJlbW90ZU1lZGlhRmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZWxlbWVudElkID0gdGhpcy5lbGVtZW50cy5yb290RWxlbWVudC5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkucGxheVJlbW90ZU1lZGlhRmlsZSh1c2VyaWQsIF9lbGVtZW50SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2hhbmdlVm9sdW1lKHRoaXMucHJvcHMubXV0ZVZvbHVtZSA/IDAgOiB0aGlzLnByb3BzLnZvbHVtZSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ191bnBsYXlBVicsXG5cblxuICAgICAgICAvKuWPlua2iOaSreaUvuinhumikSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdW5wbGF5QVYoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5nZXRSb29tRGVsZWdhdGUoKSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zdHJlYW1UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21lZGlhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkudW5wbGF5UmVtb3RlTWVkaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkudW5wbGF5UmVtb3RlTWVkaWEodGhpcy51c2VyaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZpbGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5nZXRSb29tRGVsZWdhdGUoKS51bnBsYXlSZW1vdGVNZWRpYUZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkudW5wbGF5UmVtb3RlTWVkaWFGaWxlKHRoaXMudXNlcmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHt9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFZpZGVvRHVtYjtcbn0oX1RhbGtjbG91ZFJlYWN0My5kZWZhdWx0KTtcblxuO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBWaWRlb0R1bWI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRhbGtBdWRpb1BsYXllciA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9NZWRpYVBsYXllciA9IHJlcXVpcmUoJy4vTWVkaWFQbGF5ZXInKTtcblxudmFyIF9NZWRpYVBsYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZWRpYVBsYXllcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEF1ZGlvUGxheWVyVmlld+e7hOS7tijpn7PpopHmkq3mlL7lmagpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBtb2R1bGUgQXVkaW9QbGF5ZXJWaWV3XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiAgIOaPkOS+myBBdWRpb1BsYXllcuaSreaUvuWZqOaJgOmcgOe7hOS7tlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAYXV0aG9yIOmCseW5v+eUn1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZGF0ZSAyMDE4LzA1LzAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG5cbnZhciBUYWxrQXVkaW9QbGF5ZXIgPSBmdW5jdGlvbiAoX1RhbGtNZWRpYVBsYXllcikge1xuICAgIF9pbmhlcml0cyhUYWxrQXVkaW9QbGF5ZXIsIF9UYWxrTWVkaWFQbGF5ZXIpO1xuXG4gICAgZnVuY3Rpb24gVGFsa0F1ZGlvUGxheWVyKCkge1xuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZG9jdW1lbnQuYm9keTtcbiAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdkZWZhdWx0JztcbiAgICAgICAgdmFyIHdoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UgPSBhcmd1bWVudHNbMl07XG4gICAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgICAgIHZhciBjb25maWdyYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHt9O1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWxrQXVkaW9QbGF5ZXIpO1xuXG4gICAgICAgIHZhciBpc1ZpZGVvUGxheWVyID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVGFsa0F1ZGlvUGxheWVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFsa0F1ZGlvUGxheWVyKSkuY2FsbCh0aGlzLCBwYXJlbnROb2RlLCBpbnN0YW5jZUlkLCB3aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLCBwcm9wcywgY29uZmlncmF0aW9uLCBpc1ZpZGVvUGxheWVyKSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFRhbGtBdWRpb1BsYXllciwgW3tcbiAgICAgICAga2V5OiAncmV2ZWl2ZUV2ZW50Um9vbVVzZXJtZWRpYW9yZmlsZXN0YXRlQ2hhbmdlZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXZlaXZlRXZlbnRSb29tVXNlcm1lZGlhb3JmaWxlc3RhdGVDaGFuZ2VkKHJlY3ZFdmVudERhdGEpIHtcbiAgICAgICAgICAgIHZhciBfcmVjdkV2ZW50RGF0YSRtZXNzYWcgPSByZWN2RXZlbnREYXRhLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgdHlwZSA9IF9yZWN2RXZlbnREYXRhJG1lc3NhZy50eXBlLFxuICAgICAgICAgICAgICAgIHVzZXJJZCA9IF9yZWN2RXZlbnREYXRhJG1lc3NhZy51c2VySWQsXG4gICAgICAgICAgICAgICAgX3JlY3ZFdmVudERhdGEkbWVzc2FnMiA9IF9yZWN2RXZlbnREYXRhJG1lc3NhZy5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSBfcmVjdkV2ZW50RGF0YSRtZXNzYWcyID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWN2RXZlbnREYXRhJG1lc3NhZzIsXG4gICAgICAgICAgICAgICAgcHVibGlzaGVkID0gX3JlY3ZFdmVudERhdGEkbWVzc2FnLnB1Ymxpc2hlZDtcblxuICAgICAgICAgICAgaWYgKCh0eXBlID09PSAnbWVkaWEnIHx8IHR5cGUgPT09ICdmaWxlJykgJiYgYXR0cmlidXRlcy5hdWRpbyAmJiAhYXR0cmlidXRlcy52aWRlbykge1xuICAgICAgICAgICAgICAgIC8v5Y+q5pyJbXAz5pON5L2cXG4gICAgICAgICAgICAgICAgaWYgKHB1Ymxpc2hlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUluZm86IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1JbmZvOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcmlkOiB1c2VySWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtVHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWRpbzogYXR0cmlidXRlcy5hdWRpbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRlbzogYXR0cmlidXRlcy52aWRlbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXNlcklkID09PSB0aGlzLnByb3BzLm15VXNlcklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSAmJiB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkgJiYgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLmdldFJvb21EZWxlZ2F0ZSgpLmdldE5hdGl2ZUludGVyZmFjZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5nZXRSb29tRGVsZWdhdGUoKS5nZXROYXRpdmVJbnRlcmZhY2UoKS5wYXVzZVNoYXJlTWVkaWFGaWxlKGZhbHNlKTsgLy9wbGF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5nZXRSb29tRGVsZWdhdGUoKS5nZXROYXRpdmVJbnRlcmZhY2UoKS5zZWVrTWVkaWFGaWxlKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgcGF1c2UgPSBhdHRyaWJ1dGVzLnBhdXNlO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lZGlhUGxheWVyTm90aWNlQWN0aW9uQ29tbWFuZCgnc3RhcnQnLCByZWN2RXZlbnREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVkaWFQbGF5ZXJOb3RpY2VBY3Rpb25Db21tYW5kKHBhdXNlID8gJ3BhdXNlJyA6ICdwbGF5JywgcmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1JbmZvOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lZGlhUGxheWVyTm90aWNlQWN0aW9uQ29tbWFuZCgnZW5kJywgcmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZXZlaXZlRXZlbnRSb29tVXNlcm1lZGlhb3JmaWxlYXR0cmlidXRlc1VwZGF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXZlaXZlRXZlbnRSb29tVXNlcm1lZGlhb3JmaWxlYXR0cmlidXRlc1VwZGF0ZShyZWN2RXZlbnREYXRhKSB7XG4gICAgICAgICAgICB2YXIgX3JlY3ZFdmVudERhdGEkbWVzc2FnMyA9IHJlY3ZFdmVudERhdGEubWVzc2FnZSxcbiAgICAgICAgICAgICAgICB0eXBlID0gX3JlY3ZFdmVudERhdGEkbWVzc2FnMy50eXBlLFxuICAgICAgICAgICAgICAgIF9yZWN2RXZlbnREYXRhJG1lc3NhZzQgPSBfcmVjdkV2ZW50RGF0YSRtZXNzYWczLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcyA9IF9yZWN2RXZlbnREYXRhJG1lc3NhZzQgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlY3ZFdmVudERhdGEkbWVzc2FnNCxcbiAgICAgICAgICAgICAgICBfcmVjdkV2ZW50RGF0YSRtZXNzYWc1ID0gX3JlY3ZFdmVudERhdGEkbWVzc2FnMy51cGRhdGVBdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgIHVwZGF0ZUF0dHJpYnV0ZXMgPSBfcmVjdkV2ZW50RGF0YSRtZXNzYWc1ID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWN2RXZlbnREYXRhJG1lc3NhZzU7XG5cbiAgICAgICAgICAgIGlmICgodHlwZSA9PT0gJ21lZGlhJyB8fCB0eXBlID09PSAnZmlsZScpICYmIGF0dHJpYnV0ZXMuYXVkaW8gJiYgIWF0dHJpYnV0ZXMudmlkZW8pIHtcbiAgICAgICAgICAgICAgICAvL+WPquaciW1wM+aTjeS9nFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnN0cmVhbUluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1JbmZvOiBPYmplY3QuZGVlcEFzc2lnbih7fSwgdGhpcy5zdGF0ZS5zdHJlYW1JbmZvLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogdXBkYXRlQXR0cmlidXRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVBdHRyaWJ1dGVzLnBhdXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lZGlhUGxheWVyTm90aWNlQWN0aW9uQ29tbWFuZCh1cGRhdGVBdHRyaWJ1dGVzLnBhdXNlID8gJ3BhdXNlJyA6ICdwbGF5JywgcmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlY2VpdmVFdmVudFJvb21FcnJvck5vdGljZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWNlaXZlRXZlbnRSb29tRXJyb3JOb3RpY2UocmVjdkV2ZW50RGF0YSkge1xuICAgICAgICAgICAgdmFyIGVycm9yQ29kZSA9IHJlY3ZFdmVudERhdGEuZXJyb3JDb2RlO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGVycm9yQ29kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgVEsuRVJST1JfTk9USUNFLlNIQVJFX01FRElBX0ZBSUxVUkU6IC8v5YWx5Lqr5aqS5L2T5paH5Lu25aSx6LSlXG4gICAgICAgICAgICAgICAgY2FzZSBUSy5FUlJPUl9OT1RJQ0UuU0hBUkVfRklMRV9GQUlMVVJFOlxuICAgICAgICAgICAgICAgICAgICAvL+WFseS6q+acrOWcsOWqkuS9k+aWh+S7tuWksei0pVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUluZm86IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVkaWFQbGF5ZXJOb3RpY2VBY3Rpb25Db21tYW5kKCdzdGFydFNoYXJlTWVkaWFGYWlsJywgcmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVEsuRVJST1JfTk9USUNFLlNUT1BfTUVESUFfRkFJTFVSRTogLy/lgZzmraLlhbHkuqvlqpLkvZPmlofku7blpLHotKVcbiAgICAgICAgICAgICAgICBjYXNlIFRLLkVSUk9SX05PVElDRS5TVE9QX0ZJTEVfRkFJTFVSRTpcbiAgICAgICAgICAgICAgICAgICAgLy/lgZzmraLlhbHkuqvmnKzlnLDlqpLkvZPmlofku7blpLHotKVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVkaWFQbGF5ZXJOb3RpY2VBY3Rpb25Db21tYW5kKCdzdG9wU2hhcmVNZWRpYUZhaWwnLCByZWN2RXZlbnREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUSy5FUlJPUl9OT1RJQ0UuU1VCU0NSSUJFX01FRElBX0ZBSUxVUkU6IC8v6K6i6ZiF5aqS5L2T5paH5Lu25aSx6LSlXG4gICAgICAgICAgICAgICAgY2FzZSBUSy5FUlJPUl9OT1RJQ0UuU1VCU0NSSUJFX0ZJTEVfRkFJTFVSRTpcbiAgICAgICAgICAgICAgICAgICAgLy/orqLpmIXmnKzlnLDlqpLkvZPmlofku7blpLHotKVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1JbmZvOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lZGlhUGxheWVyTm90aWNlQWN0aW9uQ29tbWFuZCgnc3Vic2NyaWJlU2hhcmVNZWRpYUZhaWwnLCByZWN2RXZlbnREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUSy5FUlJPUl9OT1RJQ0UuVU5TVUJTQ1JJQkVfTUVESUFfRkFJTFVSRTogLy/lj5bmtojorqLpmIXlqpLkvZPmlofku7blpLHotKVcbiAgICAgICAgICAgICAgICBjYXNlIFRLLkVSUk9SX05PVElDRS5VTlNVQlNDUklCRV9GSUxFX0ZBSUxVUkU6XG4gICAgICAgICAgICAgICAgICAgIC8v5Y+W5raI6K6i6ZiF5pys5Zyw5aqS5L2T5paH5Lu25aSx6LSlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lZGlhUGxheWVyTm90aWNlQWN0aW9uQ29tbWFuZCgndW5zdWJzY3JpYmVTaGFyZU1lZGlhRmFpbCcsIHJlY3ZFdmVudERhdGEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2VuZE1lZGlhUGxheWVyTm90aWNlQWN0aW9uQ29tbWFuZCcsXG5cblxuICAgICAgICAvKuWPkemAgeWKqOS9nOaMh+S7pFxyXG4gICAgICAgICAqIFhYWCDmraTlpITnm7TmjqXojrflj5bkuobkuLvnmb3mnb/lrp7kvovkuJTnm7TmjqXmk43kvZzkuobkuLvnmb3mnb/nmoTmlrnms5UqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2VuZE1lZGlhUGxheWVyTm90aWNlQWN0aW9uQ29tbWFuZChub3RpY2VUeXBlLCByZWN2RXZlbnREYXRhKSB7XG4gICAgICAgICAgICB2YXIgX3JlY3ZFdmVudERhdGEkbWVzc2FnNiA9IHJlY3ZFdmVudERhdGEubWVzc2FnZSxcbiAgICAgICAgICAgICAgICB0eXBlID0gX3JlY3ZFdmVudERhdGEkbWVzc2FnNi50eXBlLFxuICAgICAgICAgICAgICAgIHVzZXJJZCA9IF9yZWN2RXZlbnREYXRhJG1lc3NhZzYudXNlcklkLFxuICAgICAgICAgICAgICAgIF9yZWN2RXZlbnREYXRhJG1lc3NhZzcgPSBfcmVjdkV2ZW50RGF0YSRtZXNzYWc2LmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcyA9IF9yZWN2RXZlbnREYXRhJG1lc3NhZzcgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlY3ZFdmVudERhdGEkbWVzc2FnNztcblxuICAgICAgICAgICAgaWYgKCh0eXBlID09PSAnbWVkaWEnIHx8IHR5cGUgPT09ICdmaWxlJykgJiYgYXR0cmlidXRlcy5hdWRpbyAmJiAhYXR0cmlidXRlcy52aWRlbykge1xuICAgICAgICAgICAgICAgIC8v5Y+q5pyJbXAz5pON5L2cXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSAmJiB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2Uud2hpdGVib2FyZFZpZXdNYXAgJiYgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLndoaXRlYm9hcmRWaWV3TWFwLmhhcygnZGVmYXVsdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkVmlldyA9IHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS53aGl0ZWJvYXJkVmlld01hcC5nZXQoJ2RlZmF1bHQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRWaWV3ICYmIHdoaXRlYm9hcmRWaWV3LnNlbmRBY3Rpb25Db21tYW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gJ21lZGlhUGxheWVyTm90aWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXVkaW9QbGF5ZXJTdHJlYW1JbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllclR5cGU6ICdhdWRpb1BsYXllcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcmlkOiB1c2VySWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtVHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWRpbzogYXR0cmlidXRlcy5hdWRpbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRlbzogYXR0cmlidXRlcy52aWRlbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW9QbGF5ZXJTdHJlYW1JbmZvLmlzRHluYW1pY1BwdFZpZGVvID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQgPSBPYmplY3QuZGVlcEFzc2lnbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogbm90aWNlVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlaWQ6IGF1ZGlvUGxheWVyU3RyZWFtSW5mby5hdHRyaWJ1dGVzLmZpbGVpZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgYXVkaW9QbGF5ZXJTdHJlYW1JbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRWaWV3LnNlbmRBY3Rpb25Db21tYW5kKGFjdGlvbiwgY21kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUYWxrQXVkaW9QbGF5ZXI7XG59KF9NZWRpYVBsYXllcjIuZGVmYXVsdCk7XG5cbndpbmRvdy5UYWxrQXVkaW9QbGF5ZXIgPSBUYWxrQXVkaW9QbGF5ZXI7XG5leHBvcnRzLlRhbGtBdWRpb1BsYXllciA9IFRhbGtBdWRpb1BsYXllcjtcbmV4cG9ydHMuZGVmYXVsdCA9IFRhbGtBdWRpb1BsYXllcjsiLCIvKiDor77ku7blpIfms6jop4blm75cclxuICogQG1vZHVsZSByZW1hcmtWaWV3Um9vdEVsZW1lbnRcclxuICogQGRlc2NyaXB0aW9uICBzZGvor77ku7blpIfms6hcclxuICogQGF1dGhvciDpgrHlub/nlJ9cclxuICogQGRhdGUgMjAxOC0wNS0yMFxyXG4gICogKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRhbGtEb2N1bWVudFJlbWFyayA9IHVuZGVmaW5lZDtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX1RhbGtjbG91ZFJlYWN0MiA9IHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvVGFsa2Nsb3VkUmVhY3QnKTtcblxudmFyIF9UYWxrY2xvdWRSZWFjdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UYWxrY2xvdWRSZWFjdDIpO1xuXG52YXIgX0RvbVV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvRG9tVXRpbHMnKTtcblxudmFyIF9Eb21VdGlsczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Eb21VdGlscyk7XG5cbnZhciBfVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9VdGlscycpO1xuXG52YXIgX1V0aWxzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1V0aWxzKTtcblxudmFyIF9HbG9iYWwgPSByZXF1aXJlKCcuLi8uLi91dGlscy9HbG9iYWwnKTtcblxudmFyIF9HbG9iYWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfR2xvYmFsKTtcblxudmFyIF9MYW5ndWFnZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL0xhbmd1YWdlJyk7XG5cbnZhciBfTGFuZ3VhZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGFuZ3VhZ2UpO1xuXG52YXIgX1RhbGtBamF4ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvVGFsa0FqYXgnKTtcblxudmFyIF9UYWxrQWpheDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UYWxrQWpheCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFRhbGtEb2N1bWVudFJlbWFyayA9IGZ1bmN0aW9uIChfVGFsa2Nsb3VkUmVhY3QpIHtcbiAgICBfaW5oZXJpdHMoVGFsa0RvY3VtZW50UmVtYXJrLCBfVGFsa2Nsb3VkUmVhY3QpO1xuXG4gICAgZnVuY3Rpb24gVGFsa0RvY3VtZW50UmVtYXJrKCkge1xuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZG9jdW1lbnQuYm9keTtcbiAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdkZWZhdWx0JztcbiAgICAgICAgdmFyIHdoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UgPSBhcmd1bWVudHNbMl07XG4gICAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgICAgIHZhciBjb25maWdyYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHt9O1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWxrRG9jdW1lbnRSZW1hcmspO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUYWxrRG9jdW1lbnRSZW1hcmsuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUYWxrRG9jdW1lbnRSZW1hcmspKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgICAgX3RoaXMucGFyZW50Tm9kZSA9IHBhcmVudE5vZGU7XG4gICAgICAgIF90aGlzLmluc3RhbmNlSWQgPSBpbnN0YW5jZUlkO1xuICAgICAgICBfdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlID0gd2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZTtcbiAgICAgICAgX3RoaXMuY29uZmlncmF0aW9uID0gY29uZmlncmF0aW9uO1xuICAgICAgICBfdGhpcy5lbGVtZW50cyA9IHt9O1xuICAgICAgICBfdGhpcy5kb2N1bWVudFJlbWFya1RhbGtEcmFnID0gdW5kZWZpbmVkOyAvL+aLluaLveWunuS+i1xuICAgICAgICBfdGhpcy5hamF4UmVxdWVzdGluZ0xpc3QgPSB7fTsgLy9hamF45q2j5Zyo6K+35rGC55qE5YiX6KGoXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgYXV0b09wZW5SZW1hcms6IHRydWUsIC8v5piv5ZCm6Ieq5Yqo5omT5byAcmVtYXJrXG4gICAgICAgICAgICB1cGRhdGVTdGF0ZTogZmFsc2UsXG4gICAgICAgICAgICB2aWV3U3RhdGU6IHtcbiAgICAgICAgICAgICAgICB0b29sOiB7fSwgLy/nmb3mnb/moIfms6jlt6Xlhbfkv6Hmga9cbiAgICAgICAgICAgICAgICBhY3Rpb246IHt9LCAvL+aSpOmUgOOAgeaBouWkjeOAgea4heepuuS/oeaBr1xuICAgICAgICAgICAgICAgIHpvb206IHt9LCAvL+aWueazlee8qeWwj+S/oeaBr1xuICAgICAgICAgICAgICAgIHBhZ2U6IHt9LCAvL+e/u+mhteS/oeaBr1xuICAgICAgICAgICAgICAgIGRvY3VtZW50VHlwZTogJ2dlbmVyYWxEb2N1bWVudCcsIC8v5omT5byA55qE5paH5Lu257G75Yir77yMZ2VuZXJhbERvY3VtZW5077yI5pmu6YCa5paH5qGj77yJ44CBZHluYW1pY1BQVO+8iOWKqOaAgVBQVO+8ieOAgWg1RG9jdW1lbnQoSDXor77ku7YpXG4gICAgICAgICAgICAgICAgZmlsZWlkOiAwLCAvL+aJk+W8gOeahOaWh+aho+eahOaWh+S7tmlkXG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdFZvbHVtZTogMTAwLCAvL+WKqOaAgVBQVOaWh+aho+eahOmfs+mHj1xuICAgICAgICAgICAgICAgIGZ1bGxTY3JlZW46IGZhbHNlLCAvL+aYr+WQpuWFqOWxj1xuICAgICAgICAgICAgICAgIHJlbWFyazogZmFsc2UsIC8v5piv5ZCm5byA5ZCv5paH5qGj5aSH5rOoXG4gICAgICAgICAgICAgICAgb3RoZXI6IHsgLy/lhbblroPkv6Hmga9cbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeUNvbG9yOiBfdGhpcy5jb25maWdyYXRpb24ucHJpbWFyeUNvbG9yLCAvL+eUu+eslOminOiJsiAs6buY6K6kICMwMDAwMDBcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5Q29sb3I6IF90aGlzLmNvbmZpZ3JhdGlvbi5zZWNvbmRhcnlDb2xvciwgLy/loavlhYXpopzoibIgLOm7mOiupCAjZmZmZmZmXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogX3RoaXMuY29uZmlncmF0aW9uLmJhY2tncm91bmRDb2xvciwgLy/og4zmma/popzoibIgLOm7mOiupCAjZmZmZmZmXG4gICAgICAgICAgICAgICAgICAgIHBlbmNpbFdpZHRoOiBfdGhpcy5jb25maWdyYXRpb24ucGVuY2lsV2lkdGgsIC8v55S756yU5aSn5bCPICwg6buY6K6kNVxuICAgICAgICAgICAgICAgICAgICBzaGFwZVdpZHRoOiBfdGhpcy5jb25maWdyYXRpb24uc2hhcGVXaWR0aCwgLy/lm77lvaLnlLvnrJTlpKflsI8gLCDpu5jorqQ1XG4gICAgICAgICAgICAgICAgICAgIGVyYXNlcldpZHRoOiBfdGhpcy5jb25maWdyYXRpb24uZXJhc2VyV2lkdGgsIC8v5qmh55qu5aSn5bCPIO+8jCDpu5jorqQxNVxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogX3RoaXMuY29uZmlncmF0aW9uLmZvbnRTaXplLCAvL+Wtl+S9k+Wkp+WwjyDvvIwg6buY6K6kMThcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogX3RoaXMuY29uZmlncmF0aW9uLmZvbnRGYW1pbHkgLy/kvb/nlKjnmoTlrZfkvZMg77yM6buY6K6kXCLlvq7ova/pm4Xpu5FcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2NyZWF0ZUNvbm5lY3RFbGVtZW50cygpO1xuICAgICAgICBfdGhpcy5fdXBkYXRlTGFuZ3VhZ2UoKTtcbiAgICAgICAgX3RoaXMucmVuZGVyKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVGFsa0RvY3VtZW50UmVtYXJrLCBbe1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGVTdGF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVTdGF0ZShwcmV2U3RhdGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmF1dG9PcGVuUmVtYXJrICYmIHByZXZTdGF0ZS52aWV3U3RhdGUuZmlsZWlkID09IHRoaXMuc3RhdGUudmlld1N0YXRlLmZpbGVpZCAmJiB0aGlzLnN0YXRlLnZpZXdTdGF0ZS5maWxlaWQgIT0gMCAmJiBwcmV2U3RhdGUudmlld1N0YXRlLnBhZ2UuY3VycmVudFBhZ2UgIT09IHRoaXMuc3RhdGUudmlld1N0YXRlLnBhZ2UuY3VycmVudFBhZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlICYmIF9VdGlsczIuZGVmYXVsdC5pc0Z1bmN0aW9uKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5vcGVuRG9jdW1lbnRSZW1hcmspKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5vcGVuRG9jdW1lbnRSZW1hcmsodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJldlN0YXRlLnZpZXdTdGF0ZS5maWxlaWQgIT0gdGhpcy5zdGF0ZS52aWV3U3RhdGUuZmlsZWlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuYXV0b09wZW5SZW1hcmsgJiYgdGhpcy5zdGF0ZS52aWV3U3RhdGUuZmlsZWlkICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSAmJiBfVXRpbHMyLmRlZmF1bHQuaXNGdW5jdGlvbih0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2Uub3BlbkRvY3VtZW50UmVtYXJrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLm9wZW5Eb2N1bWVudFJlbWFyayh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2FqYXhEb2N1bWVudFJlbWFyaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXZTdGF0ZS52aWV3U3RhdGUucmVtYXJrICE9PSB0aGlzLnN0YXRlLnZpZXdTdGF0ZS5yZW1hcmspIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hamF4RG9jdW1lbnRSZW1hcmsoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlUHJvcHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlUHJvcHMocHJldlByb3BzKSB7XG4gICAgICAgICAgICBpZiAocHJldlByb3BzLmxhbmd1YWdlVHlwZSAhPT0gdGhpcy5wcm9wcy5sYW5ndWFnZVR5cGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVMYW5ndWFnZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXZQcm9wcy5pc0RyYWcgIT09IHRoaXMucHJvcHMuaXNEcmFnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuaXNEcmFnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZFRhbGtEcmFnKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRSZW1hcmtUYWxrRHJhZyAmJiB0eXBlb2YgdGhpcy5kb2N1bWVudFJlbWFya1RhbGtEcmFnLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRSZW1hcmtUYWxrRHJhZy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50UmVtYXJrVGFsa0RyYWcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIV9VdGlsczIuZGVmYXVsdC5kZWVwQ29tcGFyZUpzb24ocHJldlByb3BzLmluaXREcmFnUG9zaXRpb24sIHRoaXMucHJvcHMuaW5pdERyYWdQb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudFJlbWFya1RhbGtEcmFnICYmIHR5cGVvZiB0aGlzLmRvY3VtZW50UmVtYXJrVGFsa0RyYWcuc2V0UG9zaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYgPSB0aGlzLnByb3BzLmluaXREcmFnUG9zaXRpb24gfHwge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVmJGxlZnQgPSBfcmVmLmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gX3JlZiRsZWZ0ID09PSB1bmRlZmluZWQgPyA1MCA6IF9yZWYkbGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZWYkdG9wID0gX3JlZi50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgPSBfcmVmJHRvcCA9PT0gdW5kZWZpbmVkID8gMTAwIDogX3JlZiR0b3A7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFJlbWFya1RhbGtEcmFnLnNldFBvc2l0aW9uKGxlZnQsIHRvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjaGFuZ2VQYXJlbnROb2RlJyxcblxuXG4gICAgICAgIC8q5pS55Y+Y54i25Lqy6IqC54K5Ki9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVBhcmVudE5vZGUocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50cy5yZW1hcmtWaWV3Um9vdEVsZW1lbnQsIHRoaXMucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYXBwZW5kQ2hpbGQodGhpcy5wYXJlbnROb2RlLCB0aGlzLmVsZW1lbnRzLnJlbWFya1ZpZXdSb290RWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKumUgOavgeinhuWbviovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rlc3Ryb3lWaWV3JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lWaWV3KCkge1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudHMucmVtYXJrVmlld1Jvb3RFbGVtZW50LCB0aGlzLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZWxlbWVudHNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q6YeN5paw6K6h566X5aSn5bCPKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVzaXplJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRvY3VtZW50UmVtYXJrVGFsa0RyYWcgJiYgX1V0aWxzMi5kZWZhdWx0LmlzRnVuY3Rpb24odGhpcy5kb2N1bWVudFJlbWFya1RhbGtEcmFnLnJlc2l6ZUNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRSZW1hcmtUYWxrRHJhZy5yZXNpemVDYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmjqXmlLbliqjkvZzmjIfku6QqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZWNlaXZlQWN0aW9uQ29tbWFuZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWNlaXZlQWN0aW9uQ29tbWFuZChhY3Rpb24sIGNtZCkge1xuICAgICAgICAgICAgaWYgKCh0eXBlb2YgY21kID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjbWQpKSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoY21kKSkge1xuICAgICAgICAgICAgICAgIGNtZCA9IE9iamVjdC5kZWVwQXNzaWduKHt9LCBjbWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1tEb2N1bWVudFJlbWFya11yZWNlaXZlIHdoaXRlYm9hcmQgdmlldyBhY3Rpb24gY29tbWFuZO+8iGFjdGlvbixjbWTvvIk6JywgYWN0aW9uLCBjbWQpO1xuICAgICAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlICd2aWV3U3RhdGVVcGRhdGUnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdTdGF0ZTogY21kLnZpZXdTdGF0ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWFs+mXreaWh+aho+Wkh+azqCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Nsb3NlRG9jdW1lbnRSZW1hcmtPbkNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlRG9jdW1lbnRSZW1hcmtPbkNsaWNrKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSAmJiBfVXRpbHMyLmRlZmF1bHQuaXNGdW5jdGlvbih0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuY2xvc2VEb2N1bWVudFJlbWFyaykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuY2xvc2VEb2N1bWVudFJlbWFyayh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrliJvlu7rmiYDpnIDoioLngrkqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfY3JlYXRlQ29ubmVjdEVsZW1lbnRzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVDb25uZWN0RWxlbWVudHMoKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnJlbWFya1ZpZXdSb290RWxlbWVudCA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB0aGlzLmluc3RhbmNlSWQgKyAnVGFsa2Nsb3VkUmVtYXJrJywgJ3RhbGtjbG91ZC1zZGstd2hpdGVib2FyZCAnICsgdGhpcy5pbnN0YW5jZUlkICsgJyB0YWxrLWNsb3VkLXJlbWFyay1jb250YWluZXIgcmVtYXJrLWNvbnRhaW5lcicsIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgICAgICAgICAgICAgekluZGV4OiAzXG4gICAgICAgICAgICB9KTsgLy9oNeWuueWZqOiKgueCuVxuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnJlbWFya1ZpZXdSb290RWxlbWVudC5pbm5lckhUTUwgPSAnXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlbWFyay1oZWFkXCI+IFxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm5hbWVcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJjbG9zZVwiPjwvYnV0dG9uPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50LWNvbnRhaW5lclwiPiBcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjb250ZW50LXRleHQgIGN1c3RvbS1zY3JvbGwtYmFyXCIgPiAgPC9zcGFuPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgJztcblxuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMucGFyZW50Tm9kZSwgdGhpcy5lbGVtZW50cy5yZW1hcmtWaWV3Um9vdEVsZW1lbnQpO1xuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnJlbWFya05hbWVFbGVtZW50ID0gdGhpcy5lbGVtZW50cy5yZW1hcmtWaWV3Um9vdEVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbmFtZScpWzBdO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5yZW1hcmtDbG9zZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzLnJlbWFya1ZpZXdSb290RWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjbG9zZScpWzBdO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5yZW1hcmtDb250ZW50RWxlbWVudCA9IHRoaXMuZWxlbWVudHMucmVtYXJrVmlld1Jvb3RFbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NvbnRlbnQtdGV4dCcpWzBdO1xuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnJlbWFya0Nsb3NlRWxlbWVudC5vbmNsaWNrID0gdGhpcy5jbG9zZURvY3VtZW50UmVtYXJrT25DbGljay5iaW5kKHRoaXMpO1xuXG4gICAgICAgICAgICB0aGlzLl9hZGRUYWxrRHJhZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrmm7TmlrDor63oqIAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfdXBkYXRlTGFuZ3VhZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZUxhbmd1YWdlKCkge1xuICAgICAgICAgICAgdmFyIF9wcm9wcyRsYW5ndWFnZVR5cGUgPSB0aGlzLnByb3BzLmxhbmd1YWdlVHlwZSxcbiAgICAgICAgICAgICAgICBsYW5ndWFnZVR5cGUgPSBfcHJvcHMkbGFuZ3VhZ2VUeXBlID09PSB1bmRlZmluZWQgPyAnY2gnIDogX3Byb3BzJGxhbmd1YWdlVHlwZTtcblxuICAgICAgICAgICAgaWYgKCEobGFuZ3VhZ2VUeXBlID09PSAnY2gnIHx8IGxhbmd1YWdlVHlwZSA9PT0gJ3R3JyB8fCBsYW5ndWFnZVR5cGUgPT09ICdlbicgfHwgbGFuZ3VhZ2VUeXBlID09PSAnamEnKSkge1xuICAgICAgICAgICAgICAgIGxhbmd1YWdlVHlwZSA9ICdjaCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBfVGFsa0xhbmd1YWdlJGdldCRkb2MgPSBfTGFuZ3VhZ2UyLmRlZmF1bHQuZ2V0KGxhbmd1YWdlVHlwZSkuZG9jdW1lbnRSZW1hcmssXG4gICAgICAgICAgICAgICAgbmFtZSA9IF9UYWxrTGFuZ3VhZ2UkZ2V0JGRvYy5uYW1lLFxuICAgICAgICAgICAgICAgIGNsb3NlVGl0bGUgPSBfVGFsa0xhbmd1YWdlJGdldCRkb2MuY2xvc2VUaXRsZTtcblxuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5yZW1hcmtOYW1lRWxlbWVudC5pbm5lckhUTUwgPSBuYW1lO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5yZW1hcmtDbG9zZUVsZW1lbnQuc2V0QXR0cmlidXRlKCd0aXRsZScsIGNsb3NlVGl0bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrmt7vliqDmi5bmi70qL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfYWRkVGFsa0RyYWcnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZFRhbGtEcmFnKCkge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5UYWxrRHJhZyAmJiB0aGlzLmVsZW1lbnRzLnJlbWFya1ZpZXdSb290RWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvY3VtZW50UmVtYXJrVGFsa0RyYWcgJiYgdHlwZW9mIHRoaXMuZG9jdW1lbnRSZW1hcmtUYWxrRHJhZy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRSZW1hcmtUYWxrRHJhZy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRSZW1hcmtUYWxrRHJhZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFJlbWFya1RhbGtEcmFnID0gbmV3IHdpbmRvdy5UYWxrRHJhZyh0aGlzLmVsZW1lbnRzLnJlbWFya1ZpZXdSb290RWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJEYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiA1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogOTBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyphamF46K+35rGC5paH5qGj5aSH5rOo5L+h5oGvKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2FqYXhEb2N1bWVudFJlbWFyaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYWpheERvY3VtZW50UmVtYXJrKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBfc3RhdGUkdmlld1N0YXRlID0gdGhpcy5zdGF0ZS52aWV3U3RhdGUsXG4gICAgICAgICAgICAgICAgcmVtYXJrID0gX3N0YXRlJHZpZXdTdGF0ZS5yZW1hcmssXG4gICAgICAgICAgICAgICAgZmlsZWlkID0gX3N0YXRlJHZpZXdTdGF0ZS5maWxlaWQ7XG5cbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciBpc1JlcXVlc3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFqYXhSZXF1ZXN0aW5nTGlzdFsnZG9jdW1lbnRSZW1hcmtfJyArIGZpbGVpZF0gJiYgbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLmFqYXhSZXF1ZXN0aW5nTGlzdFsnZG9jdW1lbnRSZW1hcmtfJyArIGZpbGVpZF0ucmVxdWVzdFRpbWUgPCA1MDAwKSB7XG4gICAgICAgICAgICAgICAgaXNSZXF1ZXN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmlzQ29ubmVjdGVkUm9vbSAmJiAhaXNSZXF1ZXN0aW5nICYmIHRoaXMucHJvcHMuY2FuUmVtYXJrICYmIHJlbWFyayAmJiBmaWxlaWQgIT0gMCAmJiAhX0dsb2JhbDIuZGVmYXVsdC5hbGxEb2N1bWVudFJlbWFya0luZm9NYXAuaGFzKCdkb2N1bWVudFJlbWFya18nICsgZmlsZWlkKSkge1xuICAgICAgICAgICAgICAgIC8v5byA5ZCv6K++5Lu25aSH5rOo5LiU5LmL5YmN5rKh5pyJ6I635Y+W6L+H6K+l5aSH5rOo5pWw5o2uXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWpheFJlcXVlc3RpbmdMaXN0Wydkb2N1bWVudFJlbWFya18nICsgZmlsZWlkXSAmJiB0aGlzLmFqYXhSZXF1ZXN0aW5nTGlzdFsnZG9jdW1lbnRSZW1hcmtfJyArIGZpbGVpZF0uYWpheFhociAmJiBfVXRpbHMyLmRlZmF1bHQuaXNGdW5jdGlvbih0aGlzLmFqYXhSZXF1ZXN0aW5nTGlzdFsnZG9jdW1lbnRSZW1hcmtfJyArIGZpbGVpZF0uYWpheFhoci5hYm9ydCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hamF4UmVxdWVzdGluZ0xpc3RbJ2RvY3VtZW50UmVtYXJrXycgKyBmaWxlaWRdLmFqYXhYaHIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5hamF4UmVxdWVzdGluZ0xpc3RbJ2RvY3VtZW50UmVtYXJrXycgKyBmaWxlaWRdID0geyByZXF1ZXN0VGltZTogbmV3IERhdGUoKS5nZXRUaW1lKCksIGFqYXhYaHI6IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgICAgIHRoaXMuYWpheFJlcXVlc3RpbmdMaXN0Wydkb2N1bWVudFJlbWFya18nICsgZmlsZWlkXS5hamF4WGhyID0gKDAsIF9UYWxrQWpheDIuZGVmYXVsdCkoKS5wb3N0KHRoaXMucHJvcHMud2ViQWRkcmVzcyArIFwiL0NsaWVudEFQSVwiICsgXCIvZ2V0ZmlsZXJlbWFya1wiICsgXCI/dHM9XCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSwgeyBmaWxlaWQ6IGZpbGVpZCB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIuYWpheFJlcXVlc3RpbmdMaXN0Wydkb2N1bWVudFJlbWFya18nICsgZmlsZWlkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzMi5hamF4UmVxdWVzdGluZ0xpc3RbJ2RvY3VtZW50UmVtYXJrXycgKyBmaWxlaWRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UucmVzdWx0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVtYXJrSW5mbyA9IHJlc3BvbnNlW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gJ3Jlc3VsdCcgJiYgcmVtYXJrSW5mbyAmJiBfVXRpbHMyLmRlZmF1bHQuaXNKc29uKHJlbWFya0luZm8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX0dsb2JhbDIuZGVmYXVsdC5hbGxEb2N1bWVudFJlbWFya0luZm9NYXAuaGFzKCdkb2N1bWVudFJlbWFya18nICsgcmVtYXJrSW5mby5maWxlaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0LmFsbERvY3VtZW50UmVtYXJrSW5mb01hcC5zZXQoJ2RvY3VtZW50UmVtYXJrXycgKyByZW1hcmtJbmZvLmZpbGVpZCwge30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkb2N1bWVudFJlbWFya0luZm9Kc29uID0gX0dsb2JhbDIuZGVmYXVsdC5hbGxEb2N1bWVudFJlbWFya0luZm9NYXAuZ2V0KCdkb2N1bWVudFJlbWFya18nICsgcmVtYXJrSW5mby5maWxlaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnRSZW1hcmtJbmZvSnNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRSZW1hcmtJbmZvSnNvbltyZW1hcmtJbmZvLmZpbGVpZCArICdfJyArIHJlbWFya0luZm8ucGFnZWlkXSA9IHJlbWFya0luZm8ucmVtYXJrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczIud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSAmJiBfdGhpczIud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS53aGl0ZWJvYXJkVmlld01hcCAmJiBfdGhpczIud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS53aGl0ZWJvYXJkVmlld01hcC5nZXQodGhhdC5pbnN0YW5jZUlkKSAmJiBfVXRpbHMyLmRlZmF1bHQuaXNGdW5jdGlvbihfdGhpczIud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS53aGl0ZWJvYXJkVmlld01hcC5nZXQodGhhdC5pbnN0YW5jZUlkKS5mb3JjZVZpZXdTdGF0ZVVwZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLndoaXRlYm9hcmRWaWV3TWFwLmdldCh0aGF0Lmluc3RhbmNlSWQpLmZvcmNlVmlld1N0YXRlVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgdXBkYXRlU3RhdGU6ICFfdGhpczIuc3RhdGUudXBkYXRlU3RhdGUgfSk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlc3BvbnNlLCB4aHIpIHtcbiAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuZXJyb3IoJ2FqYXggcmVxdWVzdCBmYWlsICBlcnJvciBpbmZvKCByZXNwb25zZSwgeGhyICk6JywgcmVzcG9uc2UsIHhocik7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMi5hamF4UmVxdWVzdGluZ0xpc3RbJ2RvY3VtZW50UmVtYXJrXycgKyBmaWxlaWRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMyLmFqYXhSZXF1ZXN0aW5nTGlzdFsnZG9jdW1lbnRSZW1hcmtfJyArIGZpbGVpZF07XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7IHVwZGF0ZVN0YXRlOiAhX3RoaXMyLnN0YXRlLnVwZGF0ZVN0YXRlIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF9zdGF0ZSR2aWV3U3RhdGUyID0gdGhpcy5zdGF0ZS52aWV3U3RhdGUsXG4gICAgICAgICAgICAgICAgcmVtYXJrID0gX3N0YXRlJHZpZXdTdGF0ZTIucmVtYXJrLFxuICAgICAgICAgICAgICAgIGZpbGVpZCA9IF9zdGF0ZSR2aWV3U3RhdGUyLmZpbGVpZCxcbiAgICAgICAgICAgICAgICBfc3RhdGUkdmlld1N0YXRlMiRwYWcgPSBfc3RhdGUkdmlld1N0YXRlMi5wYWdlLFxuICAgICAgICAgICAgICAgIHBhZ2UgPSBfc3RhdGUkdmlld1N0YXRlMiRwYWcgPT09IHVuZGVmaW5lZCA/IHt9IDogX3N0YXRlJHZpZXdTdGF0ZTIkcGFnO1xuICAgICAgICAgICAgdmFyIF9wYWdlJGN1cnJlbnRQYWdlID0gcGFnZS5jdXJyZW50UGFnZSxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZSA9IF9wYWdlJGN1cnJlbnRQYWdlID09PSB1bmRlZmluZWQgPyAxIDogX3BhZ2UkY3VycmVudFBhZ2U7XG5cbiAgICAgICAgICAgIHZhciBkb2N1bWVudFJlbWFya0luZm9Kc29uID0gX0dsb2JhbDIuZGVmYXVsdC5hbGxEb2N1bWVudFJlbWFya0luZm9NYXAuZ2V0KCdkb2N1bWVudFJlbWFya18nICsgZmlsZWlkKTtcbiAgICAgICAgICAgIHZhciBpc1Nob3cgPSB0aGlzLnByb3BzLmNhblJlbWFyayAmJiByZW1hcmsgJiYgZmlsZWlkICE9IDAgJiYgZG9jdW1lbnRSZW1hcmtJbmZvSnNvbiAmJiBkb2N1bWVudFJlbWFya0luZm9Kc29uW2ZpbGVpZCArICdfJyArIGN1cnJlbnRQYWdlXTtcbiAgICAgICAgICAgIHZhciBpc05lbmRSZXNpemUgPSAhdGhpcy5pc1Nob3cgJiYgaXNTaG93O1xuICAgICAgICAgICAgdGhpcy5pc1Nob3cgPSBpc1Nob3c7XG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQudXBkYXRlU3R5bGUodGhpcy5lbGVtZW50cy5yZW1hcmtWaWV3Um9vdEVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpc1Nob3cgPyAnYmxvY2snIDogJ25vbmUnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGlzU2hvdyAmJiBkb2N1bWVudFJlbWFya0luZm9Kc29uICYmIGRvY3VtZW50UmVtYXJrSW5mb0pzb25bZmlsZWlkICsgJ18nICsgY3VycmVudFBhZ2VdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5yZW1hcmtDb250ZW50RWxlbWVudC5pbm5lckhUTUwgPSBkb2N1bWVudFJlbWFya0luZm9Kc29uW2ZpbGVpZCArICdfJyArIGN1cnJlbnRQYWdlXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzTmVuZFJlc2l6ZSAmJiB0aGlzLmRvY3VtZW50UmVtYXJrVGFsa0RyYWcgJiYgX1V0aWxzMi5kZWZhdWx0LmlzRnVuY3Rpb24odGhpcy5kb2N1bWVudFJlbWFya1RhbGtEcmFnLnJlc2l6ZUNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRSZW1hcmtUYWxrRHJhZy5yZXNpemVDYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRhbGtEb2N1bWVudFJlbWFyaztcbn0oX1RhbGtjbG91ZFJlYWN0My5kZWZhdWx0KTtcblxud2luZG93LlRhbGtEb2N1bWVudFJlbWFyayA9IFRhbGtEb2N1bWVudFJlbWFyaztcbmV4cG9ydHMuVGFsa0RvY3VtZW50UmVtYXJrID0gVGFsa0RvY3VtZW50UmVtYXJrO1xuZXhwb3J0cy5kZWZhdWx0ID0gVGFsa0RvY3VtZW50UmVtYXJrOyIsIi8qIOaWh+aho+e/u+mhteetieW3peWFt+adoVxyXG4gKiBAbW9kdWxlIFRhbGtEb2N1bWVudFRvb2xiYXJcclxuICogQGRlc2NyaXB0aW9uICBzZGvnmb3mnb/mlofmoaPnv7vpobXnrYnlt6XlhbfmnaFcclxuICogQGF1dGhvciDpgrHlub/nlJ9cclxuICogQGRhdGUgMjAxOC0wNC0yNVxyXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5UYWxrRG9jdW1lbnRUb29sYmFyID0gdW5kZWZpbmVkO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfVGFsa2Nsb3VkUmVhY3QyID0gcmVxdWlyZSgnLi4vY29tcG9uZW50cy9UYWxrY2xvdWRSZWFjdCcpO1xuXG52YXIgX1RhbGtjbG91ZFJlYWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhbGtjbG91ZFJlYWN0Mik7XG5cbnZhciBfRG9tVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9Eb21VdGlscycpO1xuXG52YXIgX0RvbVV0aWxzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RvbVV0aWxzKTtcblxudmFyIF9VdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL1V0aWxzJyk7XG5cbnZhciBfVXRpbHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXRpbHMpO1xuXG52YXIgX1NlbGVjdCA9IHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvU2VsZWN0Jyk7XG5cbnZhciBfU2VsZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NlbGVjdCk7XG5cbnZhciBfTGFuZ3VhZ2UgPSByZXF1aXJlKCcuLi8uLi91dGlscy9MYW5ndWFnZScpO1xuXG52YXIgX0xhbmd1YWdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xhbmd1YWdlKTtcblxudmFyIF9HbG9iYWwgPSByZXF1aXJlKCcuLi8uLi91dGlscy9HbG9iYWwnKTtcblxudmFyIF9HbG9iYWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfR2xvYmFsKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgVGFsa0RvY3VtZW50VG9vbGJhciA9IGZ1bmN0aW9uIChfVGFsa2Nsb3VkUmVhY3QpIHtcbiAgICBfaW5oZXJpdHMoVGFsa0RvY3VtZW50VG9vbGJhciwgX1RhbGtjbG91ZFJlYWN0KTtcblxuICAgIGZ1bmN0aW9uIFRhbGtEb2N1bWVudFRvb2xiYXIoKSB7XG4gICAgICAgIHZhciBwYXJlbnROb2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkb2N1bWVudC5ib2R5O1xuICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2RlZmF1bHQnO1xuICAgICAgICB2YXIgd2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSA9IGFyZ3VtZW50c1syXTtcbiAgICAgICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICAgICAgdmFyIGNvbmZpZ3JhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhbGtEb2N1bWVudFRvb2xiYXIpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUYWxrRG9jdW1lbnRUb29sYmFyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFsa0RvY3VtZW50VG9vbGJhcikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcbiAgICAgICAgX3RoaXMuaW5zdGFuY2VJZCA9IGluc3RhbmNlSWQ7XG4gICAgICAgIF90aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UgPSB3aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlO1xuICAgICAgICBfdGhpcy5jb25maWdyYXRpb24gPSBjb25maWdyYXRpb247XG4gICAgICAgIF90aGlzLmVsZW1lbnRzID0ge307XG4gICAgICAgIF90aGlzLmVsZW1lbnRzVmlld0NsYXNzID0ge307XG4gICAgICAgIF90aGlzLmRvY3VtZW50VG9vbGJhclRhbGtEcmFnID0gdW5kZWZpbmVkOyAvL+aLluaLveWunuS+i1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlOiBmYWxzZSxcbiAgICAgICAgICAgIGR5bmFtaWNQcHRBVlNpemU6IDAsIC8v5Yqo5oCBUFBU6Z+z6KeG6aKR55qE5Liq5pWwXG4gICAgICAgICAgICB0ZW1wRGlzYWJsZWREcmFnOiBmYWxzZSwgLy/mmK/lkKbkuLTml7bnpoHnlKjmi5bmi71cbiAgICAgICAgICAgIHZpZXdTdGF0ZToge1xuICAgICAgICAgICAgICAgIHRvb2w6IHt9LCAvL+eZveadv+agh+azqOW3peWFt+S/oeaBr1xuICAgICAgICAgICAgICAgIGFjdGlvbjoge30sIC8v5pKk6ZSA44CB5oGi5aSN44CB5riF56m65L+h5oGvXG4gICAgICAgICAgICAgICAgem9vbToge30sIC8v5pa55rOV57yp5bCP5L+h5oGvXG4gICAgICAgICAgICAgICAgcGFnZToge30sIC8v57+76aG15L+h5oGvXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRUeXBlOiAnZ2VuZXJhbERvY3VtZW50JywgLy/miZPlvIDnmoTmlofku7bnsbvliKvvvIxnZW5lcmFsRG9jdW1lbnTvvIjmma7pgJrmlofmoaPvvInjgIFkeW5hbWljUFBU77yI5Yqo5oCBUFBU77yJ44CBaDVEb2N1bWVudChINeivvuS7tilcbiAgICAgICAgICAgICAgICBmaWxlaWQ6IDAsIC8v5omT5byA55qE5paH5qGj55qE5paH5Lu2aWRcbiAgICAgICAgICAgICAgICBkeW5hbWljUHB0Vm9sdW1lOiAxMDAsIC8v5Yqo5oCBUFBU5paH5qGj55qE6Z+z6YePXG4gICAgICAgICAgICAgICAgZnVsbFNjcmVlbjogZmFsc2UsIC8v5piv5ZCm5YWo5bGPXG4gICAgICAgICAgICAgICAgcmVtYXJrOiBmYWxzZSwgLy/mmK/lkKblvIDlkK/mlofmoaPlpIfms6hcbiAgICAgICAgICAgICAgICByZW1hcmtUZXh0OiAnJywgLy/lvZPliY3pobXmlofmoaPlpIfms6jnmoTmlofmnKzlhoXlrrlcbiAgICAgICAgICAgICAgICBvdGhlcjogeyAvL+WFtuWug+S/oeaBr1xuICAgICAgICAgICAgICAgICAgICBwcmltYXJ5Q29sb3I6IF90aGlzLmNvbmZpZ3JhdGlvbi5wcmltYXJ5Q29sb3IsIC8v55S756yU6aKc6ImyICzpu5jorqQgIzAwMDAwMFxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnlDb2xvcjogX3RoaXMuY29uZmlncmF0aW9uLnNlY29uZGFyeUNvbG9yLCAvL+Whq+WFheminOiJsiAs6buY6K6kICNmZmZmZmZcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBfdGhpcy5jb25maWdyYXRpb24uYmFja2dyb3VuZENvbG9yLCAvL+iDjOaZr+minOiJsiAs6buY6K6kICNmZmZmZmZcbiAgICAgICAgICAgICAgICAgICAgcGVuY2lsV2lkdGg6IF90aGlzLmNvbmZpZ3JhdGlvbi5wZW5jaWxXaWR0aCwgLy/nlLvnrJTlpKflsI8gLCDpu5jorqQ1XG4gICAgICAgICAgICAgICAgICAgIHNoYXBlV2lkdGg6IF90aGlzLmNvbmZpZ3JhdGlvbi5zaGFwZVdpZHRoLCAvL+WbvuW9oueUu+eslOWkp+WwjyAsIOm7mOiupDVcbiAgICAgICAgICAgICAgICAgICAgZXJhc2VyV2lkdGg6IF90aGlzLmNvbmZpZ3JhdGlvbi5lcmFzZXJXaWR0aCwgLy/mqaHnmq7lpKflsI8g77yMIOm7mOiupDE1XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBfdGhpcy5jb25maWdyYXRpb24uZm9udFNpemUsIC8v5a2X5L2T5aSn5bCPIO+8jCDpu5jorqQxOFxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBfdGhpcy5jb25maWdyYXRpb24uZm9udEZhbWlseSAvL+S9v+eUqOeahOWtl+S9kyDvvIzpu5jorqRcIuW+rui9r+mbhem7kVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fY3JlYXRlQ29ubmVjdEVsZW1lbnRzKCk7XG4gICAgICAgIF90aGlzLl91cGRhdGVTZWxlY3RJbmZvKCk7XG4gICAgICAgIF90aGlzLl91cGRhdGVMYW5ndWFnZSgpO1xuICAgICAgICBfdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhUYWxrRG9jdW1lbnRUb29sYmFyLCBbe1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGVTdGF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVTdGF0ZShwcmV2U3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChwcmV2U3RhdGUudmlld1N0YXRlICE9PSB0aGlzLnN0YXRlLnZpZXdTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UGFnZUNvbXBhcmUgPSBwcmV2U3RhdGUudmlld1N0YXRlLnBhZ2UuY3VycmVudFBhZ2UgPT09IHRoaXMuc3RhdGUudmlld1N0YXRlLnBhZ2UuY3VycmVudFBhZ2U7XG4gICAgICAgICAgICAgICAgdmFyIHRvdGFsUGFnZUNvbXBhcmUgPSBwcmV2U3RhdGUudmlld1N0YXRlLnBhZ2UudG90YWxQYWdlID09PSB0aGlzLnN0YXRlLnZpZXdTdGF0ZS5wYWdlLnRvdGFsUGFnZTtcbiAgICAgICAgICAgICAgICB2YXIgc2tpcFBhZ2VDb21wYXJlID0gcHJldlN0YXRlLnZpZXdTdGF0ZS5wYWdlLnNraXBQYWdlICYmIHRoaXMuc3RhdGUudmlld1N0YXRlLnBhZ2Uuc2tpcFBhZ2UgPyBfVXRpbHMyLmRlZmF1bHQuZGVlcENvbXBhcmVKc29uKHByZXZTdGF0ZS52aWV3U3RhdGUucGFnZS5za2lwUGFnZSwgdGhpcy5zdGF0ZS52aWV3U3RhdGUucGFnZS5za2lwUGFnZSkgOiBwcmV2U3RhdGUudmlld1N0YXRlLnBhZ2Uuc2tpcFBhZ2UgPT09IHRoaXMuc3RhdGUudmlld1N0YXRlLnBhZ2Uuc2tpcFBhZ2U7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRQYWdlQ29tcGFyZSB8fCAhdG90YWxQYWdlQ29tcGFyZSB8fCAhc2tpcFBhZ2VDb21wYXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzU2hvd1JlbWFya0J0bigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVTZWxlY3RJbmZvKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHByZXZTdGF0ZS52aWV3U3RhdGUuZmlsZWlkICE9IHRoaXMuc3RhdGUudmlld1N0YXRlLmZpbGVpZCB8fCBwcmV2U3RhdGUudmlld1N0YXRlLnJlbWFya1RleHQgIT09IHRoaXMuc3RhdGUudmlld1N0YXRlLnJlbWFya1RleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNTaG93UmVtYXJrQnRuKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHByZXZTdGF0ZS52aWV3U3RhdGUuZHluYW1pY1BwdFZvbHVtZSAhPT0gdGhpcy5zdGF0ZS52aWV3U3RhdGUuZHluYW1pY1BwdFZvbHVtZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucGFnZVZvbHVtZVNsaWRlcmluZyAmJiB0aGlzLnBhZ2VWb2x1bWVTbGlkZXIgJiYgdHlwZW9mIHRoaXMucGFnZVZvbHVtZVNsaWRlci5zZXRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWdlVm9sdW1lU2xpZGVyLnNldFByb2dyZXNzKHRoaXMuc3RhdGUudmlld1N0YXRlLmR5bmFtaWNQcHRWb2x1bWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXZTdGF0ZS50ZW1wRGlzYWJsZWREcmFnICE9PSB0aGlzLnN0YXRlLnRlbXBEaXNhYmxlZERyYWcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudFRvb2xiYXJUYWxrRHJhZyAmJiBfdHlwZW9mKHRoaXMuZG9jdW1lbnRUb29sYmFyVGFsa0RyYWcudXBkYXRlRGlzYWJsZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRUb29sYmFyVGFsa0RyYWcudXBkYXRlRGlzYWJsZWQodGhpcy5zdGF0ZS50ZW1wRGlzYWJsZWREcmFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwcmV2U3RhdGUudmlld1N0YXRlLmRvY3VtZW50VHlwZSAhPT0gdGhpcy5zdGF0ZS52aWV3U3RhdGUuZG9jdW1lbnRUeXBlIHx8IHByZXZTdGF0ZS52aWV3U3RhdGUuZnVsbFNjcmVlbiAhPT0gdGhpcy5zdGF0ZS52aWV3U3RhdGUuZnVsbFNjcmVlbiB8fCBwcmV2U3RhdGUudmlld1N0YXRlLnJlbWFyayAhPT0gdGhpcy5zdGF0ZS52aWV3U3RhdGUucmVtYXJrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlTGFuZ3VhZ2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByZXZTdGF0ZS51cGRhdGVTdGF0ZSAhPT0gdGhpcy5zdGF0ZS51cGRhdGVTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzU2hvd1JlbWFya0J0bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGVQcm9wcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVQcm9wcyhwcmV2UHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChwcmV2UHJvcHMubGFuZ3VhZ2VUeXBlICE9PSB0aGlzLnByb3BzLmxhbmd1YWdlVHlwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUxhbmd1YWdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJldlByb3BzLmlzTW9iaWxlICE9PSB0aGlzLnByb3BzLmlzTW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5za2lwUGFnZUN1cnJwYWdlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsICF0aGlzLnByb3BzLmlzTW9iaWxlKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5pc01vYmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYWRkQ2xhc3ModGhpcy5lbGVtZW50cy5kb2N1bWVudFRvb2xiYXJWaWV3Um9vdEVsZW1lbnQsICdhcHAtbW9iaWxlJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHMuZG9jdW1lbnRUb29sYmFyVmlld1Jvb3RFbGVtZW50LCAnYXBwLW1vYmlsZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50c1ZpZXdDbGFzcy5zZWxlY3RQYWdlVmlldykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzVmlld0NsYXNzLnNlbGVjdFBhZ2VWaWV3LnNldFByb3BzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTW9iaWxlOiB0aGlzLnByb3BzLmlzTW9iaWxlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcmV2UHJvcHMuaXNEcmFnICE9PSB0aGlzLnByb3BzLmlzRHJhZykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmlzRHJhZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRUYWxrRHJhZygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvY3VtZW50VG9vbGJhclRhbGtEcmFnICYmIHR5cGVvZiB0aGlzLmRvY3VtZW50VG9vbGJhclRhbGtEcmFnLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRUb29sYmFyVGFsa0RyYWcuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFRvb2xiYXJUYWxrRHJhZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghX1V0aWxzMi5kZWZhdWx0LmRlZXBDb21wYXJlSnNvbihwcmV2UHJvcHMuaW5pdERyYWdQb3NpdGlvbiwgdGhpcy5wcm9wcy5pbml0RHJhZ1Bvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvY3VtZW50VG9vbGJhclRhbGtEcmFnICYmIHR5cGVvZiB0aGlzLmRvY3VtZW50VG9vbGJhclRhbGtEcmFnLnNldFBvc2l0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfcmVmID0gdGhpcy5wcm9wcy5pbml0RHJhZ1Bvc2l0aW9uIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlZiRsZWZ0ID0gX3JlZi5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IF9yZWYkbGVmdCA9PT0gdW5kZWZpbmVkID8gNTAgOiBfcmVmJGxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVmJHRvcCA9IF9yZWYudG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wID0gX3JlZiR0b3AgPT09IHVuZGVmaW5lZCA/IDEwMCA6IF9yZWYkdG9wO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRUb29sYmFyVGFsa0RyYWcuc2V0UG9zaXRpb24obGVmdCwgdG9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgocHJldlByb3BzLmlzTG9hZFJlbWFyayAhPT0gdGhpcy5wcm9wcy5pc0xvYWRSZW1hcmsgfHwgcHJldlByb3BzLmNhblJlbWFyayAhPT0gdGhpcy5wcm9wcy5jYW5SZW1hcmspICYmIHRoaXMuZWxlbWVudHMucmVtYXJrRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzU2hvd1JlbWFya0J0bigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocHJldlByb3BzLmlzTG9hZEZ1bGxTY3JlZW4gIT09IHRoaXMucHJvcHMuaXNMb2FkRnVsbFNjcmVlbiAmJiB0aGlzLmVsZW1lbnRzLmZ1bGxTY3JlZW5FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnVwZGF0ZVN0eWxlKHRoaXMuZWxlbWVudHMuZnVsbFNjcmVlbkVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogIXRoaXMucHJvcHMuaXNMb2FkRnVsbFNjcmVlbiA/ICdub25lJyA6ICcnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Jlc2l6ZScsXG5cblxuICAgICAgICAvKumHjeaWsOiuoeeul+Wkp+WwjyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudFRvb2xiYXJUYWxrRHJhZyAmJiBfVXRpbHMyLmRlZmF1bHQuaXNGdW5jdGlvbih0aGlzLmRvY3VtZW50VG9vbGJhclRhbGtEcmFnLnJlc2l6ZUNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRUb29sYmFyVGFsa0RyYWcucmVzaXplQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5by65Yi2cmVuZGVyKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZm9yY2VSZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZm9yY2VSZW5kZXIoKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0ZTogIXRoaXMuc3RhdGUudXBkYXRlU3RhdGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrmlLnlj5jniLbkurLoioLngrkqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjaGFuZ2VQYXJlbnROb2RlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVBhcmVudE5vZGUocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50cy5kb2N1bWVudFRvb2xiYXJWaWV3Um9vdEVsZW1lbnQsIHRoaXMucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYXBwZW5kQ2hpbGQodGhpcy5wYXJlbnROb2RlLCB0aGlzLmVsZW1lbnRzLmRvY3VtZW50VG9vbGJhclZpZXdSb290RWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKumUgOavgeinhuWbviovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rlc3Ryb3lWaWV3JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lWaWV3KCkge1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gT2JqZWN0LnZhbHVlcyh0aGlzLmVsZW1lbnRzVmlld0NsYXNzKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXcgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodmlldyAmJiB2aWV3LmRlc3Ryb3lWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmRlc3Ryb3lWaWV3KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzVmlld0NsYXNzID0ge307XG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50cy5kb2N1bWVudFRvb2xiYXJWaWV3Um9vdEVsZW1lbnQsIHRoaXMucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5lbGVtZW50cykge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5lbGVtZW50c1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmjqXmlLbliqjkvZzmjIfku6QqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZWNlaXZlQWN0aW9uQ29tbWFuZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWNlaXZlQWN0aW9uQ29tbWFuZChhY3Rpb24sIGNtZCkge1xuICAgICAgICAgICAgaWYgKCh0eXBlb2YgY21kID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjbWQpKSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoY21kKSkge1xuICAgICAgICAgICAgICAgIGNtZCA9IE9iamVjdC5kZWVwQXNzaWduKHt9LCBjbWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1tEb2N1bWVudFRvb2xiYXJdcmVjZWl2ZSB3aGl0ZWJvYXJkIHZpZXcgYWN0aW9uIGNvbW1hbmTvvIhhY3Rpb24sY21k77yJOicsIGFjdGlvbiwgY21kKTtcbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2xvc2VBbGxTZWxlY3RCb3gnOlxuICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50cy52b2x1bWVFbGVtZW50LCAnb3BlbicpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd2aWV3U3RhdGVVcGRhdGUnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdTdGF0ZTogY21kLnZpZXdTdGF0ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuaUueWPmOmAieS4reeahOmhteaVsCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NoYW5nZVNlbGVjdFBhZ2VPbkNoYW5nZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VTZWxlY3RQYWdlT25DaGFuZ2UoY3VycnBhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2tpcFBhZ2UoY3VycnBhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLypTZWxlY3TmmK/lkKbmmL7npLrkuIvmi4nmoYYqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjaGFuZ2VTZWxlY3RQYWdlTm90aWNlU2VsZWN0RXh0ZW5kTGlzdFNob3dPckhpZGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlU2VsZWN0UGFnZU5vdGljZVNlbGVjdEV4dGVuZExpc3RTaG93T3JIaWRlKHNob3cpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHRlbXBEaXNhYmxlZERyYWc6IHNob3cgLy/kuLTml7bnpoHmraLmi5bmi71cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcmV2UGFnZScsXG5cblxuICAgICAgICAvKuS4iuS4gOmhteaIluiAheS4iuS4gOW4pyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmV2UGFnZSgpIHtcbiAgICAgICAgICAgIHZhciBkb2N1bWVudFR5cGUgPSB0aGlzLnN0YXRlLnZpZXdTdGF0ZS5kb2N1bWVudFR5cGU7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoZG9jdW1lbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZHluYW1pY1BQVCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5wcmV2U3RlcCh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5wcmV2UGFnZSh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICduZXh0UGFnZScsXG5cblxuICAgICAgICAvKuS4i+S4gOmhteaIluiAheS4i+S4gOW4pyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0UGFnZSgpIHtcbiAgICAgICAgICAgIHZhciBkb2N1bWVudFR5cGUgPSB0aGlzLnN0YXRlLnZpZXdTdGF0ZS5kb2N1bWVudFR5cGU7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoZG9jdW1lbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZHluYW1pY1BQVCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5uZXh0U3RlcCh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5uZXh0UGFnZSh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdhZGRQYWdlJyxcblxuXG4gICAgICAgIC8q55m95p2/5Yqg6aG1Ki9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFBhZ2UoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLmFkZFBhZ2UodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZnVsbFNjcmVlbicsXG5cblxuICAgICAgICAvKuWFqOWxj+WKn+iDvSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmdWxsU2NyZWVuKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS52aWV3U3RhdGUuZnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZnVsbFNjcmVlbih0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5leGl0RnVsbFNjcmVlbih0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnb3BlbkR5bmFtaWNQcHRWb2x1bWVPbkNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9wZW5EeW5hbWljUHB0Vm9sdW1lT25DbGljaygpIHtcbiAgICAgICAgICAgIGlmIChfRG9tVXRpbHMyLmRlZmF1bHQuaGFzQ2xhc3ModGhpcy5lbGVtZW50cy52b2x1bWVFbGVtZW50LCAnb3BlbicpKSB7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHMudm9sdW1lRWxlbWVudCwgJ29wZW4nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFkZENsYXNzKHRoaXMuZWxlbWVudHMudm9sdW1lRWxlbWVudCwgJ29wZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2xvc2VEeW5hbWljUHB0Vm9sdW1lT25Nb3VzZUxlYXZlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlRHluYW1pY1BwdFZvbHVtZU9uTW91c2VMZWF2ZSgpIHtcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzLnZvbHVtZUVsZW1lbnQsICdvcGVuJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvKuW8gOWQr+aIluiAheWFs+mXreivvuS7tuWkh+azqCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29wZW5PckNsb3NlUmVtYXJrT25DbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuT3JDbG9zZVJlbWFya09uQ2xpY2soKSB7XG4gICAgICAgICAgICB2YXIgcmVtYXJrID0gdGhpcy5zdGF0ZS52aWV3U3RhdGUucmVtYXJrO1xuXG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZW1hcmspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLm9wZW5Eb2N1bWVudFJlbWFyayh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5jbG9zZURvY3VtZW50UmVtYXJrKHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrliqjmgIFQUFTpn7Pph4/mlLnlj5gqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjaGFuZ2VEeW5hbWljUHB0Vm9sdW1lJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZUR5bmFtaWNQcHRWb2x1bWUodm9sdW1lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlICYmIHR5cGVvZiB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuY2hhbmdlRHluYW1pY1BwdFZvbHVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5jaGFuZ2VEeW5hbWljUHB0Vm9sdW1lKHZvbHVtZSwgdGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2tpcFBhZ2UnLFxuXG5cbiAgICAgICAgLyrot7PliLDmjIflrprpobUqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2tpcFBhZ2UodG9QYWdlKSB7XG4gICAgICAgICAgICB0b1BhZ2UgPSBOdW1iZXIodG9QYWdlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9QYWdlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLnNraXBQYWdlKHRvUGFnZSwgdGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NlbmRBY3Rpb25Db21tYW5kJyxcblxuXG4gICAgICAgIC8q5Y+R6YCB5Yqo5L2c5oyH5LukXHJcbiAgICAgICAgKiBYWFgg5q2k5aSE55u05o6l6I635Y+W5LqG5Li755m95p2/5a6e5L6L5LiU55u05o6l5pON5L2c5LqG5Li755m95p2/55qE5pa55rOVKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbmRBY3Rpb25Db21tYW5kKGFjdGlvbiwgY21kKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS53aGl0ZWJvYXJkVmlld01hcCAmJiB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2Uud2hpdGVib2FyZFZpZXdNYXAuaGFzKHRoaXMuaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2Uud2hpdGVib2FyZFZpZXdNYXAuZ2V0KHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRWaWV3ICYmIHdoaXRlYm9hcmRWaWV3LnNlbmRBY3Rpb25Db21tYW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRWaWV3LnNlbmRBY3Rpb25Db21tYW5kKGFjdGlvbiwgY21kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NoYW5nZVBhZ2VPbkZvY3VzJyxcblxuXG4gICAgICAgIC8q5q2j5Zyo6Lez6L2s6aG15pWw5LitKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVBhZ2VPbkZvY3VzKGV2ZW50KSB7XG4gICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0LmlzU2tpcFBhZ2VpbmcgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2hhbmdlUGFnZU9uQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlUGFnZU9uQ2xpY2soKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnNraXBQYWdlQ3VycnBhZ2VFbGVtZW50LnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgIXRoaXMucHJvcHMuaXNNb2JpbGUpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5za2lwUGFnZUN1cnJwYWdlRWxlbWVudC5mb2N1cygpOyAvL1RPRE8g5pSv6K+m5Li65LuA5LmI6KaB5Yqg5LiK5aSx5Y6754Sm54K577yfXG4gICAgICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrlpLHljrvnhKbngrnmiafooYznv7vpobUqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjaGFuZ2VQYWdlT25CbHVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVBhZ2VPbkJsdXIoZXZlbnQpIHtcbiAgICAgICAgICAgIF9HbG9iYWwyLmRlZmF1bHQuaXNTa2lwUGFnZWluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fY2hhbmdlUGFnZSgpO1xuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2hhbmdlUGFnZU9uS2V5RG93bicsXG5cblxuICAgICAgICAvKuWbnui9pumUruaJp+ihjOe/u+mhtSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VQYWdlT25LZXlEb3duKGV2ZW50KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50cy5za2lwUGFnZUN1cnJwYWdlRWxlbWVudCAmJiB0eXBlb2YgdGhpcy5lbGVtZW50cy5za2lwUGFnZUN1cnJwYWdlRWxlbWVudC5ibHVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnNraXBQYWdlQ3VycnBhZ2VFbGVtZW50LnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5za2lwUGFnZUN1cnJwYWdlRWxlbWVudC5ibHVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VQYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5pS+5aSn5paH5qGjKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZW5sYXJnZVdoaXRlYm9hcmQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZW5sYXJnZVdoaXRlYm9hcmQoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLmVubGFyZ2VXaGl0ZWJvYXJkKHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ25hcnJvd1doaXRlYm9hcmQnLFxuXG5cbiAgICAgICAgLyrnvKnlsI/mlofmoaMqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbmFycm93V2hpdGVib2FyZCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UubmFycm93V2hpdGVib2FyZCh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZWNlaXZlV2luZG93TWVzc2FnZUV2ZW50JyxcblxuXG4gICAgICAgIC8q5o6l5pS25Yqo5oCBUFBU55qEaWZyYW1l5raI5oGvKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlY2VpdmVXaW5kb3dNZXNzYWdlRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIOmAmui/h29yaWdpbuWxnuaAp+WIpOaWrea2iOaBr+adpea6kOWcsOWdgFxuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRWaWV3ID0ge307XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS53aGl0ZWJvYXJkVmlld01hcC5oYXModGhpcy5pbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRWaWV3ID0gdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLndoaXRlYm9hcmRWaWV3TWFwLmdldCh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2ZW50LmRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB2YXIgcmVjdkRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVjdkRhdGEgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gcmVjdkRhdGEuZGF0YTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoXCJkb2N1bWVudCB0b29sIGJhciByZWNlaXZlIGlmcmFtZSBtZXNzYWdlIGRhdGEgY2FuJ3QgYmUgY29udmVydGVkIHRvIEpTT04gLCBpZnJhbWUgZGF0YTpcIiwgZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlY3ZEYXRhLnNvdXJjZSA9PT0gXCJ0a19keW5hbWljUFBUXCIgJiYgd2hpdGVib2FyZFZpZXcuZ2V0RHluYW1pY1BwdEluc3RhbmNlQnlJRCAmJiB0eXBlb2Ygd2hpdGVib2FyZFZpZXcuZ2V0RHluYW1pY1BwdEluc3RhbmNlQnlJRCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8v5Yik5pat5raI5oGv5p2l5rqQ5piv5ZCm5piv5b2T5YmN5a6e5L6LaWTlr7nlupTnmoRpZnJhbWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRWaWV3LmdldER5bmFtaWNQcHRJbnN0YW5jZUJ5SUQoKS5keW5hbWljUHB0SWZyYW1lRWxlbWVudCAmJiBldmVudC5zb3VyY2UgPT09IHdoaXRlYm9hcmRWaWV3LmdldER5bmFtaWNQcHRJbnN0YW5jZUJ5SUQoKS5keW5hbWljUHB0SWZyYW1lRWxlbWVudC5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMLkxvZ2dlci5kZWJ1ZyhcIltkb2N1bWVudCB0b29sIGJhcl1yZWNlaXZlIHJlbW90ZSBpZnJhbWUgZGF0YSBmb3JtIFwiICsgZXZlbnQub3JpZ2luICsgXCI6XCIsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBBTExWSURFT0FOREFVRElPID0gXCJhbGxWaWRlb0FuZEF1ZGlvXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGRhdGEuYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBBTExWSURFT0FOREFVRElPOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRBVlNpemU6IGRhdGEuYWxsVmlkZW9BbmRBdWRpb0xlbmd0aCAhPT0gdW5kZWZpbmVkID8gZGF0YS5hbGxWaWRlb0FuZEF1ZGlvTGVuZ3RoIDogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrlgZzmraLkuovku7YqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzdG9wRXZlbnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcEV2ZW50KGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrmlLnlj5jpobXmlbAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfY2hhbmdlUGFnZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY2hhbmdlUGFnZSgpIHtcbiAgICAgICAgICAgIHZhciB0b1BhZ2UgPSBOdW1iZXIodGhpcy5lbGVtZW50cy5za2lwUGFnZUN1cnJwYWdlRWxlbWVudC5pbm5lckhUTUwpO1xuICAgICAgICAgICAgdmFyIF9zdGF0ZSR2aWV3U3RhdGUkcGFnZSA9IHRoaXMuc3RhdGUudmlld1N0YXRlLnBhZ2UsXG4gICAgICAgICAgICAgICAgcGFnZSA9IF9zdGF0ZSR2aWV3U3RhdGUkcGFnZSA9PT0gdW5kZWZpbmVkID8ge30gOiBfc3RhdGUkdmlld1N0YXRlJHBhZ2U7XG4gICAgICAgICAgICB2YXIgX3BhZ2UkdG90YWxQYWdlID0gcGFnZS50b3RhbFBhZ2UsXG4gICAgICAgICAgICAgICAgdG90YWxQYWdlID0gX3BhZ2UkdG90YWxQYWdlID09PSB1bmRlZmluZWQgPyAxIDogX3BhZ2UkdG90YWxQYWdlLFxuICAgICAgICAgICAgICAgIF9wYWdlJGN1cnJlbnRQYWdlID0gcGFnZS5jdXJyZW50UGFnZSxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZSA9IF9wYWdlJGN1cnJlbnRQYWdlID09PSB1bmRlZmluZWQgPyAxIDogX3BhZ2UkY3VycmVudFBhZ2U7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9QYWdlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odG9QYWdlKSkge1xuICAgICAgICAgICAgICAgIGlmICh0b1BhZ2UgPT09IGN1cnJlbnRQYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRvUGFnZSA8IDEgfHwgdG9QYWdlID4gdG90YWxQYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSAnc2tpcFBhZ2VGYWlsdXJlQm91bmNlZE5vdGljZSc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjbWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnb3ZlclBhZ2VSYW5nZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTogY3VycmVudFBhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFBhZ2U6IHRvdGFsUGFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvUGFnZTogdG9QYWdlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZEFjdGlvbkNvbW1hbmQoYWN0aW9uLCBjbWQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnNraXBQYWdlQ3VycnBhZ2VFbGVtZW50LmlubmVySFRNTCA9IGN1cnJlbnRQYWdlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpcFBhZ2UodG9QYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBfYWN0aW9uID0gJ3NraXBQYWdlRmFpbHVyZUJvdW5jZWROb3RpY2UnO1xuICAgICAgICAgICAgICAgIHZhciBfY21kID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncGFnZVR5cGVOb3ROdW1iZXInLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTogY3VycmVudFBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsUGFnZTogdG90YWxQYWdlLFxuICAgICAgICAgICAgICAgICAgICB0b1BhZ2U6IHRoaXMuZWxlbWVudHMuc2tpcFBhZ2VDdXJycGFnZUVsZW1lbnQuaW5uZXJIVE1MXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRBY3Rpb25Db21tYW5kKF9hY3Rpb24sIF9jbWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuc2tpcFBhZ2VDdXJycGFnZUVsZW1lbnQuaW5uZXJIVE1MID0gY3VycmVudFBhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWIm+W7uuaJgOmcgOiKgueCuSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19jcmVhdGVDb25uZWN0RWxlbWVudHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZUNvbm5lY3RFbGVtZW50cygpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZG9jdW1lbnRUb29sYmFyVmlld1Jvb3RFbGVtZW50ID0gX0RvbVV0aWxzMi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2FydGljbGUnLCB0aGlzLmluc3RhbmNlSWQgKyAnRG9jdW1lbnRUb29sVmlld1Jvb3QnLCAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkICcgKyB0aGlzLmluc3RhbmNlSWQgKyAnIGRvY3VtZW50LXRvb2xiYXItcm9vdCAnICsgKHRoaXMucHJvcHMuaXNNb2JpbGUgPyAnYXBwLW1vYmlsZSAnIDogJyAnKSwge1xuICAgICAgICAgICAgICAgIHpJbmRleDogNVxuICAgICAgICAgICAgfSk7IC8v57+76aG15bel5YW35qC56IqC54K5XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMucHJldmlvdXNQYWdlRWxlbWVudCA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB0aGlzLmluc3RhbmNlSWQgKyAnVGFsa2Nsb3VkUHJldmlvdXNQYWdlJywgJ3RhbGtjbG91ZC1zZGstd2hpdGVib2FyZCAgJyArIHRoaXMuaW5zdGFuY2VJZCArICcgZG9jdW1lbnQtdG9vbGJhci1idG4gcHJldmlvdXMtcGFnZS1idG4nLCB7fSk7IC8v5LiK5LiA6aG15oiW6ICF5LiK5LiA5bin6IqC54K5XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuc2tpcFBhZ2VFbGVtZW50ID0gX0RvbVV0aWxzMi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHRoaXMuaW5zdGFuY2VJZCArICdUYWxrY2xvdWRTa2lwUGFnZScsICd0YWxrY2xvdWQtc2RrLXdoaXRlYm9hcmQgICcgKyB0aGlzLmluc3RhbmNlSWQgKyAnIGRvY3VtZW50LXRvb2xiYXItc2VsZWN0IHNraXAtcGFnZS1zZWxlY3QnLCB7fSk7IC8vc2tpcOWIsOafkOS4gOmhteeahOWuueWZqOiKgueCuVxuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLm5leHRQYWdlRWxlbWVudCA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB0aGlzLmluc3RhbmNlSWQgKyAnVGFsa2Nsb3VkTmV4dFBhZ2UnLCAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkICAnICsgdGhpcy5pbnN0YW5jZUlkICsgJyBkb2N1bWVudC10b29sYmFyLWJ0biBuZXh0LXBhZ2UtYnRuJywge30pOyAvL+S4i+S4gOmhteaIluiAheS4i+S4gOW4p+iKgueCuVxuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmFkZFBhZ2VFbGVtZW50ID0gX0RvbVV0aWxzMi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHRoaXMuaW5zdGFuY2VJZCArICdUYWxrY2xvdWRBZGRQYWdlJywgJ3RhbGtjbG91ZC1zZGstd2hpdGVib2FyZCAgJyArIHRoaXMuaW5zdGFuY2VJZCArICcgZG9jdW1lbnQtdG9vbGJhci1idG4gYWRkLXBhZ2UtYnRuJywge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgICAgfSk7IC8v5Yqg6aG16IqC54K5XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZnVsbFNjcmVlbkVsZW1lbnQgPSBfRG9tVXRpbHMyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgdGhpcy5pbnN0YW5jZUlkICsgJ1RhbGtjbG91ZEZ1bGxTY3JlZW4nLCAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkICAnICsgdGhpcy5pbnN0YW5jZUlkICsgJyBkb2N1bWVudC10b29sYmFyLWJ0biBmdWxsLXNjcmVlbi1idG4nLCB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogIXRoaXMucHJvcHMuaXNMb2FkRnVsbFNjcmVlbiA/ICdub25lJyA6ICcnXG4gICAgICAgICAgICB9KTsgLy/lhajlsY/oioLngrlcblxuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy52b2x1bWVFbGVtZW50ID0gX0RvbVV0aWxzMi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHRoaXMuaW5zdGFuY2VJZCArICdUYWxrY2xvdWRWb2x1bWUnLCAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkICcgKyB0aGlzLmluc3RhbmNlSWQgKyAnIGRvY3VtZW50LXRvb2xiYXItYnRuIHZvbHVtZS1idG4nLCB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogIXRoaXMucHJvcHMuaXNMb2FkVm9sdW1lID8gJ25vbmUnIDogJydcbiAgICAgICAgICAgIH0pOyAvL+mfs+mHj+iKgueCuVxuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnJlbWFya0VsZW1lbnQgPSBfRG9tVXRpbHMyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgdGhpcy5pbnN0YW5jZUlkICsgJ1RhbGtjbG91ZFJlbWFyaycsICd0YWxrY2xvdWQtc2RrLXdoaXRlYm9hcmQgJyArIHRoaXMuaW5zdGFuY2VJZCArICcgZG9jdW1lbnQtdG9vbGJhci1idG4gcmVtYXJrLWJ0bicsIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAhdGhpcy5wcm9wcy5pc0xvYWRSZW1hcmsgfHwgIXRoaXMucHJvcHMuY2FuUmVtYXJrID8gJ25vbmUnIDogJydcbiAgICAgICAgICAgIH0pOyAvL+Wkh+azqOiKgueCuVxuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmVubGFyZ2VXaGl0ZWJvYXJkRWxlbWVudCA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB0aGlzLmluc3RhbmNlSWQgKyAnVGFsa2Nsb3VkWm9vbUJpZycsICd0YWxrY2xvdWQtc2RrLXdoaXRlYm9hcmQgICcgKyB0aGlzLmluc3RhbmNlSWQgKyAnIGRvY3VtZW50LXRvb2xiYXItYnRuIHpvb20tYmlnLWJ0bicsIHt9KTsgLy/mlL7lpKfoioLngrlcblxuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5uYXJyb3dXaGl0ZWJvYXJkRWxlbWVudCA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB0aGlzLmluc3RhbmNlSWQgKyAnVGFsa2Nsb3VkWm9vbVNtYWxsJywgJ3RhbGtjbG91ZC1zZGstd2hpdGVib2FyZCAgJyArIHRoaXMuaW5zdGFuY2VJZCArICcgZG9jdW1lbnQtdG9vbGJhci1idG4gem9vbS1zbWFsbC1idG4nLCB7fSk7IC8v57yp5bCP6IqC54K5XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMudm9sdW1lRWxlbWVudC5pbm5lckhUTUwgPSAnXFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2b2x1bWUtc2xpZGVyLWNvbnRhaW5lclwiIG9uY2xpY2s9XCJyZXR1cm4gZmFsc2U7XCIgaWQ9XCInICsgdGhpcy5pbnN0YW5jZUlkICsgJ1BhZ2VWb2x1bWVTbGlkZXJcIiA+PC9zcGFuPlxcbiAgICAgICAgJztcblxuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5za2lwUGFnZUVsZW1lbnQuaW5uZXJIVE1MID0gJ1xcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYWdlLWluZm8tY29udGFpbmVyXCIgPiBcXG4gICAgICAgICAgICAgICAgPHNwYW4gY29udGVudGVkaXRhYmxlPVwiJyArICF0aGlzLnByb3BzLmlzTW9iaWxlICsgJ1wiIGNsYXNzPVwiY3Vyci1wYWdlXCI+MTwvc3Bhbj48ZW0+LzwvZW0+PHNwYW4gY2xhc3M9XCJ0b3RhbC1wYWdlXCI+MTwvc3Bhbj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICc7XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuc2tpcFBhZ2VDdXJycGFnZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzLnNraXBQYWdlRWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjdXJyLXBhZ2UnKVswXTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuc2tpcFBhZ2VUb3RhbHBhZ2VFbGVtZW50ID0gdGhpcy5lbGVtZW50cy5za2lwUGFnZUVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndG90YWwtcGFnZScpWzBdO1xuICAgICAgICAgICAgLyrkv67lpI1idWcgdGFsay01MjQ2LOi+k+WFpeahhuWBmumZkOWItizlvpDlv5flro8gMjAxOC0xMC0zMSovXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnNraXBQYWdlQ3VycnBhZ2VFbGVtZW50Lm9uaW5wdXQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGUudGFyZ2V0LmlubmVySFRNTDtcbiAgICAgICAgICAgICAgICBpZiAoIU51bWJlcih2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoID4gNSkge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5pbm5lckhUTUwgPSB2YWx1ZS5zdWJzdHIoMCwgNSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5za2lwUGFnZUN1cnJwYWdlRWxlbWVudC5vbmNsaWNrID0gdGhpcy5jaGFuZ2VQYWdlT25DbGljay5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5za2lwUGFnZUN1cnJwYWdlRWxlbWVudC5vbmZvY3VzID0gdGhpcy5jaGFuZ2VQYWdlT25Gb2N1cy5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5za2lwUGFnZUN1cnJwYWdlRWxlbWVudC5vbmJsdXIgPSB0aGlzLmNoYW5nZVBhZ2VPbkJsdXIuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuc2tpcFBhZ2VDdXJycGFnZUVsZW1lbnQub25rZXlkb3duID0gdGhpcy5jaGFuZ2VQYWdlT25LZXlEb3duLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnByZXZpb3VzUGFnZUVsZW1lbnQub25jbGljayA9IHRoaXMucHJldlBhZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMubmV4dFBhZ2VFbGVtZW50Lm9uY2xpY2sgPSB0aGlzLm5leHRQYWdlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmFkZFBhZ2VFbGVtZW50Lm9uY2xpY2sgPSB0aGlzLmFkZFBhZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZnVsbFNjcmVlbkVsZW1lbnQub25jbGljayA9IHRoaXMuZnVsbFNjcmVlbi5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy52b2x1bWVFbGVtZW50Lm9uY2xpY2sgPSB0aGlzLm9wZW5EeW5hbWljUHB0Vm9sdW1lT25DbGljay5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy52b2x1bWVFbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3ZvbHVtZS1zbGlkZXItY29udGFpbmVyJylbMF0ub25jbGljayA9IHRoaXMuc3RvcEV2ZW50LmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnZvbHVtZUVsZW1lbnQub25tb3VzZWxlYXZlID0gdGhpcy5jbG9zZUR5bmFtaWNQcHRWb2x1bWVPbk1vdXNlTGVhdmUuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMucmVtYXJrRWxlbWVudC5vbmNsaWNrID0gdGhpcy5vcGVuT3JDbG9zZVJlbWFya09uQ2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZW5sYXJnZVdoaXRlYm9hcmRFbGVtZW50Lm9uY2xpY2sgPSB0aGlzLmVubGFyZ2VXaGl0ZWJvYXJkLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLm5hcnJvd1doaXRlYm9hcmRFbGVtZW50Lm9uY2xpY2sgPSB0aGlzLm5hcnJvd1doaXRlYm9hcmQuYmluZCh0aGlzKTtcblxuICAgICAgICAgICAgdGhpcy5lbGVtZW50c1ZpZXdDbGFzcy5zZWxlY3RQYWdlVmlldyA9IG5ldyBfU2VsZWN0Mi5kZWZhdWx0KHRoaXMuZWxlbWVudHMuc2tpcFBhZ2VFbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZTogdGhpcy5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgIGlzTW9iaWxlOiB0aGlzLnByb3BzLmlzTW9iaWxlLFxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmNoYW5nZVNlbGVjdFBhZ2VPbkNoYW5nZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIG5vdGljZVNlbGVjdEV4dGVuZExpc3RTaG93T3JIaWRlOiB0aGlzLmNoYW5nZVNlbGVjdFBhZ2VOb3RpY2VTZWxlY3RFeHRlbmRMaXN0U2hvd09ySGlkZS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudHMuZG9jdW1lbnRUb29sYmFyVmlld1Jvb3RFbGVtZW50LCB0aGlzLmVsZW1lbnRzLnByZXZpb3VzUGFnZUVsZW1lbnQpO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudHMuZG9jdW1lbnRUb29sYmFyVmlld1Jvb3RFbGVtZW50LCB0aGlzLmVsZW1lbnRzLnNraXBQYWdlRWxlbWVudCk7XG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50cy5kb2N1bWVudFRvb2xiYXJWaWV3Um9vdEVsZW1lbnQsIHRoaXMuZWxlbWVudHMubmV4dFBhZ2VFbGVtZW50KTtcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnRzLmRvY3VtZW50VG9vbGJhclZpZXdSb290RWxlbWVudCwgdGhpcy5lbGVtZW50cy5hZGRQYWdlRWxlbWVudCk7XG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50cy5kb2N1bWVudFRvb2xiYXJWaWV3Um9vdEVsZW1lbnQsIHRoaXMuZWxlbWVudHMuZW5sYXJnZVdoaXRlYm9hcmRFbGVtZW50KTtcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnRzLmRvY3VtZW50VG9vbGJhclZpZXdSb290RWxlbWVudCwgdGhpcy5lbGVtZW50cy5uYXJyb3dXaGl0ZWJvYXJkRWxlbWVudCk7XG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50cy5kb2N1bWVudFRvb2xiYXJWaWV3Um9vdEVsZW1lbnQsIHRoaXMuZWxlbWVudHMuZnVsbFNjcmVlbkVsZW1lbnQpO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudHMuZG9jdW1lbnRUb29sYmFyVmlld1Jvb3RFbGVtZW50LCB0aGlzLmVsZW1lbnRzLnZvbHVtZUVsZW1lbnQpO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudHMuZG9jdW1lbnRUb29sYmFyVmlld1Jvb3RFbGVtZW50LCB0aGlzLmVsZW1lbnRzLnJlbWFya0VsZW1lbnQpO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMucGFyZW50Tm9kZSwgdGhpcy5lbGVtZW50cy5kb2N1bWVudFRvb2xiYXJWaWV3Um9vdEVsZW1lbnQpO1xuXG4gICAgICAgICAgICBpZiAod2luZG93LlRhbGtTbGlkZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VWb2x1bWVTbGlkZXIgPSBuZXcgd2luZG93LlRhbGtTbGlkZXIoe1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXJDb250YWluZXI6IHsgLy9zbGlkZXLmlbTkuKrnu4Tku7blrrnlmajnmoTnmoTorr7nva5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0aGF0Lmluc3RhbmNlSWQgKyAnUGFnZVZvbHVtZVNsaWRlcicsIC8v5b+F5LygISEhIVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAndmVydGlrYWwnIC8v5pa55ZCR77yI5rC05bmzKOm7mOiupO+8mmhvcml6b250YWx8fOWeguebtO+8mnZlcnRpa2Fs77yJXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uQmVmb3JlQ2hhbmdlOiBmdW5jdGlvbiBvbkJlZm9yZUNoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5wYWdlVm9sdW1lU2xpZGVyaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25BZnRlckNoYW5nZTogZnVuY3Rpb24gb25BZnRlckNoYW5nZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5wYWdlVm9sdW1lU2xpZGVyaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmNoYW5nZUR5bmFtaWNQcHRWb2x1bWUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2FkZFRhbGtEcmFnKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19hZGRUYWxrRHJhZycsXG5cblxuICAgICAgICAvKua3u+WKoOaLluaLvSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkVGFsa0RyYWcoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5pc0RyYWcgJiYgd2luZG93LlRhbGtEcmFnICYmIHRoaXMuZWxlbWVudHMuZG9jdW1lbnRUb29sYmFyVmlld1Jvb3RFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRUb29sYmFyVGFsa0RyYWcgJiYgdHlwZW9mIHRoaXMuZG9jdW1lbnRUb29sYmFyVGFsa0RyYWcuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50VG9vbGJhclRhbGtEcmFnLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFRvb2xiYXJUYWxrRHJhZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgX3JlZjIgPSB0aGlzLnByb3BzLmluaXREcmFnUG9zaXRpb24gfHwge30sXG4gICAgICAgICAgICAgICAgICAgIF9yZWYyJGxlZnQgPSBfcmVmMi5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gX3JlZjIkbGVmdCA9PT0gdW5kZWZpbmVkID8gNTAgOiBfcmVmMiRsZWZ0LFxuICAgICAgICAgICAgICAgICAgICBfcmVmMiR0b3AgPSBfcmVmMi50b3AsXG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IF9yZWYyJHRvcCA9PT0gdW5kZWZpbmVkID8gMTAwIDogX3JlZjIkdG9wO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudFRvb2xiYXJUYWxrRHJhZyA9IG5ldyB3aW5kb3cuVGFsa0RyYWcodGhpcy5lbGVtZW50cy5kb2N1bWVudFRvb2xiYXJWaWV3Um9vdEVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogdG9wXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5pu05paw6K+t6KiAKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3VwZGF0ZUxhbmd1YWdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVMYW5ndWFnZSgpIHtcbiAgICAgICAgICAgIHZhciBfcHJvcHMkbGFuZ3VhZ2VUeXBlID0gdGhpcy5wcm9wcy5sYW5ndWFnZVR5cGUsXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VUeXBlID0gX3Byb3BzJGxhbmd1YWdlVHlwZSA9PT0gdW5kZWZpbmVkID8gJ2NoJyA6IF9wcm9wcyRsYW5ndWFnZVR5cGU7XG4gICAgICAgICAgICB2YXIgX3N0YXRlJHZpZXdTdGF0ZSA9IHRoaXMuc3RhdGUudmlld1N0YXRlLFxuICAgICAgICAgICAgICAgIHJlbWFyayA9IF9zdGF0ZSR2aWV3U3RhdGUucmVtYXJrLFxuICAgICAgICAgICAgICAgIGZ1bGxTY3JlZW4gPSBfc3RhdGUkdmlld1N0YXRlLmZ1bGxTY3JlZW4sXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRUeXBlID0gX3N0YXRlJHZpZXdTdGF0ZS5kb2N1bWVudFR5cGU7XG5cblxuICAgICAgICAgICAgaWYgKCEobGFuZ3VhZ2VUeXBlID09PSAnY2gnIHx8IGxhbmd1YWdlVHlwZSA9PT0gJ3R3JyB8fCBsYW5ndWFnZVR5cGUgPT09ICdlbicgfHwgbGFuZ3VhZ2VUeXBlID09PSAnamEnKSkge1xuICAgICAgICAgICAgICAgIGxhbmd1YWdlVHlwZSA9ICdjaCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBfVGFsa0xhbmd1YWdlJGdldCRkb2MgPSBfTGFuZ3VhZ2UyLmRlZmF1bHQuZ2V0KGxhbmd1YWdlVHlwZSkuZG9jdW1lbnRUb29sYmFyLFxuICAgICAgICAgICAgICAgIHByZXZQYWdlID0gX1RhbGtMYW5ndWFnZSRnZXQkZG9jLnByZXZQYWdlLFxuICAgICAgICAgICAgICAgIG5leHRQYWdlID0gX1RhbGtMYW5ndWFnZSRnZXQkZG9jLm5leHRQYWdlLFxuICAgICAgICAgICAgICAgIHByZXZTdGVwID0gX1RhbGtMYW5ndWFnZSRnZXQkZG9jLnByZXZTdGVwLFxuICAgICAgICAgICAgICAgIG5leHRTdGVwID0gX1RhbGtMYW5ndWFnZSRnZXQkZG9jLm5leHRTdGVwLFxuICAgICAgICAgICAgICAgIGFkZFBhZ2UgPSBfVGFsa0xhbmd1YWdlJGdldCRkb2MuYWRkUGFnZSxcbiAgICAgICAgICAgICAgICBlbmxhcmdlV2hpdGVib2FyZCA9IF9UYWxrTGFuZ3VhZ2UkZ2V0JGRvYy5lbmxhcmdlV2hpdGVib2FyZCxcbiAgICAgICAgICAgICAgICBuYXJyb3dXaGl0ZWJvYXJkID0gX1RhbGtMYW5ndWFnZSRnZXQkZG9jLm5hcnJvd1doaXRlYm9hcmQsXG4gICAgICAgICAgICAgICAgcHB0Vm9sdW1lID0gX1RhbGtMYW5ndWFnZSRnZXQkZG9jLnBwdFZvbHVtZSxcbiAgICAgICAgICAgICAgICBvblJlbWFyayA9IF9UYWxrTGFuZ3VhZ2UkZ2V0JGRvYy5vblJlbWFyayxcbiAgICAgICAgICAgICAgICBvZmZSZW1hcmsgPSBfVGFsa0xhbmd1YWdlJGdldCRkb2Mub2ZmUmVtYXJrLFxuICAgICAgICAgICAgICAgIG9uR2VuZXJhbERvY3VtZW50RnVsbFNjcmVlbiA9IF9UYWxrTGFuZ3VhZ2UkZ2V0JGRvYy5vbkdlbmVyYWxEb2N1bWVudEZ1bGxTY3JlZW4sXG4gICAgICAgICAgICAgICAgb2ZmR2VuZXJhbERvY3VtZW50RnVsbFNjcmVlbiA9IF9UYWxrTGFuZ3VhZ2UkZ2V0JGRvYy5vZmZHZW5lcmFsRG9jdW1lbnRGdWxsU2NyZWVuLFxuICAgICAgICAgICAgICAgIG9uRHluYW1pY1BQVEZ1bGxTY3JlZW4gPSBfVGFsa0xhbmd1YWdlJGdldCRkb2Mub25EeW5hbWljUFBURnVsbFNjcmVlbixcbiAgICAgICAgICAgICAgICBvZmZEeW5hbWljUFBURnVsbFNjcmVlbiA9IF9UYWxrTGFuZ3VhZ2UkZ2V0JGRvYy5vZmZEeW5hbWljUFBURnVsbFNjcmVlbixcbiAgICAgICAgICAgICAgICBvbkg1RG9jdW1lbnRGdWxsU2NyZWVuID0gX1RhbGtMYW5ndWFnZSRnZXQkZG9jLm9uSDVEb2N1bWVudEZ1bGxTY3JlZW4sXG4gICAgICAgICAgICAgICAgb2ZmSDVEb2N1bWVudEZ1bGxTY3JlZW4gPSBfVGFsa0xhbmd1YWdlJGdldCRkb2Mub2ZmSDVEb2N1bWVudEZ1bGxTY3JlZW47XG5cbiAgICAgICAgICAgIHZhciBmdWxsU2NyZWVuVGl0bGUgPSBmdWxsU2NyZWVuID8gb2ZmR2VuZXJhbERvY3VtZW50RnVsbFNjcmVlbiA6IG9uR2VuZXJhbERvY3VtZW50RnVsbFNjcmVlbjtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudFR5cGUgPT09ICdkeW5hbWljUFBUJykge1xuICAgICAgICAgICAgICAgIGZ1bGxTY3JlZW5UaXRsZSA9IGZ1bGxTY3JlZW4gPyBvZmZEeW5hbWljUFBURnVsbFNjcmVlbiA6IG9uRHluYW1pY1BQVEZ1bGxTY3JlZW47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50VHlwZSA9PT0gJ2g1RG9jdW1lbnQnKSB7XG4gICAgICAgICAgICAgICAgZnVsbFNjcmVlblRpdGxlID0gZnVsbFNjcmVlbiA/IG9mZkg1RG9jdW1lbnRGdWxsU2NyZWVuIDogb25INURvY3VtZW50RnVsbFNjcmVlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMucHJldmlvdXNQYWdlRWxlbWVudC50aXRsZSA9IGRvY3VtZW50VHlwZSA9PT0gJ2R5bmFtaWNQUFQnID8gcHJldlN0ZXAgOiBwcmV2UGFnZTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMubmV4dFBhZ2VFbGVtZW50LnRpdGxlID0gZG9jdW1lbnRUeXBlID09PSAnZHluYW1pY1BQVCcgPyBuZXh0U3RlcCA6IG5leHRQYWdlO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5hZGRQYWdlRWxlbWVudC50aXRsZSA9IGFkZFBhZ2U7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmZ1bGxTY3JlZW5FbGVtZW50LnRpdGxlID0gZnVsbFNjcmVlblRpdGxlO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy52b2x1bWVFbGVtZW50LnRpdGxlID0gcHB0Vm9sdW1lO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5yZW1hcmtFbGVtZW50LnRpdGxlID0gcmVtYXJrID8gb2ZmUmVtYXJrIDogb25SZW1hcms7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmVubGFyZ2VXaGl0ZWJvYXJkRWxlbWVudC50aXRsZSA9IGVubGFyZ2VXaGl0ZWJvYXJkO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5uYXJyb3dXaGl0ZWJvYXJkRWxlbWVudC50aXRsZSA9IG5hcnJvd1doaXRlYm9hcmQ7XG4gICAgICAgIH1cblxuICAgICAgICAvKuabtOaWsHNlbGVjdOmAieaLqeahhuS/oeaBryovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ191cGRhdGVTZWxlY3RJbmZvJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVTZWxlY3RJbmZvKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNWaWV3Q2xhc3Muc2VsZWN0UGFnZVZpZXcpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3N0YXRlJHZpZXdTdGF0ZSRwYWdlMiA9IHRoaXMuc3RhdGUudmlld1N0YXRlLnBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2UgPSBfc3RhdGUkdmlld1N0YXRlJHBhZ2UyID09PSB1bmRlZmluZWQgPyB7fSA6IF9zdGF0ZSR2aWV3U3RhdGUkcGFnZTI7XG4gICAgICAgICAgICAgICAgdmFyIF9wYWdlJHRvdGFsUGFnZTIgPSBwYWdlLnRvdGFsUGFnZSxcbiAgICAgICAgICAgICAgICAgICAgdG90YWxQYWdlID0gX3BhZ2UkdG90YWxQYWdlMiA9PT0gdW5kZWZpbmVkID8gMSA6IF9wYWdlJHRvdGFsUGFnZTIsXG4gICAgICAgICAgICAgICAgICAgIF9wYWdlJGN1cnJlbnRQYWdlMiA9IHBhZ2UuY3VycmVudFBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlID0gX3BhZ2UkY3VycmVudFBhZ2UyID09PSB1bmRlZmluZWQgPyAxIDogX3BhZ2UkY3VycmVudFBhZ2UyLFxuICAgICAgICAgICAgICAgICAgICBfcGFnZSRza2lwUGFnZSA9IHBhZ2Uuc2tpcFBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHNraXBQYWdlID0gX3BhZ2Ukc2tpcFBhZ2UgPT09IHVuZGVmaW5lZCA/IHt9IDogX3BhZ2Ukc2tpcFBhZ2U7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0T3B0aW9ucyA9IFtdO1xuICAgICAgICAgICAgICAgIGlmICh0b3RhbFBhZ2UgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsUGFnZSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZSA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2UgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDw9IHRvdGFsUGFnZTsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RPcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGluZGV4XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzVmlld0NsYXNzLnNlbGVjdFBhZ2VWaWV3LnNldFByb3BzKHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0T3B0aW9uczogc2VsZWN0T3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlOiBjdXJyZW50UGFnZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHNraXBQYWdlLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICBpc01vYmlsZTogdGhpcy5wcm9wcy5pc01vYmlsZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuc2tpcFBhZ2VDdXJycGFnZUVsZW1lbnQuaW5uZXJIVE1MID0gY3VycmVudFBhZ2U7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5za2lwUGFnZVRvdGFscGFnZUVsZW1lbnQuaW5uZXJIVE1MID0gdG90YWxQYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmmK/lkKbmmL7npLror77ku7blpIfms6hidG4qL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfaXNTaG93UmVtYXJrQnRuJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1Nob3dSZW1hcmtCdG4oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50cy5yZW1hcmtFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzU2hvd1JlbWFyayA9IHRoaXMucHJvcHMuaXNMb2FkUmVtYXJrICYmIHRoaXMucHJvcHMuY2FuUmVtYXJrICYmIHRoaXMuc3RhdGUudmlld1N0YXRlLnJlbWFya1RleHQ7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnVwZGF0ZVN0eWxlKHRoaXMuZWxlbWVudHMucmVtYXJrRWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAhaXNTaG93UmVtYXJrID8gJ25vbmUnIDogJydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBfc3RhdGUkdmlld1N0YXRlMiA9IHRoaXMuc3RhdGUudmlld1N0YXRlLFxuICAgICAgICAgICAgICAgIF9zdGF0ZSR2aWV3U3RhdGUyJHBhZyA9IF9zdGF0ZSR2aWV3U3RhdGUyLnBhZ2UsXG4gICAgICAgICAgICAgICAgcGFnZSA9IF9zdGF0ZSR2aWV3U3RhdGUyJHBhZyA9PT0gdW5kZWZpbmVkID8ge30gOiBfc3RhdGUkdmlld1N0YXRlMiRwYWcsXG4gICAgICAgICAgICAgICAgX3N0YXRlJHZpZXdTdGF0ZTIkem9vID0gX3N0YXRlJHZpZXdTdGF0ZTIuem9vbSxcbiAgICAgICAgICAgICAgICB6b29tID0gX3N0YXRlJHZpZXdTdGF0ZTIkem9vID09PSB1bmRlZmluZWQgPyB7fSA6IF9zdGF0ZSR2aWV3U3RhdGUyJHpvbyxcbiAgICAgICAgICAgICAgICBkb2N1bWVudFR5cGUgPSBfc3RhdGUkdmlld1N0YXRlMi5kb2N1bWVudFR5cGUsXG4gICAgICAgICAgICAgICAgZnVsbFNjcmVlbiA9IF9zdGF0ZSR2aWV3U3RhdGUyLmZ1bGxTY3JlZW4sXG4gICAgICAgICAgICAgICAgcmVtYXJrID0gX3N0YXRlJHZpZXdTdGF0ZTIucmVtYXJrLFxuICAgICAgICAgICAgICAgIGZpbGVpZCA9IF9zdGF0ZSR2aWV3U3RhdGUyLmZpbGVpZDtcbiAgICAgICAgICAgIHZhciBfcGFnZSRwcmV2UGFnZSA9IHBhZ2UucHJldlBhZ2UsXG4gICAgICAgICAgICAgICAgcHJldlBhZ2UgPSBfcGFnZSRwcmV2UGFnZSA9PT0gdW5kZWZpbmVkID8ge30gOiBfcGFnZSRwcmV2UGFnZSxcbiAgICAgICAgICAgICAgICBfcGFnZSRuZXh0UGFnZSA9IHBhZ2UubmV4dFBhZ2UsXG4gICAgICAgICAgICAgICAgbmV4dFBhZ2UgPSBfcGFnZSRuZXh0UGFnZSA9PT0gdW5kZWZpbmVkID8ge30gOiBfcGFnZSRuZXh0UGFnZSxcbiAgICAgICAgICAgICAgICBfcGFnZSRwcmV2U3RlcCA9IHBhZ2UucHJldlN0ZXAsXG4gICAgICAgICAgICAgICAgcHJldlN0ZXAgPSBfcGFnZSRwcmV2U3RlcCA9PT0gdW5kZWZpbmVkID8ge30gOiBfcGFnZSRwcmV2U3RlcCxcbiAgICAgICAgICAgICAgICBfcGFnZSRuZXh0U3RlcCA9IHBhZ2UubmV4dFN0ZXAsXG4gICAgICAgICAgICAgICAgbmV4dFN0ZXAgPSBfcGFnZSRuZXh0U3RlcCA9PT0gdW5kZWZpbmVkID8ge30gOiBfcGFnZSRuZXh0U3RlcCxcbiAgICAgICAgICAgICAgICBfcGFnZSRhZGRQYWdlID0gcGFnZS5hZGRQYWdlLFxuICAgICAgICAgICAgICAgIGFkZFBhZ2UgPSBfcGFnZSRhZGRQYWdlID09PSB1bmRlZmluZWQgPyB7fSA6IF9wYWdlJGFkZFBhZ2UsXG4gICAgICAgICAgICAgICAgX3BhZ2Ukc2tpcFBhZ2UyID0gcGFnZS5za2lwUGFnZSxcbiAgICAgICAgICAgICAgICBza2lwUGFnZSA9IF9wYWdlJHNraXBQYWdlMiA9PT0gdW5kZWZpbmVkID8ge30gOiBfcGFnZSRza2lwUGFnZTIsXG4gICAgICAgICAgICAgICAgX3BhZ2UkY3VycmVudFBhZ2UzID0gcGFnZS5jdXJyZW50UGFnZSxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZSA9IF9wYWdlJGN1cnJlbnRQYWdlMyA9PT0gdW5kZWZpbmVkID8gMSA6IF9wYWdlJGN1cnJlbnRQYWdlMztcbiAgICAgICAgICAgIHZhciBfem9vbSR6b29tX2JpZyA9IHpvb20uem9vbV9iaWcsXG4gICAgICAgICAgICAgICAgem9vbV9iaWcgPSBfem9vbSR6b29tX2JpZyA9PT0gdW5kZWZpbmVkID8ge30gOiBfem9vbSR6b29tX2JpZyxcbiAgICAgICAgICAgICAgICBfem9vbSR6b29tX3NtYWxsID0gem9vbS56b29tX3NtYWxsLFxuICAgICAgICAgICAgICAgIHpvb21fc21hbGwgPSBfem9vbSR6b29tX3NtYWxsID09PSB1bmRlZmluZWQgPyB7fSA6IF96b29tJHpvb21fc21hbGw7XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMucHJldmlvdXNQYWdlRWxlbWVudC5kaXNhYmxlZCA9IGRvY3VtZW50VHlwZSA9PT0gJ2R5bmFtaWNQUFQnID8gcHJldlN0ZXAuZGlzYWJsZWQgOiBwcmV2UGFnZS5kaXNhYmxlZDtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMubmV4dFBhZ2VFbGVtZW50LmRpc2FibGVkID0gZG9jdW1lbnRUeXBlID09PSAnZHluYW1pY1BQVCcgPyBuZXh0U3RlcC5kaXNhYmxlZCA6IG5leHRQYWdlLmRpc2FibGVkO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5hZGRQYWdlRWxlbWVudC5kaXNhYmxlZCA9IGFkZFBhZ2UuZGlzYWJsZWQ7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmVubGFyZ2VXaGl0ZWJvYXJkRWxlbWVudC5kaXNhYmxlZCA9IHpvb21fYmlnLmRpc2FibGVkO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5uYXJyb3dXaGl0ZWJvYXJkRWxlbWVudC5kaXNhYmxlZCA9IHpvb21fc21hbGwuZGlzYWJsZWQ7XG5cbiAgICAgICAgICAgIGlmIChza2lwUGFnZS5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzLnNraXBQYWdlRWxlbWVudCwgJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzLnNraXBQYWdlRWxlbWVudCwgJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC51cGRhdGVTdHlsZSh0aGlzLmVsZW1lbnRzLm5leHRQYWdlRWxlbWVudCwge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICFhZGRQYWdlLmRpc2FibGVkID8gJ25vbmUnIDogJydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnVwZGF0ZVN0eWxlKHRoaXMuZWxlbWVudHMuYWRkUGFnZUVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBhZGRQYWdlLmRpc2FibGVkID8gJ25vbmUnIDogJydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGZ1bGxTY3JlZW4pIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYWRkQ2xhc3ModGhpcy5lbGVtZW50cy5mdWxsU2NyZWVuRWxlbWVudCwgJ3llcycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50cy5mdWxsU2NyZWVuRWxlbWVudCwgJ3llcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnVwZGF0ZVN0eWxlKHRoaXMuZWxlbWVudHMudm9sdW1lRWxlbWVudCwge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRoaXMucHJvcHMuaXNMb2FkVm9sdW1lICYmIGRvY3VtZW50VHlwZSA9PT0gJ2R5bmFtaWNQUFQnICYmIHRoaXMuc3RhdGUuZHluYW1pY1BwdEFWU2l6ZSA+IDAgPyAnJyA6ICdub25lJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChyZW1hcmspIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYWRkQ2xhc3ModGhpcy5lbGVtZW50cy5yZW1hcmtFbGVtZW50LCAneWVzJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzLnJlbWFya0VsZW1lbnQsICd5ZXMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUYWxrRG9jdW1lbnRUb29sYmFyO1xufShfVGFsa2Nsb3VkUmVhY3QzLmRlZmF1bHQpO1xuXG53aW5kb3cuVGFsa0RvY3VtZW50VG9vbGJhciA9IFRhbGtEb2N1bWVudFRvb2xiYXI7XG5leHBvcnRzLlRhbGtEb2N1bWVudFRvb2xiYXIgPSBUYWxrRG9jdW1lbnRUb29sYmFyO1xuZXhwb3J0cy5kZWZhdWx0ID0gVGFsa0RvY3VtZW50VG9vbGJhcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfVGFsa2Nsb3VkUmVhY3QyID0gcmVxdWlyZSgnLi4vY29tcG9uZW50cy9UYWxrY2xvdWRSZWFjdCcpO1xuXG52YXIgX1RhbGtjbG91ZFJlYWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhbGtjbG91ZFJlYWN0Mik7XG5cbnZhciBfRG9tVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9Eb21VdGlscycpO1xuXG52YXIgX0RvbVV0aWxzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RvbVV0aWxzKTtcblxudmFyIF9VdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL1V0aWxzJyk7XG5cbnZhciBfVXRpbHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXRpbHMpO1xuXG52YXIgX1ZpZGVvRHVtYiA9IHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvVmlkZW9EdW1iJyk7XG5cbnZhciBfVmlkZW9EdW1iMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1ZpZGVvRHVtYik7XG5cbnZhciBfTWVkaWFQbGF5ZXJDb250cm9sbGVyID0gcmVxdWlyZSgnLi4vY29tcG9uZW50cy9NZWRpYVBsYXllckNvbnRyb2xsZXInKTtcblxudmFyIF9NZWRpYVBsYXllckNvbnRyb2xsZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWVkaWFQbGF5ZXJDb250cm9sbGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKipcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogTWVkaWFQbGF5ZXJTbWFydOe7hOS7tijlqpLkvZPmkq3mlL7lmagpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBtb2R1bGUgTWVkaWFQbGF5ZXJTbWFydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gICDmj5DkvpsgTWVkaWFQbGF5ZXLmkq3mlL7lmajmiYDpnIDnu4Tku7ZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGF1dGhvciDpgrHlub/nlJ9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGRhdGUgMjAxOC8wNS8wMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuXG52YXIgVGFsa01lZGlhUGxheWVyID0gZnVuY3Rpb24gKF9UYWxrY2xvdWRSZWFjdCkge1xuICAgIF9pbmhlcml0cyhUYWxrTWVkaWFQbGF5ZXIsIF9UYWxrY2xvdWRSZWFjdCk7XG5cbiAgICBmdW5jdGlvbiBUYWxrTWVkaWFQbGF5ZXIoKSB7XG4gICAgICAgIHZhciBwYXJlbnROb2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkb2N1bWVudC5ib2R5O1xuICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2RlZmF1bHQnO1xuICAgICAgICB2YXIgd2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSA9IGFyZ3VtZW50c1syXTtcbiAgICAgICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICAgICAgdmFyIGNvbmZpZ3JhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XG4gICAgICAgIHZhciBpc1ZpZGVvUGxheWVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiBmYWxzZTtcblxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFsa01lZGlhUGxheWVyKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVGFsa01lZGlhUGxheWVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFsa01lZGlhUGxheWVyKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLmlzVmlkZW9QbGF5ZXIgPSBpc1ZpZGVvUGxheWVyO1xuICAgICAgICBfdGhpcy5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcbiAgICAgICAgX3RoaXMuaW5zdGFuY2VJZCA9IGluc3RhbmNlSWQ7XG4gICAgICAgIF90aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UgPSB3aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlO1xuICAgICAgICBfdGhpcy5jb25maWdyYXRpb24gPSBjb25maWdyYXRpb247XG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc3RyZWFtSW5mbzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdm9sdW1lOiAxMDAsXG4gICAgICAgICAgICBtdXRlVm9sdW1lOiBmYWxzZSwgaXNGdWxsU2NyZWVuOiBmYWxzZSAvL+aYr+WQpuWFqOWxj1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5wcm9ncmVzc0ludGVydmFsRHVyYXRpb24gPSAxMDAwOyAvL+iuvue9rui/m+W6puadoeWumuaXtuWZqOaXtumXtOmXtOmalOS4ujEwMDBtc1xuICAgICAgICBfdGhpcy5lbGVtZW50cyA9IHt9O1xuICAgICAgICBfdGhpcy52aWRlb0R1bWIgPSB1bmRlZmluZWQ7XG4gICAgICAgIF90aGlzLl9jcmVhdGVFbGVtZW50cygpO1xuICAgICAgICBfdGhpcy5fY29ubmVjdEVsZW1lbnRzKCk7XG4gICAgICAgIF90aGlzLnJlbmRlcigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFRhbGtNZWRpYVBsYXllciwgW3tcbiAgICAgICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlU3RhdGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlU3RhdGUocHJldlN0YXRlKSB7XG4gICAgICAgICAgICBpZiAocHJldlN0YXRlLnN0cmVhbUluZm8gIT09IHRoaXMuc3RhdGUuc3RyZWFtSW5mbykge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2U3RhdGUuc3RyZWFtSW5mbyAmJiB0aGlzLnN0YXRlLnN0cmVhbUluZm8gJiYgcHJldlN0YXRlLnN0cmVhbUluZm8uYXR0cmlidXRlcyAmJiB0aGlzLnN0YXRlLnN0cmVhbUluZm8uYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNSZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBPYmplY3QuZW50cmllcyh0aGlzLnN0YXRlLnN0cmVhbUluZm8uYXR0cmlidXRlcylbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9yZWYyWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9yZWYyWzFdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gJ3Bvc2l0aW9uJyAmJiB2YWx1ZSAhPT0gcHJldlN0YXRlLnN0cmVhbUluZm8uYXR0cmlidXRlc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZTdGF0ZS5zdHJlYW1JbmZvLmF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHRoaXMuc3RhdGUuc3RyZWFtSW5mby5hdHRyaWJ1dGVzLnBvc2l0aW9uICYmICFpc1JlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9GSVhNRSDlpoLmnpzlkIzmmYLmm7TmlrBwb3NpdGlvbuWSjOWFtuWug+eLgOaFi++8jOacg+WwjuiHtOS4jXJlbmRlclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZVN0YXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZVN0YXRlKHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKHByZXZTdGF0ZS5zdHJlYW1JbmZvICYmICF0aGlzLnN0YXRlLnN0cmVhbUluZm8pIHtcbiAgICAgICAgICAgICAgICB2YXIgZnVsbFNjcmVlbkVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzLnJvb3RFbGVtZW50O1xuICAgICAgICAgICAgICAgIGlmIChfVXRpbHMyLmRlZmF1bHQuZ2V0RnVsbHNjcmVlbkVsZW1lbnQoKSAmJiBfVXRpbHMyLmRlZmF1bHQuZ2V0RnVsbHNjcmVlbkVsZW1lbnQoKS5pZCA9PT0gZnVsbFNjcmVlbkVsZW1lbnQuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX1V0aWxzMi5kZWZhdWx0LmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudHMuY2xvc2VWaWRlb1BsYXllckVsZW1lbnQgJiYgIXByZXZTdGF0ZS5zdHJlYW1JbmZvICYmIHRoaXMuc3RhdGUuc3RyZWFtSW5mbykge1xuICAgICAgICAgICAgICAgIHZhciBpc1JlbW90ZUxvY2FsU2hhcmVNZWRpYSA9IGZhbHNlOyAvL+aYr+WQpuaYr+i/nOeoi+eahOacrOWcsOeUteW9seWFseS6q1xuXG4gICAgICAgICAgICAgICAgdmFyIF9yZWYzID0gdGhpcy5zdGF0ZS5zdHJlYW1JbmZvIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBzdHJlYW1UeXBlID0gX3JlZjMuc3RyZWFtVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcmlkID0gX3JlZjMudXNlcmlkO1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0cmVhbVR5cGUgPT09ICdmaWxlJyAmJiB1c2VyaWQgIT0gdGhpcy5wcm9wcy5teVVzZXJJZCkge1xuICAgICAgICAgICAgICAgICAgICBpc1JlbW90ZUxvY2FsU2hhcmVNZWRpYSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC51cGRhdGVTdHlsZSh0aGlzLmVsZW1lbnRzLmNsb3NlVmlkZW9QbGF5ZXJFbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICF0aGlzLnByb3BzLmNvbnRyb2xQZXJtaXNzaW9ucy5oYXNDbG9zZSB8fCBpc1JlbW90ZUxvY2FsU2hhcmVNZWRpYSA/ICdub25lJyA6ICcnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5jbG9zZVZpZGVvUGxheWVyRWxlbWVudC5kaXNhYmxlZCA9ICF0aGlzLnByb3BzLmNvbnRyb2xQZXJtaXNzaW9ucy5oYXNDbG9zZSB8fCBpc1JlbW90ZUxvY2FsU2hhcmVNZWRpYTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3RyZWFtSW5mbyAmJiB0aGlzLnN0YXRlLnN0cmVhbUluZm8uYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb2dyZXNzVGltZXIgJiYgdGhpcy5zdGF0ZS5zdHJlYW1JbmZvLnN0cmVhbVR5cGUgPT09ICdtZWRpYScgJiYgKHRoaXMuc3RhdGUuc3RyZWFtSW5mby51c2VyaWQgPT0gdGhpcy5wcm9wcy5teVVzZXJJZCB8fCB0aGlzLnByb3BzLm15Um9sZSA9PSAwIHx8IHRoaXMucHJvcHMubXlSb2xlID09IDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8v5aaC5p6c5piv5aqS5L2T5paH5Lu25YWx5Lqr5LiU5piv5Y+R6LW36ICFL+iAgeW4iC/liqnmlZnliJnkuI3orr7nva7lrprml7blmajvvIjnlLHmnI3liqHlmajnu5nov5vluqbkv6Hmga/vvIlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RvcFByb2dyZXNzVGltZXIoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9ncmVzc1RpbWVyICYmIHRoaXMuc3RhdGUuc3RyZWFtSW5mby5hdHRyaWJ1dGVzLnBhdXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9wUHJvZ3Jlc3NUaW1lcigpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLnByb2dyZXNzVGltZXIgJiYgIXRoaXMuc3RhdGUuc3RyZWFtSW5mby5hdHRyaWJ1dGVzLnBhdXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGFydFByb2dyZXNzVGltZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvZ3Jlc3NUaW1lcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9wUHJvZ3Jlc3NUaW1lcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnZpZGVvRHVtYikge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2U3RhdGUudm9sdW1lICE9PSB0aGlzLnN0YXRlLnZvbHVtZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvRHVtYi5zZXRQcm9wcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWU6IHRoaXMuc3RhdGUudm9sdW1lXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJldlN0YXRlLm11dGVWb2x1bWUgIT09IHRoaXMuc3RhdGUubXV0ZVZvbHVtZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvRHVtYi5zZXRQcm9wcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdXRlVm9sdW1lOiB0aGlzLnN0YXRlLm11dGVWb2x1bWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcmV2U3RhdGUuc3RyZWFtSW5mbyAhPT0gdGhpcy5zdGF0ZS5zdHJlYW1JbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW9EdW1iLnNldFByb3BzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUluZm86IHRoaXMuc3RhdGUuc3RyZWFtSW5mb1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm1lZGlhUGxheWVyQ29udHJvbGxlckR1bWIpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJldlN0YXRlLnN0cmVhbUluZm8gIT09IHRoaXMuc3RhdGUuc3RyZWFtSW5mbykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhUGxheWVyQ29udHJvbGxlckR1bWIuc2V0UHJvcHMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtSW5mbzogdGhpcy5zdGF0ZS5zdHJlYW1JbmZvXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJldlN0YXRlLnZvbHVtZSAhPT0gdGhpcy5zdGF0ZS52b2x1bWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZWRpYVBsYXllckNvbnRyb2xsZXJEdW1iLnNldFByb3BzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZTogdGhpcy5zdGF0ZS52b2x1bWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcmV2U3RhdGUubXV0ZVZvbHVtZSAhPT0gdGhpcy5zdGF0ZS5tdXRlVm9sdW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWFQbGF5ZXJDb250cm9sbGVyRHVtYi5zZXRQcm9wcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdXRlVm9sdW1lOiB0aGlzLnN0YXRlLm11dGVWb2x1bWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcmV2U3RhdGUuaXNGdWxsU2NyZWVuICE9PSB0aGlzLnN0YXRlLmlzRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhUGxheWVyQ29udHJvbGxlckR1bWIuc2V0UHJvcHMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNGdWxsU2NyZWVuOiB0aGlzLnN0YXRlLmlzRnVsbFNjcmVlblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZVByb3BzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZVByb3BzKHByZXZQcm9wcykge1xuICAgICAgICAgICAgaWYgKHByZXZQcm9wcy5pc0xvYWRDb250cm9sICE9PSB0aGlzLnByb3BzLmlzTG9hZENvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWVkaWFQbGF5ZXJDb250cm9sbGVyRHVtYiAmJiB0aGlzLnByb3BzLmlzTG9hZENvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9hZE1lZGlhUGxheWVyQ29udHJvbGxlcigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tZWRpYVBsYXllckNvbnRyb2xsZXJEdW1iICYmICF0aGlzLnByb3BzLmlzTG9hZENvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZWRpYVBsYXllckNvbnRyb2xsZXJEdW1iLmRlc3Ryb3lWaWV3KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWFQbGF5ZXJDb250cm9sbGVyRHVtYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50cy5jbG9zZVZpZGVvUGxheWVyRWxlbWVudCAmJiBwcmV2UHJvcHMuY29udHJvbFBlcm1pc3Npb25zLmhhc0Nsb3NlICE9PSB0aGlzLnByb3BzLmNvbnRyb2xQZXJtaXNzaW9ucy5oYXNDbG9zZSkge1xuICAgICAgICAgICAgICAgIHZhciBpc1JlbW90ZUxvY2FsU2hhcmVNZWRpYSA9IGZhbHNlOyAvL+aYr+WQpuaYr+i/nOeoi+eahOacrOWcsOeUteW9seWFseS6q1xuXG4gICAgICAgICAgICAgICAgdmFyIF9yZWY0ID0gdGhpcy5zdGF0ZS5zdHJlYW1JbmZvIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBzdHJlYW1UeXBlID0gX3JlZjQuc3RyZWFtVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcmlkID0gX3JlZjQudXNlcmlkO1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0cmVhbVR5cGUgPT09ICdmaWxlJyAmJiB1c2VyaWQgIT0gdGhpcy5wcm9wcy5teVVzZXJJZCkge1xuICAgICAgICAgICAgICAgICAgICBpc1JlbW90ZUxvY2FsU2hhcmVNZWRpYSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC51cGRhdGVTdHlsZSh0aGlzLmVsZW1lbnRzLmNsb3NlVmlkZW9QbGF5ZXJFbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICF0aGlzLnByb3BzLmNvbnRyb2xQZXJtaXNzaW9ucy5oYXNDbG9zZSB8fCBpc1JlbW90ZUxvY2FsU2hhcmVNZWRpYSA/ICdub25lJyA6ICcnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5jbG9zZVZpZGVvUGxheWVyRWxlbWVudC5kaXNhYmxlZCA9ICF0aGlzLnByb3BzLmNvbnRyb2xQZXJtaXNzaW9ucy5oYXNDbG9zZSB8fCBpc1JlbW90ZUxvY2FsU2hhcmVNZWRpYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm1lZGlhUGxheWVyQ29udHJvbGxlckR1bWIpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJldlByb3BzLm15VXNlcklkICE9PSB0aGlzLnByb3BzLm15VXNlcklkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWFQbGF5ZXJDb250cm9sbGVyRHVtYi5zZXRQcm9wcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBteVVzZXJJZDogdGhpcy5wcm9wcy5teVVzZXJJZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByZXZQcm9wcy5pc1BsYXliYWNrICE9PSB0aGlzLnByb3BzLmlzUGxheWJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuaXNQbGF5YmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFkZENsYXNzKHRoaXMuZWxlbWVudHMucm9vdEVsZW1lbnQsICd0ay1wbGF5YmFjaycpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHMucm9vdEVsZW1lbnQsICd0ay1wbGF5YmFjaycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWFQbGF5ZXJDb250cm9sbGVyRHVtYi5zZXRQcm9wcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1BsYXliYWNrOiB0aGlzLnByb3BzLmlzUGxheWJhY2tcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcmV2UHJvcHMuY29udHJvbFBlcm1pc3Npb25zICE9PSB0aGlzLnByb3BzLmNvbnRyb2xQZXJtaXNzaW9ucykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhUGxheWVyQ29udHJvbGxlckR1bWIuc2V0UHJvcHMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbFBlcm1pc3Npb25zOiB0aGlzLnByb3BzLmNvbnRyb2xQZXJtaXNzaW9uc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnZpZGVvRHVtYikge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2UHJvcHMubXlVc2VySWQgIT09IHRoaXMucHJvcHMubXlVc2VySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWRlb0R1bWIuc2V0UHJvcHMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbXlVc2VySWQ6IHRoaXMucHJvcHMubXlVc2VySWRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkZXN0cm95VmlldycsXG5cblxuICAgICAgICAvKumUgOavgeinhuWbviovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95VmlldygpIHtcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnRzLnJvb3RFbGVtZW50LCB0aGlzLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZWxlbWVudHNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVjZWl2ZUV2ZW50RnVsbFNjcmVlbkNoYW5nZScsXG5cblxuICAgICAgICAvKuaOpeWPl+WFqOWxj+aUueWPmOS6i+S7tiovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWNlaXZlRXZlbnRGdWxsU2NyZWVuQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoX1V0aWxzMi5kZWZhdWx0LmlzRnVsbFNjcmVlblN0YXR1cygpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bGxTY3JlZW5FbGVtZW50ID0gdGhpcy5lbGVtZW50cy5yb290RWxlbWVudDtcbiAgICAgICAgICAgICAgICBpZiAoX1V0aWxzMi5kZWZhdWx0LmdldEZ1bGxzY3JlZW5FbGVtZW50KCkgJiYgX1V0aWxzMi5kZWZhdWx0LmdldEZ1bGxzY3JlZW5FbGVtZW50KCkuaWQgPT09IGZ1bGxTY3JlZW5FbGVtZW50LmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUZ1bGxTY3JlZW5TdGF0ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VGdWxsU2NyZWVuU3RhdGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlRnVsbFNjcmVlblN0YXRlKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5pqC5YGc5ZKM5pKt5pS+5o6n5Yi2Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnb25QbGF5T3JQYXVzZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uUGxheU9yUGF1c2VDbGljaygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAoVEsuU0RLVFlQRSAhPT0gJ3BjJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnN0cmVhbUluZm8gJiYgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5nZXRSb29tRGVsZWdhdGUoKSkge1xuICAgICAgICAgICAgICAgIHZhciByb29tID0gdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLmdldFJvb21EZWxlZ2F0ZSgpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZS5zdHJlYW1JbmZvLnN0cmVhbVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWVkaWEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3RyZWFtSW5mby5hdHRyaWJ1dGVzLnBhdXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9zdGF0ZSRzdHJlYW1JbmZvJGF0dCA9IHRoaXMuc3RhdGUuc3RyZWFtSW5mby5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3RhdGUkc3RyZWFtSW5mbyRhdHQyID0gX3N0YXRlJHN0cmVhbUluZm8kYXR0LnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IF9zdGF0ZSRzdHJlYW1JbmZvJGF0dDIgPT09IHVuZGVmaW5lZCA/IDAgOiBfc3RhdGUkc3RyZWFtSW5mbyRhdHQyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3RhdGUkc3RyZWFtSW5mbyRhdHQzID0gX3N0YXRlJHN0cmVhbUluZm8kYXR0LmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IF9zdGF0ZSRzdHJlYW1JbmZvJGF0dDMgPT09IHVuZGVmaW5lZCA/IDAgOiBfc3RhdGUkc3RyZWFtSW5mbyRhdHQzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID49IGR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb20uc2Vla01lZGlhKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb29tLnBhdXNlU2hhcmVNZWRpYShmYWxzZSk7IC8vcGxheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC51cGRhdGVTdHlsZSh0aGlzLmVsZW1lbnRzLmNsb3NlVmlkZW9QbGF5ZXJFbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuY29udHJvbENhbGxiYWNrICYmIHRoaXMucHJvcHMuY29udHJvbENhbGxiYWNrLnBsYXkgJiYgX1V0aWxzMi5kZWZhdWx0LmlzRnVuY3Rpb24odGhpcy5wcm9wcy5jb250cm9sQ2FsbGJhY2sucGxheSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jb250cm9sQ2FsbGJhY2sucGxheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vbS5wYXVzZVNoYXJlTWVkaWEodHJ1ZSk7IC8vcGF1c2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQudXBkYXRlU3R5bGUodGhpcy5lbGVtZW50cy5jbG9zZVZpZGVvUGxheWVyRWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5jb250cm9sQ2FsbGJhY2sgJiYgdGhpcy5wcm9wcy5jb250cm9sQ2FsbGJhY2sucGF1c2UgJiYgX1V0aWxzMi5kZWZhdWx0LmlzRnVuY3Rpb24odGhpcy5wcm9wcy5jb250cm9sQ2FsbGJhY2sucGF1c2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuY29udHJvbENhbGxiYWNrLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZpbGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3RyZWFtSW5mby51c2VyaWQgPT09IHRoaXMucHJvcHMubXlVc2VySWQgJiYgcm9vbS5nZXROYXRpdmVJbnRlcmZhY2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYXRpdmVJbnRlcmZhY2UgPSByb29tLmdldE5hdGl2ZUludGVyZmFjZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnN0cmVhbUluZm8uYXR0cmlidXRlcy5wYXVzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3N0YXRlJHN0cmVhbUluZm8kYXR0NCA9IHRoaXMuc3RhdGUuc3RyZWFtSW5mby5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N0YXRlJHN0cmVhbUluZm8kYXR0NSA9IF9zdGF0ZSRzdHJlYW1JbmZvJGF0dDQucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcG9zaXRpb24gPSBfc3RhdGUkc3RyZWFtSW5mbyRhdHQ1ID09PSB1bmRlZmluZWQgPyAwIDogX3N0YXRlJHN0cmVhbUluZm8kYXR0NSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zdGF0ZSRzdHJlYW1JbmZvJGF0dDYgPSBfc3RhdGUkc3RyZWFtSW5mbyRhdHQ0LmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2R1cmF0aW9uID0gX3N0YXRlJHN0cmVhbUluZm8kYXR0NiA9PT0gdW5kZWZpbmVkID8gMCA6IF9zdGF0ZSRzdHJlYW1JbmZvJGF0dDY7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlTG9jYWxGaWxlU3RyZWFtSW5mb1BsYXllclBvc2l0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcG9zaXRpb24gKyAxMDAwID49IF9kdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRklYTUUgcG9zaXRpb27mr5RkdXJhdGlvbuWwkeWHoOeZvuavq+enku+8jOmcgOimgWMrK+afpeS4gOS4i++8jOaaguaXtuWBmisxMDAw5aSE55CGXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlSW50ZXJmYWNlLnNlZWtNZWRpYUZpbGUoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVJbnRlcmZhY2UucGF1c2VTaGFyZU1lZGlhRmlsZShmYWxzZSk7IC8vcGxheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzMi5wcm9wcy5jb250cm9sQ2FsbGJhY2sgJiYgX3RoaXMyLnByb3BzLmNvbnRyb2xDYWxsYmFjay5wbGF5ICYmIF9VdGlsczIuZGVmYXVsdC5pc0Z1bmN0aW9uKF90aGlzMi5wcm9wcy5jb250cm9sQ2FsbGJhY2sucGxheSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIucHJvcHMuY29udHJvbENhbGxiYWNrLnBsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQudXBkYXRlU3R5bGUoX3RoaXMyLmVsZW1lbnRzLmNsb3NlVmlkZW9QbGF5ZXJFbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZUludGVyZmFjZS5wYXVzZVNoYXJlTWVkaWFGaWxlKHRydWUpOyAvL3BhdXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmNvbnRyb2xDYWxsYmFjayAmJiB0aGlzLnByb3BzLmNvbnRyb2xDYWxsYmFjay5wYXVzZSAmJiBfVXRpbHMyLmRlZmF1bHQuaXNGdW5jdGlvbih0aGlzLnByb3BzLmNvbnRyb2xDYWxsYmFjay5wYXVzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuY29udHJvbENhbGxiYWNrLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQudXBkYXRlU3R5bGUodGhpcy5lbGVtZW50cy5jbG9zZVZpZGVvUGxheWVyRWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuaUueWPmOmfs+mHjyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uQ2hhbmdlVm9sdW1lJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlVm9sdW1lKHZvbHVtZSkge1xuICAgICAgICAgICAgdmFyIGNoYW5nZVN0YXRlID0ge1xuICAgICAgICAgICAgICAgIHZvbHVtZTogdm9sdW1lXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHZvbHVtZSA9PT0gMCAmJiAhdGhpcy5zdGF0ZS5tdXRlVm9sdW1lKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlU3RhdGUubXV0ZVZvbHVtZSA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZvbHVtZSAhPT0gMCAmJiB0aGlzLnN0YXRlLm11dGVWb2x1bWUpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VTdGF0ZS5tdXRlVm9sdW1lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKGNoYW5nZVN0YXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5pS55Y+Y5pKt5pS+55qE6L+b5bqmKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnb25DaGFuZ2VQcm9ncmVzcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZVByb2dyZXNzKHByb2dyZXNzKSB7XG4gICAgICAgICAgICBpZiAoVEsuU0RLVFlQRSA9PT0gJ21vYmlsZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zdHJlYW1JbmZvICYmIHRoaXMuc3RhdGUuc3RyZWFtSW5mby5hdHRyaWJ1dGVzICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSAmJiB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUuc3RyZWFtSW5mby5zdHJlYW1UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21lZGlhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvblBlcmNlbnRhZ2UgPSBwcm9ncmVzcyAvIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvblBlcmNlbnRhZ2UgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25QZXJjZW50YWdlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvblBlcmNlbnRhZ2UgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25QZXJjZW50YWdlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuc3RhdGUuc3RyZWFtSW5mby5hdHRyaWJ1dGVzLmR1cmF0aW9uICogcG9zaXRpb25QZXJjZW50YWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlU3RyZWFtSW5mb0F0dHJpYnV0ZXMoJ3Bvc2l0aW9uJywgcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLmdldFJvb21EZWxlZ2F0ZSgpLnNlZWtNZWRpYShwb3NpdGlvblBlcmNlbnRhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZpbGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3RyZWFtSW5mby51c2VyaWQgPT09IHRoaXMucHJvcHMubXlVc2VySWQgJiYgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLmdldFJvb21EZWxlZ2F0ZSgpLmdldE5hdGl2ZUludGVyZmFjZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9wb3NpdGlvblBlcmNlbnRhZ2UgPSBwcm9ncmVzcyAvIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3Bvc2l0aW9uUGVyY2VudGFnZSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Bvc2l0aW9uUGVyY2VudGFnZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcG9zaXRpb25QZXJjZW50YWdlID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcG9zaXRpb25QZXJjZW50YWdlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9wb3NpdGlvbjIgPSB0aGlzLnN0YXRlLnN0cmVhbUluZm8uYXR0cmlidXRlcy5kdXJhdGlvbiAqIF9wb3NpdGlvblBlcmNlbnRhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlU3RyZWFtSW5mb0F0dHJpYnV0ZXMoJ3Bvc2l0aW9uJywgX3Bvc2l0aW9uMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLmdldFJvb21EZWxlZ2F0ZSgpLmdldE5hdGl2ZUludGVyZmFjZSgpLnNlZWtNZWRpYUZpbGUoX3Bvc2l0aW9uUGVyY2VudGFnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuaUueWPmOmdmemfsyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uVm9sdW1lTXV0ZUNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uVm9sdW1lTXV0ZUNsaWNrKCkge1xuICAgICAgICAgICAgdmFyIGNoYW5nZVN0YXRlID0ge1xuICAgICAgICAgICAgICAgIG11dGVWb2x1bWU6ICF0aGlzLnN0YXRlLm11dGVWb2x1bWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIWNoYW5nZVN0YXRlLm11dGVWb2x1bWUgJiYgdGhpcy5zdGF0ZS52b2x1bWUgPD0gMCkge1xuICAgICAgICAgICAgICAgIGNoYW5nZVN0YXRlLnZvbHVtZSA9IDEwMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlU3RhdGUudm9sdW1lID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoY2hhbmdlU3RhdGUpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdvbkNsb3NlQ2xpY2snLFxuXG5cbiAgICAgICAgLyrlhbPpl63ngrnlh7vkuovku7blpITnkIYqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DbG9zZUNsaWNrKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3RyZWFtSW5mbyAmJiB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUuc3RyZWFtSW5mby5zdHJlYW1UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21lZGlhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5zdG9wU2hhcmVNZWRpYSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZpbGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLnN0b3BTaGFyZUxvY2FsTWVkaWEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5YWo5bGP54K55Ye75aSE55CGKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnb25GdWxsU2NyZWVuQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25GdWxsU2NyZWVuQ2xpY2soKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUuaXNGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgaWYgKF9VdGlsczIuZGVmYXVsdC5pc0Z1bGxTY3JlZW5TdGF0dXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBfVXRpbHMyLmRlZmF1bHQuZXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGZ1bGxTY3JlZW5FbGVtZW50ID0gdGhpcy5lbGVtZW50cy5yb290RWxlbWVudDtcbiAgICAgICAgICAgICAgICBfVXRpbHMyLmRlZmF1bHQubGF1bmNoRnVsbHNjcmVlbihmdWxsU2NyZWVuRWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9VdGlsczIuZGVmYXVsdC5leGl0RnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrliJvlu7rmiYDpnIDoioLngrkqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfY3JlYXRlRWxlbWVudHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnRzKCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5yb290RWxlbWVudCA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdzZWN0aW9uJywgdGhpcy5pbnN0YW5jZUlkICsgKHRoaXMuaXNWaWRlb1BsYXllciA/ICdWaWRlb1BsYXllcicgOiAnQXVkaW9QbGF5ZXInKSArICdUYWxrTWVkaWFQbGF5ZXJCb3gnLCAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkIHRrLW1lZGlhLXBsYXllciAnICsgJyB0ay1tZWRpYS1wbGF5ZXItY29udGFpbmVyICcgKyAodGhpcy5pc1ZpZGVvUGxheWVyID8gJ3RrLXZpZGVvLXBsYXllci1jb250YWluZXIgJyA6ICd0ay1hdWRpby1wbGF5ZXItY29udGFpbmVyICcpICsgKHRoaXMucHJvcHMuaXNQbGF5YmFjayA/ICd0ay1wbGF5YmFjayAnIDogJyAnKSwge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICF0aGlzLnN0YXRlLnN0cmVhbUluZm8gPyAnbm9uZScgOiAnJ1xuICAgICAgICAgICAgfSk7IC8v5qC56IqC54K5XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMubWVkaWFTb3VyY2VFbGVtZW50ID0gX0RvbVV0aWxzMi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2FydGljbGUnLCB0aGlzLmluc3RhbmNlSWQgKyAodGhpcy5pc1ZpZGVvUGxheWVyID8gJ1ZpZGVvUGxheWVyJyA6ICdBdWRpb1BsYXllcicpICsgJ1RhbGtNZWRpYVBsYXllclNvdXJjZUJveCcsICd0YWxrY2xvdWQtc2RrLXdoaXRlYm9hcmQgdGstbWVkaWEtcGxheWVyICcgKyAnIHRrLW1lZGlhLXBsYXllci1zb3VyY2UnLCB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogIXRoaXMuaXNWaWRlb1BsYXllciA/ICdub25lJyA6ICcnXG4gICAgICAgICAgICB9KTsgLy/pn7PpopHmkq3mlL7lmajmnaXmupDoioLngrlcbiAgICAgICAgICAgIHZhciBpc1JlbW90ZUxvY2FsU2hhcmVNZWRpYSA9IGZhbHNlOyAvL+aYr+WQpuaYr+i/nOeoi+eahOacrOWcsOeUteW9seWFseS6q1xuXG4gICAgICAgICAgICB2YXIgX3JlZjUgPSB0aGlzLnN0YXRlLnN0cmVhbUluZm8gfHwge30sXG4gICAgICAgICAgICAgICAgc3RyZWFtVHlwZSA9IF9yZWY1LnN0cmVhbVR5cGUsXG4gICAgICAgICAgICAgICAgdXNlcmlkID0gX3JlZjUudXNlcmlkO1xuXG4gICAgICAgICAgICBpZiAoc3RyZWFtVHlwZSA9PT0gJ2ZpbGUnICYmIHVzZXJpZCAhPSB0aGlzLnByb3BzLm15VXNlcklkKSB7XG4gICAgICAgICAgICAgICAgaXNSZW1vdGVMb2NhbFNoYXJlTWVkaWEgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNWaWRlb1BsYXllcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuY2xvc2VWaWRlb1BsYXllckVsZW1lbnQgPSBfRG9tVXRpbHMyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgdW5kZWZpbmVkLCAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkIGFkZC1jdXJzb3ItcG9pbnRlciB0ay12aWRlby1wbGF5ZXItY2xvc2UtYnRuICcsIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogIXRoaXMucHJvcHMuY29udHJvbFBlcm1pc3Npb25zLmhhc0Nsb3NlIHx8IGlzUmVtb3RlTG9jYWxTaGFyZU1lZGlhID8gJ25vbmUnIDogJydcbiAgICAgICAgICAgICAgICB9KTsgLy/op4bpopHmkq3mlL7lmajlhbPpl63mjInpkq5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5tZWRpYVRvdGFsQ29udHJvbEVsZW1lbnQgPSBfRG9tVXRpbHMyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYXJ0aWNsZScsIHRoaXMuaW5zdGFuY2VJZCArICh0aGlzLmlzVmlkZW9QbGF5ZXIgPyAnVmlkZW9QbGF5ZXInIDogJ0F1ZGlvUGxheWVyJykgKyAnVGFsa01lZGlhUGxheWVyVG90YWxDb250cm9sQm94JywgJ3RhbGtjbG91ZC1zZGstd2hpdGVib2FyZCB0ay1tZWRpYS1wbGF5ZXIgJyArICcgdGstbWVkaWEtcGxheWVyLXRvdGFsLWNvbnRyb2wtYm94Jywge30pOyAvL+mfs+mikeaSreaUvuWZqOaJgOacieaOp+S7tuiKgueCuVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNWaWRlb1BsYXllcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMucm9vdEVsZW1lbnQub25tb3VzZW92ZXIgPSB0aGlzLl92aWRlb01vdXNlb3Zlci5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMucm9vdEVsZW1lbnQub25tb3VzZW91dCA9IHRoaXMuX3ZpZGVvTW91c2VvdXQuYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnJvb3RFbGVtZW50Lm9uY2xpY2sgPSB0aGlzLl92aWRlb0NsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5tZWRpYVRvdGFsQ29udHJvbEVsZW1lbnQub25tb3VzZW92ZXIgPSB0aGlzLl92aWRlb0NvbnRyb2xNb3VzZW92ZXIuYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLm1lZGlhVG90YWxDb250cm9sRWxlbWVudC5vbmNsaWNrID0gdGhpcy5fdmlkZW9Db250cm9sQ2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3ZpZGVvTW91c2VvdmVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF92aWRlb01vdXNlb3ZlcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYWRkQ2xhc3ModGhpcy5lbGVtZW50cy5yb290RWxlbWVudCwgJ3Nob3ctY29udHJvbGxlcicpO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc2hvd0NvbnRyb2xsZXJUaW1lcik7XG4gICAgICAgICAgICB0aGlzLnNob3dDb250cm9sbGVyVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2xhc3MoX3RoaXMzLmVsZW1lbnRzLnJvb3RFbGVtZW50LCAnc2hvdy1jb250cm9sbGVyJyk7XG4gICAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3ZpZGVvTW91c2VvdXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3ZpZGVvTW91c2VvdXQoKSB7XG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50cy5yb290RWxlbWVudCwgJ3Nob3ctY29udHJvbGxlcicpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfdmlkZW9DbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdmlkZW9DbGljayhldmVudCkge1xuICAgICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBpc0FkZCA9IHRoaXMuZWxlbWVudHMucm9vdEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgnc2hvdy1jb250cm9sbGVyJyk7XG4gICAgICAgICAgICBpZiAoaXNBZGQpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5zaG93Q29udHJvbGxlclRpbWVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dDb250cm9sbGVyVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKF90aGlzNC5lbGVtZW50cy5yb290RWxlbWVudCwgJ3Nob3ctY29udHJvbGxlcicpO1xuICAgICAgICAgICAgICAgIH0sIDIwMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfdmlkZW9Db250cm9sTW91c2VvdmVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF92aWRlb0NvbnRyb2xNb3VzZW92ZXIoZXZlbnQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNob3dDb250cm9sbGVyVGltZXIpO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFkZENsYXNzKHRoaXMuZWxlbWVudHMucm9vdEVsZW1lbnQsICdzaG93LWNvbnRyb2xsZXInKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfdmlkZW9Db250cm9sQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3ZpZGVvQ29udHJvbENsaWNrKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2Nvbm5lY3RFbGVtZW50cycsXG5cblxuICAgICAgICAvKui/nuaOpeaJgOacieiKgueCuSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY29ubmVjdEVsZW1lbnRzKCkge1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudHMucm9vdEVsZW1lbnQsIHRoaXMuZWxlbWVudHMubWVkaWFTb3VyY2VFbGVtZW50KTtcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnRzLnJvb3RFbGVtZW50LCB0aGlzLmVsZW1lbnRzLm1lZGlhVG90YWxDb250cm9sRWxlbWVudCk7XG4gICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50cy5jbG9zZVZpZGVvUGxheWVyRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnRzLnJvb3RFbGVtZW50LCB0aGlzLmVsZW1lbnRzLmNsb3NlVmlkZW9QbGF5ZXJFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hcHBlbmRDaGlsZCh0aGlzLnBhcmVudE5vZGUsIHRoaXMuZWxlbWVudHMucm9vdEVsZW1lbnQpO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuaXNMb2FkQ29udHJvbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRNZWRpYVBsYXllckNvbnRyb2xsZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRzLmNsb3NlVmlkZW9QbGF5ZXJFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5jbG9zZVZpZGVvUGxheWVyRWxlbWVudC5vbmNsaWNrID0gdGhpcy5vbkNsb3NlQ2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5Yqg6L295aqS5L2T5pKt5pS+5o6n5Yi25ZmoKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2xvYWRNZWRpYVBsYXllckNvbnRyb2xsZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2xvYWRNZWRpYVBsYXllckNvbnRyb2xsZXIoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5pc0xvYWRDb250cm9sKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWVkaWFQbGF5ZXJDb250cm9sbGVyRHVtYikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhUGxheWVyQ29udHJvbGxlckR1bWIuZGVzdHJveVZpZXcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5tZWRpYVBsYXllckNvbnRyb2xsZXJEdW1iID0gbmV3IF9NZWRpYVBsYXllckNvbnRyb2xsZXIyLmRlZmF1bHQodGhpcy5lbGVtZW50cy5tZWRpYVRvdGFsQ29udHJvbEVsZW1lbnQsIHRoaXMuaW5zdGFuY2VJZCwgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLCB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbUluZm86IHRoaXMuc3RhdGUuc3RyZWFtSW5mbyxcbiAgICAgICAgICAgICAgICAgICAgdm9sdW1lOiB0aGlzLnN0YXRlLnZvbHVtZSxcbiAgICAgICAgICAgICAgICAgICAgbXV0ZVZvbHVtZTogdGhpcy5zdGF0ZS5tdXRlVm9sdW1lLFxuICAgICAgICAgICAgICAgICAgICBpc0Z1bGxTY3JlZW46IHRoaXMuc3RhdGUuaXNGdWxsU2NyZWVuLFxuICAgICAgICAgICAgICAgICAgICBpc1BsYXliYWNrOiB0aGlzLnByb3BzLmlzUGxheWJhY2ssXG4gICAgICAgICAgICAgICAgICAgIG15VXNlcklkOiB0aGlzLnByb3BzLm15VXNlcklkLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sUGVybWlzc2lvbnM6IHRoaXMucHJvcHMuY29udHJvbFBlcm1pc3Npb25zLFxuICAgICAgICAgICAgICAgICAgICBpc1ZpZGVvUGxheWVyOiB0aGlzLmlzVmlkZW9QbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2VDbGljazogdGhpcy5vbkNsb3NlQ2xpY2suYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgb25QbGF5T3JQYXVzZUNsaWNrOiB0aGlzLm9uUGxheU9yUGF1c2VDbGljay5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZVZvbHVtZTogdGhpcy5vbkNoYW5nZVZvbHVtZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBvblZvbHVtZU11dGVDbGljazogdGhpcy5vblZvbHVtZU11dGVDbGljay5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZVByb2dyZXNzOiB0aGlzLm9uQ2hhbmdlUHJvZ3Jlc3MuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgb25GdWxsU2NyZWVuQ2xpY2s6IHRoaXMub25GdWxsU2NyZWVuQ2xpY2suYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tZWRpYVBsYXllckNvbnRyb2xsZXJEdW1iKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWFQbGF5ZXJDb250cm9sbGVyRHVtYi5kZXN0cm95VmlldygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5bCG5pe26Ze05qC85byP5YyW5Li65YiGOuenkiovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19mb3JtYXRUaW1lJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9mb3JtYXRUaW1lKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBtaW51dGUgPSBwYXJzZUludChkYXRhIC8gNjApO1xuICAgICAgICAgICAgdmFyIHNlY29uZCA9IE1hdGgucm91bmQoZGF0YSAlIDYwKTtcbiAgICAgICAgICAgIGlmIChzZWNvbmQgPT09IDYwKSB7XG4gICAgICAgICAgICAgICAgbWludXRlICs9IDE7XG4gICAgICAgICAgICAgICAgc2Vjb25kID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJzZUludChtaW51dGUgLyAxMCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvL+aXtumXtOS4quS9jeaVsOi9rOWNgeS9jeaVsFxuICAgICAgICAgICAgICAgIG1pbnV0ZSA9ICcwJyArIG1pbnV0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJzZUludChzZWNvbmQgLyAxMCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvL+aXtumXtOS4quS9jeaVsOi9rOWNgeS9jeaVsFxuICAgICAgICAgICAgICAgIHNlY29uZCA9ICcwJyArIHNlY29uZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtaW51dGUgKyAnOicgKyBzZWNvbmQ7XG4gICAgICAgIH1cblxuICAgICAgICAvKuW8gOWni+WumuaXtuiuvue9rui/m+W6piovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19zdGFydFByb2dyZXNzVGltZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3N0YXJ0UHJvZ3Jlc3NUaW1lcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5pc1BsYXliYWNrKSB7XG4gICAgICAgICAgICAgICAgLy/lm57mlL7msqHmnInov5vluqZcbiAgICAgICAgICAgICAgICB0aGlzLl9zdG9wUHJvZ3Jlc3NUaW1lcigpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N0b3BQcm9ncmVzc1RpbWVyKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zdHJlYW1JbmZvKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3RyZWFtSW5mby5zdHJlYW1UeXBlID09PSAnbWVkaWEnICYmICh0aGlzLnN0YXRlLnN0cmVhbUluZm8udXNlcmlkID09IHRoaXMucHJvcHMubXlVc2VySWQgfHwgdGhpcy5wcm9wcy5teVJvbGUgPT0gMCB8fCB0aGlzLnByb3BzLm15Um9sZSA9PSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAvL+WmguaenOaYr+WqkuS9k+aWh+S7tuWFseS6q+S4lOaYr+WPkei1t+iAhS/ogIHluIgv5Yqp5pWZ5YiZ5LiN6K6+572u5a6a5pe25Zmo77yI55Sx5pyN5Yqh5Zmo57uZ6L+b5bqm5L+h5oGv77yJXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3BQcm9ncmVzc1RpbWVyKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzc1RpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXM1LnN0YXRlLnN0cmVhbUluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfc3RhdGUkc3RyZWFtSW5mbyA9IF90aGlzNS5zdGF0ZS5zdHJlYW1JbmZvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJpZCA9IF9zdGF0ZSRzdHJlYW1JbmZvLnVzZXJpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1UeXBlID0gX3N0YXRlJHN0cmVhbUluZm8uc3RyZWFtVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3RhdGUkc3RyZWFtSW5mbyRhdHQ3ID0gX3N0YXRlJHN0cmVhbUluZm8uYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzID0gX3N0YXRlJHN0cmVhbUluZm8kYXR0NyA9PT0gdW5kZWZpbmVkID8ge30gOiBfc3RhdGUkc3RyZWFtSW5mbyRhdHQ3O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0cmVhbVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtZWRpYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczUuc3RhdGUuc3RyZWFtSW5mby5zdHJlYW1UeXBlID09PSAnbWVkaWEnICYmIChfdGhpczUuc3RhdGUuc3RyZWFtSW5mby51c2VyaWQgPT0gX3RoaXM1LnByb3BzLm15VXNlcklkIHx8IF90aGlzNS5wcm9wcy5teVJvbGUgPT0gMCB8fCBfdGhpczUucHJvcHMubXlSb2xlID09IDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WmguaenOaYr+WqkuS9k+aWh+S7tuWFseS6q+S4lOaYr+WPkei1t+iAhS/ogIHluIgv5Yqp5pWZ5YiZ5LiN6K6+572u5a6a5pe25Zmo77yI55Sx5pyN5Yqh5Zmo57uZ6L+b5bqm5L+h5oGv77yJXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUuX3N0b3BQcm9ncmVzc1RpbWVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hdHRyaWJ1dGVzJHBvc2l0aW9uID0gYXR0cmlidXRlcy5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gX2F0dHJpYnV0ZXMkcG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IDAgOiBfYXR0cmlidXRlcyRwb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hdHRyaWJ1dGVzJGR1cmF0aW9uID0gYXR0cmlidXRlcy5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gX2F0dHJpYnV0ZXMkZHVyYXRpb24gPT09IHVuZGVmaW5lZCA/IDAgOiBfYXR0cmlidXRlcyRkdXJhdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiArPSBfdGhpczUucHJvZ3Jlc3NJbnRlcnZhbER1cmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPiBkdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNS5fc3RvcFByb2dyZXNzVGltZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUuX3VwZGF0ZVN0cmVhbUluZm9BdHRyaWJ1dGVzKCdwb3NpdGlvbicsIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZmlsZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyaWQgIT09IF90aGlzNS5wcm9wcy5teVVzZXJJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hdHRyaWJ1dGVzJHBvc2l0aW9uMiA9IGF0dHJpYnV0ZXMucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Bvc2l0aW9uMyA9IF9hdHRyaWJ1dGVzJHBvc2l0aW9uMiA9PT0gdW5kZWZpbmVkID8gMCA6IF9hdHRyaWJ1dGVzJHBvc2l0aW9uMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYXR0cmlidXRlcyRkdXJhdGlvbjIgPSBhdHRyaWJ1dGVzLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kdXJhdGlvbjIgPSBfYXR0cmlidXRlcyRkdXJhdGlvbjIgPT09IHVuZGVmaW5lZCA/IDAgOiBfYXR0cmlidXRlcyRkdXJhdGlvbjI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wb3NpdGlvbjMgKz0gX3RoaXM1LnByb2dyZXNzSW50ZXJ2YWxEdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcG9zaXRpb24zID4gX2R1cmF0aW9uMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wb3NpdGlvbjMgPSBfZHVyYXRpb24yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNS5fc3RvcFByb2dyZXNzVGltZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNS5fdXBkYXRlU3RyZWFtSW5mb0F0dHJpYnV0ZXMoJ3Bvc2l0aW9uJywgX3Bvc2l0aW9uMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUuX3VwZGF0ZUxvY2FsRmlsZVN0cmVhbUluZm9QbGF5ZXJQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM1Ll9zdG9wUHJvZ3Jlc3NUaW1lcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgdGhpcy5wcm9ncmVzc0ludGVydmFsRHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfc3RvcFByb2dyZXNzVGltZXInLFxuXG5cbiAgICAgICAgLyrlgZzmraLlrprml7borr7nva7ov5vluqYqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3N0b3BQcm9ncmVzc1RpbWVyKCkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnByb2dyZXNzVGltZXIpO1xuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc1RpbWVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3VwZGF0ZVN0cmVhbUluZm9BdHRyaWJ1dGVzJyxcblxuXG4gICAgICAgIC8q5pu05paw5rWB55qEYXR0cmlidXRlcyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlU3RyZWFtSW5mb0F0dHJpYnV0ZXMoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3RyZWFtSW5mbykge1xuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVBdHRyaWJ1dGVzID0ge307XG4gICAgICAgICAgICAgICAgdXBkYXRlQXR0cmlidXRlc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbUluZm86IE9iamVjdC5kZWVwQXNzaWduKHt9LCB0aGlzLnN0YXRlLnN0cmVhbUluZm8sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHVwZGF0ZUF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5pu05paw5pys5Zyw5aqS5L2T5paH5Lu255qE5pKt5pS+6L+b5bqmKOWPkei1t+iAheeahOi/m+W6pikqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfdXBkYXRlTG9jYWxGaWxlU3RyZWFtSW5mb1BsYXllclBvc2l0aW9uJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVMb2NhbEZpbGVTdHJlYW1JbmZvUGxheWVyUG9zaXRpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zdHJlYW1JbmZvICYmIHRoaXMuc3RhdGUuc3RyZWFtSW5mby5zdHJlYW1UeXBlID09PSAnZmlsZScpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zdHJlYW1JbmZvLnVzZXJpZCA9PT0gdGhpcy5wcm9wcy5teVVzZXJJZCAmJiB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UgJiYgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLmdldFJvb21EZWxlZ2F0ZSgpICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5nZXRSb29tRGVsZWdhdGUoKS5nZXROYXRpdmVJbnRlcmZhY2UoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkuZ2V0TmF0aXZlSW50ZXJmYWNlKCkuZ2V0TWVkaWFGaWxlUHJvZ3Jlc3MoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBwYXJhbSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGFyYW0pKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3BhcmFtJHBvc2l0aW9uID0gcGFyYW0ucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gX3BhcmFtJHBvc2l0aW9uID09PSB1bmRlZmluZWQgPyAwIDogX3BhcmFtJHBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcGFyYW0kZHVyYXRpb24gPSBwYXJhbS5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSBfcGFyYW0kZHVyYXRpb24gPT09IHVuZGVmaW5lZCA/IDAgOiBfcGFyYW0kZHVyYXRpb247XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPiBkdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczYuX3N0b3BQcm9ncmVzc1RpbWVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNi5fdXBkYXRlU3RyZWFtSW5mb0F0dHJpYnV0ZXMoJ3Bvc2l0aW9uJywgcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfVXRpbHMyLmRlZmF1bHQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmlLnlj5jlhajlsY/nirbmgIEqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfY2hhbmdlRnVsbFNjcmVlblN0YXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jaGFuZ2VGdWxsU2NyZWVuU3RhdGUoaXNGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBpc0Z1bGxTY3JlZW46IGlzRnVsbFNjcmVlblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldFZpZGVvRHVtYkVsZW1lbnRJZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWaWRlb0R1bWJFbGVtZW50SWQoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy52aWRlb0R1bWIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52aWRlb0R1bWIuZ2V0RWxlbWVudElkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zdHJlYW1JbmZvICYmICF0aGlzLnZpZGVvRHVtYikge1xuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9EdW1iID0gbmV3IF9WaWRlb0R1bWIyLmRlZmF1bHQodGhpcy5lbGVtZW50cy5tZWRpYVNvdXJjZUVsZW1lbnQsIHRoaXMuaW5zdGFuY2VJZCwgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLCB7XG4gICAgICAgICAgICAgICAgICAgIHZpZGVvRHVtYkVsZW1lbnRJZFByZWZpeDogdGhpcy5pbnN0YW5jZUlkLFxuICAgICAgICAgICAgICAgICAgICBzdHJlYW1JbmZvOiB0aGlzLnN0YXRlLnN0cmVhbUluZm8sXG4gICAgICAgICAgICAgICAgICAgIHZvbHVtZTogdGhpcy5zdGF0ZS52b2x1bWUsXG4gICAgICAgICAgICAgICAgICAgIG11dGVWb2x1bWU6IHRoaXMuc3RhdGUubXV0ZVZvbHVtZSxcbiAgICAgICAgICAgICAgICAgICAgbXlVc2VySWQ6IHRoaXMucHJvcHMubXlVc2VySWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc3RhdGUuc3RyZWFtSW5mbyAmJiB0aGlzLnZpZGVvRHVtYikge1xuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9EdW1iLmRlc3Ryb3lWaWV3KCk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWRlb0R1bWIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQudXBkYXRlU3R5bGUodGhpcy5lbGVtZW50cy5yb290RWxlbWVudCwge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICF0aGlzLnN0YXRlLnN0cmVhbUluZm8gPyAnbm9uZScgOiAnJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVGFsa01lZGlhUGxheWVyO1xufShfVGFsa2Nsb3VkUmVhY3QzLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUYWxrTWVkaWFQbGF5ZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRhbGtWaWRlb1BsYXllciA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9HbG9iYWwgPSByZXF1aXJlKCcuLi8uLi91dGlscy9HbG9iYWwnKTtcblxudmFyIF9HbG9iYWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfR2xvYmFsKTtcblxudmFyIF9VdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL1V0aWxzJyk7XG5cbnZhciBfVXRpbHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXRpbHMpO1xuXG52YXIgX01lZGlhUGxheWVyID0gcmVxdWlyZSgnLi9NZWRpYVBsYXllcicpO1xuXG52YXIgX01lZGlhUGxheWVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01lZGlhUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKipcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogVmlkZW9QbGF5ZXJWaWV357uE5Lu2KOinhumikeaSreaUvuWZqClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQG1vZHVsZSBWaWRlb1BsYXllclZpZXdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uICAg5o+Q5L6bIFZpZGVvUGxheWVy5pKt5pS+5Zmo5omA6ZyA57uE5Lu2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBhdXRob3Ig6YKx5bm/55SfXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBkYXRlIDIwMTgvMDUvMDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cblxudmFyIFRhbGtWaWRlb1BsYXllciA9IGZ1bmN0aW9uIChfVGFsa01lZGlhUGxheWVyKSB7XG4gICAgX2luaGVyaXRzKFRhbGtWaWRlb1BsYXllciwgX1RhbGtNZWRpYVBsYXllcik7XG5cbiAgICBmdW5jdGlvbiBUYWxrVmlkZW9QbGF5ZXIoKSB7XG4gICAgICAgIHZhciBwYXJlbnROb2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkb2N1bWVudC5ib2R5O1xuICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2RlZmF1bHQnO1xuICAgICAgICB2YXIgd2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSA9IGFyZ3VtZW50c1syXTtcbiAgICAgICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICAgICAgdmFyIGNvbmZpZ3JhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhbGtWaWRlb1BsYXllcik7XG5cbiAgICAgICAgdmFyIGlzVmlkZW9QbGF5ZXIgPSB0cnVlO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUYWxrVmlkZW9QbGF5ZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUYWxrVmlkZW9QbGF5ZXIpKS5jYWxsKHRoaXMsIHBhcmVudE5vZGUsIGluc3RhbmNlSWQsIHdoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UsIHByb3BzLCBjb25maWdyYXRpb24sIGlzVmlkZW9QbGF5ZXIpKTtcblxuICAgICAgICBfdGhpcy5jb25maWdyYXRpb24gPSBjb25maWdyYXRpb247XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVGFsa1ZpZGVvUGxheWVyLCBbe1xuICAgICAgICBrZXk6ICdyZXZlaXZlRXZlbnRSb29tVXNlcm1lZGlhb3JmaWxlc3RhdGVDaGFuZ2VkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJldmVpdmVFdmVudFJvb21Vc2VybWVkaWFvcmZpbGVzdGF0ZUNoYW5nZWQocmVjdkV2ZW50RGF0YSkge1xuICAgICAgICAgICAgdmFyIF9yZWN2RXZlbnREYXRhJG1lc3NhZyA9IHJlY3ZFdmVudERhdGEubWVzc2FnZSxcbiAgICAgICAgICAgICAgICB0eXBlID0gX3JlY3ZFdmVudERhdGEkbWVzc2FnLnR5cGUsXG4gICAgICAgICAgICAgICAgdXNlcklkID0gX3JlY3ZFdmVudERhdGEkbWVzc2FnLnVzZXJJZCxcbiAgICAgICAgICAgICAgICBfcmVjdkV2ZW50RGF0YSRtZXNzYWcyID0gX3JlY3ZFdmVudERhdGEkbWVzc2FnLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcyA9IF9yZWN2RXZlbnREYXRhJG1lc3NhZzIgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlY3ZFdmVudERhdGEkbWVzc2FnMixcbiAgICAgICAgICAgICAgICBwdWJsaXNoZWQgPSBfcmVjdkV2ZW50RGF0YSRtZXNzYWcucHVibGlzaGVkO1xuXG4gICAgICAgICAgICBpZiAoKHR5cGUgPT09ICdtZWRpYScgfHwgdHlwZSA9PT0gJ2ZpbGUnKSAmJiBhdHRyaWJ1dGVzLmF1ZGlvICYmIGF0dHJpYnV0ZXMudmlkZW8pIHtcbiAgICAgICAgICAgICAgICAvL+WPquaciW1wNOaTjeS9nFxuICAgICAgICAgICAgICAgIGlmIChwdWJsaXNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5pc1BsYXlWaWRlb2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtSW5mbzogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUluZm86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyaWQ6IHVzZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1UeXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvOiBhdHRyaWJ1dGVzLmF1ZGlvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvOiBhdHRyaWJ1dGVzLnZpZGVvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VySWQgPT09IHRoaXMucHJvcHMubXlVc2VySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnZmlsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5nZXRSb29tRGVsZWdhdGUoKSAmJiB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkuZ2V0TmF0aXZlSW50ZXJmYWNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLmdldFJvb21EZWxlZ2F0ZSgpLmdldE5hdGl2ZUludGVyZmFjZSgpLnBhdXNlU2hhcmVNZWRpYUZpbGUoZmFsc2UpOyAvL3BsYXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLmdldFJvb21EZWxlZ2F0ZSgpLmdldE5hdGl2ZUludGVyZmFjZSgpLnNlZWtNZWRpYUZpbGUoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXVzZSA9IGF0dHJpYnV0ZXMucGF1c2U7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVkaWFQbGF5ZXJOb3RpY2VBY3Rpb25Db21tYW5kKCdzdGFydCcsIHJlY3ZFdmVudERhdGEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZWRpYVBsYXllck5vdGljZUFjdGlvbkNvbW1hbmQocGF1c2UgPyAncGF1c2UnIDogJ3BsYXknLCByZWN2RXZlbnREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSAmJiB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UucmV2ZWl2ZUV2ZW50Um9vbVJlY2VpdmVBY3Rpb25Db21tYW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UucmV2ZWl2ZUV2ZW50Um9vbVJlY2VpdmVBY3Rpb25Db21tYW5kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAncm9vbS1yZWNlaXZlQWN0aW9uQ29tbWFuZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdjbG9zZUR5bmFtaWNQcHRXZWJQbGF5J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5pc1BsYXlWaWRlb2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUluZm86IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVkaWFQbGF5ZXJOb3RpY2VBY3Rpb25Db21tYW5kKCdlbmQnLCByZWN2RXZlbnREYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JldmVpdmVFdmVudFJvb21Vc2VybWVkaWFvcmZpbGVhdHRyaWJ1dGVzVXBkYXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJldmVpdmVFdmVudFJvb21Vc2VybWVkaWFvcmZpbGVhdHRyaWJ1dGVzVXBkYXRlKHJlY3ZFdmVudERhdGEpIHtcbiAgICAgICAgICAgIHZhciBfcmVjdkV2ZW50RGF0YSRtZXNzYWczID0gcmVjdkV2ZW50RGF0YS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIHR5cGUgPSBfcmVjdkV2ZW50RGF0YSRtZXNzYWczLnR5cGUsXG4gICAgICAgICAgICAgICAgX3JlY3ZFdmVudERhdGEkbWVzc2FnNCA9IF9yZWN2RXZlbnREYXRhJG1lc3NhZzMuYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzID0gX3JlY3ZFdmVudERhdGEkbWVzc2FnNCA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVjdkV2ZW50RGF0YSRtZXNzYWc0LFxuICAgICAgICAgICAgICAgIF9yZWN2RXZlbnREYXRhJG1lc3NhZzUgPSBfcmVjdkV2ZW50RGF0YSRtZXNzYWczLnVwZGF0ZUF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgdXBkYXRlQXR0cmlidXRlcyA9IF9yZWN2RXZlbnREYXRhJG1lc3NhZzUgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlY3ZFdmVudERhdGEkbWVzc2FnNTtcblxuICAgICAgICAgICAgaWYgKCh0eXBlID09PSAnbWVkaWEnIHx8IHR5cGUgPT09ICdmaWxlJykgJiYgYXR0cmlidXRlcy5hdWRpbyAmJiBhdHRyaWJ1dGVzLnZpZGVvKSB7XG4gICAgICAgICAgICAgICAgLy/lj6rmnIltcDTmk43kvZxcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zdHJlYW1JbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtSW5mbzogT2JqZWN0LmRlZXBBc3NpZ24oe30sIHRoaXMuc3RhdGUuc3RyZWFtSW5mbywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHVwZGF0ZUF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlQXR0cmlidXRlcy5wYXVzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZWRpYVBsYXllck5vdGljZUFjdGlvbkNvbW1hbmQodXBkYXRlQXR0cmlidXRlcy5wYXVzZSA/ICdwYXVzZScgOiAncGxheScsIHJlY3ZFdmVudERhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZWNlaXZlRXZlbnRSb29tRXJyb3JOb3RpY2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVjZWl2ZUV2ZW50Um9vbUVycm9yTm90aWNlKHJlY3ZFdmVudERhdGEpIHtcbiAgICAgICAgICAgIHZhciBlcnJvckNvZGUgPSByZWN2RXZlbnREYXRhLmVycm9yQ29kZTtcblxuICAgICAgICAgICAgc3dpdGNoIChlcnJvckNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFRLLkVSUk9SX05PVElDRS5TSEFSRV9NRURJQV9GQUlMVVJFOiAvL+WFseS6q+WqkuS9k+aWh+S7tuWksei0pVxuICAgICAgICAgICAgICAgIGNhc2UgVEsuRVJST1JfTk9USUNFLlNIQVJFX0ZJTEVfRkFJTFVSRTpcbiAgICAgICAgICAgICAgICAgICAgLy/lhbHkuqvmnKzlnLDlqpLkvZPmlofku7blpLHotKVcbiAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5pc1BsYXlWaWRlb2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUluZm86IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVkaWFQbGF5ZXJOb3RpY2VBY3Rpb25Db21tYW5kKCdzdGFydFNoYXJlTWVkaWFGYWlsJywgcmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVEsuRVJST1JfTk9USUNFLlNUT1BfTUVESUFfRkFJTFVSRTogLy/lgZzmraLlhbHkuqvlqpLkvZPmlofku7blpLHotKVcbiAgICAgICAgICAgICAgICBjYXNlIFRLLkVSUk9SX05PVElDRS5TVE9QX0ZJTEVfRkFJTFVSRTpcbiAgICAgICAgICAgICAgICAgICAgLy/lgZzmraLlhbHkuqvmnKzlnLDlqpLkvZPmlofku7blpLHotKVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVkaWFQbGF5ZXJOb3RpY2VBY3Rpb25Db21tYW5kKCdzdG9wU2hhcmVNZWRpYUZhaWwnLCByZWN2RXZlbnREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUSy5FUlJPUl9OT1RJQ0UuU1VCU0NSSUJFX01FRElBX0ZBSUxVUkU6IC8v6K6i6ZiF5aqS5L2T5paH5Lu25aSx6LSlXG4gICAgICAgICAgICAgICAgY2FzZSBUSy5FUlJPUl9OT1RJQ0UuU1VCU0NSSUJFX0ZJTEVfRkFJTFVSRTpcbiAgICAgICAgICAgICAgICAgICAgLy/orqLpmIXmnKzlnLDlqpLkvZPmlofku7blpLHotKVcbiAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5pc1BsYXlWaWRlb2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUluZm86IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVkaWFQbGF5ZXJOb3RpY2VBY3Rpb25Db21tYW5kKCdzdWJzY3JpYmVTaGFyZU1lZGlhRmFpbCcsIHJlY3ZFdmVudERhdGEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFRLLkVSUk9SX05PVElDRS5VTlNVQlNDUklCRV9NRURJQV9GQUlMVVJFOiAvL+WPlua2iOiuoumYheWqkuS9k+aWh+S7tuWksei0pVxuICAgICAgICAgICAgICAgIGNhc2UgVEsuRVJST1JfTk9USUNFLlVOU1VCU0NSSUJFX0ZJTEVfRkFJTFVSRTpcbiAgICAgICAgICAgICAgICAgICAgLy/lj5bmtojorqLpmIXmnKzlnLDlqpLkvZPmlofku7blpLHotKVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVkaWFQbGF5ZXJOb3RpY2VBY3Rpb25Db21tYW5kKCd1bnN1YnNjcmliZVNoYXJlTWVkaWFGYWlsJywgcmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZW5kTWVkaWFQbGF5ZXJOb3RpY2VBY3Rpb25Db21tYW5kJyxcblxuXG4gICAgICAgIC8q5Y+R6YCB5Yqo5L2c5oyH5LukXHJcbiAgICAgICAgICogWFhYIOatpOWkhOebtOaOpeiOt+WPluS6huS4u+eZveadv+WunuS+i+S4lOebtOaOpeaTjeS9nOS6huS4u+eZveadv+eahOaWueazlSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZW5kTWVkaWFQbGF5ZXJOb3RpY2VBY3Rpb25Db21tYW5kKG5vdGljZVR5cGUsIHJlY3ZFdmVudERhdGEpIHtcbiAgICAgICAgICAgIHZhciBfcmVjdkV2ZW50RGF0YSRtZXNzYWc2ID0gcmVjdkV2ZW50RGF0YS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIHR5cGUgPSBfcmVjdkV2ZW50RGF0YSRtZXNzYWc2LnR5cGUsXG4gICAgICAgICAgICAgICAgdXNlcklkID0gX3JlY3ZFdmVudERhdGEkbWVzc2FnNi51c2VySWQsXG4gICAgICAgICAgICAgICAgX3JlY3ZFdmVudERhdGEkbWVzc2FnNyA9IF9yZWN2RXZlbnREYXRhJG1lc3NhZzYuYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzID0gX3JlY3ZFdmVudERhdGEkbWVzc2FnNyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVjdkV2ZW50RGF0YSRtZXNzYWc3O1xuXG4gICAgICAgICAgICBpZiAoKHR5cGUgPT09ICdtZWRpYScgfHwgdHlwZSA9PT0gJ2ZpbGUnKSAmJiBhdHRyaWJ1dGVzLmF1ZGlvICYmIGF0dHJpYnV0ZXMudmlkZW8pIHtcbiAgICAgICAgICAgICAgICAvL+WPquaciW1wNOaTjeS9nFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UgJiYgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLndoaXRlYm9hcmRWaWV3TWFwICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS53aGl0ZWJvYXJkVmlld01hcC5oYXMoJ2RlZmF1bHQnKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2Uud2hpdGVib2FyZFZpZXdNYXAuZ2V0KCdkZWZhdWx0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkVmlldyAmJiB3aGl0ZWJvYXJkVmlldy5zZW5kQWN0aW9uQ29tbWFuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9ICdtZWRpYVBsYXllck5vdGljZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZpZGVvUGxheWVyU3RyZWFtSW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJUeXBlOiAndmlkZW9QbGF5ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJpZDogdXNlcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbVR5cGU6IHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW86IGF0dHJpYnV0ZXMuYXVkaW8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW86IGF0dHJpYnV0ZXMudmlkZW8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvUGxheWVyU3RyZWFtSW5mby5pc0R5bmFtaWNQcHRWaWRlbyA9IHZpZGVvUGxheWVyU3RyZWFtSW5mby5hdHRyaWJ1dGVzLnNvdXJjZSA9PT0gJ2R5bmFtaWNQUFQnIHx8IHZpZGVvUGxheWVyU3RyZWFtSW5mby5wbGF5ZXJUeXBlID09PSAndmlkZW9QbGF5ZXInICYmIHZpZGVvUGxheWVyU3RyZWFtSW5mby5hdHRyaWJ1dGVzLmZpbGVuYW1lID09PSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9IE9iamVjdC5kZWVwQXNzaWduKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBub3RpY2VUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVpZDogdmlkZW9QbGF5ZXJTdHJlYW1JbmZvLmF0dHJpYnV0ZXMuZmlsZWlkXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB2aWRlb1BsYXllclN0cmVhbUluZm8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZFZpZXcuc2VuZEFjdGlvbkNvbW1hbmQoYWN0aW9uLCBjbWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9VdGlsczIuZGVmYXVsdC5pc0Z1bmN0aW9uKHdoaXRlYm9hcmRWaWV3LmZvcmNlVmlld1N0YXRlVXBkYXRlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRWaWV3LmZvcmNlVmlld1N0YXRlVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVGFsa1ZpZGVvUGxheWVyO1xufShfTWVkaWFQbGF5ZXIyLmRlZmF1bHQpO1xuXG53aW5kb3cuVGFsa1ZpZGVvUGxheWVyID0gVGFsa1ZpZGVvUGxheWVyO1xuZXhwb3J0cy5UYWxrVmlkZW9QbGF5ZXIgPSBUYWxrVmlkZW9QbGF5ZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBUYWxrVmlkZW9QbGF5ZXI7IiwiLyog55m95p2/5qCH5rOo5bel5YW35p2hXHJcbiAqIEBtb2R1bGUgV2hpdGVib2FyZFRvb2xCYXJcclxuICogQGRlc2NyaXB0aW9uICBzZGvnmb3mnb/moIfms6jlt6XlhbfmnaFcclxuICogQGF1dGhvciDpgrHlub/nlJ9cclxuICogQGRhdGUgMjAxOC0wNS0wNlxyXG4gICogKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRhbGtXaGl0ZWJvYXJkVG9vbGJhciA9IHVuZGVmaW5lZDtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfVGFsa2Nsb3VkUmVhY3QyID0gcmVxdWlyZSgnLi4vY29tcG9uZW50cy9UYWxrY2xvdWRSZWFjdCcpO1xuXG52YXIgX1RhbGtjbG91ZFJlYWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhbGtjbG91ZFJlYWN0Mik7XG5cbnZhciBfRG9tVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9Eb21VdGlscycpO1xuXG52YXIgX0RvbVV0aWxzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RvbVV0aWxzKTtcblxudmFyIF9VdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL1V0aWxzJyk7XG5cbnZhciBfVXRpbHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXRpbHMpO1xuXG52YXIgX0xhbmd1YWdlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvTGFuZ3VhZ2UnKTtcblxudmFyIF9MYW5ndWFnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MYW5ndWFnZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLy8gbGV0IGN1cnNvclN0eWxlO1xuXG52YXIgVGFsa1doaXRlYm9hcmRUb29sYmFyID0gZnVuY3Rpb24gKF9UYWxrY2xvdWRSZWFjdCkge1xuICAgIF9pbmhlcml0cyhUYWxrV2hpdGVib2FyZFRvb2xiYXIsIF9UYWxrY2xvdWRSZWFjdCk7XG5cbiAgICBmdW5jdGlvbiBUYWxrV2hpdGVib2FyZFRvb2xiYXIoKSB7XG4gICAgICAgIHZhciBwYXJlbnROb2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkb2N1bWVudC5ib2R5O1xuICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2RlZmF1bHQnO1xuICAgICAgICB2YXIgd2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSA9IGFyZ3VtZW50c1syXTtcbiAgICAgICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICAgICAgdmFyIGNvbmZpZ3JhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhbGtXaGl0ZWJvYXJkVG9vbGJhcik7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRhbGtXaGl0ZWJvYXJkVG9vbGJhci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhbGtXaGl0ZWJvYXJkVG9vbGJhcikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcbiAgICAgICAgX3RoaXMuaW5zdGFuY2VJZCA9IGluc3RhbmNlSWQ7XG4gICAgICAgIF90aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UgPSB3aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlO1xuICAgICAgICBfdGhpcy5jb25maWdyYXRpb24gPSBjb25maWdyYXRpb247XG4gICAgICAgIF90aGlzLmVsZW1lbnRzID0ge307XG4gICAgICAgIF90aGlzLndoaXRlYm9hcmRUb29sYmFyVGFsa0RyYWcgPSB1bmRlZmluZWQ7IC8v5ouW5ou95a6e5L6LXG4gICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdGVtcERpc2FibGVkRHJhZzogZmFsc2UsIC8v5piv5ZCm5Li05pe256aB55So5ouW5ou9XG4gICAgICAgICAgICB2aWV3U3RhdGU6IHtcbiAgICAgICAgICAgICAgICB0b29sOiB7fSwgLy/nmb3mnb/moIfms6jlt6Xlhbfkv6Hmga9cbiAgICAgICAgICAgICAgICBhY3Rpb246IHt9LCAvL+aSpOmUgOOAgeaBouWkjeOAgea4heepuuS/oeaBr1xuICAgICAgICAgICAgICAgIHpvb206IHt9LCAvL+aWueazlee8qeWwj+S/oeaBr1xuICAgICAgICAgICAgICAgIHBhZ2U6IHt9LCAvL+e/u+mhteS/oeaBr1xuICAgICAgICAgICAgICAgIGRvY3VtZW50VHlwZTogJ2dlbmVyYWxEb2N1bWVudCcsIC8v5omT5byA55qE5paH5Lu257G75Yir77yMZ2VuZXJhbERvY3VtZW5077yI5pmu6YCa5paH5qGj77yJ44CBZHluYW1pY1BQVO+8iOWKqOaAgVBQVO+8ieOAgWg1RG9jdW1lbnQoSDXor77ku7YpXG4gICAgICAgICAgICAgICAgZmlsZWlkOiAwLCAvL+aJk+W8gOeahOaWh+aho+eahOaWh+S7tmlkXG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdFZvbHVtZTogMTAwLCAvL+WKqOaAgVBQVOaWh+aho+eahOmfs+mHj1xuICAgICAgICAgICAgICAgIGZ1bGxTY3JlZW46IGZhbHNlLCAvL+aYr+WQpuWFqOWxj1xuICAgICAgICAgICAgICAgIHJlbWFyazogZmFsc2UsIC8v5piv5ZCm5byA5ZCv5paH5qGj5aSH5rOoXG4gICAgICAgICAgICAgICAgb3RoZXI6IHsgLy/lhbblroPkv6Hmga9cbiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeUNvbG9yOiBfdGhpcy5jb25maWdyYXRpb24ucHJpbWFyeUNvbG9yLCAvL+eUu+eslOminOiJsiAs6buY6K6kICMwMDAwMDBcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5Q29sb3I6IF90aGlzLmNvbmZpZ3JhdGlvbi5zZWNvbmRhcnlDb2xvciwgLy/loavlhYXpopzoibIgLOm7mOiupCAjZmZmZmZmXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogX3RoaXMuY29uZmlncmF0aW9uLmJhY2tncm91bmRDb2xvciwgLy/og4zmma/popzoibIgLOm7mOiupCAjZmZmZmZmXG4gICAgICAgICAgICAgICAgICAgIHBlbmNpbFdpZHRoOiBfdGhpcy5jb25maWdyYXRpb24ucGVuY2lsV2lkdGgsIC8v55S756yU5aSn5bCPICwg6buY6K6kNVxuICAgICAgICAgICAgICAgICAgICBzaGFwZVdpZHRoOiBfdGhpcy5jb25maWdyYXRpb24uc2hhcGVXaWR0aCwgLy/lm77lvaLnlLvnrJTlpKflsI8gLCDpu5jorqQ1XG4gICAgICAgICAgICAgICAgICAgIGVyYXNlcldpZHRoOiBfdGhpcy5jb25maWdyYXRpb24uZXJhc2VyV2lkdGgsIC8v5qmh55qu5aSn5bCPIO+8jCDpu5jorqQxNVxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogX3RoaXMuY29uZmlncmF0aW9uLmZvbnRTaXplLCAvL+Wtl+S9k+Wkp+WwjyDvvIwg6buY6K6kMThcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogX3RoaXMuY29uZmlncmF0aW9uLmZvbnRGYW1pbHkgLy/kvb/nlKjnmoTlrZfkvZMg77yM6buY6K6kXCLlvq7ova/pm4Xpu5FcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1c2VDb2xvcjogJydcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuZmlsZVR5cGVNYXJrID0gJ2dlbmVyYWwnOyAvL2dlbmVyYWwg44CBIGR5bmFtaWNQUFQg44CBIGg1ZG9jdW1lbnRcbiAgICAgICAgX3RoaXMuX2NyZWF0ZUNvbm5lY3RFbGVtZW50cygpO1xuICAgICAgICBfdGhpcy5fYWRkRXZlbnQoKTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUxhbmd1YWdlKCk7XG4gICAgICAgIF90aGlzLnJlbmRlcigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFRhbGtXaGl0ZWJvYXJkVG9vbGJhciwgW3tcbiAgICAgICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlU3RhdGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlU3RhdGUocHJldlN0YXRlKSB7XG4gICAgICAgICAgICBpZiAocHJldlN0YXRlLnRlbXBEaXNhYmxlZERyYWcgIT09IHRoaXMuc3RhdGUudGVtcERpc2FibGVkRHJhZykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRUb29sYmFyVGFsa0RyYWcgJiYgX3R5cGVvZih0aGlzLndoaXRlYm9hcmRUb29sYmFyVGFsa0RyYWcudXBkYXRlRGlzYWJsZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFRvb2xiYXJUYWxrRHJhZy51cGRhdGVEaXNhYmxlZCh0aGlzLnN0YXRlLnRlbXBEaXNhYmxlZERyYWcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcmV2U3RhdGUudmlld1N0YXRlLm90aGVyLnBlbmNpbFdpZHRoICE9PSB0aGlzLnN0YXRlLnZpZXdTdGF0ZS5vdGhlci5wZW5jaWxXaWR0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldFBlbmNpbFdpZHRoVG9TbGlkZXIoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByZXZTdGF0ZS52aWV3U3RhdGUub3RoZXIuZXJhc2VyV2lkdGggIT09IHRoaXMuc3RhdGUudmlld1N0YXRlLm90aGVyLmVyYXNlcldpZHRoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0RXJhc2VyV2lkdGhUb1NsaWRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGVQcm9wcycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVQcm9wcyhwcmV2UHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChwcmV2UHJvcHMubGFuZ3VhZ2VUeXBlICE9PSB0aGlzLnByb3BzLmxhbmd1YWdlVHlwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUxhbmd1YWdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJldlByb3BzLmlzRHJhZyAhPT0gdGhpcy5wcm9wcy5pc0RyYWcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5pc0RyYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkVGFsa0RyYWcoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVG9vbGJhclRhbGtEcmFnICYmIHR5cGVvZiB0aGlzLndoaXRlYm9hcmRUb29sYmFyVGFsa0RyYWcuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZWJvYXJkVG9vbGJhclRhbGtEcmFnLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFRvb2xiYXJUYWxrRHJhZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghX1V0aWxzMi5kZWZhdWx0LmRlZXBDb21wYXJlSnNvbihwcmV2UHJvcHMuaW5pdERyYWdQb3NpdGlvbiwgdGhpcy5wcm9wcy5pbml0RHJhZ1Bvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRUb29sYmFyVGFsa0RyYWcgJiYgdHlwZW9mIHRoaXMud2hpdGVib2FyZFRvb2xiYXJUYWxrRHJhZy5zZXRQb3NpdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZiA9IHRoaXMucHJvcHMuaW5pdERyYWdQb3NpdGlvbiB8fCB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZWYkbGVmdCA9IF9yZWYubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBfcmVmJGxlZnQgPT09IHVuZGVmaW5lZCA/IDAgOiBfcmVmJGxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVmJHRvcCA9IF9yZWYudG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wID0gX3JlZiR0b3AgPT09IHVuZGVmaW5lZCA/IDAgOiBfcmVmJHRvcDtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRUb29sYmFyVGFsa0RyYWcuc2V0UG9zaXRpb24obGVmdCwgdG9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRzICYmICghX1V0aWxzMi5kZWZhdWx0LmRlZXBDb21wYXJlSnNvbihwcmV2UHJvcHMubG9hZFdoaXRlYm9hcmRUb29scywgdGhpcy5wcm9wcy5sb2FkV2hpdGVib2FyZFRvb2xzKSB8fCBwcmV2UHJvcHMuaXNNb2JpbGUgIT09IHRoaXMucHJvcHMuaXNNb2JpbGUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9yZWYyID0gdGhpcy5wcm9wcy5sb2FkV2hpdGVib2FyZFRvb2xzIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBtb3VzZSA9IF9yZWYyLm1vdXNlLFxuICAgICAgICAgICAgICAgICAgICBsYXNlciA9IF9yZWYyLmxhc2VyLFxuICAgICAgICAgICAgICAgICAgICBwZW4gPSBfcmVmMi5wZW4sXG4gICAgICAgICAgICAgICAgICAgIHRleHQgPSBfcmVmMi50ZXh0LFxuICAgICAgICAgICAgICAgICAgICBzaGFwZSA9IF9yZWYyLnNoYXBlLFxuICAgICAgICAgICAgICAgICAgICBlcmFzZXIgPSBfcmVmMi5lcmFzZXIsXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyID0gX3JlZjIuY2xlYXIsXG4gICAgICAgICAgICAgICAgICAgIHVuZG8gPSBfcmVmMi51bmRvLFxuICAgICAgICAgICAgICAgICAgICByZWRvID0gX3JlZjIucmVkbyxcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZyA9IF9yZWYyLnNldHRpbmc7XG5cbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQudXBkYXRlU3R5bGUodGhpcy5lbGVtZW50cy50b29sX21vdXNlLCB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICFtb3VzZSA/ICdub25lJyA6ICcnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnVwZGF0ZVN0eWxlKHRoaXMuZWxlbWVudHMudG9vbF9sYXNlciwge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAhbGFzZXIgfHwgdGhpcy5wcm9wcy5pc01vYmlsZSA/ICdub25lJyA6ICcnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnVwZGF0ZVN0eWxlKHRoaXMuZWxlbWVudHMucGVuTGlzdCwge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAhcGVuID8gJ25vbmUnIDogJydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQudXBkYXRlU3R5bGUodGhpcy5lbGVtZW50cy50b29sX3RleHQsIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogIXRleHQgPyAnbm9uZScgOiAnJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC51cGRhdGVTdHlsZSh0aGlzLmVsZW1lbnRzLnNoYXBlTGlzdCwge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAhc2hhcGUgPyAnbm9uZScgOiAnJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC51cGRhdGVTdHlsZSh0aGlzLmVsZW1lbnRzLnRvb2xfZXJhc2VyLCB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICFlcmFzZXIgPyAnbm9uZScgOiAnJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC51cGRhdGVTdHlsZSh0aGlzLmVsZW1lbnRzLmFjdGlvbl9jbGVhciwge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAhY2xlYXIgPyAnbm9uZScgOiAnJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC51cGRhdGVTdHlsZSh0aGlzLmVsZW1lbnRzLmFjdGlvbl91bmRvLCB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICF1bmRvID8gJ25vbmUnIDogJydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQudXBkYXRlU3R5bGUodGhpcy5lbGVtZW50cy5hY3Rpb25fcmVkbywge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAhcmVkbyA/ICdub25lJyA6ICcnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnVwZGF0ZVN0eWxlKHRoaXMuZWxlbWVudHMuc2V0dGluZ0xpc3QsIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogIXNldHRpbmcgPyAnbm9uZScgOiAnJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocHJldlByb3BzLnBlbmNpbFdpZHRoU2NhbGUgIT09IHRoaXMucHJvcHMucGVuY2lsV2lkdGhTY2FsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldFBlbmNpbFdpZHRoVG9TbGlkZXIoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByZXZQcm9wcy5lcmFzZXJXaWR0aFNjYWxlICE9PSB0aGlzLnByb3BzLmVyYXNlcldpZHRoU2NhbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRFcmFzZXJXaWR0aFRvU2xpZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NoYW5nZVBhcmVudE5vZGUnLFxuXG5cbiAgICAgICAgLyrmlLnlj5jniLbkurLoioLngrkqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlUGFyZW50Tm9kZShwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBpZiAocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnRzLndoaXRlYm9hcmRUb29sYmFyVmlld1Jvb3RFbGVtZW50LCB0aGlzLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZSA9IHBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMucGFyZW50Tm9kZSwgdGhpcy5lbGVtZW50cy53aGl0ZWJvYXJkVG9vbGJhclZpZXdSb290RWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKumUgOavgeinhuWbviovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rlc3Ryb3lWaWV3JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lWaWV3KCkge1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudHMud2hpdGVib2FyZFRvb2xiYXJWaWV3Um9vdEVsZW1lbnQsIHRoaXMucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5lbGVtZW50cykge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5lbGVtZW50c1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmjqXmlLbliqjkvZzmjIfku6QqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZWNlaXZlQWN0aW9uQ29tbWFuZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWNlaXZlQWN0aW9uQ29tbWFuZChhY3Rpb24sIGNtZCkge1xuICAgICAgICAgICAgaWYgKCh0eXBlb2YgY21kID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjbWQpKSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoY21kKSkge1xuICAgICAgICAgICAgICAgIGNtZCA9IE9iamVjdC5kZWVwQXNzaWduKHt9LCBjbWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTC5Mb2dnZXIuZGVidWcoJ1tXaGl0ZWJvYXJkVG9vbGJhcl1yZWNlaXZlIHdoaXRlYm9hcmQgdmlldyBhY3Rpb24gY29tbWFuZO+8iGFjdGlvbixjbWTvvIk6JywgYWN0aW9uLCBjbWQpO1xuICAgICAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdjbG9zZUFsbFNlbGVjdEJveCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nsb3NlTGlzdCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd2aWV3U3RhdGVVcGRhdGUnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdTdGF0ZTogY21kLnZpZXdTdGF0ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKum8oOagh+emu+W8gOeZveadv+agh+azqOW3peWFt+WuueWZqCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3doaXRlYm9hcmRUb29sYmFyVmlld1Jvb3RNb3VzZUxlYXZlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdoaXRlYm9hcmRUb29sYmFyVmlld1Jvb3RNb3VzZUxlYXZlKGV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9jbG9zZUxpc3QoKTtcbiAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvKuWIl+ihqOeahOaJk+W8gOWSjOWFs+mXrSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2xpc3RPcGVuT3JDbG9zZU9uQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdE9wZW5PckNsb3NlT25DbGljayhlbGVtZW50S2V5LCBldmVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbZWxlbWVudEtleV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jbG9zZUxpc3QoZWxlbWVudEtleSk7XG4gICAgICAgICAgICAgICAgaWYgKF9Eb21VdGlsczIuZGVmYXVsdC5oYXNDbGFzcyh0aGlzLmVsZW1lbnRzW2VsZW1lbnRLZXldLCAnb3BlbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzW2VsZW1lbnRLZXldLCAnb3BlbicpO1xuICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50c1tlbGVtZW50S2V5XSwgJ2xlZnQtc2hvdy1saXN0Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFkZENsYXNzKHRoaXMuZWxlbWVudHNbZWxlbWVudEtleV0sICdvcGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b29sS2V5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdFBhcmVtdEVsZW1lbnRSZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGVsZW1lbnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Blbkxpc3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xLZXkgPSB0aGlzLmVsZW1lbnRzLnBlbkxpc3QuZ2V0QXR0cmlidXRlKCdkYXRhLWN1cnJlbnQtcGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvb2xLZXkgJiYgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS51c2VXaGl0ZWJvYXJkVG9vbCh0b29sS2V5LCB0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0UGFyZW10RWxlbWVudFJlY3QgPSB0aGlzLl9nZXRSZWN0KHRoaXMuZWxlbWVudHMucGVuTGlzdEV4dGVuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzaGFwZUxpc3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xLZXkgPSB0aGlzLmVsZW1lbnRzLnNoYXBlTGlzdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY3VycmVudC1zaGFwZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b29sS2V5ICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UudXNlV2hpdGVib2FyZFRvb2wodG9vbEtleSwgdGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdFBhcmVtdEVsZW1lbnRSZWN0ID0gdGhpcy5fZ2V0UmVjdCh0aGlzLmVsZW1lbnRzLnNoYXBlTGlzdEV4dGVuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzZXR0aW5nTGlzdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdFBhcmVtdEVsZW1lbnRSZWN0ID0gdGhpcy5fZ2V0UmVjdCh0aGlzLmVsZW1lbnRzLnNldHRpbmdMaXN0RXh0ZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdFBhcmVtdEVsZW1lbnRSZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFJlY3QgPSB0aGlzLl9nZXRSZWN0KHRoaXMuZWxlbWVudHMud2hpdGVib2FyZFRvb2xiYXJWaWV3Um9vdEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVtdEVsZW1lbnRSZWN0ID0gdGhpcy5fZ2V0UmVjdCh0aGlzLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRSZWN0LmxlZnQgLSBwYXJlbXRFbGVtZW50UmVjdC5sZWZ0ID4gcGFyZW10RWxlbWVudFJlY3Qud2lkdGggLSAoZWxlbWVudFJlY3Qud2lkdGggKyBsaXN0UGFyZW10RWxlbWVudFJlY3Qud2lkdGggKyA1KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzW2VsZW1lbnRLZXldLCAnbGVmdC1zaG93LWxpc3QnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHNbZWxlbWVudEtleV0sICdsZWZ0LXNob3ctbGlzdCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q6byg5qCH56a75byA5YiX6KGo6aG55YWz6ZetKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbGlzdE9wZW5PckNsb3NlT25Nb3VzZUxlYXZlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RPcGVuT3JDbG9zZU9uTW91c2VMZWF2ZShlbGVtZW50S2V5LCBldmVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbZWxlbWVudEtleV0pIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50c1tlbGVtZW50S2V5XSwgJ29wZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvKuS9v+eUqOagh+azqOW3peWFtyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VzZVdoaXRlYm9hcmRUb29sT25DbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1c2VXaGl0ZWJvYXJkVG9vbE9uQ2xpY2sodG9vbEtleSwgZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UgJiYgdG9vbEtleSkge1xuICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS51c2VXaGl0ZWJvYXJkVG9vbCh0b29sS2V5LCB0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5omn6KGM55m95p2/55qE5Yqo5L2cKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZXhlY3V0ZVdoaXRlYm9hcmRBY3Rpb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXhlY3V0ZVdoaXRlYm9hcmRBY3Rpb24oYWN0aW9uS2V5LCBldmVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5leGVjdXRlV2hpdGVib2FyZEFjdGlvbihhY3Rpb25LZXksIHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjaGFuZ2VDb2xvck9uQ2xpY2snLFxuXG5cbiAgICAgICAgLyrmlLnlj5jnlLvnrJTpopzoibIqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlQ29sb3JPbkNsaWNrKGNvbG9yVmFsdWUsIGV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VXaGl0ZUJvYXJkQ29uZmlncmF0aW9uKCdwcmltYXJ5Q29sb3InLCBjb2xvclZhbHVlKTtcbiAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvKuaUueWPmOWtl+S9kyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NoYW5nZUZvbnRGYW1pbHlPbkNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZUZvbnRGYW1pbHlPbkNsaWNrKGZvbnRGYW1pbHlWYWx1ZSwgZm9udEZhbWlseUtleSwgZXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZVdoaXRlQm9hcmRDb25maWdyYXRpb24oJ2ZvbnRGYW1pbHknLCBmb250RmFtaWx5VmFsdWUpO1xuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5pS55Y+Y5a2X5Y+3Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2hhbmdlRm9udFNpemVPbkNsaWNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZUZvbnRTaXplT25DbGljayhmb250U2l6ZSwgZXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZVdoaXRlQm9hcmRDb25maWdyYXRpb24oJ2ZvbnRTaXplJywgZm9udFNpemUpO1xuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5Y+R6YCB5Yqo5L2c5oyH5LukXHJcbiAgICAgICAgICogWFhYIOatpOWkhOebtOaOpeiOt+WPluS6huS4u+eZveadv+WunuS+i+S4lOebtOaOpeaTjeS9nOS6huS4u+eZveadv+eahOaWueazlSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NlbmRBY3Rpb25Db21tYW5kJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbmRBY3Rpb25Db21tYW5kKGFjdGlvbiwgY21kKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS53aGl0ZWJvYXJkVmlld01hcCAmJiB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2Uud2hpdGVib2FyZFZpZXdNYXAuaGFzKHRoaXMuaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2hpdGVib2FyZFZpZXcgPSB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2Uud2hpdGVib2FyZFZpZXdNYXAuZ2V0KHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgaWYgKHdoaXRlYm9hcmRWaWV3ICYmIHdoaXRlYm9hcmRWaWV3LnNlbmRBY3Rpb25Db21tYW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRWaWV3LnNlbmRBY3Rpb25Db21tYW5kKGFjdGlvbiwgY21kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Jlc2l6ZScsXG5cblxuICAgICAgICAvKumHjeaWsOiuoeeul+Wkp+WwjyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVG9vbGJhclRhbGtEcmFnICYmIF9VdGlsczIuZGVmYXVsdC5pc0Z1bmN0aW9uKHRoaXMud2hpdGVib2FyZFRvb2xiYXJUYWxrRHJhZy5yZXNpemVDYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRUb29sYmFyVGFsa0RyYWcucmVzaXplQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q6I635Y+W6IqC54K555qE5L2N572u5L+h5oGvKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2dldFJlY3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFJlY3QoZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdmFyIGNsaWVudFRvcCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRUb3A7XG4gICAgICAgICAgICB2YXIgY2xpZW50TGVmdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRMZWZ0O1xuICAgICAgICAgICAgcmV0dXJuIHsgLy8g5YW85a65aWXlpJrlh7rnmoTkuKTkuKpweFxuICAgICAgICAgICAgICAgIHRvcDogcmVjdC50b3AgLSBjbGllbnRUb3AsIC8vIOi3neemu+mhtumDqOeahOS9jee9rlxuICAgICAgICAgICAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20gLSBjbGllbnRUb3AsIC8vIOi3neemu+mhtumDqOWKoOS4iuWFg+e0oOacrOi6q+eahOmrmOW6puWwseetieS6jmJvdHRvbeeahOS9jee9rlxuICAgICAgICAgICAgICAgIGxlZnQ6IHJlY3QubGVmdCAtIGNsaWVudExlZnQsIC8vIOi3neemu+W3pui+ueeahOS9jee9rlxuICAgICAgICAgICAgICAgIHJpZ2h0OiByZWN0LnJpZ2h0IC0gY2xpZW50TGVmdCwgLy8g6Led56a75Y+z6L6555qE5L2N572u5bCx5pivIOi3neemu+W3pui+ueeahOS9jee9ruWKoOS4iuWFg+e0oOacrOi6q+eahOWuveW6plxuICAgICAgICAgICAgICAgIHdpZHRoOiByZWN0LndpZHRoLCAvL+WFg+e0oOWuveW6plxuICAgICAgICAgICAgICAgIGhlaWdodDogcmVjdC5oZWlnaHQgLy/lhYPntKDpq5jluqZcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19jcmVhdGVDb25uZWN0RWxlbWVudHMnLFxuXG5cbiAgICAgICAgLyrliJvlu7rlubbov57mjqXoioLngrkqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZUNvbm5lY3RFbGVtZW50cygpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIF9yZWYzID0gdGhpcy5wcm9wcy5sb2FkV2hpdGVib2FyZFRvb2xzIHx8IHt9LFxuICAgICAgICAgICAgICAgIG1vdXNlID0gX3JlZjMubW91c2UsXG4gICAgICAgICAgICAgICAgbGFzZXIgPSBfcmVmMy5sYXNlcixcbiAgICAgICAgICAgICAgICBwZW4gPSBfcmVmMy5wZW4sXG4gICAgICAgICAgICAgICAgdGV4dCA9IF9yZWYzLnRleHQsXG4gICAgICAgICAgICAgICAgc2hhcGUgPSBfcmVmMy5zaGFwZSxcbiAgICAgICAgICAgICAgICBlcmFzZXIgPSBfcmVmMy5lcmFzZXIsXG4gICAgICAgICAgICAgICAgY2xlYXIgPSBfcmVmMy5jbGVhcixcbiAgICAgICAgICAgICAgICB1bmRvID0gX3JlZjMudW5kbyxcbiAgICAgICAgICAgICAgICByZWRvID0gX3JlZjMucmVkbyxcbiAgICAgICAgICAgICAgICBzZXR0aW5nID0gX3JlZjMuc2V0dGluZztcblxuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy53aGl0ZWJvYXJkVG9vbGJhclZpZXdSb290RWxlbWVudCA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdhcnRpY2xlJywgdGhpcy5pbnN0YW5jZUlkICsgJ1doaXRlYm9hcmRUb29sVmlld1Jvb3QnLCAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkICcgKyB0aGlzLmluc3RhbmNlSWQgKyAnIHdoaXRlYm9hcmQtdG9vbGJhci1yb290Jywge1xuICAgICAgICAgICAgICAgIHpJbmRleDogNlxuICAgICAgICAgICAgfSk7IC8v55m95p2/5qCH5rOo5bel5YW35qC56IqC54K5XG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYXBwZW5kQ2hpbGQodGhpcy5wYXJlbnROb2RlLCB0aGlzLmVsZW1lbnRzLndoaXRlYm9hcmRUb29sYmFyVmlld1Jvb3RFbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMud2hpdGVib2FyZFRvb2xiYXJWaWV3Um9vdEVsZW1lbnQuaW5uZXJIVE1MID0gJ1xcbiAgICAgICAgICAgIDx1bCBjbGFzcz1cIndoaXRlYm9hcmQtdG9vbC1saXN0LWNvbnRhaW5lclwiID4gXFxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInRvb2wtb3B0aW9uIHRvb2xfbW91c2VcIiAgc3R5bGU9XCJkaXNwbGF5OicgKyAoIW1vdXNlID8gJ25vbmUnIDogJycpICsgJ1wiID5cXG4gICAgICAgICAgICAgICAgICAgIDxlbSBjbGFzcz1cImljb25cIj48L2VtPlxcbiAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJ0b29sLW9wdGlvbiB0b29sX2xhc2VyXCIgc3R5bGU9XCJkaXNwbGF5OicgKyAoIWxhc2VyIHx8IHRoaXMucHJvcHMuaXNNb2JpbGUgPyAnbm9uZScgOiAnJykgKyAnXCIgPlxcbiAgICAgICAgICAgICAgICAgICAgPGVtIGNsYXNzPVwiaWNvblwiPjwvZW0+XFxuICAgICAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInRvb2wtb3B0aW9uIHBlbi1saXN0XCIgIGRhdGEtY3VycmVudC1wZW49XFwndG9vbF9wZW5jaWxcXCcgc3R5bGU9XCJkaXNwbGF5OicgKyAoIXBlbiA/ICdub25lJyA6ICcnKSArICdcIiA+IFxcbiAgICAgICAgICAgICAgICAgICAgPGVtIGNsYXNzPVwiaWNvblwiPjwvZW0+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9vbC1wZW4tbGlzdC1leHRlbmRcIiA+XFxuICAgICAgICAgICAgICAgICAgICAgICAgIDxvbCBjbGFzcz1cInRvb2wtcGVuLWNvbnRhaW5lclwiID4gXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW0gY2xhc3M9XCJhcnJvd1wiID48L2VtPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJwZW4tb3B0aW9uIHRvb2xfcGVuY2lsXCIgPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVtIGNsYXNzPVwicGVuLWljb24gXCI+PC9lbT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwicGVuLW9wdGlvbiB0b29sX2hpZ2hsaWdodGVyXCIgPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVtIGNsYXNzPVwicGVuLWljb25cIj48L2VtPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJwZW4tb3B0aW9uIHRvb2xfbGluZVwiID5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW0gY2xhc3M9XCJwZW4taWNvblwiPjwvZW0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInBlbi1vcHRpb24gdG9vbF9hcnJvd1wiID5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW0gY2xhc3M9XCJwZW4taWNvblwiPjwvZW0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwidG9vbC1vcHRpb24gdG9vbF90ZXh0XCIgc3R5bGU9XCJkaXNwbGF5OicgKyAoIXRleHQgPyAnbm9uZScgOiAnJykgKyAnXCIgPlxcbiAgICAgICAgICAgICAgICAgICAgPGVtIGNsYXNzPVwiaWNvblwiPjwvZW0+XFxuICAgICAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInRvb2wtb3B0aW9uIHNoYXBlLWxpc3RcIiBkYXRhLWN1cnJlbnQtc2hhcGU9XFwndG9vbF9yZWN0YW5nbGVfZW1wdHlcXCcgIHN0eWxlPVwiZGlzcGxheTonICsgKCFzaGFwZSA/ICdub25lJyA6ICcnKSArICdcIiAgPiBcXG4gICAgICAgICAgICAgICAgICAgIDxlbSBjbGFzcz1cImljb25cIj48L2VtPlxcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b29sLXNoYXBlLWxpc3QtZXh0ZW5kXCIgPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICA8b2wgY2xhc3M9XCJ0b29sLXNoYXBlLWNvbnRhaW5lclwiID4gXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbSBjbGFzcz1cImFycm93XCIgPjwvZW0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInNoYXBlLW9wdGlvbiB0b29sX3JlY3RhbmdsZV9lbXB0eVwiID5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbSBjbGFzcz1cInNoYXBlLWljb25cIj48L2VtPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJzaGFwZS1vcHRpb24gdG9vbF9yZWN0YW5nbGVcIiA+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW0gY2xhc3M9XCJzaGFwZS1pY29uXCI+PC9lbT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwic2hhcGUtb3B0aW9uIHRvb2xfZWxsaXBzZV9lbXB0eVwiID5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbSBjbGFzcz1cInNoYXBlLWljb25cIj48L2VtPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJzaGFwZS1vcHRpb24gdG9vbF9lbGxpcHNlXCIgPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVtIGNsYXNzPVwic2hhcGUtaWNvblwiPjwvZW0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD5cXG4gICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwidG9vbC1vcHRpb24gdG9vbF9lcmFzZXJcIiAgc3R5bGU9XCJkaXNwbGF5OicgKyAoIWVyYXNlciA/ICdub25lJyA6ICcnKSArICdcIiA+XFxuICAgICAgICAgICAgICAgICAgICA8ZW0gY2xhc3M9XCJpY29uXCI+PC9lbT5cXG4gICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwidG9vbC1vcHRpb24gdG9vbF91bmRvXCIgc3R5bGU9XCJkaXNwbGF5OicgKyAoIXVuZG8gPyAnbm9uZScgOiAnJykgKyAnXCIgID5cXG4gICAgICAgICAgICAgICAgICAgIDxlbSBjbGFzcz1cImljb25cIj48L2VtPlxcbiAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJ0b29sLW9wdGlvbiB0b29sX3JlZG9cIiBzdHlsZT1cImRpc3BsYXk6JyArICghcmVkbyA/ICdub25lJyA6ICcnKSArICdcIiA+XFxuICAgICAgICAgICAgICAgICAgICA8ZW0gY2xhc3M9XCJpY29uXCI+PC9lbT5cXG4gICAgICAgICAgICAgICAgPC9saT5cXG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwidG9vbC1vcHRpb24gdG9vbF9jbGVhclwiIHN0eWxlPVwiZGlzcGxheTonICsgKCFjbGVhciA/ICdub25lJyA6ICcnKSArICdcIiAgPlxcbiAgICAgICAgICAgICAgICAgICAgPGVtIGNsYXNzPVwiaWNvblwiPjwvZW0+XFxuICAgICAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInRvb2wtb3B0aW9uIHNldHRpbmctbGlzdFwiIHN0eWxlPVwiZGlzcGxheTonICsgKCFzZXR0aW5nID8gJ25vbmUnIDogJycpICsgJ1wiID4gXFxuICAgICAgICAgICAgICAgICAgICA8ZW0gY2xhc3M9XCJpY29uXCI+PC9lbT5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZXR0aW5nLWxpc3QtZXh0ZW5kXCIgdGl0bGU9XCJcIiAgPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZXR0aW5nLWNvbnRhaW5lclwiID4gXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbSBjbGFzcz1cImFycm93XCIgPjwvZW0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2xvcnMtY29udGFpbmVyXCIgPiAgICAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb250LWNvbnRhaW5lclwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmb250LXRpdGxlIHRpdGxlXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvbnQtY29udGVudC1jb250YWluZXJcIiA+IFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb250LWZhbWlseS1jb250YWluZXJcIj4gXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvbnQtc2l6ZS1jb250YWluZXJcIiA+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwZW5jaWwtd2lkdGgtY29udGFpbmVyXCIgPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwZW5jaWwtd2lkdGgtdGl0bGUgdGl0bGVcIiAgPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzbGlkZXItY29udGFpbmVyIHBlbmNpbC1zbGlkZXItY29udGFpbmVyXCIgaWQ9XCInICsgdGhpcy5pbnN0YW5jZUlkICsgJ1BlbmNpbFdpZHRoU2xpZGVyXCIgPjwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlcmFzZXItd2lkdGgtY29udGFpbmVyXCIgPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcmFzZXItd2lkdGgtdGl0bGUgdGl0bGVcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGVyLWNvbnRhaW5lciBlcmFzZXItc2xpZGVyLWNvbnRhaW5lclwiICBpZD1cIicgKyB0aGlzLmluc3RhbmNlSWQgKyAnRXJhc2VyV2lkdGhTbGlkZXJcIiA+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiBcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgIDwvdWw+XFxuICAgICAgICAnO1xuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnRvb2xfbW91c2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmluc3RhbmNlSWQgKyAnV2hpdGVib2FyZFRvb2xWaWV3Um9vdCcpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rvb2xfbW91c2UnKVswXTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMudG9vbF9sYXNlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCArICdXaGl0ZWJvYXJkVG9vbFZpZXdSb290JykuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndG9vbF9sYXNlcicpWzBdO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy50b29sX3RleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmluc3RhbmNlSWQgKyAnV2hpdGVib2FyZFRvb2xWaWV3Um9vdCcpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rvb2xfdGV4dCcpWzBdO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy50b29sX2VyYXNlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCArICdXaGl0ZWJvYXJkVG9vbFZpZXdSb290JykuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndG9vbF9lcmFzZXInKVswXTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMudG9vbF9wZW5jaWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmluc3RhbmNlSWQgKyAnV2hpdGVib2FyZFRvb2xWaWV3Um9vdCcpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rvb2xfcGVuY2lsJylbMF07XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnRvb2xfaGlnaGxpZ2h0ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmluc3RhbmNlSWQgKyAnV2hpdGVib2FyZFRvb2xWaWV3Um9vdCcpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rvb2xfaGlnaGxpZ2h0ZXInKVswXTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMudG9vbF9saW5lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5pbnN0YW5jZUlkICsgJ1doaXRlYm9hcmRUb29sVmlld1Jvb3QnKS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0b29sX2xpbmUnKVswXTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMudG9vbF9hcnJvdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCArICdXaGl0ZWJvYXJkVG9vbFZpZXdSb290JykuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndG9vbF9hcnJvdycpWzBdO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy50b29sX2VsbGlwc2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmluc3RhbmNlSWQgKyAnV2hpdGVib2FyZFRvb2xWaWV3Um9vdCcpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rvb2xfZWxsaXBzZScpWzBdO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy50b29sX2VsbGlwc2VfZW1wdHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmluc3RhbmNlSWQgKyAnV2hpdGVib2FyZFRvb2xWaWV3Um9vdCcpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rvb2xfZWxsaXBzZV9lbXB0eScpWzBdO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy50b29sX3JlY3RhbmdsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCArICdXaGl0ZWJvYXJkVG9vbFZpZXdSb290JykuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndG9vbF9yZWN0YW5nbGUnKVswXTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMudG9vbF9yZWN0YW5nbGVfZW1wdHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmluc3RhbmNlSWQgKyAnV2hpdGVib2FyZFRvb2xWaWV3Um9vdCcpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rvb2xfcmVjdGFuZ2xlX2VtcHR5JylbMF07XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuYWN0aW9uX3VuZG8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmluc3RhbmNlSWQgKyAnV2hpdGVib2FyZFRvb2xWaWV3Um9vdCcpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rvb2xfdW5kbycpWzBdO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5hY3Rpb25fcmVkbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCArICdXaGl0ZWJvYXJkVG9vbFZpZXdSb290JykuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndG9vbF9yZWRvJylbMF07XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmFjdGlvbl9jbGVhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCArICdXaGl0ZWJvYXJkVG9vbFZpZXdSb290JykuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndG9vbF9jbGVhcicpWzBdO1xuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnBlbkxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmluc3RhbmNlSWQgKyAnV2hpdGVib2FyZFRvb2xWaWV3Um9vdCcpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Blbi1saXN0JylbMF07XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnNoYXBlTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCArICdXaGl0ZWJvYXJkVG9vbFZpZXdSb290JykuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2hhcGUtbGlzdCcpWzBdO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5zZXR0aW5nTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCArICdXaGl0ZWJvYXJkVG9vbFZpZXdSb290JykuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2V0dGluZy1saXN0JylbMF07XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnBlbkxpc3RFeHRlbmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmluc3RhbmNlSWQgKyAnV2hpdGVib2FyZFRvb2xWaWV3Um9vdCcpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rvb2wtcGVuLWxpc3QtZXh0ZW5kJylbMF07XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnNoYXBlTGlzdEV4dGVuZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCArICdXaGl0ZWJvYXJkVG9vbFZpZXdSb290JykuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndG9vbC1zaGFwZS1saXN0LWV4dGVuZCcpWzBdO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5zZXR0aW5nTGlzdEV4dGVuZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCArICdXaGl0ZWJvYXJkVG9vbFZpZXdSb290JykuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2V0dGluZy1saXN0LWV4dGVuZCcpWzBdO1xuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmNvbG9yc0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCArICdXaGl0ZWJvYXJkVG9vbFZpZXdSb290JykuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY29sb3JzLWNvbnRhaW5lcicpWzBdO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5mb250VGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmluc3RhbmNlSWQgKyAnV2hpdGVib2FyZFRvb2xWaWV3Um9vdCcpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2ZvbnQtdGl0bGUnKVswXTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZm9udEZhbWlseUNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCArICdXaGl0ZWJvYXJkVG9vbFZpZXdSb290JykuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZm9udC1mYW1pbHktY29udGFpbmVyJylbMF07XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmZvbnRTaXplQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5pbnN0YW5jZUlkICsgJ1doaXRlYm9hcmRUb29sVmlld1Jvb3QnKS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdmb250LXNpemUtY29udGFpbmVyJylbMF07XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnBlbmNpbFdpZHRoVGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmluc3RhbmNlSWQgKyAnV2hpdGVib2FyZFRvb2xWaWV3Um9vdCcpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3BlbmNpbC13aWR0aC10aXRsZScpWzBdO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5lcmFzZXJXaWR0aFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5pbnN0YW5jZUlkICsgJ1doaXRlYm9hcmRUb29sVmlld1Jvb3QnKS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdlcmFzZXItd2lkdGgtdGl0bGUnKVswXTtcblxuICAgICAgICAgICAgaWYgKHdpbmRvdy5UYWxrU2xpZGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZW5jaWxXaWR0aFNsaWRlciA9IG5ldyB3aW5kb3cuVGFsa1NsaWRlcih7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlckNvbnRhaW5lcjogeyAvL3NsaWRlcuaVtOS4que7hOS7tuWuueWZqOeahOeahOiuvue9rlxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRoYXQuaW5zdGFuY2VJZCArICdQZW5jaWxXaWR0aFNsaWRlcicsIC8v5b+F5LygISEhIVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcgLy/mlrnlkJHvvIjmsLTlubMo6buY6K6k77yaaG9yaXpvbnRhbHx85Z6C55u077yadmVydGlrYWzvvIlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3RoYXQkcHJvcHMkcGVuY2lsV2lkID0gdGhhdC5wcm9wcy5wZW5jaWxXaWR0aFNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmNpbFdpZHRoU2NhbGUgPSBfdGhhdCRwcm9wcyRwZW5jaWxXaWQgPT09IHVuZGVmaW5lZCA/IDEgOiBfdGhhdCRwcm9wcyRwZW5jaWxXaWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc2VuZEFjdGlvbkNvbW1hbmQoJ3BlbmNpbFdpZHRoQ2hhbmdlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmNpbFdpZHRoUGVyY2VudGFnZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuY2lsV2lkdGg6IHZhbHVlICogcGVuY2lsV2lkdGhTY2FsZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uQWZ0ZXJDaGFuZ2U6IGZ1bmN0aW9uIG9uQWZ0ZXJDaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5ouW5ou96Z+z6YeP5p2h6I635Y+W55qE6Z+z6YeP5YC8XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIDwgMSA/IDEgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdGhhdCRwcm9wcyRwZW5jaWxXaWQyID0gdGhhdC5wcm9wcy5wZW5jaWxXaWR0aFNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmNpbFdpZHRoU2NhbGUgPSBfdGhhdCRwcm9wcyRwZW5jaWxXaWQyID09PSB1bmRlZmluZWQgPyAxIDogX3RoYXQkcHJvcHMkcGVuY2lsV2lkMjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fY2hhbmdlV2hpdGVCb2FyZENvbmZpZ3JhdGlvbigncGVuY2lsV2lkdGgnLCB2YWx1ZSAqIHBlbmNpbFdpZHRoU2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fY2hhbmdlV2hpdGVCb2FyZENvbmZpZ3JhdGlvbignc2hhcGVXaWR0aCcsIHZhbHVlICogcGVuY2lsV2lkdGhTY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnNlbmRBY3Rpb25Db21tYW5kKCdwZW5jaWxXaWR0aENoYW5nZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5jaWxXaWR0aFBlcmNlbnRhZ2U6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmNpbFdpZHRoOiB2YWx1ZSAqIHBlbmNpbFdpZHRoU2NhbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lcmFzZXJXaWR0aFNsaWRlciA9IG5ldyB3aW5kb3cuVGFsa1NsaWRlcih7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlckNvbnRhaW5lcjogeyAvL3NsaWRlcuaVtOS4que7hOS7tuWuueWZqOeahOeahOiuvue9rlxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRoYXQuaW5zdGFuY2VJZCArICdFcmFzZXJXaWR0aFNsaWRlcicsIC8v5b+F5LygISEhIVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcgLy/mlrnlkJHvvIjmsLTlubMo6buY6K6k77yaaG9yaXpvbnRhbHx85Z6C55u077yadmVydGlrYWzvvIlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3RoYXQkcHJvcHMkZXJhc2VyV2lkID0gdGhhdC5wcm9wcy5lcmFzZXJXaWR0aFNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyYXNlcldpZHRoU2NhbGUgPSBfdGhhdCRwcm9wcyRlcmFzZXJXaWQgPT09IHVuZGVmaW5lZCA/IDEgOiBfdGhhdCRwcm9wcyRlcmFzZXJXaWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc2VuZEFjdGlvbkNvbW1hbmQoJ2VyYXNlcldpZHRoQ2hhbmdlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyYXNlcldpZHRoOiB2YWx1ZSAqIGVyYXNlcldpZHRoU2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJhc2VyV2lkdGhQZXJjZW50YWdlOiB2YWx1ZSAvIDEwMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uQWZ0ZXJDaGFuZ2U6IGZ1bmN0aW9uIG9uQWZ0ZXJDaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5ouW5ou96Z+z6YeP5p2h6I635Y+W55qE6Z+z6YeP5YC8XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIDwgMSA/IDEgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdGhhdCRwcm9wcyRlcmFzZXJXaWQyID0gdGhhdC5wcm9wcy5lcmFzZXJXaWR0aFNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyYXNlcldpZHRoU2NhbGUgPSBfdGhhdCRwcm9wcyRlcmFzZXJXaWQyID09PSB1bmRlZmluZWQgPyAxIDogX3RoYXQkcHJvcHMkZXJhc2VyV2lkMjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5fY2hhbmdlV2hpdGVCb2FyZENvbmZpZ3JhdGlvbignZXJhc2VyV2lkdGgnLCB2YWx1ZSAqIGVyYXNlcldpZHRoU2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5zZW5kQWN0aW9uQ29tbWFuZCgnZXJhc2VyV2lkdGhDaGFuZ2UnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJhc2VyV2lkdGg6IHZhbHVlICogZXJhc2VyV2lkdGhTY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcmFzZXJXaWR0aFBlcmNlbnRhZ2U6IHZhbHVlIC8gMTAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldFBlbmNpbFdpZHRoVG9TbGlkZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRFcmFzZXJXaWR0aFRvU2xpZGVyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2FkZFRhbGtEcmFnKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19hZGRUYWxrRHJhZycsXG5cblxuICAgICAgICAvKua3u+WKoOaLluaLvSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkVGFsa0RyYWcoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5pc0RyYWcgJiYgd2luZG93LlRhbGtEcmFnICYmIHRoaXMuZWxlbWVudHMud2hpdGVib2FyZFRvb2xiYXJWaWV3Um9vdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVG9vbGJhclRhbGtEcmFnICYmIHR5cGVvZiB0aGlzLndoaXRlYm9hcmRUb29sYmFyVGFsa0RyYWcuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRUb29sYmFyVGFsa0RyYWcuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRUb29sYmFyVGFsa0RyYWcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIF9yZWY0ID0gdGhpcy5wcm9wcy5pbml0RHJhZ1Bvc2l0aW9uIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBfcmVmNCRsZWZ0ID0gX3JlZjQubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IF9yZWY0JGxlZnQgPT09IHVuZGVmaW5lZCA/IDAgOiBfcmVmNCRsZWZ0LFxuICAgICAgICAgICAgICAgICAgICBfcmVmNCR0b3AgPSBfcmVmNC50b3AsXG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IF9yZWY0JHRvcCA9PT0gdW5kZWZpbmVkID8gMCA6IF9yZWY0JHRvcDtcblxuICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFRvb2xiYXJUYWxrRHJhZyA9IG5ldyB3aW5kb3cuVGFsa0RyYWcodGhpcy5lbGVtZW50cy53aGl0ZWJvYXJkVG9vbGJhclZpZXdSb290RWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJEYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiB0b3BcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmm7TmlrDor63oqIAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfdXBkYXRlTGFuZ3VhZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZUxhbmd1YWdlKCkge1xuICAgICAgICAgICAgdmFyIF9wcm9wcyRsYW5ndWFnZVR5cGUgPSB0aGlzLnByb3BzLmxhbmd1YWdlVHlwZSxcbiAgICAgICAgICAgICAgICBsYW5ndWFnZVR5cGUgPSBfcHJvcHMkbGFuZ3VhZ2VUeXBlID09PSB1bmRlZmluZWQgPyAnY2gnIDogX3Byb3BzJGxhbmd1YWdlVHlwZTtcblxuICAgICAgICAgICAgaWYgKCEobGFuZ3VhZ2VUeXBlID09PSAnY2gnIHx8IGxhbmd1YWdlVHlwZSA9PT0gJ3R3JyB8fCBsYW5ndWFnZVR5cGUgPT09ICdlbicgfHwgbGFuZ3VhZ2VUeXBlID09PSAnamEnKSkge1xuICAgICAgICAgICAgICAgIGxhbmd1YWdlVHlwZSA9ICdjaCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBfVGFsa0xhbmd1YWdlJGdldCR3aGkgPSBfTGFuZ3VhZ2UyLmRlZmF1bHQuZ2V0KGxhbmd1YWdlVHlwZSkud2hpdGVib2FyZFRvb2xiYXIsXG4gICAgICAgICAgICAgICAgZm9udFNpemVUZXh0ID0gX1RhbGtMYW5ndWFnZSRnZXQkd2hpLmZvbnRTaXplVGV4dCxcbiAgICAgICAgICAgICAgICBfVGFsa0xhbmd1YWdlJGdldCR3aGkyID0gX1RhbGtMYW5ndWFnZSRnZXQkd2hpLmZvbnRGYW1pbHksXG4gICAgICAgICAgICAgICAgZm9udEZhbWlseSA9IF9UYWxrTGFuZ3VhZ2UkZ2V0JHdoaTIgPT09IHVuZGVmaW5lZCA/IHt9IDogX1RhbGtMYW5ndWFnZSRnZXQkd2hpMixcbiAgICAgICAgICAgICAgICBwZW5jaWxXaWR0aFRpdGxlID0gX1RhbGtMYW5ndWFnZSRnZXQkd2hpLnBlbmNpbFdpZHRoVGl0bGUsXG4gICAgICAgICAgICAgICAgZXJhc2VyV2lkdGhUaXRsZSA9IF9UYWxrTGFuZ3VhZ2UkZ2V0JHdoaS5lcmFzZXJXaWR0aFRpdGxlLFxuICAgICAgICAgICAgICAgIF9UYWxrTGFuZ3VhZ2UkZ2V0JHdoaTMgPSBfVGFsa0xhbmd1YWdlJGdldCR3aGkudG9vbFRleHRMaXN0LFxuICAgICAgICAgICAgICAgIHRvb2xUZXh0TGlzdCA9IF9UYWxrTGFuZ3VhZ2UkZ2V0JHdoaTMgPT09IHVuZGVmaW5lZCA/IHt9IDogX1RhbGtMYW5ndWFnZSRnZXQkd2hpMztcblxuICAgICAgICAgICAgdmFyIHRpdGxlID0gZm9udEZhbWlseS50aXRsZSxcbiAgICAgICAgICAgICAgICBfZm9udEZhbWlseSRvcHRpb25zID0gZm9udEZhbWlseS5vcHRpb25zLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBfZm9udEZhbWlseSRvcHRpb25zID09PSB1bmRlZmluZWQgPyB7fSA6IF9mb250RmFtaWx5JG9wdGlvbnM7XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZm9udFRpdGxlLmlubmVySFRNTCA9IHRpdGxlO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5wZW5jaWxXaWR0aFRpdGxlLmlubmVySFRNTCA9IHBlbmNpbFdpZHRoVGl0bGU7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmVyYXNlcldpZHRoVGl0bGUuaW5uZXJIVE1MID0gZXJhc2VyV2lkdGhUaXRsZTtcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVBbGxDaGlsZCh0aGlzLmVsZW1lbnRzLmZvbnRGYW1pbHlDb250YWluZXIpO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gT2JqZWN0LmVudHJpZXMob3B0aW9ucylbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfcmVmNSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBfcmVmNiA9IF9zbGljZWRUb0FycmF5KF9yZWY1LCAyKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gX3JlZjZbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9yZWY2WzFdO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBidXR0b24gPSBfRG9tVXRpbHMyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgdW5kZWZpbmVkLCBcImZvbnQtZmFtaWx5LW9wdGlvbiBcIiArIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1mb250LWZhbWlseS1rZXknLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLWZvbnQtZmFtaWx5LXZhbHVlJywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBidXR0b24ub25jbGljayA9IHRoaXMuY2hhbmdlRm9udEZhbWlseU9uQ2xpY2suYmluZCh0aGlzLCB2YWx1ZSwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudHMuZm9udEZhbWlseUNvbnRhaW5lciwgYnV0dG9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQWxsQ2hpbGQodGhpcy5lbGVtZW50cy5mb250U2l6ZUNvbnRhaW5lcik7XG4gICAgICAgICAgICB2YXIgZm9udFNpemVBcnJheSA9IFsxMiwgMTQsIDE4LCAyNCwgMjYsIDM2LCA0OCwgNzJdO1xuICAgICAgICAgICAgdmFyIG51bSA9IDA7XG4gICAgICAgICAgICB2YXIgc3BhbkVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gZm9udFNpemVBcnJheVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm9udFNpemUgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB1bmRlZmluZWQsIFwiZm9udC1zaXplLW9wdGlvbiBmb250LXNpemUtXCIgKyBmb250U2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBmb250U2l6ZSArIGZvbnRTaXplVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1mb250LXNpemUnLCBmb250U2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5vbmNsaWNrID0gdGhpcy5jaGFuZ2VGb250U2l6ZU9uQ2xpY2suYmluZCh0aGlzLCBmb250U2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW0gPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBudW0gPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW0gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5FbGVtZW50ID0gX0RvbVV0aWxzMi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB1bmRlZmluZWQsIFwiZm9udC1zaXplLWxpc3RcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50cy5mb250U2l6ZUNvbnRhaW5lciwgc3BhbkVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGFuRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHNwYW5FbGVtZW50LCBidXR0b24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICsrbnVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMyA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gT2JqZWN0LmVudHJpZXModG9vbFRleHRMaXN0KVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IChfc3RlcDMgPSBfaXRlcmF0b3IzLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjcgPSBfc3RlcDMudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWY4ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjcsIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBfa2V5ID0gX3JlZjhbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdmFsdWUgPSBfcmVmOFsxXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50c1tfa2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1tfa2V5XS50aXRsZSA9IF92YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IzID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zICYmIF9pdGVyYXRvcjMucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfY2hhbmdlV2hpdGVCb2FyZENvbmZpZ3JhdGlvbicsXG5cblxuICAgICAgICAvKuaUueWPmOeZveadv+mFjee9rumhuSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY2hhbmdlV2hpdGVCb2FyZENvbmZpZ3JhdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVwZGF0ZUNvbmZpZ3JhdGlvbiA9IHt9O1xuICAgICAgICAgICAgICAgIHVwZGF0ZUNvbmZpZ3JhdGlvbltrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLmNoYW5nZVdoaXRlQm9hcmRDb25maWdyYXRpb24odXBkYXRlQ29uZmlncmF0aW9uLCB0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrlhbPpl63miYDmnInmnKrmjpLpmaTnmoTliJfooagqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfY2xvc2VMaXN0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jbG9zZUxpc3QoZXhjbHVkZUVsZW1lbnRLZXkpIHtcbiAgICAgICAgICAgIGlmIChleGNsdWRlRWxlbWVudEtleSAhPT0gJ3Blbkxpc3QnKSB7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHMucGVuTGlzdCwgJ29wZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChleGNsdWRlRWxlbWVudEtleSAhPT0gJ3NoYXBlTGlzdCcpIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50cy5zaGFwZUxpc3QsICdvcGVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhjbHVkZUVsZW1lbnRLZXkgIT09ICdzZXR0aW5nTGlzdCcpIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50cy5zZXR0aW5nTGlzdCwgJ29wZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5re75Yqg5LqL5Lu2Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2FkZEV2ZW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRFdmVudCgpIHtcbiAgICAgICAgICAgIHZhciBsaXN0RWxlbWVudEtleUFycmF5ID0gWydwZW5MaXN0JywgJ3NoYXBlTGlzdCcsICdzZXR0aW5nTGlzdCddO1xuICAgICAgICAgICAgdmFyIHRvb2xLZXlBcnJheSA9IFsndG9vbF9tb3VzZScsICd0b29sX2xhc2VyJywgJ3Rvb2xfdGV4dCcsICd0b29sX2VyYXNlcicsICd0b29sX3BlbmNpbCcsICd0b29sX2hpZ2hsaWdodGVyJywgJ3Rvb2xfbGluZScsICd0b29sX2Fycm93JywgJ3Rvb2xfZWxsaXBzZScsICd0b29sX2VsbGlwc2VfZW1wdHknLCAndG9vbF9yZWN0YW5nbGUnLCAndG9vbF9yZWN0YW5nbGVfZW1wdHknXTtcbiAgICAgICAgICAgIHZhciBhY3Rpb25LZXlBcnJheSA9IFsnYWN0aW9uX2NsZWFyJywgJ2FjdGlvbl9yZWRvJywgJ2FjdGlvbl91bmRvJ107XG4gICAgICAgICAgICB2YXIgY29sb3JzQXJyYXkgPSBbJyM1QUM5RkEnLCAnI0ZGQ0MwMCcsICcjRUQzRTNBJywgJyM0NzQwRDInLCAnIzAwN0JGRicsICcjMDlDNjJCJywgJyMwMDAwMDAnLCAnI0VERURFRCddO1xuXG4gICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQWxsQ2hpbGQodGhpcy5lbGVtZW50cy5jb2xvcnNDb250YWluZXIpO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNCA9IGNvbG9yc0FycmF5W1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA0OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gKF9zdGVwNCA9IF9pdGVyYXRvcjQubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xvcktleSA9IF9zdGVwNC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgYnV0dG9uID0gX0RvbVV0aWxzMi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHVuZGVmaW5lZCwgXCJjb2xvci1vcHRpb24gY29sb3ItXCIgKyBjb2xvcktleS5yZXBsYWNlKC8jL2csICcnKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcktleVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9ICc8c3BhbiBzdHlsZT1cImJvcmRlci1jb2xvcjogJyArIGNvbG9yS2V5ICsgJ1wiPjwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLWNvbG9yJywgY29sb3JLZXkpO1xuICAgICAgICAgICAgICAgICAgICBidXR0b24ub25jbGljayA9IHRoaXMuY2hhbmdlQ29sb3JPbkNsaWNrLmJpbmQodGhpcywgY29sb3JLZXkpO1xuICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50cy5jb2xvcnNDb250YWluZXIsIGJ1dHRvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjQgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgJiYgX2l0ZXJhdG9yNC5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjQucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMud2hpdGVib2FyZFRvb2xiYXJWaWV3Um9vdEVsZW1lbnQub25tb3VzZWxlYXZlID0gdGhpcy53aGl0ZWJvYXJkVG9vbGJhclZpZXdSb290TW91c2VMZWF2ZS5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5zZXR0aW5nTGlzdEV4dGVuZC5vbmNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjUgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNSA9IGxpc3RFbGVtZW50S2V5QXJyYXlbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDU7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSAoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRLZXkgPSBfc3RlcDUudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbZWxlbWVudEtleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNbZWxlbWVudEtleV0ub25jbGljayA9IHRoaXMubGlzdE9wZW5PckNsb3NlT25DbGljay5iaW5kKHRoaXMsIGVsZW1lbnRLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1tlbGVtZW50S2V5XS5vbm1vdXNlbGVhdmUgPSB0aGlzLmxpc3RPcGVuT3JDbG9zZU9uTW91c2VMZWF2ZS5iaW5kKHRoaXMsIGVsZW1lbnRLZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I1ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjUgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgJiYgX2l0ZXJhdG9yNS5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjUucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I2ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I2ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjYgPSB0b29sS2V5QXJyYXlbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDY7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgPSAoX3N0ZXA2ID0gX2l0ZXJhdG9yNi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvb2xLZXkgPSBfc3RlcDYudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbdG9vbEtleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNbdG9vbEtleV0ub25jbGljayA9IHRoaXMudXNlV2hpdGVib2FyZFRvb2xPbkNsaWNrLmJpbmQodGhpcywgdG9vbEtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjYgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yNiA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiAmJiBfaXRlcmF0b3I2LnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNi5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb243ID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjcgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjcgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNyA9IGFjdGlvbktleUFycmF5W1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA3OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb243ID0gKF9zdGVwNyA9IF9pdGVyYXRvcjcubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb25LZXkgPSBfc3RlcDcudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbYWN0aW9uS2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1thY3Rpb25LZXldLm9uY2xpY2sgPSB0aGlzLmV4ZWN1dGVXaGl0ZWJvYXJkQWN0aW9uLmJpbmQodGhpcywgYWN0aW9uS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNyA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I3ID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb243ICYmIF9pdGVyYXRvcjcucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I3LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I3O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrorr7nva7nlLvnrJTlrr3luqbnu5lzbGlkZXIqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfc2V0UGVuY2lsV2lkdGhUb1NsaWRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0UGVuY2lsV2lkdGhUb1NsaWRlcigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBlbmNpbFdpZHRoU2xpZGVyICYmIHRoaXMucGVuY2lsV2lkdGhTbGlkZXIuc2V0UHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3Byb3BzJHBlbmNpbFdpZHRoU2NhID0gdGhpcy5wcm9wcy5wZW5jaWxXaWR0aFNjYWxlLFxuICAgICAgICAgICAgICAgICAgICBwZW5jaWxXaWR0aFNjYWxlID0gX3Byb3BzJHBlbmNpbFdpZHRoU2NhID09PSB1bmRlZmluZWQgPyAxIDogX3Byb3BzJHBlbmNpbFdpZHRoU2NhO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5wZW5jaWxXaWR0aFNsaWRlci5zZXRQcm9ncmVzcyh0aGlzLnN0YXRlLnZpZXdTdGF0ZS5vdGhlci5wZW5jaWxXaWR0aCAvIHBlbmNpbFdpZHRoU2NhbGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZEFjdGlvbkNvbW1hbmQoJ3BlbmNpbFdpZHRoQ2hhbmdlJywge1xuICAgICAgICAgICAgICAgICAgICBwZW5jaWxXaWR0aDogdGhpcy5zdGF0ZS52aWV3U3RhdGUub3RoZXIucGVuY2lsV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHBlbmNpbFdpZHRoUGVyY2VudGFnZTogdGhpcy5zdGF0ZS52aWV3U3RhdGUub3RoZXIucGVuY2lsV2lkdGggLyBwZW5jaWxXaWR0aFNjYWxlIC8gMTAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuiuvue9ruapoeearuWuveW6pue7mXNsaWRlciovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19zZXRFcmFzZXJXaWR0aFRvU2xpZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRFcmFzZXJXaWR0aFRvU2xpZGVyKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXJhc2VyV2lkdGhTbGlkZXIgJiYgdGhpcy5lcmFzZXJXaWR0aFNsaWRlci5zZXRQcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHZhciBfcHJvcHMkZXJhc2VyV2lkdGhTY2EgPSB0aGlzLnByb3BzLmVyYXNlcldpZHRoU2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIGVyYXNlcldpZHRoU2NhbGUgPSBfcHJvcHMkZXJhc2VyV2lkdGhTY2EgPT09IHVuZGVmaW5lZCA/IDEgOiBfcHJvcHMkZXJhc2VyV2lkdGhTY2E7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmVyYXNlcldpZHRoU2xpZGVyLnNldFByb2dyZXNzKHRoaXMuc3RhdGUudmlld1N0YXRlLm90aGVyLmVyYXNlcldpZHRoIC8gZXJhc2VyV2lkdGhTY2FsZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kQWN0aW9uQ29tbWFuZCgnZXJhc2VyV2lkdGhDaGFuZ2UnLCB7XG4gICAgICAgICAgICAgICAgICAgIGVyYXNlcldpZHRoOiB0aGlzLnN0YXRlLnZpZXdTdGF0ZS5vdGhlci5lcmFzZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgZXJhc2VyV2lkdGhQZXJjZW50YWdlOiB0aGlzLnN0YXRlLnZpZXdTdGF0ZS5vdGhlci5lcmFzZXJXaWR0aCAvIGVyYXNlcldpZHRoU2NhbGUgLyAxMDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBfc3RhdGUkdmlld1N0YXRlID0gdGhpcy5zdGF0ZS52aWV3U3RhdGUsXG4gICAgICAgICAgICAgICAgX3N0YXRlJHZpZXdTdGF0ZSR0b29sID0gX3N0YXRlJHZpZXdTdGF0ZS50b29sLFxuICAgICAgICAgICAgICAgIHRvb2wgPSBfc3RhdGUkdmlld1N0YXRlJHRvb2wgPT09IHVuZGVmaW5lZCA/IHt9IDogX3N0YXRlJHZpZXdTdGF0ZSR0b29sLFxuICAgICAgICAgICAgICAgIF9zdGF0ZSR2aWV3U3RhdGUkYWN0aSA9IF9zdGF0ZSR2aWV3U3RhdGUuYWN0aW9uLFxuICAgICAgICAgICAgICAgIGFjdGlvbiA9IF9zdGF0ZSR2aWV3U3RhdGUkYWN0aSA9PT0gdW5kZWZpbmVkID8ge30gOiBfc3RhdGUkdmlld1N0YXRlJGFjdGksXG4gICAgICAgICAgICAgICAgX3N0YXRlJHZpZXdTdGF0ZSRvdGhlID0gX3N0YXRlJHZpZXdTdGF0ZS5vdGhlcixcbiAgICAgICAgICAgICAgICBvdGhlciA9IF9zdGF0ZSR2aWV3U3RhdGUkb3RoZSA9PT0gdW5kZWZpbmVkID8ge30gOiBfc3RhdGUkdmlld1N0YXRlJG90aGU7XG4gICAgICAgICAgICB2YXIgcHJpbWFyeUNvbG9yID0gb3RoZXIucHJpbWFyeUNvbG9yLFxuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHkgPSBvdGhlci5mb250RmFtaWx5LFxuICAgICAgICAgICAgICAgIGZvbnRTaXplID0gb3RoZXIuZm9udFNpemU7XG5cbiAgICAgICAgICAgIHZhciBwZW5MaXN0ID0ge307XG4gICAgICAgICAgICB2YXIgc2hhcGVMaXN0ID0ge307XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjggPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yOCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yOCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I4ID0gT2JqZWN0LmVudHJpZXModG9vbClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDg7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjggPSAoX3N0ZXA4ID0gX2l0ZXJhdG9yOC5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWY5ID0gX3N0ZXA4LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTAgPSBfc2xpY2VkVG9BcnJheShfcmVmOSwgMik7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9yZWYxMFswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gX3JlZjEwWzFdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndG9vbF9wZW5jaWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xfaGlnaGxpZ2h0ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xfbGluZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndG9vbF9hcnJvdyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5pc1VzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuTGlzdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndG9vbF9yZWN0YW5nbGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xfcmVjdGFuZ2xlX2VtcHR5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0b29sX2VsbGlwc2VfZW1wdHknOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xfZWxsaXBzZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5pc1VzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVMaXN0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5pc1VzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzW2tleV0sICdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHNba2V5XSwgJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFkZENsYXNzKHRoaXMuZWxlbWVudHNba2V5XSwgJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzW2tleV0sICdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldLmRpc2FibGVkID0gdmFsdWUuZGlzYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjggPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yOCA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOCAmJiBfaXRlcmF0b3I4LnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yOC5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yODtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHBlbkxpc3QpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yOSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I5ID0gT2JqZWN0LmtleXMocGVuTGlzdClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDk7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjkgPSAoX3N0ZXA5ID0gX2l0ZXJhdG9yOS5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOSA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfa2V5MiA9IF9zdGVwOS52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5wZW5MaXN0LnNldEF0dHJpYnV0ZSgnZGF0YS1jdXJyZW50LXBlbicsIF9rZXkyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzLnBlbkxpc3QsICdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjkgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjkgJiYgX2l0ZXJhdG9yOS5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I5LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yOTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHMucGVuTGlzdCwgJ2FjdGl2ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHNoYXBlTGlzdCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMTAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IxMCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjEwID0gT2JqZWN0LmtleXMoc2hhcGVMaXN0KVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMTA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEwID0gKF9zdGVwMTAgPSBfaXRlcmF0b3IxMC5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTAgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2tleTMgPSBfc3RlcDEwLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnNoYXBlTGlzdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtY3VycmVudC1zaGFwZScsIF9rZXkzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzLnNoYXBlTGlzdCwgJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMTAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjEwID0gZXJyO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMCAmJiBfaXRlcmF0b3IxMC5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IxMC5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IxMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudHMuc2hhcGVMaXN0LCAnYWN0aXZlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTEgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMTEgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjExID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjExID0gT2JqZWN0LmVudHJpZXMoYWN0aW9uKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMTE7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjExID0gKF9zdGVwMTEgPSBfaXRlcmF0b3IxMS5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTEgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTEgPSBfc3RlcDExLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTIgPSBfc2xpY2VkVG9BcnJheShfcmVmMTEsIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBfa2V5NCA9IF9yZWYxMlswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF92YWx1ZTIgPSBfcmVmMTJbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbX2tleTRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3ZhbHVlMi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzW19rZXk0XSwgJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzW19rZXk0XSwgJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzW19rZXk0XS5kaXNhYmxlZCA9IF92YWx1ZTIuZGlzYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjExID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjExID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMSAmJiBfaXRlcmF0b3IxMS5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjExLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjb2xvck9wdGlvbnMgPSB0aGlzLmVsZW1lbnRzLmNvbG9yc0NvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb2xvci1vcHRpb24nKTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTIgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMTIgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjEyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjEyID0gY29sb3JPcHRpb25zW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAxMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTIgPSAoX3N0ZXAxMiA9IF9pdGVyYXRvcjEyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yT3B0aW9uID0gX3N0ZXAxMi52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sb3JPcHRpb24uZ2V0QXR0cmlidXRlKCdkYXRhLWNvbG9yJykgPT09IHByaW1hcnlDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFkZENsYXNzKGNvbG9yT3B0aW9uLCAnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2xhc3MoY29sb3JPcHRpb24sICdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMTIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMTIgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEyICYmIF9pdGVyYXRvcjEyLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMTIucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IxMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGZvbnRGYW1pbHlPcHRpb25zID0gdGhpcy5lbGVtZW50cy5mb250RmFtaWx5Q29udGFpbmVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2ZvbnQtZmFtaWx5LW9wdGlvbicpO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IxMyA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMTMgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMTMgPSBmb250RmFtaWx5T3B0aW9uc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMTM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEzID0gKF9zdGVwMTMgPSBfaXRlcmF0b3IxMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTMgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmb250RmFtaWx5T3B0aW9uID0gX3N0ZXAxMy52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0RmFtaWx5S2V5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2FyciA9IFsnY2gnLCAndHcnLCAnZW4nXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9hcnIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZ3VhZ2VUeXBlID0gX2FycltfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX1RhbGtMYW5ndWFnZSRnZXQkd2hpNCA9IF9MYW5ndWFnZTIuZGVmYXVsdC5nZXQobGFuZ3VhZ2VUeXBlKS53aGl0ZWJvYXJkVG9vbGJhci5mb250RmFtaWx5Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IF9UYWxrTGFuZ3VhZ2UkZ2V0JHdoaTQgPT09IHVuZGVmaW5lZCA/IHt9IDogX1RhbGtMYW5ndWFnZSRnZXQkd2hpNDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xNSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IxNSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMTUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMTUgPSBPYmplY3QuZW50cmllcyhvcHRpb25zKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMTU7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjE1ID0gKF9zdGVwMTUgPSBfaXRlcmF0b3IxNS5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTUgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTMgPSBfc3RlcDE1LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTQgPSBfc2xpY2VkVG9BcnJheShfcmVmMTMsIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfa2V5NSA9IF9yZWYxNFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF92YWx1ZTMgPSBfcmVmMTRbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF92YWx1ZTMgPT09IGZvbnRGYW1pbHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEZhbWlseUtleSA9IF9rZXk1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjE1ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjE1ID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xNSAmJiBfaXRlcmF0b3IxNS5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjE1LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMTUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RGYW1pbHlLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9udEZhbWlseU9wdGlvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtZm9udC1mYW1pbHkta2V5JykgPT09IHNlbGVjdEZhbWlseUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFkZENsYXNzKGZvbnRGYW1pbHlPcHRpb24sICdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyhmb250RmFtaWx5T3B0aW9uLCAnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjEzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjEzID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMyAmJiBfaXRlcmF0b3IxMy5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjEzLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMTM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBmb250U2l6ZU9wdGlvbnMgPSB0aGlzLmVsZW1lbnRzLmZvbnRTaXplQ29udGFpbmVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2ZvbnQtc2l6ZS1vcHRpb24nKTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMTQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjE0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjE0ID0gZm9udFNpemVPcHRpb25zW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAxNDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTQgPSAoX3N0ZXAxNCA9IF9pdGVyYXRvcjE0Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xNCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvbnRTaXplT3B0aW9uID0gX3N0ZXAxNC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9udFNpemVPcHRpb24uZ2V0QXR0cmlidXRlKCdkYXRhLWZvbnQtc2l6ZScpID09PSAnJyArIGZvbnRTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYWRkQ2xhc3MoZm9udFNpemVPcHRpb24sICdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyhmb250U2l6ZU9wdGlvbiwgJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IxNCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IxNCA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTQgJiYgX2l0ZXJhdG9yMTQucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IxNC5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjE0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjE0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRhbGtXaGl0ZWJvYXJkVG9vbGJhcjtcbn0oX1RhbGtjbG91ZFJlYWN0My5kZWZhdWx0KTtcblxud2luZG93LlRhbGtXaGl0ZWJvYXJkVG9vbGJhciA9IFRhbGtXaGl0ZWJvYXJkVG9vbGJhcjtcbmV4cG9ydHMuVGFsa1doaXRlYm9hcmRUb29sYmFyID0gVGFsa1doaXRlYm9hcmRUb29sYmFyO1xuZXhwb3J0cy5kZWZhdWx0ID0gVGFsa1doaXRlYm9hcmRUb29sYmFyOyIsIi8qIOeZveadv+inhuWbvu+8iOinhuWbvuWFpeWPo++8iVxyXG4gKiBAbW9kdWxlIFdoaXRlYm9hcmRWaWV3XHJcbiAqIEBkZXNjcmlwdGlvbiAgc2Rr55m95p2/6KeG5Zu+5YWl5Y+jXHJcbiAqIEBhdXRob3Ig6YKx5bm/55SfXHJcbiAqIEBkYXRlIDIwMTgtMDQtMThcclxuICovXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfRG9tVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9Eb21VdGlscycpO1xuXG52YXIgX0RvbVV0aWxzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RvbVV0aWxzKTtcblxudmFyIF9Db25maWd1cmF0aW9uID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvQ29uZmlndXJhdGlvbicpO1xuXG52YXIgX0NvbmZpZ3VyYXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29uZmlndXJhdGlvbik7XG5cbnZhciBfQ29uc3RhbnQgPSByZXF1aXJlKCcuLi8uLi91dGlscy9Db25zdGFudCcpO1xuXG52YXIgX0NvbnN0YW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbnN0YW50KTtcblxudmFyIF9HbG9iYWwgPSByZXF1aXJlKCcuLi8uLi91dGlscy9HbG9iYWwnKTtcblxudmFyIF9HbG9iYWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfR2xvYmFsKTtcblxudmFyIF9VdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL1V0aWxzJyk7XG5cbnZhciBfVXRpbHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXRpbHMpO1xuXG52YXIgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllciA9IHJlcXVpcmUoJy4uLy4uL2ludGVybWVkaWF0ZUxheWVyL1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcicpO1xuXG52YXIgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIpO1xuXG52YXIgX0R5bmFtaWNQcHRJbnRlcm1lZGlhdGVMYXllciA9IHJlcXVpcmUoJy4uLy4uL2ludGVybWVkaWF0ZUxheWVyL0R5bmFtaWNQcHRJbnRlcm1lZGlhdGVMYXllcicpO1xuXG52YXIgX0R5bmFtaWNQcHRJbnRlcm1lZGlhdGVMYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXIpO1xuXG52YXIgX0g1RG9jdW1lbnRQcHRJbnRlcm1lZGlhdGVMYXllciA9IHJlcXVpcmUoJy4uLy4uL2ludGVybWVkaWF0ZUxheWVyL0g1RG9jdW1lbnRQcHRJbnRlcm1lZGlhdGVMYXllcicpO1xuXG52YXIgX0g1RG9jdW1lbnRQcHRJbnRlcm1lZGlhdGVMYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9INURvY3VtZW50UHB0SW50ZXJtZWRpYXRlTGF5ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFdoaXRlYm9hcmRWaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdoaXRlYm9hcmRWaWV3KCkge1xuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZG9jdW1lbnQuYm9keTtcbiAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdkZWZhdWx0JztcbiAgICAgICAgdmFyIGNvbmZpZ3JhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogT2JqZWN0LmRlZXBBc3NpZ24oe30sIF9Db25maWd1cmF0aW9uMi5kZWZhdWx0LmRlZmF1bHRXaGl0ZWJvYXJkLCBfQ29uZmlndXJhdGlvbjIuZGVmYXVsdC5jb21tb25XaGl0ZWJvYXJkKTtcbiAgICAgICAgdmFyIHJlY2VpdmVBY3Rpb25Db21tYW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB3aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdoaXRlYm9hcmRWaWV3KTtcblxuICAgICAgICB0aGlzLnBhcmVudE5vZGUgPSBwYXJlbnROb2RlOyAvL+iKgueCuVxuICAgICAgICB0aGlzLmluc3RhbmNlSWQgPSBpbnN0YW5jZUlkOyAvL+eZveadv+WunuS+i2lkXG4gICAgICAgIHRoaXMuY29uZmlncmF0aW9uID0gY29uZmlncmF0aW9uOyAvL+mFjee9rumhuVxuICAgICAgICB0aGlzLnJlY2VpdmVBY3Rpb25Db21tYW5kID0gcmVjZWl2ZUFjdGlvbkNvbW1hbmQ7IC8v5o6l5Y+X55m95p2/5Yqo5L2c5oyH5Luk5Ye95pWwXG4gICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSA9IHdoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2U7IC8v55m95p2/566h55CG5ZmoXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSB7fTtcbiAgICAgICAgdGhpcy5maWxlaWQgPSAwO1xuICAgICAgICB0aGlzLmZ1bGxTY3JlZW4gPSBmYWxzZTsgLy/mmK/lkKblhajlsY9cbiAgICAgICAgdGhpcy5yZW1hcmsgPSBmYWxzZTsgLy/mmK/lkKblvIDlkK/mlofmoaPlpIfms6hcbiAgICAgICAgdGhpcy5zY2FsZSA9IHRoaXMuY29uZmlncmF0aW9uLmRlZmF1bHRXaGl0ZWJvYXJkU2NhbGU7IC8vIOivvuS7tuavlOS+i1xuICAgICAgICB0aGlzLnJlbWFya1RleHQgPSAnJzsgLy/lvZPliY3pobXmlofmoaPlpIfms6jnmoTmlofmnKzlhoXlrrlcbiAgICAgICAgdGhpcy5maWxlVHlwZU1hcmsgPSAnZ2VuZXJhbERvY3VtZW50JzsgLy9nZW5lcmFsRG9jdW1lbnQg44CBIGR5bmFtaWNQUFQg44CBIGg1RG9jdW1lbnRcbiAgICAgICAgdGhpcy5jYWNoZU1heFBhZ2VOdW0gPSAxOyAvL+W9k+WJjeaJk+W8gOaWh+aho+eahOe8k+WtmOeahOacgOWkp+mhteaVsO+8jOe8uuecgeS4ujFcbiAgICAgICAgdGhpcy5jYWNoZU1pblBhZ2VOdW0gPSAxOyAvL+W9k+WJjeaJk+W8gOaWh+aho+eahOe8k+WtmOeahOacgOWwj+mhteaVsO+8jOe8uuecgeS4ujFcbiAgICAgICAgdGhpcy5maWxlUHJlTG9hZEN1cnJQYWdlID0gMTsgLy/lvZPliY3miZPlvIDmlofmoaPnmoTnvJPlrZjnmoTlvZPliY3pobXvvIznvLrnnIHkuLoxXG4gICAgICAgIHRoaXMuZmlsZVByZUxvYWRTdGVwID0gMjsgLy/mma7pgJrmlofmoaPpooTliqDovb3mraXplb/vvIznvLrnnIHkuLoyXG4gICAgICAgIHRoaXMuZHluYW1pY1BwdFZvbHVtZSA9IDEwMDsgLy/liqjmgIFQUFTpn7Pph4/lpKflsI9cbiAgICAgICAgdGhpcy5tYXhHZW5lcmFsRmlsZUZvcmNlUmVsb2FkTnVtYmVyID0gMTA7IC8v5pmu6YCa5paH5Lu25pyA5aSn6YeN5paw5Yqg6L295qyh5pWwXG4gICAgICAgIHRoaXMuZ2VuZXJhbERvY3VtZW50RmlsZUZvcmNlUmVsb2FkTnVtYmVyID0gMDsgLy/mma7pgJrmlofku7bph43mlrDliqDovb3mrKHmlbBcbiAgICAgICAgdGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlID0ge1xuICAgICAgICAgICAgdG9vbDoge30sIC8v55m95p2/5qCH5rOo5bel5YW35L+h5oGvXG4gICAgICAgICAgICBhY3Rpb246IHt9LCAvL+aSpOmUgOOAgeaBouWkjeOAgea4heepuuS/oeaBr1xuICAgICAgICAgICAgem9vbToge30sIC8v5pa55rOV57yp5bCP5L+h5oGvXG4gICAgICAgICAgICBwYWdlOiB7fSwgLy/nv7vpobXkv6Hmga9cbiAgICAgICAgICAgIGRvY3VtZW50VHlwZTogdGhpcy5maWxlVHlwZU1hcmssIC8v5omT5byA55qE5paH5Lu257G75Yir77yMZ2VuZXJhbERvY3VtZW5077yI5pmu6YCa5paH5qGj77yJ44CBZHluYW1pY1BQVO+8iOWKqOaAgVBQVO+8ieOAgWg1RG9jdW1lbnQoSDXor77ku7YpXG4gICAgICAgICAgICBmaWxlaWQ6IHRoaXMuZmlsZWlkLCAvL+aJk+W8gOeahOaWh+aho+eahOaWh+S7tmlkXG4gICAgICAgICAgICBkeW5hbWljUHB0Vm9sdW1lOiB0aGlzLmR5bmFtaWNQcHRWb2x1bWUsIC8v5Yqo5oCBUFBU5paH5qGj55qE6Z+z6YePXG4gICAgICAgICAgICBmdWxsU2NyZWVuOiB0aGlzLmZ1bGxTY3JlZW4sIC8v5piv5ZCm5YWo5bGPXG4gICAgICAgICAgICByZW1hcms6IHRoaXMucmVtYXJrLCAvL+aYr+WQpuW8gOWQr+aWh+aho+Wkh+azqFxuICAgICAgICAgICAgc2NhbGU6IHRoaXMuc2NhbGUsIC8v6K++5Lu25q+U5L6LXG4gICAgICAgICAgICByZW1hcmtUZXh0OiB0aGlzLnJlbWFya1RleHQsIC8v5b2T5YmN6aG15paH5qGj5aSH5rOo55qE5paH5pys5YaF5a65XG4gICAgICAgICAgICBvdGhlcjogeyAvL+WFtuWug+S/oeaBr1xuICAgICAgICAgICAgICAgIHByaW1hcnlDb2xvcjogdGhpcy5jb25maWdyYXRpb24ucHJpbWFyeUNvbG9yLCAvL+eUu+eslOminOiJsiAs6buY6K6kICMwMDAwMDBcbiAgICAgICAgICAgICAgICBzZWNvbmRhcnlDb2xvcjogdGhpcy5jb25maWdyYXRpb24uc2Vjb25kYXJ5Q29sb3IsIC8v5aGr5YWF6aKc6ImyICzpu5jorqQgI2ZmZmZmZlxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5jb25maWdyYXRpb24uYmFja2dyb3VuZENvbG9yLCAvL+iDjOaZr+minOiJsiAs6buY6K6kICNmZmZmZmZcbiAgICAgICAgICAgICAgICBwZW5jaWxXaWR0aDogdGhpcy5jb25maWdyYXRpb24ucGVuY2lsV2lkdGgsIC8v55S756yU5aSn5bCPICwg6buY6K6kNVxuICAgICAgICAgICAgICAgIHNoYXBlV2lkdGg6IHRoaXMuY29uZmlncmF0aW9uLnNoYXBlV2lkdGgsIC8v5Zu+5b2i55S756yU5aSn5bCPICwg6buY6K6kNVxuICAgICAgICAgICAgICAgIGVyYXNlcldpZHRoOiB0aGlzLmNvbmZpZ3JhdGlvbi5lcmFzZXJXaWR0aCwgLy/mqaHnmq7lpKflsI8g77yMIOm7mOiupDE1XG4gICAgICAgICAgICAgICAgZm9udFNpemU6IHRoaXMuY29uZmlncmF0aW9uLmZvbnRTaXplLCAvL+Wtl+S9k+Wkp+WwjyDvvIwg6buY6K6kMThcbiAgICAgICAgICAgICAgICBmb250RmFtaWx5OiB0aGlzLmNvbmZpZ3JhdGlvbi5mb250RmFtaWx5IC8v5L2/55So55qE5a2X5L2TIO+8jOm7mOiupFwi5b6u6L2v6ZuF6buRXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fY3JlYXRlRWxlbWVudHMoKTtcbiAgICAgICAgdGhpcy5fY29ubmVjdEVsZW1lbnRzKCk7XG4gICAgfVxuXG4gICAgLyrojrflj5bphY3nva7pobkqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoV2hpdGVib2FyZFZpZXcsIFt7XG4gICAgICAgIGtleTogJ2dldENvbmZpZ3JhdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb25maWdyYXRpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWdyYXRpb247XG4gICAgICAgIH1cblxuICAgICAgICAvKuS/neWtmOeZveadv+aVsOaNruS4lOWKoOi9veW9k+WJjemhteeahOeZveadv+aVsOaNriovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NhdmVGaWxlZGF0YUFuZExvYWRDdXJycGFnZVdoaXRlYm9hcmREYXRhJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmVGaWxlZGF0YUFuZExvYWRDdXJycGFnZVdoaXRlYm9hcmREYXRhKCkge1xuICAgICAgICAgICAgdmFyIHVwZGF0ZUZpbGVkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgICAgICAgdGhpcy5fc2F2ZUZpbGVkYXRhQW5kTG9hZEN1cnJwYWdlV2hpdGVib2FyZERhdGEodXBkYXRlRmlsZWRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrpgJrnn6Xnmb3mnb9zZGvmiafooYzliqjkvZzmjIfku6QqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdub3RpY2VXaGl0ZWJvYXJkQWN0aW9uQ29tbWFuZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBub3RpY2VXaGl0ZWJvYXJkQWN0aW9uQ29tbWFuZChhY3Rpb24sIGNtZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncGxheU9yUGF1c2VEeW5hbWljUHB0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbGVUeXBlTWFyayA9PT0gJ2R5bmFtaWNQUFQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX0R5bmFtaWNQcHRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5wb3N0TWVzc2FnZSh0aGlzLmluc3RhbmNlSWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAhY21kLnBhdXNlID8gXCJwbGF5RHluYW1pY1BwdFwiIDogXCJzdG9wRHluYW1pY1BwdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndXBkYXRlTXV0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5maWxlVHlwZU1hcmsgPT09ICdkeW5hbWljUFBUJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9EeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQucG9zdE1lc3NhZ2UodGhpcy5pbnN0YW5jZUlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ0V4dGVuZGVkTm90aWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWREYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVwZGF0ZU11dGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgbXV0ZTogY21kLmlzTXV0ZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdFeHRlbmRlZE5vdGljZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5maWxlVHlwZU1hcmsgPT09ICdkeW5hbWljUFBUJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9EeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQucG9zdE1lc3NhZ2UodGhpcy5pbnN0YW5jZUlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ0V4dGVuZGVkTm90aWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWREYXRhOiBjbWQuZXh0ZW5kZWREYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2xvc2VEeW5hbWljUHB0QXV0b1ZpZGVvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbGVUeXBlTWFyayA9PT0gJ2R5bmFtaWNQUFQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX0R5bmFtaWNQcHRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5wb3N0TWVzc2FnZSh0aGlzLmluc3RhbmNlSWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnY2xvc2VEeW5hbWljUHB0QXV0b1ZpZGVvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrph43mlrDliqDovb3mlofmoaMqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZWxvYWRDdXJyZW50RG9jdW1lbnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVsb2FkQ3VycmVudERvY3VtZW50KCkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgdGhpcy5jb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZmlsZVR5cGVNYXJrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2dlbmVyYWxEb2N1bWVudCc6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX1doaXRlYm9hcmRJbnRlcm1lZGlhID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5nZXRXaGl0ZWJvYXJkRmlsZWRhdGEodGhpcy5pbnN0YW5jZUlkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3NwZGZwYXRoID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhLmNvc3BkZnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dmcGF0aCA9IF9XaGl0ZWJvYXJkSW50ZXJtZWRpYS5zd2ZwYXRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29udGVudERvY3VtZW50ID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhLmlzQ29udGVudERvY3VtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVpZCA9IF9XaGl0ZWJvYXJkSW50ZXJtZWRpYS5maWxlaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGUgPSBfV2hpdGVib2FyZEludGVybWVkaWEuZmlsZXR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycnBhZ2UgPSBfV2hpdGVib2FyZEludGVybWVkaWEuY3VycnBhZ2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3NwZGZwYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dmcGF0aCA9IGNvc3BkZnBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3dmcGF0aCAmJiBmaWxldHlwZSAhPT0gJ3doaXRlYm9hcmQnICYmIGZpbGVpZCAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyKGlzQ29udGVudERvY3VtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3dmcGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjID0gc3dmcGF0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHN3ZnBhdGgubGFzdEluZGV4T2YoXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1nVHlwZSA9IHN3ZnBhdGguc3Vic3RyaW5nKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVVcmwgPSBzd2ZwYXRoLnJlcGxhY2UoaW1nVHlwZSwgXCItXCIgKyBjdXJycGFnZSArIGltZ1R5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmMgPSBfR2xvYmFsMi5kZWZhdWx0Lm5vd1VzZURvY0FkZHJlc3MgKyBmaWxlVXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnNldFdoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZSh0aGlzLmluc3RhbmNlSWQsIHNyYywgeyByZXNldERlZGF1bHRXaGl0ZWJvYXJkTWFnbmlmaWNhdGlvbjogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZHluYW1pY1BQVCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuaXNBZ2FpbnJlY29ubmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VSZWxvYWRUaW1lc3RhbXBGcm9tUHB0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2FkQ3VycmVudER5bmFtaWNQcHQoe30sIHsgaXNBZ2FpbnJlY29ubmVjdDogb3B0aW9ucy5pc0FnYWlucmVjb25uZWN0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2g1RG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9hZEN1cnJlbnRINURvY3VtZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JjZVJlbG9hZFRpbWVzdGFtcDogbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrmlLnlj5jmlofmoaPlpIfms6jnmoTlvIDlkK/nirbmgIEqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjaGFuZ2VEb2N1bWVudFJlbWFya1N0YXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZURvY3VtZW50UmVtYXJrU3RhdGUoaXNSZW1hcmspIHtcbiAgICAgICAgICAgIHRoaXMucmVtYXJrID0gaXNSZW1hcmsgJiYgdGhpcy5jb25maWdyYXRpb24uY2FuUmVtYXJrO1xuICAgICAgICAgICAgdGhpcy5fdmlld1N0YXRlVXBkYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuaUueWPmOWFqOWxj+eKtuaAgSovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NoYW5nZUZ1bGxTY3JlZW5TdGF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VGdWxsU2NyZWVuU3RhdGUoaXNGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICB0aGlzLmZ1bGxTY3JlZW4gPSBpc0Z1bGxTY3JlZW47XG4gICAgICAgICAgICB0aGlzLl92aWV3U3RhdGVVcGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMucmVzaXplV2hpdGVib2FyZEhhbmRsZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q6ZSA5q+B55m95p2/6KeG5Zu+Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZGVzdHJveVdoaXRlYm9hcmRWaWV3JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3lXaGl0ZWJvYXJkVmlldygpIHtcbiAgICAgICAgICAgIGlmIChfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0Lmhhc1doaXRlYm9hcmRCeUlkKHRoaXMuaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmRlc3Ryb3lXaGl0ZWJvYXJkSW5zdGFuY2UodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0Lmhhc0R5bmFtaWNQcHRCeUlkKHRoaXMuaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICBfRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmRlc3Ryb3lEeW5hbWljUHB0SW5zdGFuY2UodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0Lmhhc0g1RG9jdW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICBfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmRlc3Ryb3lINURvY3VtZW50SW5zdGFuY2UodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnRzLndoaXRlYm9hcmRWaWV3Um9vdEVsZW1lbnQsIHRoaXMucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5lbGVtZW50cykge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5lbGVtZW50c1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjaGFuZ2VXaGl0ZUJvYXJkQ29uZmlncmF0aW9uJyxcblxuXG4gICAgICAgIC8q5pS55Y+Y55m95p2/55u45YWz6YWN572uKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVdoaXRlQm9hcmRDb25maWdyYXRpb24oY29uZmlncmF0aW9uKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVlcEFzc2lnbih0aGlzLmNvbmZpZ3JhdGlvbiwgY29uZmlncmF0aW9uKTtcbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkQ29uZmlncmF0aW9uQ29weSA9IHt9LFxuICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRDb25maWdyYXRpb25Db3B5ID0ge30sXG4gICAgICAgICAgICAgICAgaDVEb2N1bWVudENvbmZpZ3JhdGlvbkNvcHkgPSB7fTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IE9iamVjdC5lbnRyaWVzKGNvbmZpZ3JhdGlvbilbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfcmVmID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMik7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9yZWYyWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmMlsxXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnY2FuRHJhdycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRDb25maWdyYXRpb25Db3B5WydkZWF3UGVybWlzc2lvbiddID0gdGhpcy5jb25maWdyYXRpb24uY2FuRHJhdyAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5zeW5jaHJvbml6YXRpb24gJiYgdGhpcy5jb25maWdyYXRpb24uaXNDb25uZWN0ZWRSb29tO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ215VXNlcklkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZENvbmZpZ3JhdGlvbkNvcHlbJ215c2VsZklkJ10gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdteU5hbWUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkQ29uZmlncmF0aW9uQ29weVsnbmlja25hbWUnXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3ByaW1hcnlDb2xvcicgfHwga2V5ID09PSAnc2Vjb25kYXJ5Q29sb3InIHx8IGtleSA9PT0gJ3ByaW1hcnlDb2xvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRDb25maWdyYXRpb25Db3B5W2tleS5yZXBsYWNlKC9Db2xvci9nLCAnJyldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnc3luY2hyb25pemF0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGVib2FyZENvbmZpZ3JhdGlvbkNvcHlbJ3N5bmNocm9uaXphdGlvbldoaXRlYm9hcmQnXSA9IHRoaXMuY29uZmlncmF0aW9uLnN5bmNocm9uaXphdGlvbiAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5pc0Nvbm5lY3RlZFJvb207XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkQ29uZmlncmF0aW9uQ29weVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3N5bmNocm9uaXphdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWNQcHRDb25maWdyYXRpb25Db3B5WydzeW5jaHJvbml6YXRpb25EeW5hbWljUHB0J10gPSB0aGlzLmNvbmZpZ3JhdGlvbi5zeW5jaHJvbml6YXRpb24gJiYgdGhpcy5jb25maWdyYXRpb24uaXNDb25uZWN0ZWRSb29tO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2FjdGlvbkNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY1BwdENvbmZpZ3JhdGlvbkNvcHlbJ2R5bmFtaWNQcHRBY3Rpb25DbGljayddID0gdGhpcy5jb25maWdyYXRpb24uYWN0aW9uQ2xpY2sgJiYgdGhpcy5jb25maWdyYXRpb24uaXNDb25uZWN0ZWRSb29tO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY1BwdENvbmZpZ3JhdGlvbkNvcHlba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdzeW5jaHJvbml6YXRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoNURvY3VtZW50Q29uZmlncmF0aW9uQ29weVsnc3luY2hyb25pemF0aW9uSDVEb2N1bWVudCddID0gdGhpcy5jb25maWdyYXRpb24uc3luY2hyb25pemF0aW9uICYmIHRoaXMuY29uZmlncmF0aW9uLmlzQ29ubmVjdGVkUm9vbTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdhY3Rpb25DbGljaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRDb25maWdyYXRpb25Db3B5WydoNURvY3VtZW50QWN0aW9uQ2xpY2snXSA9IHRoaXMuY29uZmlncmF0aW9uLmFjdGlvbkNsaWNrICYmIHRoaXMuY29uZmlncmF0aW9uLmlzQ29ubmVjdGVkUm9vbTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRDb25maWdyYXRpb25Db3B5W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb25maWdyYXRpb25bJ2lzQ29ubmVjdGVkUm9vbSddICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB3aGl0ZWJvYXJkQ29uZmlncmF0aW9uQ29weVsnc3luY2hyb25pemF0aW9uV2hpdGVib2FyZCddID0gdGhpcy5jb25maWdyYXRpb24uc3luY2hyb25pemF0aW9uICYmIHRoaXMuY29uZmlncmF0aW9uLmlzQ29ubmVjdGVkUm9vbTtcbiAgICAgICAgICAgICAgICBkeW5hbWljUHB0Q29uZmlncmF0aW9uQ29weVsnc3luY2hyb25pemF0aW9uRHluYW1pY1BwdCddID0gdGhpcy5jb25maWdyYXRpb24uc3luY2hyb25pemF0aW9uICYmIHRoaXMuY29uZmlncmF0aW9uLmlzQ29ubmVjdGVkUm9vbTtcbiAgICAgICAgICAgICAgICBoNURvY3VtZW50Q29uZmlncmF0aW9uQ29weVsnc3luY2hyb25pemF0aW9uSDVEb2N1bWVudCddID0gdGhpcy5jb25maWdyYXRpb24uc3luY2hyb25pemF0aW9uICYmIHRoaXMuY29uZmlncmF0aW9uLmlzQ29ubmVjdGVkUm9vbTtcbiAgICAgICAgICAgICAgICBkeW5hbWljUHB0Q29uZmlncmF0aW9uQ29weVsnZHluYW1pY1BwdEFjdGlvbkNsaWNrJ10gPSB0aGlzLmNvbmZpZ3JhdGlvbi5hY3Rpb25DbGljayAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5pc0Nvbm5lY3RlZFJvb207XG4gICAgICAgICAgICAgICAgaDVEb2N1bWVudENvbmZpZ3JhdGlvbkNvcHlbJ2g1RG9jdW1lbnRBY3Rpb25DbGljayddID0gdGhpcy5jb25maWdyYXRpb24uYWN0aW9uQ2xpY2sgJiYgdGhpcy5jb25maWdyYXRpb24uaXNDb25uZWN0ZWRSb29tO1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRDb25maWdyYXRpb25Db3B5WydkZWF3UGVybWlzc2lvbiddID0gdGhpcy5jb25maWdyYXRpb24uY2FuRHJhdyAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5zeW5jaHJvbml6YXRpb24gJiYgdGhpcy5jb25maWdyYXRpb24uaXNDb25uZWN0ZWRSb29tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZ3JhdGlvblsnc3luY2hyb25pemF0aW9uJ10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRDb25maWdyYXRpb25Db3B5WydkZWF3UGVybWlzc2lvbiddID0gdGhpcy5jb25maWdyYXRpb24uY2FuRHJhdyAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5zeW5jaHJvbml6YXRpb24gJiYgdGhpcy5jb25maWdyYXRpb24uaXNDb25uZWN0ZWRSb29tO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnVwZGF0ZVdoaXRlYm9hcmRQcm9wZXJ0eSh0aGlzLmluc3RhbmNlSWQsIHdoaXRlYm9hcmRDb25maWdyYXRpb25Db3B5KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ3JhdGlvbi5sb2FkRHluYW1pY1BwdFZpZXcgJiYgdGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgdGhpcy5jb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICBfRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnVwZGF0ZUR5bmFtaWNQcHRQcm9wZXJ0eSh0aGlzLmluc3RhbmNlSWQsIGR5bmFtaWNQcHRDb25maWdyYXRpb25Db3B5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ3JhdGlvbi5sb2FkSDVEb2N1bWVudFZpZXcgJiYgdGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgdGhpcy5jb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICBfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnVwZGF0ZUg1RG9jdW1lbnRQcm9wZXJ0eSh0aGlzLmluc3RhbmNlSWQsIGg1RG9jdW1lbnRDb25maWdyYXRpb25Db3B5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWdyYXRpb24ubG9hZER5bmFtaWNQcHRWaWV3ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5lbGVtZW50cy5keW5hbWljUHB0Vmlld0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlncmF0aW9uLmxvYWREeW5hbWljUHB0VmlldyAmJiAhZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5lbGVtZW50cy5keW5hbWljUHB0Vmlld0VsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpKSkge1xuICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50cy5kb2N1bWVudFZpZXdFbGVtZW50LCB0aGlzLmVsZW1lbnRzLmR5bmFtaWNQcHRWaWV3RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb2R1Y3Rpb25EeW5hbWljUHB0KCk7IC8v55Sf5Lqn5Yqo5oCBUFBUXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghY29uZmlncmF0aW9uLmxvYWREeW5hbWljUHB0VmlldyAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmVsZW1lbnRzLmR5bmFtaWNQcHRWaWV3RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lkJykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0Lmhhc0R5bmFtaWNQcHRCeUlkKHRoaXMuaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9EeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuZGVzdHJveUR5bmFtaWNQcHRJbnN0YW5jZSh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnRzLmR5bmFtaWNQcHRWaWV3RWxlbWVudCwgdGhpcy5lbGVtZW50cy5kb2N1bWVudFZpZXdFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlncmF0aW9uLmxvYWRINURvY3VtZW50VmlldyAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZWxlbWVudHMuaDVEb2N1bWVudFZpZXdFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZ3JhdGlvbi5sb2FkSDVEb2N1bWVudFZpZXcgJiYgIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZWxlbWVudHMuaDVEb2N1bWVudFZpZXdFbGVtZW50LmdldEF0dHJpYnV0ZSgnaWQnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudHMuZG9jdW1lbnRWaWV3RWxlbWVudCwgdGhpcy5lbGVtZW50cy5oNURvY3VtZW50Vmlld0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9kdWN0aW9uSDVEb2N1bWVudCgpOyAvL+eUn+S6p0g16K++5Lu2XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghY29uZmlncmF0aW9uLmxvYWRINURvY3VtZW50VmlldyAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmVsZW1lbnRzLmg1RG9jdW1lbnRWaWV3RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lkJykpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0Lmhhc0g1RG9jdW1lbnRCeUlkKHRoaXMuaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9INURvY3VtZW50UHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuZGVzdHJveUg1RG9jdW1lbnRJbnN0YW5jZSh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnRzLmg1RG9jdW1lbnRWaWV3RWxlbWVudCwgdGhpcy5lbGVtZW50cy5kb2N1bWVudFZpZXdFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlncmF0aW9uLnJvb3RCYWNrZ3JvdW5kQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC51cGRhdGVTdHlsZSh0aGlzLmVsZW1lbnRzLndoaXRlYm9hcmRWaWV3Um9vdEVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb25maWdyYXRpb24ucm9vdEJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZ3JhdGlvbi5pc01vYmlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZ3JhdGlvbi5pc01vYmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYWRkQ2xhc3ModGhpcy5lbGVtZW50cy53aGl0ZWJvYXJkVmlld1Jvb3RFbGVtZW50LCAnYXBwLW1vYmlsZScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzLndoaXRlYm9hcmRWaWV3Um9vdEVsZW1lbnQsICdhcHAtbW9iaWxlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZ3JhdGlvbi5jYW5QYWdlICE9PSB1bmRlZmluZWQgfHwgY29uZmlncmF0aW9uLmFkZFBhZ2UgIT09IHVuZGVmaW5lZCB8fCBjb25maWdyYXRpb24uaXNDb25uZWN0ZWRSb29tICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3U3RhdGVVcGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVjZWl2ZUV2ZW50Um9vbVB1Ym1zZycsXG5cblxuICAgICAgICAvKuWkhOeQhnJvb20tcHVibXNnKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlY2VpdmVFdmVudFJvb21QdWJtc2cocmVjdkV2ZW50RGF0YSkge1xuICAgICAgICAgICAgaWYgKHJlY3ZFdmVudERhdGEgJiYgdHlwZW9mIHJlY3ZFdmVudERhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmVjdkV2ZW50RGF0YSA9IEpTT04ucGFyc2UocmVjdkV2ZW50RGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHR5cGVvZiByZWN2RXZlbnREYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihyZWN2RXZlbnREYXRhKSkgPT09ICdvYmplY3QnICYmIHJlY3ZFdmVudERhdGEubWVzc2FnZSAmJiB0eXBlb2YgcmVjdkV2ZW50RGF0YS5tZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJlY3ZFdmVudERhdGEubWVzc2FnZSA9IEpTT04ucGFyc2UocmVjdkV2ZW50RGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdHlwZW9mKHJlY3ZFdmVudERhdGEubWVzc2FnZSkgPT09ICdvYmplY3QnICYmIHJlY3ZFdmVudERhdGEubWVzc2FnZS5kYXRhICYmIHR5cGVvZiByZWN2RXZlbnREYXRhLm1lc3NhZ2UuZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZWN2RXZlbnREYXRhLm1lc3NhZ2UuZGF0YSA9IEpTT04ucGFyc2UocmVjdkV2ZW50RGF0YS5tZXNzYWdlLmRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHB1Ym1zZ0RhdGEgPSByZWN2RXZlbnREYXRhLm1lc3NhZ2U7XG4gICAgICAgICAgICBzd2l0Y2ggKHB1Ym1zZ0RhdGEubmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJTaG93UGFnZVwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJFeHRlbmRTaG93UGFnZVwiOlxuICAgICAgICAgICAgICAgICAgICBwdWJtc2dEYXRhLnNvdXJjZSA9ICdyb29tLXB1Ym1zZyc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNob3dQYWdlU2lnbmFsbGluZyhwdWJtc2dEYXRhLCByZWN2RXZlbnREYXRhLmxvY2FsKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIndoaXRlYm9hcmRNYXJrVG9vbFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJFeHRlbmRXaGl0ZWJvYXJkTWFya1Rvb2xcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHB1Ym1zZ0RhdGEuZGF0YSAmJiBwdWJtc2dEYXRhLmRhdGEuc2VsZWN0TW91c2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuYWN0aXZlV2hpdGVib2FyZFRvb2woJ3Rvb2xfbW91c2UnLCB0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC51c2VIaXN0b3J5UGVuVG9vbCh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJOZXdQcHRUcmlnZ2VyQWN0aW9uQ2xpY2tcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiRXh0ZW5kTmV3UHB0VHJpZ2dlckFjdGlvbkNsaWNrXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ3JhdGlvbi5sb2FkRHluYW1pY1BwdFZpZXcgJiYgdGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgdGhpcy5jb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9EeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQucG9zdE1lc3NhZ2VEeW5hbWljUHB0VHJpZ2dlckFjdGlvbih0aGlzLmluc3RhbmNlSWQsIHB1Ym1zZ0RhdGEuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkg1RG9jdW1lbnRBY3Rpb25cIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiRXh0ZW5kSDVEb2N1bWVudEFjdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25maWdyYXRpb24ubG9hZEg1RG9jdW1lbnRWaWV3ICYmIHRoaXMuaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnIHx8IHRoaXMuY29uZmlncmF0aW9uLmhhc0V4dGVuZERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnBvc3RNZXNzYWdlSDVEb2N1bWVudFRyaWdnZXJBY3Rpb24odGhpcy5pbnN0YW5jZUlkLCBwdWJtc2dEYXRhLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJQcHRWb2x1bWVDb250cm9sXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIkV4dGVuZFBwdFZvbHVtZUNvbnRyb2xcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlZHluYW1pY1BwdFZvbHVtZShwdWJtc2dEYXRhLmRhdGEudm9sdW1lICogMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlY2VpdmVFdmVudFJvb21EZWxtc2cnLFxuXG5cbiAgICAgICAgLyrlpITnkIZyb29tLWRlbG1zZyovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWNlaXZlRXZlbnRSb29tRGVsbXNnKHJlY3ZFdmVudERhdGEpIHt9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZWNlaXZlRXZlbnRSb29tTXNnbGlzdCcsXG5cblxuICAgICAgICAvKuWkhOeQhnJvb20tbXNnbGlzdCovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWNlaXZlRXZlbnRSb29tTXNnbGlzdChuYW1lLCBzaWduYWxsaW5nRGF0YSkge1xuICAgICAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnU2hvd1BhZ2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJFeHRlbmRTaG93UGFnZVwiOlxuICAgICAgICAgICAgICAgICAgICBzaWduYWxsaW5nRGF0YS5zb3VyY2UgPSAncm9vbS1tc2dsaXN0JztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlU2hvd1BhZ2VTaWduYWxsaW5nKHNpZ25hbGxpbmdEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnd2hpdGVib2FyZE1hcmtUb29sJzpcbiAgICAgICAgICAgICAgICBjYXNlICdFeHRlbmRXaGl0ZWJvYXJkTWFya1Rvb2wnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoc2lnbmFsbGluZ0RhdGEuZGF0YSAmJiBzaWduYWxsaW5nRGF0YS5kYXRhLnNlbGVjdE1vdXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmFjdGl2ZVdoaXRlYm9hcmRUb29sKCd0b29sX21vdXNlJywgdGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQudXNlSGlzdG9yeVBlblRvb2wodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiTmV3UHB0VHJpZ2dlckFjdGlvbkNsaWNrXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIkV4dGVuZE5ld1BwdFRyaWdnZXJBY3Rpb25DbGlja1wiOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25maWdyYXRpb24ubG9hZER5bmFtaWNQcHRWaWV3ICYmIHRoaXMuaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnIHx8IHRoaXMuY29uZmlncmF0aW9uLmhhc0V4dGVuZERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnBvc3RNZXNzYWdlRHluYW1pY1BwdFRyaWdnZXJBY3Rpb24odGhpcy5pbnN0YW5jZUlkLCBzaWduYWxsaW5nRGF0YS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiSDVEb2N1bWVudEFjdGlvblwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJFeHRlbmRINURvY3VtZW50QWN0aW9uXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ3JhdGlvbi5sb2FkSDVEb2N1bWVudFZpZXcgJiYgdGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgdGhpcy5jb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9INURvY3VtZW50UHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQucG9zdE1lc3NhZ2VINURvY3VtZW50VHJpZ2dlckFjdGlvbih0aGlzLmluc3RhbmNlSWQsIHNpZ25hbGxpbmdEYXRhLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJQcHRWb2x1bWVDb250cm9sXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIkV4dGVuZFBwdFZvbHVtZUNvbnRyb2xcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlZHluYW1pY1BwdFZvbHVtZShzaWduYWxsaW5nRGF0YS5kYXRhLnZvbHVtZSAqIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZXZlaXZlRXZlbnRSb29tUmVjZWl2ZUFjdGlvbkNvbW1hbmQnLFxuXG5cbiAgICAgICAgLyrlpITnkIZyb29tLXJlY2VpdmVBY3Rpb25Db21tYW5kKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJldmVpdmVFdmVudFJvb21SZWNlaXZlQWN0aW9uQ29tbWFuZChhY3Rpb24sIGNtZCkge1xuICAgICAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdmdWxsU2NyZWVuQ2hhbmdlQ2FsbGJhY2snOlxuICAgICAgICAgICAgICAgICAgICAvL+aOpeaUtuWFqOWxj+eahOeKtuaAgemAmuefpVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZUZ1bGxTY3JlZW5TdGF0ZShjbWQuaXNGdWxsU2NyZWVuKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2hhbmdlRHluYW1pY1BwdFNpemUnOlxuICAgICAgICAgICAgICAgICAgICAvL+aUueWPmOWKqOaAgXBwdOeahOWkp+Wwj1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25maWdyYXRpb24uaXNNb2JpbGUgJiYgdGhpcy5maWxlVHlwZU1hcmsgPT09ICdkeW5hbWljUFBUJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX0R5bmFtaWNQcHRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5jaGFuZ2VEeW5hbWljUHB0U2l6ZSh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Nsb3NlRHluYW1pY1BwdFdlYlBsYXknOlxuICAgICAgICAgICAgICAgICAgICAvL+WFs+mXreWKqOaAgVBQVOeVjOmdoumHjOeahOinhumikeaSreaUvlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5maWxlVHlwZU1hcmsgPT09ICdkeW5hbWljUFBUJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiY2xvc2VEeW5hbWljUHB0QXV0b1ZpZGVvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBfRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnBvc3RNZXNzYWdlKHRoaXMuaW5zdGFuY2VJZCwgcG9zdE1lc3NhZ2VEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5Y+R6YCB5Yqo5L2c5oyH5a6aXHJcbiAgICAgICAgKiBAcGFyYW1zIGFjdGlvbu+8muaJp+ihjOeahOWKqOS9nFxyXG4gICAgICAgICAgICAgIGFjdGlvbuebruWJjeacie+8mlxyXG4gICAgICAgICAgICAgICAgY2xvc2VBbGxTZWxlY3RCb3jvvJrpgInmi6nmoYbnmoTlhbPpl63pgJrnn6Xmtojmga9cclxuICAgICAgICAgICAgICAgIHZpZXdTdGF0ZVVwZGF0Ze+8muinhuWbvueKtuaAgeabtOaWsFxyXG4gICAgICAgICogQHBhcmFtcyBjbWQ65Yqo5L2c5o+P6L+wXHJcbiAgICAgICAgKiAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZW5kQWN0aW9uQ29tbWFuZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZW5kQWN0aW9uQ29tbWFuZChhY3Rpb24sIGNtZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVjZWl2ZUFjdGlvbkNvbW1hbmQgJiYgdHlwZW9mIHRoaXMucmVjZWl2ZUFjdGlvbkNvbW1hbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBjbWQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNtZCkpID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShjbWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNtZCA9IE9iamVjdC5kZWVwQXNzaWduKHt9LCBjbWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJlY2VpdmVBY3Rpb25Db21tYW5kKGFjdGlvbiwgY21kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5Y+R6YCBUHViTXNn5L+h5LukICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3B1Yk1zZycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwdWJNc2cocGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5wdWJNc2cpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UucHViTXNnKHBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWPkemAgURlbE1zZ+S/oeS7pOWKn+iDveWHveaVsCzliKDpmaTkuYvliY3lj5HpgIHnmoTkv6Hku6RcclxuICAgICAgICAgKiBAYWxsUGFyYW1zIHBhcmFtczpkZWxNc2fpnIDopoHnmoTmiYDmnInlj4LmlbDmib/mjqXlr7nosaFcclxuICAgICAgICAgICAgICogQHBhcmFtcyBuYW1lOuS/oeS7pOWQjeWtlyAsIFN0cmluZ1xyXG4gICAgICAgICAgICAgKiBAcGFyYW1zIGlkOuS/oeS7pElEICwgU3RyaW5nXHJcbiAgICAgICAgICAgICAqIEBwYXJhbXMgdG9JRDrlj5HpgIHnu5nosIEo6buY6K6k5Y+R57uZ5omA5pyJ5Lq6KSAsIFN0cmluZ1xyXG4gICAgICAgICAgICAgICAgIF9fYWxs77yI5omA5pyJ5Lq677yM5YyF5ous6Ieq5bex77yJICxcclxuICAgICAgICAgICAgICAgICBfX2FsbEV4Y2VwdFNlbmRlciDvvIjpmaTkuoboh6rlt7Hku6XlpJbnmoTmiYDmnInkurrvvIksXHJcbiAgICAgICAgICAgICAgICAgdXNlcmlk77yI5oyH5a6aaWTlj5Hnu5nmn5DkurrvvIkgLFxyXG4gICAgICAgICAgICAgICAgIF9fbm9uZSDvvIjosIHkuZ/kuI3lj5HvvIzlj6rmnInmnI3liqHlmajkvJrmlLbliLDvvIksXHJcbiAgICAgICAgICAgICAgICAgX19hbGxTdXBlclVzZXJz77yI5Y+q5Y+R57uZ5Yqp5pWZ5ZKM6ICB5biI77yJLFxyXG4gICAgICAgICAgICAgICAgIF9fZ3JvdXA6Z3JvdXBBOmdyb3VwQijlj5HpgIHnu5nmjIflrprnu4TvvIznu4RpZOS4jeiDveWMheWQq+WGkuWPtyksXHJcbiAgICAgICAgICAgICAgICAgX19ncm91cEV4Y2VwdFNlbmRlcjpncm91cEHvvIjlj5Hnu5nmjIflrprnu4TvvIzkuI3ljIXmi6zoh6rlt7HvvIlcclxuICAgICAgICAgICAgICogQHBhcmFtcyBkYXRhOuS/oeS7pOaQuuW4pueahOaVsOaNriAsIEpzb24vSnNvblN0cmluZ1xyXG4gICAgICAgICAq5aSH5rOo77ya5oyH5a6a55So5oi35Lya5pS25Yiw5LqL5Lu2cm9vbS1kZWxtc2dcclxuICAgICAgICAgKiAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkZWxNc2cnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVsTXNnKHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSAmJiB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZGVsTXNnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLmRlbE1zZyhwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrojrflj5bnmb3mnb/op4blm77nirbmgIEqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRXaGl0ZWJvYXJkVmlld1N0YXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFdoaXRlYm9hcmRWaWV3U3RhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdmb3JjZVZpZXdTdGF0ZVVwZGF0ZScsXG5cblxuICAgICAgICAvKuW8uuWItuabtOaWsOinhuWbvueKtuaAgSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JjZVZpZXdTdGF0ZVVwZGF0ZSgpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdTdGF0ZVVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrkvb/nlKjmoIfms6jlt6XlhbdcclxuICAgICAgICAgKiBAcGFyYW1zIHRvb2xLZXk65bel5YW355qEa2V5XHJcbiAgICAgICAgICogKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndXNlV2hpdGVib2FyZFRvb2wnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXNlV2hpdGVib2FyZFRvb2wodG9vbEtleSkge1xuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFZpZXdTdGF0ZS50b29sW3Rvb2xLZXldICYmIHRoaXMud2hpdGVib2FyZFZpZXdTdGF0ZS50b29sW3Rvb2xLZXldLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnd2hpdGVib2FyZCB0b29sKCcgKyB0b29sS2V5ICsgJykgc3RhdGUgaXMgZGlzYWJsZWQgLCBjYW5ub3QgdXNlICcgKyB0b29sS2V5ICsgJyB0b29sIScpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgdGhpcy5jb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpICYmIHRoaXMuY29uZmlncmF0aW9uLnN5bmNocm9uaXphdGlvbiAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5pc0Nvbm5lY3RlZFJvb20gJiYgdG9vbEtleSAhPT0gX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5nZXRBY3RpdmVUb29sKHRoaXMuaW5zdGFuY2VJZCkgJiYgKHRvb2xLZXkgIT09ICd0b29sX21vdXNlJyAmJiBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmdldEFjdGl2ZVRvb2wodGhpcy5pbnN0YW5jZUlkKSA9PT0gJ3Rvb2xfbW91c2UnIHx8IHRvb2xLZXkgPT09ICd0b29sX21vdXNlJyAmJiBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmdldEFjdGl2ZVRvb2wodGhpcy5pbnN0YW5jZUlkKSAhPT0gJ3Rvb2xfbW91c2UnKSkge1xuICAgICAgICAgICAgICAgIHZhciBwdWJtc2dEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyA/ICd3aGl0ZWJvYXJkTWFya1Rvb2wnIDogJ0V4dGVuZFdoaXRlYm9hcmRNYXJrVG9vbCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyA/ICd3aGl0ZWJvYXJkTWFya1Rvb2wnIDogJ0V4dGVuZFdoaXRlYm9hcmRNYXJrVG9vbF8nICsgdGhpcy5pbnN0YW5jZUlkLFxuICAgICAgICAgICAgICAgICAgICB0b0lEOiAnX19hbGxFeGNlcHRTZW5kZXInLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VJbnN0YW5jZUlkOiB0aGlzLmluc3RhbmNlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RNb3VzZTogdG9vbEtleSA9PT0gJ3Rvb2xfbW91c2UnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNhdmU6IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMucHViTXNnKHB1Ym1zZ0RhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5hY3RpdmVXaGl0ZWJvYXJkVG9vbCh0b29sS2V5LCB0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrmiafooYzmkqTplIDmk43kvZxcclxuICAgICAgICAgKiBAcGFyYW1zIGFjdGlvbktleTrliqjkvZznmoRrZXlcclxuICAgICAgICAqICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2V4ZWN1dGVXaGl0ZWJvYXJkQWN0aW9uJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4ZWN1dGVXaGl0ZWJvYXJkQWN0aW9uKGFjdGlvbktleSkge1xuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFZpZXdTdGF0ZS5hY3Rpb25bYWN0aW9uS2V5XSAmJiB0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUuYWN0aW9uW2FjdGlvbktleV0uZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci53YXJuaW5nKCd3aGl0ZWJvYXJkIGFjdGlvbignICsgYWN0aW9uS2V5ICsgJykgc3RhdGUgaXMgZGlzYWJsZWQgLCBjYW5ub3QgZXhlY3V0ZSAnICsgYWN0aW9uS2V5ICsgJyBhY3Rpb24hJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5hY3RpdmVXaGl0ZWJvYXJkVG9vbChhY3Rpb25LZXksIHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuaJp+ihjOe8qeaUvueZveadv1xyXG4gICAgICAgICAqIEBwYXJhbXMgem9vbUtleTrnmb3mnb/nvKnmlL7nmoRrZXkg77yMIGtleeWAvOaPj+i/sOWmguS4i++8mlxyXG4gICAgICAgICAqICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2V4ZWN1dGVab29tV2hpdGVhb3JkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4ZWN1dGVab29tV2hpdGVhb3JkKHpvb21LZXkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUuem9vbVt6b29tS2V5XSAmJiB0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUuem9vbVt6b29tS2V5XS5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ3doaXRlYm9hcmQgem9vbSgnICsgem9vbUtleSArICcpIHN0YXRlIGlzIGRpc2FibGVkICwgY2Fubm90IGV4ZWN1dGUgJyArIHpvb21LZXkgKyAnIHpvb20hJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5hY3RpdmVXaGl0ZWJvYXJkVG9vbCh6b29tS2V5LCB0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyrliqDpobUqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdhZGRQYWdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFBhZ2UoKSB7XG4gICAgICAgICAgICB2YXIgX1doaXRlYm9hcmRJbnRlcm1lZGlhMiA9IF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuZ2V0V2hpdGVib2FyZEZpbGVkYXRhKHRoaXMuaW5zdGFuY2VJZCksXG4gICAgICAgICAgICAgICAgZmlsZWlkID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhMi5maWxlaWQsXG4gICAgICAgICAgICAgICAgcGFnZW51bSA9IF9XaGl0ZWJvYXJkSW50ZXJtZWRpYTIucGFnZW51bTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsZVR5cGVNYXJrICE9PSAnZ2VuZXJhbERvY3VtZW50JyAmJiBOdW1iZXIoZmlsZWlkKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ3doaXRlYm9hcmQgYWRkUGFnZSBtZXRob2QgY2FuIG9ubHkgYmUgdXNlZCBpbiBwdXJlIHdoaXRlYm9hcmQuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFnZW51bSsrO1xuICAgICAgICAgICAgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC51cGRhdGVXaGl0ZWJvYXJkRmlsZWRhdGEodGhpcy5pbnN0YW5jZUlkLCB7XG4gICAgICAgICAgICAgICAgcGFnZW51bTogcGFnZW51bVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWdyYXRpb24uc3luY2hyb25pemF0aW9uICYmIHRoaXMuY29uZmlncmF0aW9uLmlzQ29ubmVjdGVkUm9vbSkge1xuICAgICAgICAgICAgICAgIHZhciBwdWJtc2dEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyA/ICdXQlBhZ2VDb3VudCcgOiAnRXh0ZW5kV0JQYWdlQ291bnQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogdGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgPyAnV0JQYWdlQ291bnQnIDogJ1dCUGFnZUNvdW50XycgKyB0aGlzLmluc3RhbmNlSWQsXG4gICAgICAgICAgICAgICAgICAgIHRvSUQ6ICdfX2FsbEV4Y2VwdFNlbmRlcicsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUluc3RhbmNlSWQ6IHRoaXMuaW5zdGFuY2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsUGFnZTogcGFnZW51bSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVpZDogZmlsZWlkXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNhdmU6IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMucHViTXNnKHB1Ym1zZ0RhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5uZXh0UGFnZSgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICduZXh0UGFnZScsXG5cblxuICAgICAgICAvKuS4i+S4gOmhtSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0UGFnZSgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUucGFnZS5uZXh0UGFnZSAmJiB0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUucGFnZS5uZXh0UGFnZS5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ3doaXRlYm9hcmQgbmV4UGFnZSBzdGF0ZSBpcyBkaXNhYmxlZCAsIGNhbm5vdCBleGVjdXRlIG5leHRQYWdlIG1ldGhvZCEnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZmlsZVR5cGVNYXJrKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZ2VuZXJhbERvY3VtZW50JzpcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYTMgPSBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmdldFdoaXRlYm9hcmRGaWxlZGF0YSh0aGlzLmluc3RhbmNlSWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycnBhZ2UgPSBfV2hpdGVib2FyZEludGVybWVkaWEzLmN1cnJwYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZW51bSA9IF9XaGl0ZWJvYXJkSW50ZXJtZWRpYTMucGFnZW51bTtcblxuICAgICAgICAgICAgICAgICAgICBjdXJycGFnZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycnBhZ2UgPiBwYWdlbnVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJycGFnZSA9IHBhZ2VudW07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZVB1Ym1zZ0RhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycnBhZ2U6IGN1cnJwYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZW5kU2lnbmFsbGluZ19TaG93UGFnZSh1cGRhdGVQdWJtc2dEYXRhLCBmdW5jdGlvbiAocHVibXNnRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVjZWl2ZUV2ZW50Um9vbVB1Ym1zZyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Jvb20tcHVibXNnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBwdWJtc2dEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2g1RG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICBfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0Lm5leHRQYWdlKHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2R5bmFtaWNQUFQnOlxuICAgICAgICAgICAgICAgICAgICBfRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0Lm5leHRTbGlkZSh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q5LiK5LiA6aG1Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncHJldlBhZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJldlBhZ2UoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFZpZXdTdGF0ZS5wYWdlLnByZXZQYWdlICYmIHRoaXMud2hpdGVib2FyZFZpZXdTdGF0ZS5wYWdlLnByZXZQYWdlLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnd2hpdGVib2FyZCBwcmV2UGFnZSBzdGF0ZSBpcyBkaXNhYmxlZCAsIGNhbm5vdCBleGVjdXRlIHByZXZQYWdlIG1ldGhvZCEnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZmlsZVR5cGVNYXJrKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZ2VuZXJhbERvY3VtZW50JzpcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYTQgPSBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmdldFdoaXRlYm9hcmRGaWxlZGF0YSh0aGlzLmluc3RhbmNlSWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycnBhZ2UgPSBfV2hpdGVib2FyZEludGVybWVkaWE0LmN1cnJwYWdlO1xuXG4gICAgICAgICAgICAgICAgICAgIGN1cnJwYWdlLS07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJycGFnZSA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJwYWdlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlUHVibXNnRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJycGFnZTogY3VycnBhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbmRTaWduYWxsaW5nX1Nob3dQYWdlKHVwZGF0ZVB1Ym1zZ0RhdGEsIGZ1bmN0aW9uIChwdWJtc2dEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIucmVjZWl2ZUV2ZW50Um9vbVB1Ym1zZyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Jvb20tcHVibXNnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBwdWJtc2dEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2g1RG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICBfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnByZXZQYWdlKHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2R5bmFtaWNQUFQnOlxuICAgICAgICAgICAgICAgICAgICBfRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnByZXZTbGlkZSh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q6Lez6L2s5Yiw5p+Q5LiA6aG1Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2tpcFBhZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2tpcFBhZ2UocGFnZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5maWxlVHlwZU1hcmspIHtcbiAgICAgICAgICAgICAgICBjYXNlICdnZW5lcmFsRG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICB2YXIgX1doaXRlYm9hcmRJbnRlcm1lZGlhNSA9IF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuZ2V0V2hpdGVib2FyZEZpbGVkYXRhKHRoaXMuaW5zdGFuY2VJZCksXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlbnVtID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhNS5wYWdlbnVtO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWdlID4gcGFnZW51bSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZSA9IHBhZ2VudW07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhZ2UgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlUHVibXNnRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJycGFnZTogcGFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VuZFNpZ25hbGxpbmdfU2hvd1BhZ2UodXBkYXRlUHVibXNnRGF0YSwgZnVuY3Rpb24gKHB1Ym1zZ0RhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMy5yZWNlaXZlRXZlbnRSb29tUHVibXNnKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAncm9vbS1wdWJtc2cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHB1Ym1zZ0RhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWw6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaDVEb2N1bWVudCc6XG4gICAgICAgICAgICAgICAgICAgIF9INURvY3VtZW50UHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuc2tpcFBhZ2UodGhpcy5pbnN0YW5jZUlkLCBwYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZHluYW1pY1BQVCc6XG4gICAgICAgICAgICAgICAgICAgIHZhciBzbGlkZSA9IHBhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYXRpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0Lmp1bXBUb0FuaW1hdGlvbih0aGlzLmluc3RhbmNlSWQsIHNsaWRlLCBzdGVwLCBpbml0aWF0aXZlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuS4i+S4gOatpe+8jOeUqOS6juWKqOaAgXBwdCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ25leHRTdGVwJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG5leHRTdGVwKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZmlsZVR5cGVNYXJrICE9PSAnZHluYW1pY1BQVCcpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci53YXJuaW5nKCd3aGl0ZWJvYXJkIG5leHRTdGVwIG1ldGhvZCBjYW4gb25seSBiZSB1c2VkIGluIGR5bmFtaWMgUFBUIGZpbGVzLicpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUucGFnZS5uZXh0U3RlcCAmJiB0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUucGFnZS5uZXh0U3RlcC5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIEwuTG9nZ2VyLndhcm5pbmcoJ3doaXRlYm9hcmQgbmV4dFN0ZXAgc3RhdGUgaXMgZGlzYWJsZWQgLCBjYW5ub3QgZXhlY3V0ZSBuZXh0U3RlcCBtZXRob2QhJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmZpbGVUeXBlTWFyaykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2R5bmFtaWNQUFQnOlxuICAgICAgICAgICAgICAgICAgICBfRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0Lm5leHRTdGVwKHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrkuIrkuIDmraXvvIznlKjkuo7liqjmgIFwcHQqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcmV2U3RlcCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmV2U3RlcCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbGVUeXBlTWFyayAhPT0gJ2R5bmFtaWNQUFQnKSB7XG4gICAgICAgICAgICAgICAgTC5Mb2dnZXIud2FybmluZygnd2hpdGVib2FyZCBwcmV2U3RlcCBtZXRob2QgY2FuIG9ubHkgYmUgdXNlZCBpbiBkeW5hbWljIFBQVCBmaWxlcy4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLnBhZ2UucHJldlN0ZXAgJiYgdGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLnBhZ2UucHJldlN0ZXAuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBMLkxvZ2dlci53YXJuaW5nKCd3aGl0ZWJvYXJkIHByZXZTdGVwIHN0YXRlIGlzIGRpc2FibGVkICwgY2Fubm90IGV4ZWN1dGUgcHJldlN0ZXAgbWV0aG9kIScpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5maWxlVHlwZU1hcmspIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkeW5hbWljUFBUJzpcbiAgICAgICAgICAgICAgICAgICAgX0R5bmFtaWNQcHRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5wcmV2U3RlcCh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8q55m95p2/5aSn5bCP5pS55Y+Y55qE5Zue6LCD5Ye95pWwKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVzaXplV2hpdGVib2FyZFNpemVDYWxsYmFjaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemVXaGl0ZWJvYXJkU2l6ZUNhbGxiYWNrKGZhdGhlckNvbnRhaW5lckNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIGlmIChmYXRoZXJDb250YWluZXJDb25maWd1cmF0aW9uLmxvYWRTY3JvbGxCYXIpIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYWRkQ2xhc3ModGhpcy5lbGVtZW50cy50b3RhbERvY3VtZW50Vmlld0VsZW1lbnQsICdjdXN0b20tc2Nyb2xsLWJhcicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50cy50b3RhbERvY3VtZW50Vmlld0VsZW1lbnQsICdjdXN0b20tc2Nyb2xsLWJhcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnVwZGF0ZVN0eWxlKHRoaXMuZWxlbWVudHMuZG9jdW1lbnRWaWV3RWxlbWVudCwge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBmYXRoZXJDb250YWluZXJDb25maWd1cmF0aW9uLnN0eWxlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogZmF0aGVyQ29udGFpbmVyQ29uZmlndXJhdGlvbi5zdHlsZS5oZWlnaHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnVwZGF0ZVN0eWxlKHRoaXMuZWxlbWVudHMudG90YWxEb2N1bWVudFZpZXdFbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IGZhdGhlckNvbnRhaW5lckNvbmZpZ3VyYXRpb24uc3R5bGUud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBmYXRoZXJDb250YWluZXJDb25maWd1cmF0aW9uLnN0eWxlLmhlaWdodCxcbiAgICAgICAgICAgICAgICB0b3A6ICc1MCUnLFxuICAgICAgICAgICAgICAgIGxlZnQ6ICc1MCUnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC51cGRhdGVTdHlsZSh0aGlzLmVsZW1lbnRzLnRvdGFsRG9jdW1lbnRWaWV3RWxlbWVudCwge1xuICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6ICctJyArIHRoaXMuZWxlbWVudHMudG90YWxEb2N1bWVudFZpZXdFbGVtZW50Lm9mZnNldFdpZHRoIC8gMiArICdweCcsXG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAnLScgKyB0aGlzLmVsZW1lbnRzLnRvdGFsRG9jdW1lbnRWaWV3RWxlbWVudC5vZmZzZXRIZWlnaHQgLyAyICsgJ3B4J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ25vdGljZVVwZGF0ZVRvb2xEZXNjQ2FsbGJhY2snLFxuXG5cbiAgICAgICAgLyrlt6XlhbfnirbmgIHmm7TmlrDnmoTlm57osIPlh73mlbAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbm90aWNlVXBkYXRlVG9vbERlc2NDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdTdGF0ZVVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdub3RpY2VVcGRhdGVXaGl0ZWJvYXJkRmlsZWRhdGFDYWxsYmFjaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBub3RpY2VVcGRhdGVXaGl0ZWJvYXJkRmlsZWRhdGFDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdTdGF0ZVVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrJyxcblxuXG4gICAgICAgIC8q5o6l5pS25Yqo5L2c5oyH5Luk5Zue6LCD5Ye95pWwKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2soYWN0aW9uLCBjbWQpIHtcbiAgICAgICAgICAgIGlmIChjbWQuaWQgIT09IHRoaXMuaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2xvc2VBbGxTZWxlY3RCb3gnOlxuICAgICAgICAgICAgICAgICAgICAvL+WFs+mXreaJgOacieeahOmAieaLqeahhlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRBY3Rpb25Db21tYW5kKCdjbG9zZUFsbFNlbGVjdEJveCcpOyAvL+mAieaLqeahhueahOWFs+mXremAmuefpea2iOaBr1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjaGFuZ2VXaGl0ZWJvYXJkQWN0aXZlVG9vbCc6XG4gICAgICAgICAgICAgICAgICAgIC8v5pS55Y+Y55m95p2/5L2/55So55qE5qCH5rOo5bel5YW3XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVZpZXdTaG93QW5kSGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1cGRhdGVXaGl0ZWJvYXJkV2F0ZXJtYXJrSW1hZ2VTY2FsZSc6XG4gICAgICAgICAgICAgICAgICAgIC8v5pu05paw55m95p2/55qEc2NhbGVcbiAgICAgICAgICAgICAgICAgICAgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC51cGRhdGVXaGl0ZWJvYXJkV2F0ZXJtYXJrSW1hZ2VTY2FsZSh0aGlzLmluc3RhbmNlSWQsIGNtZC5zY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2R5bmFtaWNQcHRMb2FkRW5kJzogLy/liqjmgIFwcHTliqDovb3nu5PmnZ9cbiAgICAgICAgICAgICAgICBjYXNlICdoNURvY3VtZW50TG9hZEVuZCc6XG4gICAgICAgICAgICAgICAgICAgIC8vaDXmlofmoaPliqDovb3nu5PmnZ9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FsZSA9IGNtZC5zY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmlld1N0YXRlVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzLmRpc2FibGVDbGlja1ZpZXdFbGVtZW50LCAnbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzZW5kU2lnbmFsbGluZ19TaG93UGFnZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbmRTaWduYWxsaW5nX1Nob3dQYWdlKGNtZC51cGRhdGVQdWJtc2dEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2F2ZUZpbGVkYXRhQW5kTG9hZEN1cnJwYWdlV2hpdGVib2FyZERhdGEnOlxuICAgICAgICAgICAgICAgICAgICAvL+S/neWtmOeZveadv+aVsOaNruS4lOWKoOi9veW9k+WJjemhteeahOeZveadv+aVsOaNrlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zYXZlRmlsZWRhdGFBbmRMb2FkQ3VycnBhZ2VXaGl0ZWJvYXJkRGF0YShjbWQudXBkYXRlRmlsZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkeW5hbWljUHB0U2xpZGVDaGFuZ2UnOlxuICAgICAgICAgICAgICAgICAgICAvL+WKqOaAgXBwdOeahHNsaWRl5pS55Y+YXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NhdmVGaWxlZGF0YUFuZExvYWRDdXJycGFnZVdoaXRlYm9hcmREYXRhKGNtZC51cGRhdGVGaWxlRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2R5bmFtaWNQcHRTdGVwQ2hhbmdlJzpcbiAgICAgICAgICAgICAgICAgICAgLy/liqjmgIFwcHTnmoRzdGVw5pS55Y+YXG4gICAgICAgICAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQudXBkYXRlV2hpdGVib2FyZEZpbGVkYXRhKHRoaXMuaW5zdGFuY2VJZCwgY21kLnVwZGF0ZUZpbGVEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncHVibGlzaER5bWFuaWNQcHROZXR3b3JrTWVkaWEnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vVE9ETyDlj6rmnInkuLvnmb3mnb/miY3og73mkq3mlL7op4bpopFcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImNsb3NlRHluYW1pY1BwdEF1dG9WaWRlb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgX0R5bmFtaWNQcHRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5wb3N0TWVzc2FnZSh0aGlzLmluc3RhbmNlSWQsIHBvc3RNZXNzYWdlRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZWRhdGEgPSBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmdldFdoaXRlYm9hcmRGaWxlZGF0YSh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN3ZnBhdGggPSBmaWxlZGF0YS5zd2ZwYXRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29udGVudERvY3VtZW50ID0gZmlsZWRhdGEuaXNDb250ZW50RG9jdW1lbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcmMgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyKGlzQ29udGVudERvY3VtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzd2ZwYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYyA9IHN3ZnBhdGgucmVwbGFjZSgvXFwvbmV3cHB0Lmh0bWwvZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjID0gX0dsb2JhbDIuZGVmYXVsdC5ub3dVc2VEb2NBZGRyZXNzICsgc3dmcGF0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZC51cmwgPSBzcmMgKyAnLycgKyBjbWQudXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ3JhdGlvbi5jbGllbnRNZWRpYVNoYXJlICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5nZXRSb29tRGVsZWdhdGUoKSAmJiB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkuZ2V0TmF0aXZlSW50ZXJmYWNlICYmIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5nZXRSb29tRGVsZWdhdGUoKS5nZXROYXRpdmVJbnRlcmZhY2UoKSAmJiB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkuZ2V0TmF0aXZlSW50ZXJmYWNlKCkuc3RhcnRTaGFyZU1lZGlhRmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkuZ2V0TmF0aXZlSW50ZXJmYWNlKCkuc3RhcnRTaGFyZU1lZGlhRmlsZShjbWQudXJsLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWdub3JlRWxlbWVudElkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9JRDogdGhpcy5jb25maWdyYXRpb24ubWVkaWFTaGFyZVRvSUQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogY21kLmF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlLnN0YXJ0U2hhcmVNZWRpYShjbWQudXJsLCBjbWQudmlkZW8sIHRoaXMuY29uZmlncmF0aW9uLm1lZGlhU2hhcmVUb0lELCBjbWQuYXR0cmlidXRlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3B1Ymxpc2hEeW1hbmljUHB0TmV0d29ya0F1ZGlvJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlncmF0aW9uLmlzTmF0aXZlUGxheUF1ZGlvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lvcyDmkq3mlL5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZmlsZWRhdGEgPSBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmdldFdoaXRlYm9hcmRGaWxlZGF0YSh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9zd2ZwYXRoID0gX2ZpbGVkYXRhLnN3ZnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2lzQ29udGVudERvY3VtZW50ID0gX2ZpbGVkYXRhLmlzQ29udGVudERvY3VtZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3NyYyA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIoX2lzQ29udGVudERvY3VtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc3dmcGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3JjID0gX3N3ZnBhdGgucmVwbGFjZSgvXFwvbmV3cHB0Lmh0bWwvZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NyYyA9IF9HbG9iYWwyLmRlZmF1bHQubm93VXNlRG9jQWRkcmVzcyArIF9zd2ZwYXRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3NyYyA9IF9zcmMucmVwbGFjZSgvXmh0dHBzLywgXCJodHRwXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NyYyA9IF9zcmMucmVwbGFjZSgvNDQzL2csIFwiODBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbWQudXJsID0gX3NyYyArICcvJyArIGNtZC51cmw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5nZXRSb29tRGVsZWdhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2UuZ2V0Um9vbURlbGVnYXRlKCkuaXNQbGF5QXVkaW8oY21kLnVybCwgY21kLmlzUGxheSwgY21kLmF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1cGRhdGVXaGl0ZWJvYXJkRmlsZWRhdGEnOlxuICAgICAgICAgICAgICAgICAgICBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnVwZGF0ZVdoaXRlYm9hcmRGaWxlZGF0YSh0aGlzLmluc3RhbmNlSWQsIGNtZC51cGRhdGVGaWxlRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2dldFdoaXRlYm9hcmRGaWxlZGF0YSc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbWQgJiYgY21kLmNhbGxiYWNrICYmIHR5cGVvZiBjbWQuY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtZC5jYWxsYmFjayhfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmdldFdoaXRlYm9hcmRGaWxlZGF0YSh0aGlzLmluc3RhbmNlSWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyZWxvYWRDdXJyZW50RG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbG9hZEN1cnJlbnREb2N1bWVudCh7IGlzQWdhaW5yZWNvbm5lY3Q6IGNtZC5pc0FnYWlucmVjb25uZWN0IH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyZWxvYWREeW5hbWljUHB0SWZyYW1lU3JjJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNtZC5pZnJhbWVTcmMgJiYgdGhpcy5maWxlVHlwZU1hcmsgPT09ICdkeW5hbWljUFBUJyAmJiBuZXcgUmVnRXhwKF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuZ2V0V2hpdGVib2FyZEZpbGVkYXRhKHRoaXMuaW5zdGFuY2VJZCkuc3dmcGF0aCArICcvbmV3cHB0Lmh0bWwnLCAnZycpLnRlc3QoY21kLmlmcmFtZVNyYykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbGRGb3JjZVVzZURvY0FkZHJlc3MgPSBfVXRpbHMyLmRlZmF1bHQuZ2V0SXRlbShfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NMaXN0LCBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXkpIHx8IHRoaXMuY29uZmlncmF0aW9uLmRvY0FkZHJlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXkgPSBfVXRpbHMyLmRlZmF1bHQuZ2V0SXRlbShfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NMaXN0LCBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZSAmJiBfVXRpbHMyLmRlZmF1bHQuaXNGdW5jdGlvbih0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2Uuc2V0TG9jYWxTdG9yYWdlSXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2Uuc2V0TG9jYWxTdG9yYWdlSXRlbSgndGtEb2NBZGRyZXNzS2V5JywgX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRBY3Rpb25Db21tYW5kKCdkb2NBZGRyZXNzVXBkYXRlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NBZGRyZXNzTGlzdDogW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NMaXN0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY0FkZHJlc3NJbmRleDogX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGREb2NBZGRyZXNzOiBvbGRGb3JjZVVzZURvY0FkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vd0RvY0FkZHJlc3M6IF9VdGlsczIuZGVmYXVsdC5nZXRJdGVtKF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0xpc3QsIF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0tleSkgfHwgdGhpcy5jb25maWdyYXRpb24uZG9jQWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAvL+aWh+aho+WKoOi9veWcsOWdgOabtOaWsFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5ub3dVc2VEb2NBZGRyZXNzID0gX1V0aWxzMi5kZWZhdWx0LmdldEl0ZW0oX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzTGlzdCwgX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzS2V5KSB8fCB0aGlzLmNvbmZpZ3JhdGlvbi5kb2NBZGRyZXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuaW5mbygnW3JlbG9hZCBkeW5hbWljIHBwdF1jaGFuZ2UgZG9jIGFkZHJlc3MgLCBvbGQgYWRkcmVzcyBpcyAnICsgb2xkRm9yY2VVc2VEb2NBZGRyZXNzICsgJyAsIG5vdyBhZGRyZXNzIGlzICcgKyBfR2xvYmFsMi5kZWZhdWx0Lm5vd1VzZURvY0FkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNtZC5mb3JjZVJlbG9hZE51bWJlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JjZVJlbG9hZE51bWJlckZyb21QcHQgPSBjbWQuZm9yY2VSZWxvYWROdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2FkQ3VycmVudER5bmFtaWNQcHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmluZm8oJ1snICsgY21kLnNvdXJjZSArICddbG9hZCBkeW5hbWljIHBwdCBmYWlsdXJlICwgcmVsb2FkIGZpbGUgLCBvbGQgdXJsIGlzICcgKyBjbWQuaWZyYW1lU3JjICsgJyAsIG5vdyB1cmwgaXMgJyArIF9EeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuZ2V0SWZyYW1lU3JjKHRoaXMuaW5zdGFuY2VJZCkgKyAnICwgcmVsb2FkIG51bWJlciBpcyAnICsgY21kLmZvcmNlUmVsb2FkTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyZWxvYWRINURvY3VtZW50SWZyYW1lU3JjJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNtZC5pZnJhbWVTcmMgJiYgdGhpcy5maWxlVHlwZU1hcmsgPT09ICdoNURvY3VtZW50JyAmJiBuZXcgUmVnRXhwKF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuZ2V0V2hpdGVib2FyZEZpbGVkYXRhKHRoaXMuaW5zdGFuY2VJZCkuc3dmcGF0aCwgJ2cnKS50ZXN0KGNtZC5pZnJhbWVTcmMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX29sZEZvcmNlVXNlRG9jQWRkcmVzcyA9IF9VdGlsczIuZGVmYXVsdC5nZXRJdGVtKF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0xpc3QsIF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0tleSkgfHwgdGhpcy5jb25maWdyYXRpb24uZG9jQWRkcmVzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0tleSA9IF9VdGlsczIuZGVmYXVsdC5nZXRJdGVtKF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0xpc3QsIF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0tleSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlICYmIF9VdGlsczIuZGVmYXVsdC5pc0Z1bmN0aW9uKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5zZXRMb2NhbFN0b3JhZ2VJdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5zZXRMb2NhbFN0b3JhZ2VJdGVtKCd0a0RvY0FkZHJlc3NLZXknLCBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZEFjdGlvbkNvbW1hbmQoJ2RvY0FkZHJlc3NVcGRhdGUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY0FkZHJlc3NMaXN0OiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0xpc3QpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jQWRkcmVzc0luZGV4OiBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZERvY0FkZHJlc3M6IF9vbGRGb3JjZVVzZURvY0FkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vd0RvY0FkZHJlc3M6IF9VdGlsczIuZGVmYXVsdC5nZXRJdGVtKF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0xpc3QsIF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0tleSkgfHwgdGhpcy5jb25maWdyYXRpb24uZG9jQWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAvL+aWh+aho+WKoOi9veWcsOWdgOabtOaWsFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5ub3dVc2VEb2NBZGRyZXNzID0gX1V0aWxzMi5kZWZhdWx0LmdldEl0ZW0oX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzTGlzdCwgX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzS2V5KSB8fCB0aGlzLmNvbmZpZ3JhdGlvbi5kb2NBZGRyZXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgTC5Mb2dnZXIuaW5mbygnW3JlbG9hZCBoNSBkb2N1bWVudF1jaGFuZ2UgZG9jIGFkZHJlc3MgLCBvbGQgYWRkcmVzcyBpcyAnICsgX29sZEZvcmNlVXNlRG9jQWRkcmVzcyArICcgLCBub3cgYWRkcmVzcyBpcyAnICsgX0dsb2JhbDIuZGVmYXVsdC5ub3dVc2VEb2NBZGRyZXNzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtZXRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbWQuZm9yY2VSZWxvYWROdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmZvcmNlUmVsb2FkTnVtYmVyID0gY21kLmZvcmNlUmVsb2FkTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9hZEN1cnJlbnRINURvY3VtZW50KHBhcmFtZXRlcnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JjZVJlbG9hZE51bWJlcjogY21kLmZvcmNlUmVsb2FkTnVtYmVyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmluZm8oJ1snICsgY21kLnNvdXJjZSArICddbG9hZCBoNSBkb2N1bWVudCBmYWlsdXJlICwgcmVsb2FkIGZpbGUgLCBvbGQgdXJsIGlzICcgKyBjbWQuaWZyYW1lU3JjICsgJyAsIG5vdyB1cmwgaXMgJyArIF9EeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuZ2V0SWZyYW1lU3JjKHRoaXMuaW5zdGFuY2VJZCkgKyAnICwgcmVsb2FkIG51bWJlciBpcyAnICsgY21kLmZvcmNlUmVsb2FkTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1cGRhdGVXaGl0ZWJvYXJkVG9vbHNJbmZvJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmlld1N0YXRlVXBkYXRlKCk7IC8v5pu05paw55m95p2/5bel5YW35L+h5oGvXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2g1RG9jdW1lbnRPbkp1bXBQYWdlJzpcbiAgICAgICAgICAgICAgICAgICAgLy9INeivvuS7tui3s+i9rOWIsOafkOmhtVxuICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlQm9hcmRNYW5hZ2VySW5zdGFuY2Uuc2tpcFBhZ2UoY21kLnRvUGFnZSwgdGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3doaXRlYm9hcmRXYXRlcm1hcmtJbWFnZU9uRmFpbHVyZUNhbGxiYWNrJyxcblxuXG4gICAgICAgIC8q5pmu6YCa5paH5qGj5Yqg6L295aSx6LSlKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZU9uRmFpbHVyZUNhbGxiYWNrKGZhaWx1cmVJbWdVcmwpIHtcbiAgICAgICAgICAgIHZhciBfV2hpdGVib2FyZEludGVybWVkaWE2ID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5nZXRXaGl0ZWJvYXJkRmlsZWRhdGEodGhpcy5pbnN0YW5jZUlkKSxcbiAgICAgICAgICAgICAgICBjb3NwZGZwYXRoID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhNi5jb3NwZGZwYXRoLFxuICAgICAgICAgICAgICAgIHN3ZnBhdGggPSBfV2hpdGVib2FyZEludGVybWVkaWE2LnN3ZnBhdGgsXG4gICAgICAgICAgICAgICAgY3VycnBhZ2UgPSBfV2hpdGVib2FyZEludGVybWVkaWE2LmN1cnJwYWdlLFxuICAgICAgICAgICAgICAgIGZpbGV0eXBlID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhNi5maWxldHlwZSxcbiAgICAgICAgICAgICAgICBpc0NvbnRlbnREb2N1bWVudCA9IF9XaGl0ZWJvYXJkSW50ZXJtZWRpYTYuaXNDb250ZW50RG9jdW1lbnQ7XG5cbiAgICAgICAgICAgIGlmIChjb3NwZGZwYXRoKSB7XG4gICAgICAgICAgICAgICAgc3dmcGF0aCA9IGNvc3BkZnBhdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5maWxlVHlwZU1hcmsgPT09ICdnZW5lcmFsRG9jdW1lbnQnICYmIHN3ZnBhdGggJiYgZmFpbHVyZUltZ1VybCAmJiBmaWxldHlwZSAhPT0gJ3doaXRlYm9hcmQnICYmIHRoaXMuZ2VuZXJhbERvY3VtZW50RmlsZUZvcmNlUmVsb2FkTnVtYmVyIDwgdGhpcy5tYXhHZW5lcmFsRmlsZUZvcmNlUmVsb2FkTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpbGVVcmwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKE51bWJlcihpc0NvbnRlbnREb2N1bWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZVVybCA9IHN3ZnBhdGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc3dmcGF0aC5sYXN0SW5kZXhPZihcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbWdUeXBlID0gc3dmcGF0aC5zdWJzdHJpbmcoaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBmaWxlVXJsID0gc3dmcGF0aC5yZXBsYWNlKGltZ1R5cGUsIFwiLVwiICsgY3VycnBhZ2UgKyBpbWdUeXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoZmlsZVVybCwgJ2cnKS50ZXN0KGZhaWx1cmVJbWdVcmwpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghTnVtYmVyKGlzQ29udGVudERvY3VtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZEZvcmNlVXNlRG9jQWRkcmVzcyA9IF9VdGlsczIuZGVmYXVsdC5nZXRJdGVtKF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0xpc3QsIF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0tleSkgfHwgdGhpcy5jb25maWdyYXRpb24uZG9jQWRkcmVzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0tleSA9IF9VdGlsczIuZGVmYXVsdC5nZXRJdGVtKF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0xpc3QsIF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0tleSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy53aGl0ZUJvYXJkTWFuYWdlckluc3RhbmNlICYmIF9VdGlsczIuZGVmYXVsdC5pc0Z1bmN0aW9uKHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5zZXRMb2NhbFN0b3JhZ2VJdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVCb2FyZE1hbmFnZXJJbnN0YW5jZS5zZXRMb2NhbFN0b3JhZ2VJdGVtKCd0a0RvY0FkZHJlc3NLZXknLCBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZEFjdGlvbkNvbW1hbmQoJ2RvY0FkZHJlc3NVcGRhdGUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY0FkZHJlc3NMaXN0OiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KF9HbG9iYWwyLmRlZmF1bHQuZG9jQWRkcmVzc0xpc3QpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jQWRkcmVzc0luZGV4OiBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZERvY0FkZHJlc3M6IG9sZEZvcmNlVXNlRG9jQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93RG9jQWRkcmVzczogX1V0aWxzMi5kZWZhdWx0LmdldEl0ZW0oX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzTGlzdCwgX0dsb2JhbDIuZGVmYXVsdC5kb2NBZGRyZXNzS2V5KSB8fCB0aGlzLmNvbmZpZ3JhdGlvbi5kb2NBZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7IC8v5paH5qGj5Yqg6L295Zyw5Z2A5pu05pawXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0Lm5vd1VzZURvY0FkZHJlc3MgPSBfVXRpbHMyLmRlZmF1bHQuZ2V0SXRlbShfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NMaXN0LCBfR2xvYmFsMi5kZWZhdWx0LmRvY0FkZHJlc3NLZXkpIHx8IHRoaXMuY29uZmlncmF0aW9uLmRvY0FkZHJlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBMLkxvZ2dlci5pbmZvKCdbcmVsb2FkIGdlbmVyYWwgZG9jdW1lbnRdY2hhbmdlIGRvYyBhZGRyZXNzICwgb2xkIGFkZHJlc3MgaXMgJyArIG9sZEZvcmNlVXNlRG9jQWRkcmVzcyArICcgLCBub3cgYWRkcmVzcyBpcyAnICsgX0dsb2JhbDIuZGVmYXVsdC5ub3dVc2VEb2NBZGRyZXNzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmFsRG9jdW1lbnRGaWxlRm9yY2VSZWxvYWROdW1iZXIrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIEwuTG9nZ2VyLmluZm8oJ1tnZW5lcmFsIGRvY3VtZW50XWxvYWQgZ2VuZXJhbCBkb2N1bWVudCBmYWlsdXJlICwgcmVsb2FkIGZpbGUgLCBvbGQgdXJsIGlzICcgKyAob2xkRm9yY2VVc2VEb2NBZGRyZXNzICsgZmlsZVVybCkgKyAnICwgbm93IHVybCBpcyAnICsgKF9HbG9iYWwyLmRlZmF1bHQubm93VXNlRG9jQWRkcmVzcyArIGZpbGVVcmwpICsgJyAsIHJlbG9hZCBudW1iZXIgaXMgJyArIHRoaXMuZ2VuZXJhbERvY3VtZW50RmlsZUZvcmNlUmVsb2FkTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhbERvY3VtZW50RmlsZUZvcmNlUmVsb2FkTnVtYmVyKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBMLkxvZ2dlci5pbmZvKCdbZ2VuZXJhbCBkb2N1bWVudF1sb2FkIGdlbmVyYWwgZG9jdW1lbnQgZmFpbHVyZSAsIHJlbG9hZCBmaWxlICwgIHVybCBpcyAnICsgZmlsZVVybCArICcgLCByZWxvYWQgbnVtYmVyIGlzICcgKyB0aGlzLmdlbmVyYWxEb2N1bWVudEZpbGVGb3JjZVJlbG9hZE51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3JjID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyKGlzQ29udGVudERvY3VtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmMgPSBmaWxlVXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3JjID0gX0dsb2JhbDIuZGVmYXVsdC5ub3dVc2VEb2NBZGRyZXNzICsgZmlsZVVybDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnNldFdoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZSh0aGlzLmluc3RhbmNlSWQsIHNyYywgeyByZXNldERlZGF1bHRXaGl0ZWJvYXJkTWFnbmlmaWNhdGlvbjogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmFsRG9jdW1lbnRGaWxlRm9yY2VSZWxvYWROdW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnd2hpdGVib2FyZFdhdGVybWFya0ltYWdlT25sb2FkQ2FsbGJhY2snLFxuXG5cbiAgICAgICAgLyrmma7pgJrmlofmoaPliqDovb3lrozmiJAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gd2hpdGVib2FyZFdhdGVybWFya0ltYWdlT25sb2FkQ2FsbGJhY2soZGF0YSkge1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gZGF0YS53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBkYXRhLmhlaWdodDtcblxuICAgICAgICAgICAgdGhpcy5zY2FsZSA9IHdpZHRoIC8gaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5fdmlld1N0YXRlVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgLyrmm7TmlrDnmb3mnb/lpKflsI8qL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZXNpemVXaGl0ZWJvYXJkSGFuZGxlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNpemVXaGl0ZWJvYXJkSGFuZGxlcigpIHtcbiAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQucmVzaXplV2hpdGVib2FyZEhhbmRsZXIodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbGVUeXBlTWFyayA9PT0gJ2R5bmFtaWNQUFQnICYmIHRoaXMuY29uZmlncmF0aW9uLmNsaWVudFR5cGUgPT09ICdpb3MnKSB7XG4gICAgICAgICAgICAgICAgX0R5bmFtaWNQcHRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5jaGFuZ2VEeW5hbWljUHB0U2l6ZSh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyrnmb3mnb/mmK/lkKblpITkuo7mlofmnKzngrnlh7vnirbmgIEqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdpc1doaXRlYm9hcmRUZXh0RWRpdGluZycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1doaXRlYm9hcmRUZXh0RWRpdGluZygpIHtcbiAgICAgICAgICAgIHJldHVybiBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmlzV2hpdGVib2FyZFRleHRFZGl0aW5nKHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKumHjee9rueZveadv+aJgOacieeahOaVsOaNriovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Jlc2V0V2hpdGVib2FyZERhdGEnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRXaGl0ZWJvYXJkRGF0YSgpIHtcbiAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuY2xlYXJXaGl0ZWJvYXJkQWxsRGF0YUJ5SWQodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5o6l5pS2aWZyYW1l55qEbWVzc2FnZea2iOaBryovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlY2VpdmVXaW5kb3dNZXNzYWdlRXZlbnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVjZWl2ZVdpbmRvd01lc3NhZ2VFdmVudChldmVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlncmF0aW9uLmxvYWREeW5hbWljUHB0VmlldyAmJiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCB0aGlzLmNvbmZpZ3JhdGlvbi5oYXNFeHRlbmREb2N1bWVudCkge1xuICAgICAgICAgICAgICAgIF9EeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQucmVjZWl2ZVdpbmRvd01lc3NhZ2VFdmVudCh0aGlzLmluc3RhbmNlSWQsIGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ3JhdGlvbi5sb2FkSDVEb2N1bWVudFZpZXcgJiYgdGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgdGhpcy5jb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICBfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnJlY2VpdmVXaW5kb3dNZXNzYWdlRXZlbnQodGhpcy5pbnN0YW5jZUlkLCBldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldFdoaXRlYm9hcmRSb290RWxlbWVudCcsXG5cblxuICAgICAgICAvKuiOt+WPlueZveadv+eahOagueiKgueCuSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRXaGl0ZWJvYXJkUm9vdEVsZW1lbnQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50cy53aGl0ZWJvYXJkVmlld1Jvb3RFbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLyrph43nva7nuq/nmb3mnb/mgLvpobXmlbAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZXNldFB1cmVXaGl0ZWJvYXJkVG90YWxQYWdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0UHVyZVdoaXRlYm9hcmRUb3RhbFBhZ2Uob2xkVG90YWxQYWdlKSB7XG4gICAgICAgICAgICBpZiAob2xkVG90YWxQYWdlID4gMSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGN1cnJwYWdlID0gMjsgY3VycnBhZ2UgPD0gb2xkVG90YWxQYWdlOyBjdXJycGFnZSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuY2xlYXJXaGl0ZWJvYXJkRGF0YUJ5RmlsZWlkQW5kQ3VycnBhZ2UodGhpcy5pbnN0YW5jZUlkLCAwLCBjdXJycGFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZpbGVkYXRhID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5nZXRXaGl0ZWJvYXJkRmlsZWRhdGEodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIGlmIChmaWxlZGF0YS5maWxlaWQgPT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciBvcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZmlsZWRhdGEuY3VycnBhZ2UgPSAxO1xuICAgICAgICAgICAgICAgIGZpbGVkYXRhLnBhZ2VudW0gPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NhdmVGaWxlZGF0YUFuZExvYWRDdXJycGFnZVdoaXRlYm9hcmREYXRhKGZpbGVkYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW5lcmFsRG9jdW1lbnRGaWxlU2hvd1BhZ2Uob3Blbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyrojrflj5bliqjmgIFQUFTlrp7kvoss5qC55o2uaWTojrflj5YqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXREeW5hbWljUHB0SW5zdGFuY2VCeUlEJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldER5bmFtaWNQcHRJbnN0YW5jZUJ5SUQoKSB7XG4gICAgICAgICAgICByZXR1cm4gX0R5bmFtaWNQcHRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5nZXREeW5hbWljUHB0SW5zdGFuY2VCeUlEKHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgIH1cbiAgICAgICAgLyrojrflj5ZoNeaWh+aho+WunuS+iyzmoLnmja5pZOiOt+WPliovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldEg1RG9jdW1lbnRJbnN0YW5jZUJ5SUQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SDVEb2N1bWVudEluc3RhbmNlQnlJRCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmdldEg1RG9jdW1lbnRJbnN0YW5jZUJ5SUQodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8q5Yib5bu65omA6ZyA6IqC54K5Ki9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2NyZWF0ZUVsZW1lbnRzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50cygpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMud2hpdGVib2FyZFZpZXdSb290RWxlbWVudCA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdzZWN0aW9uJywgdGhpcy5pbnN0YW5jZUlkICsgJ1RhbGtjbG91ZFNka1doaXRlYm9hcmRSb290JywgKHRoaXMuY29uZmlncmF0aW9uLmlzTW9iaWxlID8gJ2FwcC1tb2JpbGUgJyA6ICcgJykgKyAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkICcgKyB0aGlzLmluc3RhbmNlSWQgKyAnIHNka3doaXRlYm9hcmQtcm9vdCcsIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5jb25maWdyYXRpb24ucm9vdEJhY2tncm91bmRDb2xvclxuICAgICAgICAgICAgfSk7IC8v55m95p2/5qC56IqC54K5XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMudG90YWxEb2N1bWVudFZpZXdFbGVtZW50ID0gX0RvbVV0aWxzMi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nLCB0aGlzLmluc3RhbmNlSWQgKyAnVGFsa2Nsb3VkVG90YWxEb2N1bWVudCcsICd0YWxrY2xvdWQtc2RrLXdoaXRlYm9hcmQgJyArIHRoaXMuaW5zdGFuY2VJZCArICcgdG90YWwtZG9jdW1lbnQtY29udGFpbmVyJywge1xuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBtYXhIZWlnaHQ6ICcxMDAlJ1xuICAgICAgICAgICAgfSk7IC8v5paH5qGj5oC75a655Zmo6IqC54K577yI5rua5Yqo5p2h5Zyo6K+l5a655Zmo5LiK77yJXG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZG9jdW1lbnRWaWV3RWxlbWVudCA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdzZWN0aW9uJywgdGhpcy5pbnN0YW5jZUlkICsgJ1RhbGtjbG91ZERvY3VtZW50JywgJ3RhbGtjbG91ZC1zZGstd2hpdGVib2FyZCAnICsgdGhpcy5pbnN0YW5jZUlkICsgJyBkb2N1bWVudC1jb250YWluZXInLCB7XG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcDogMFxuICAgICAgICAgICAgfSk7IC8v5YyF6KO55omA5pyJ55qE5paH5qGj55qE6IqC54K577yM5a696auY5Li65paH5qGj55qE5a696auYXG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMud2hpdGVib2FyZFZpZXdFbGVtZW50ID0gX0RvbVV0aWxzMi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2FydGljbGUnLCB0aGlzLmluc3RhbmNlSWQgKyAnVGFsa2Nsb3VkV2hpdGVib2FyZCcsICd0YWxrY2xvdWQtc2RrLXdoaXRlYm9hcmQgJyArIHRoaXMuaW5zdGFuY2VJZCArICcgd2hpdGVib2FyZC1jb250YWluZXInLCB7XG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IDJcbiAgICAgICAgICAgIH0pOyAvL+eZveadv+WuueWZqOiKgueCuVxuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmR5bmFtaWNQcHRWaWV3RWxlbWVudCA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdhcnRpY2xlJywgdGhpcy5pbnN0YW5jZUlkICsgJ1RhbGtjbG91ZER5bmFtaWNQcHQnLCAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkICcgKyB0aGlzLmluc3RhbmNlSWQgKyAnIGR5bmFtaWMtcHB0LWNvbnRhaW5lcicsIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IDFcbiAgICAgICAgICAgIH0pOyAvL+WKqOaAgXBwdOWuueWZqOiKgueCuVxuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmg1RG9jdW1lbnRWaWV3RWxlbWVudCA9IF9Eb21VdGlsczIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdhcnRpY2xlJywgdGhpcy5pbnN0YW5jZUlkICsgJ1RhbGtjbG91ZEg1RG9jdW1lbnQnLCAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkICcgKyB0aGlzLmluc3RhbmNlSWQgKyAnIGg1LWRvY3VtZW50LWNvbnRhaW5lcicsIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IDFcbiAgICAgICAgICAgIH0pOyAvL2g15a655Zmo6IqC54K5XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuZGlzYWJsZUNsaWNrVmlld0VsZW1lbnQgPSBfRG9tVXRpbHMyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgdW5kZWZpbmVkLCAndGFsa2Nsb3VkLXNkay13aGl0ZWJvYXJkICcgKyB0aGlzLmluc3RhbmNlSWQgKyAnIGRpc2FibGUtY2xvY2stY29udGFpbmVyJywge1xuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgICAgICAgICAgIHpJbmRleDogNFxuICAgICAgICAgICAgfSk7IC8vaDXlrrnlmajoioLngrlcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2Nvbm5lY3RFbGVtZW50cycsXG5cblxuICAgICAgICAvKui/nuaOpeaJgOacieiKgueCuSovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY29ubmVjdEVsZW1lbnRzKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlncmF0aW9uLmxvYWREeW5hbWljUHB0VmlldyAmJiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCB0aGlzLmNvbmZpZ3JhdGlvbi5oYXNFeHRlbmREb2N1bWVudCkge1xuICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnRzLmRvY3VtZW50Vmlld0VsZW1lbnQsIHRoaXMuZWxlbWVudHMuZHluYW1pY1BwdFZpZXdFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ3JhdGlvbi5sb2FkSDVEb2N1bWVudFZpZXcgJiYgdGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgdGhpcy5jb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50cy5kb2N1bWVudFZpZXdFbGVtZW50LCB0aGlzLmVsZW1lbnRzLmg1RG9jdW1lbnRWaWV3RWxlbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnRzLmRvY3VtZW50Vmlld0VsZW1lbnQsIHRoaXMuZWxlbWVudHMud2hpdGVib2FyZFZpZXdFbGVtZW50KTtcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnRzLmRvY3VtZW50Vmlld0VsZW1lbnQsIHRoaXMuZWxlbWVudHMuZGlzYWJsZUNsaWNrVmlld0VsZW1lbnQpO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudHMudG90YWxEb2N1bWVudFZpZXdFbGVtZW50LCB0aGlzLmVsZW1lbnRzLmRvY3VtZW50Vmlld0VsZW1lbnQpO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudHMud2hpdGVib2FyZFZpZXdSb290RWxlbWVudCwgdGhpcy5lbGVtZW50cy50b3RhbERvY3VtZW50Vmlld0VsZW1lbnQpO1xuICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFwcGVuZENoaWxkKHRoaXMucGFyZW50Tm9kZSwgdGhpcy5lbGVtZW50cy53aGl0ZWJvYXJkVmlld1Jvb3RFbGVtZW50KTtcblxuICAgICAgICAgICAgdGhpcy5fcHJvZHVjdGlvbldoaXRlYm9hcmQoKTsgLy/nlJ/kuqfnmb3mnb9cbiAgICAgICAgICAgIC8vIGlmKHRoaXMuY29uZmlncmF0aW9uLmxvYWREeW5hbWljUHB0VmlldyAmJiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0Jyl7XG4gICAgICAgICAgICB0aGlzLl9wcm9kdWN0aW9uRHluYW1pY1BwdCgpOyAvL+eUn+S6p+WKqOaAgVBQVFxuICAgICAgICAgICAgLy8gfTtcbiAgICAgICAgICAgIC8vIGlmKHRoaXMuY29uZmlncmF0aW9uLmxvYWRINURvY3VtZW50VmlldyAmJiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0Jyl7XG4gICAgICAgICAgICB0aGlzLl9wcm9kdWN0aW9uSDVEb2N1bWVudCgpOyAvL+eUn+S6p0g16K++5Lu2XG4gICAgICAgICAgICAvLyB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLyrlrp7kvovljJbnmb3mnb8qL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfcHJvZHVjdGlvbldoaXRlYm9hcmQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3Byb2R1Y3Rpb25XaGl0ZWJvYXJkKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmIChfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0Lmhhc1doaXRlYm9hcmRCeUlkKHRoaXMuaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmRlc3Ryb3lXaGl0ZWJvYXJkSW5zdGFuY2UodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB3aGl0ZWJvYXJkSW5zdGFuY2VEYXRhID0ge1xuICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRFbGVtZW50SWQ6IHRoaXMuZWxlbWVudHMud2hpdGVib2FyZFZpZXdFbGVtZW50LmdldEF0dHJpYnV0ZSgnaWQnKSxcbiAgICAgICAgICAgICAgICBpZDogdGhpcy5pbnN0YW5jZUlkLFxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFNpZ25hbGxpbmdUb1NlcnZlcjogZnVuY3Rpb24gc2VuZFNpZ25hbGxpbmdUb1NlcnZlcihuYW1lLCBpZCwgdG9JRCwgZGF0YSwgZG9fbm90X3NhdmUsIGV4cGlyZXNhYnMsIGFzc29jaWF0ZWRNc2dJRCwgYXNzb2NpYXRlZFVzZXJJRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyrmt7vliqDnmb3mnb/nlLvnrJTmlbDmja7vvIzlj5HpgIHnu5nmnI3liqHlmagqL1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzNC5jb25maWdyYXRpb24uc3luY2hyb25pemF0aW9uICYmIF90aGlzNC5jb25maWdyYXRpb24uaXNDb25uZWN0ZWRSb29tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM0LnB1Yk1zZyh7IG5hbWU6IG5hbWUsIGlkOiBpZCwgdG9JRDogdG9JRCwgZGF0YTogZGF0YSwgc2F2ZTogIWRvX25vdF9zYXZlLCBleHBpcmVzYWJzOiBleHBpcmVzYWJzLCBhc3NvY2lhdGVkTXNnSUQ6IGFzc29jaWF0ZWRNc2dJRCwgYXNzb2NpYXRlZFVzZXJJRDogYXNzb2NpYXRlZFVzZXJJRCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGVsU2lnbmFsbGluZ1RvU2VydmVyOiBmdW5jdGlvbiBkZWxTaWduYWxsaW5nVG9TZXJ2ZXIobmFtZSwgaWQsIHRvSUQsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8q5Yig6Zmk55m95p2/55S756yU5pWw5o2u77yM5Y+R6YCB57uZ5pyN5Yqh5ZmoKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczQuY29uZmlncmF0aW9uLnN5bmNocm9uaXphdGlvbiAmJiBfdGhpczQuY29uZmlncmF0aW9uLmlzQ29ubmVjdGVkUm9vbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNC5kZWxNc2coeyBuYW1lOiBuYW1lLCBpZDogaWQsIHRvSUQ6IHRvSUQsIGRhdGE6IGRhdGEgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZVdoaXRlYm9hcmRTaXplQ2FsbGJhY2s6IHRoaXMucmVzaXplV2hpdGVib2FyZFNpemVDYWxsYmFjay5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBub3RpY2VVcGRhdGVUb29sRGVzY0NhbGxiYWNrOiB0aGlzLm5vdGljZVVwZGF0ZVRvb2xEZXNjQ2FsbGJhY2suYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgbm90aWNlVXBkYXRlV2hpdGVib2FyZEZpbGVkYXRhQ2FsbGJhY2s6IHRoaXMubm90aWNlVXBkYXRlV2hpdGVib2FyZEZpbGVkYXRhQ2FsbGJhY2suYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjazogdGhpcy5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZU9uRmFpbHVyZUNhbGxiYWNrOiB0aGlzLndoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZU9uRmFpbHVyZUNhbGxiYWNrLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIHdoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZU9ubG9hZENhbGxiYWNrOiB0aGlzLndoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZU9ubG9hZENhbGxiYWNrLmJpbmQodGhpcylcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHByb2R1Y3Rpb25PcHRpb25zOiBPYmplY3QuZGVlcEFzc2lnbih7XG4gICAgICAgICAgICAgICAgICAgIGRlYXdQZXJtaXNzaW9uOiB0aGlzLmNvbmZpZ3JhdGlvbi5jYW5EcmF3ICYmIHRoaXMuY29uZmlncmF0aW9uLnN5bmNocm9uaXphdGlvbiAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5pc0Nvbm5lY3RlZFJvb20sXG4gICAgICAgICAgICAgICAgICAgIHNob3dTaGFwZUF1dGhvcjogdGhpcy5jb25maWdyYXRpb24uc2hvd1NoYXBlQXV0aG9yLFxuICAgICAgICAgICAgICAgICAgICBteXNlbGZJZDogdGhpcy5jb25maWdyYXRpb24ubXlVc2VySWQsXG4gICAgICAgICAgICAgICAgICAgIG5pY2tuYW1lOiB0aGlzLmNvbmZpZ3JhdGlvbi5teU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHN5bmNocm9uaXphdGlvbldoaXRlYm9hcmQ6IHRoaXMuY29uZmlncmF0aW9uLnN5bmNocm9uaXphdGlvbiAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5pc0Nvbm5lY3RlZFJvb20sXG4gICAgICAgICAgICAgICAgICAgIHByaW1hcnlDb2xvcjogdGhpcy5jb25maWdyYXRpb24ucHJpbWFyeUNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRhcnlDb2xvcjogdGhpcy5jb25maWdyYXRpb24uc2Vjb25kYXJ5Q29sb3IsXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5jb25maWdyYXRpb24uYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICBwZW5jaWxXaWR0aDogdGhpcy5jb25maWdyYXRpb24ucGVuY2lsV2lkdGgsIC8v56yU55qE5aSn5bCPXG4gICAgICAgICAgICAgICAgICAgIHNoYXBlV2lkdGg6IHRoaXMuY29uZmlncmF0aW9uLnNoYXBlV2lkdGgsIC8v5Zu+5b2i55S756yU5aSn5bCPXG4gICAgICAgICAgICAgICAgICAgIGVyYXNlcldpZHRoOiB0aGlzLmNvbmZpZ3JhdGlvbi5lcmFzZXJXaWR0aCwgLy/mqaHnmq7lpKflsI9cbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IHRoaXMuY29uZmlncmF0aW9uLmZvbnRTaXplLCAvL+Wtl+S9k+Wkp+Wwj1xuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiB0aGlzLmNvbmZpZ3JhdGlvbi5mb250RmFtaWx5LCAvL+S9v+eUqOeahOWtl+S9kyDvvIzpu5jorqRcIuW+rui9r+mbhem7kVwiXG4gICAgICAgICAgICAgICAgICAgIHBhcmNlbEFuY2VzdG9yRWxlbWVudElkOiB0aGlzLmVsZW1lbnRzLndoaXRlYm9hcmRWaWV3Um9vdEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0V2hpdGVib2FyZFNjYWxlOiB0aGlzLmNvbmZpZ3JhdGlvbi5kZWZhdWx0V2hpdGVib2FyZFNjYWxlLFxuICAgICAgICAgICAgICAgICAgICBhc3NvY2lhdGVkTXNnSUQ6IHRoaXMuY29uZmlncmF0aW9uLmFzc29jaWF0ZWRNc2dJRCxcbiAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRlZFVzZXJJRDogdGhpcy5jb25maWdyYXRpb24uYXNzb2NpYXRlZFVzZXJJRCxcbiAgICAgICAgICAgICAgICAgICAgaXNPbmx5VW5kb1JlZG9DbGVhck15c2VsZlNoYXBlOiB0aGlzLmNvbmZpZ3JhdGlvbi5pc09ubHlVbmRvUmVkb0NsZWFyTXlzZWxmU2hhcGUsXG4gICAgICAgICAgICAgICAgICAgIGluc2VydFBpY3R1cmVSdWxlOiB0aGlzLmNvbmZpZ3JhdGlvbi5pbnNlcnRQaWN0dXJlUnVsZVxuICAgICAgICAgICAgICAgIH0sIHRoaXMuY29uZmlncmF0aW9uLmluaXRXaGl0ZWJvYXJkUHJvZHVjdGlvbk9wdGlvbnMgfHwge30pXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHRvb2xzRGVzYyA9IHtcbiAgICAgICAgICAgICAgICB0b29sX3BlbmNpbDoge30sXG4gICAgICAgICAgICAgICAgdG9vbF9oaWdobGlnaHRlcjoge30sXG4gICAgICAgICAgICAgICAgdG9vbF9saW5lOiB7fSxcbiAgICAgICAgICAgICAgICB0b29sX2Fycm93OiB7fSxcbiAgICAgICAgICAgICAgICB0b29sX2VyYXNlcjoge30sXG4gICAgICAgICAgICAgICAgdG9vbF90ZXh0OiB7fSxcbiAgICAgICAgICAgICAgICB0b29sX3JlY3RhbmdsZToge30sXG4gICAgICAgICAgICAgICAgdG9vbF9yZWN0YW5nbGVfZW1wdHk6IHt9LFxuICAgICAgICAgICAgICAgIHRvb2xfZWxsaXBzZToge30sXG4gICAgICAgICAgICAgICAgdG9vbF9lbGxpcHNlX2VtcHR5OiB7fSxcbiAgICAgICAgICAgICAgICB0b29sX21vdXNlOiB7fSxcbiAgICAgICAgICAgICAgICB0b29sX2xhc2VyOiB7fSxcbiAgICAgICAgICAgICAgICBhY3Rpb25fdW5kbzoge30sXG4gICAgICAgICAgICAgICAgYWN0aW9uX3JlZG86IHt9LFxuICAgICAgICAgICAgICAgIGFjdGlvbl9jbGVhcjoge30sXG4gICAgICAgICAgICAgICAgem9vbV9iaWc6IHt9LFxuICAgICAgICAgICAgICAgIHpvb21fc21hbGw6IHt9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5wcm9kdWN0aW9uV2hpdGVib2FyZCh3aGl0ZWJvYXJkSW5zdGFuY2VEYXRhKTtcbiAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQucmVnaXN0ZXJXaGl0ZWJvYXJkVG9vbHModGhpcy5pbnN0YW5jZUlkLCB0b29sc0Rlc2MpO1xuICAgICAgICAgICAgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5jbGVhclJlZG9BbmRVbmRvU3RhY2sodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQubG9hZEN1cnJwYWdlV2hpdGVib2FyZCh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnIHx8IHRoaXMuY29uZmlncmF0aW9uLmhhc0V4dGVuZERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5hY3RpdmVXaGl0ZWJvYXJkVG9vbCgndG9vbF9tb3VzZScsIHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWunuS+i+WMluWKqOaAgVBQVCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19wcm9kdWN0aW9uRHluYW1pY1BwdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcHJvZHVjdGlvbkR5bmFtaWNQcHQoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlncmF0aW9uLmxvYWREeW5hbWljUHB0VmlldyAmJiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCB0aGlzLmNvbmZpZ3JhdGlvbi5oYXNFeHRlbmREb2N1bWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChfRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0Lmhhc0R5bmFtaWNQcHRCeUlkKHRoaXMuaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgX0R5bmFtaWNQcHRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5kZXN0cm95RHluYW1pY1BwdEluc3RhbmNlKHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBkeW5hbWljUHB0SW5zdGFuY2VEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBkeW5hbWljUHB0RWxlbWVudElkOiB0aGlzLmVsZW1lbnRzLmR5bmFtaWNQcHRWaWV3RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lkJyksXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLmluc3RhbmNlSWQsXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRTaWduYWxsaW5nVG9TZXJ2ZXI6IGZ1bmN0aW9uIHNlbmRTaWduYWxsaW5nVG9TZXJ2ZXIobmFtZSwgaWQsIHRvSUQsIGRhdGEsIGRvX25vdF9zYXZlLCBleHBpcmVzYWJzLCBhc3NvY2lhdGVkTXNnSUQsIGFzc29jaWF0ZWRVc2VySUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXM1LmNvbmZpZ3JhdGlvbi5zeW5jaHJvbml6YXRpb24gJiYgX3RoaXM1LmNvbmZpZ3JhdGlvbi5pc0Nvbm5lY3RlZFJvb20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM1LnB1Yk1zZyh7IG5hbWU6IG5hbWUsIGlkOiBpZCwgdG9JRDogdG9JRCwgZGF0YTogZGF0YSwgc2F2ZTogIWRvX25vdF9zYXZlLCBleHBpcmVzYWJzOiBleHBpcmVzYWJzLCBhc3NvY2lhdGVkTXNnSUQ6IGFzc29jaWF0ZWRNc2dJRCwgYXNzb2NpYXRlZFVzZXJJRDogYXNzb2NpYXRlZFVzZXJJRCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZUFjdGlvbkNvbW1hbmRDYWxsYmFjazogdGhpcy5yZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrLmJpbmQodGhpcylcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdGlvbk9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN5bmNocm9uaXphdGlvbkR5bmFtaWNQcHQ6IHRoaXMuY29uZmlncmF0aW9uLnN5bmNocm9uaXphdGlvbiAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5pc0Nvbm5lY3RlZFJvb20sXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NvY2lhdGVkTXNnSUQ6IHRoaXMuY29uZmlncmF0aW9uLmFzc29jaWF0ZWRNc2dJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc29jaWF0ZWRVc2VySUQ6IHRoaXMuY29uZmlncmF0aW9uLmFzc29jaWF0ZWRVc2VySUQsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1Nob3dSZWxvYWRGaWxlVGlwOiB0aGlzLmNvbmZpZ3JhdGlvbi5pc1Nob3dSZWxvYWRGaWxlVGlwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VUeXBlOiB0aGlzLmNvbmZpZ3JhdGlvbi5sYW5ndWFnZVR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnJlY29ubmVjdEVsZW1lbnRQYXJlbnROb2RlOiB0aGlzLmVsZW1lbnRzLmRvY3VtZW50Vmlld0VsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljUHB0QWN0aW9uQ2xpY2s6IHRoaXMuY29uZmlncmF0aW9uLmFjdGlvbkNsaWNrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIF9EeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQucHJvZHVjdGlvbkR5bmFtaWNQcHQoZHluYW1pY1BwdEluc3RhbmNlRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19wcm9kdWN0aW9uSDVEb2N1bWVudCcsXG5cblxuICAgICAgICAvKuWunuS+i+WMlkg16K++5Lu2Ki9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9kdWN0aW9uSDVEb2N1bWVudCgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWdyYXRpb24ubG9hZEg1RG9jdW1lbnRWaWV3ICYmIHRoaXMuaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnIHx8IHRoaXMuY29uZmlncmF0aW9uLmhhc0V4dGVuZERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKF9INURvY3VtZW50UHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuaGFzSDVEb2N1bWVudEJ5SWQodGhpcy5pbnN0YW5jZUlkKSkge1xuICAgICAgICAgICAgICAgICAgICBfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmRlc3Ryb3lINURvY3VtZW50SW5zdGFuY2UodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGg1RG9jdW1lbnRJbnN0YW5jZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRFbGVtZW50SWQ6IHRoaXMuZWxlbWVudHMuaDVEb2N1bWVudFZpZXdFbGVtZW50LmdldEF0dHJpYnV0ZSgnaWQnKSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuaW5zdGFuY2VJZCxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFNpZ25hbGxpbmdUb1NlcnZlcjogZnVuY3Rpb24gc2VuZFNpZ25hbGxpbmdUb1NlcnZlcihuYW1lLCBpZCwgdG9JRCwgZGF0YSwgZG9fbm90X3NhdmUsIGV4cGlyZXNhYnMsIGFzc29jaWF0ZWRNc2dJRCwgYXNzb2NpYXRlZFVzZXJJRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczYuY29uZmlncmF0aW9uLnN5bmNocm9uaXphdGlvbiAmJiBfdGhpczYuY29uZmlncmF0aW9uLmlzQ29ubmVjdGVkUm9vbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczYucHViTXNnKHsgbmFtZTogbmFtZSwgaWQ6IGlkLCB0b0lEOiB0b0lELCBkYXRhOiBkYXRhLCBzYXZlOiAhZG9fbm90X3NhdmUsIGV4cGlyZXNhYnM6IGV4cGlyZXNhYnMsIGFzc29jaWF0ZWRNc2dJRDogYXNzb2NpYXRlZE1zZ0lELCBhc3NvY2lhdGVkVXNlcklEOiBhc3NvY2lhdGVkVXNlcklEIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlQWN0aW9uQ29tbWFuZENhbGxiYWNrOiB0aGlzLnJlY2VpdmVBY3Rpb25Db21tYW5kQ2FsbGJhY2suYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0aW9uT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3luY2hyb25pemF0aW9uSDVEb2N1bWVudDogdGhpcy5jb25maWdyYXRpb24uc3luY2hyb25pemF0aW9uICYmIHRoaXMuY29uZmlncmF0aW9uLmlzQ29ubmVjdGVkUm9vbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc29jaWF0ZWRNc2dJRDogdGhpcy5jb25maWdyYXRpb24uYXNzb2NpYXRlZE1zZ0lELFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRlZFVzZXJJRDogdGhpcy5jb25maWdyYXRpb24uYXNzb2NpYXRlZFVzZXJJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2hvd1JlbG9hZEZpbGVUaXA6IHRoaXMuY29uZmlncmF0aW9uLmlzU2hvd1JlbG9hZEZpbGVUaXAsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZVR5cGU6IHRoaXMuY29uZmlncmF0aW9uLmxhbmd1YWdlVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGg1RG9jdW1lbnRBY3Rpb25DbGljazogdGhpcy5jb25maWdyYXRpb24uYWN0aW9uQ2xpY2tcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgX0g1RG9jdW1lbnRQcHRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5wcm9kdWN0aW9uSDVEb2N1bWVudChoNURvY3VtZW50SW5zdGFuY2VEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2hhbmRsZVNob3dQYWdlU2lnbmFsbGluZycsXG5cblxuICAgICAgICAvKuWkhOeQhlNob3dQYWdl5L+h5LukKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVTaG93UGFnZVNpZ25hbGxpbmcoc2lnbmFsbGluZ0RhdGEpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gc2lnbmFsbGluZ0RhdGEuc291cmNlLFxuICAgICAgICAgICAgICAgIGRhdGEgPSBzaWduYWxsaW5nRGF0YS5kYXRhO1xuXG4gICAgICAgICAgICB2YXIgb3BlbiA9IHRoaXMuZmlsZWlkICE9IGRhdGEuZmlsZWRhdGEuZmlsZWlkO1xuICAgICAgICAgICAgdGhpcy5maWxlaWQgPSBkYXRhLmZpbGVkYXRhLmZpbGVpZDtcbiAgICAgICAgICAgIGlmICghdGhpcy5jb25maWdyYXRpb24uaXNQbGF5YmFjaykge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2lnbmFsbGluZ0RhdGEubmFtZSA9PT0gJ1Nob3dQYWdlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX0dsb2JhbDIuZGVmYXVsdC5zaG93UGFnZUZyb21JZCA9IHRoaXMuY29uZmlncmF0aW9uLm15VXNlcklkO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNpZ25hbGxpbmdEYXRhLm5hbWUgPT09ICdFeHRlbmRTaG93UGFnZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9HbG9iYWwyLmRlZmF1bHQuZXh0ZW5kU2hvd1BhZ2VGcm9tSWQgPSB0aGlzLmNvbmZpZ3JhdGlvbi5teVVzZXJJZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1JldHVybiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaWduYWxsaW5nRGF0YS5uYW1lID09PSAnU2hvd1BhZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbiB8fCAhc2lnbmFsbGluZ0RhdGEuZnJvbUlEIHx8IF9HbG9iYWwyLmRlZmF1bHQuc2hvd1BhZ2VGcm9tSWQgIT09IHRoaXMuY29uZmlncmF0aW9uLm15VXNlcklkICYmIHNpZ25hbGxpbmdEYXRhLmZyb21JRCA9PT0gdGhpcy5jb25maWdyYXRpb24ubXlVc2VySWQgfHwgc2lnbmFsbGluZ0RhdGEuZnJvbUlEICE9PSB0aGlzLmNvbmZpZ3JhdGlvbi5teVVzZXJJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5LiK5LiA5qyh57+76aG155qE55So5oi35LiN5piv5oiR6Ieq5bex5LiU5pys5qyh57+76aG15piv5oiR6Ieq5bex77yM5oiW6ICF5pys5qyh57+76aG15LiN5piv5oiR6Ieq5bex77yM5YiZ6IO95aSf57+76aG1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSZXR1cm4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF9HbG9iYWwyLmRlZmF1bHQuc2hvd1BhZ2VGcm9tSWQgPSBzaWduYWxsaW5nRGF0YS5mcm9tSUQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2lnbmFsbGluZ0RhdGEubmFtZSA9PT0gJ0V4dGVuZFNob3dQYWdlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW4gfHwgIXNpZ25hbGxpbmdEYXRhLmZyb21JRCB8fCBfR2xvYmFsMi5kZWZhdWx0LmV4dGVuZFNob3dQYWdlRnJvbUlkICE9PSB0aGlzLmNvbmZpZ3JhdGlvbi5teVVzZXJJZCAmJiBzaWduYWxsaW5nRGF0YS5mcm9tSUQgPT09IHRoaXMuY29uZmlncmF0aW9uLm15VXNlcklkIHx8IHNpZ25hbGxpbmdEYXRhLmZyb21JRCAhPT0gdGhpcy5jb25maWdyYXRpb24ubXlVc2VySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+S4iuS4gOasoee/u+mhteeahOeUqOaIt+S4jeaYr+aIkeiHquW3seS4lOacrOasoee/u+mhteaYr+aIkeiHquW3se+8jOaIluiAheacrOasoee/u+mhteS4jeaYr+aIkeiHquW3se+8jOWImeiDveWkn+e/u+mhtVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmV0dXJuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfR2xvYmFsMi5kZWZhdWx0LmV4dGVuZFNob3dQYWdlRnJvbUlkID0gc2lnbmFsbGluZ0RhdGEuZnJvbUlEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1JldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5maWxlVHlwZU1hcmsgPSBkYXRhLmlzRHluYW1pY1BQVCA/ICdkeW5hbWljUFBUJyA6IGRhdGEuaXNINURvY3VtZW50ID8gJ2g1RG9jdW1lbnQnIDogJ2dlbmVyYWxEb2N1bWVudCc7XG4gICAgICAgICAgICBpZiAoZGF0YS5pc0R5bmFtaWNQUFQgfHwgZGF0YS5pc0g1RG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmZpbGVkYXRhLnBhZ2VudW0gPSBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmdldFdoaXRlYm9hcmRGaWxlZGF0YSh0aGlzLmluc3RhbmNlSWQpLnBhZ2VudW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS5pc0dlbmVyYWxGaWxlIHx8ICFvcGVuICYmIGRhdGEuaXNEeW5hbWljUFBUICYmICh0aGlzLmNvbmZpZ3JhdGlvbi5sb2FkRHluYW1pY1BwdFZpZXcgJiYgdGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgdGhpcy5jb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpICYmIF9EeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuaXNMb2FkRmluaXNoZWQodGhpcy5pbnN0YW5jZUlkKSB8fCAhb3BlbiAmJiBkYXRhLmlzSDVEb2N1bWVudCAmJiAodGhpcy5jb25maWdyYXRpb24ubG9hZEg1RG9jdW1lbnRWaWV3ICYmIHRoaXMuaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnIHx8IHRoaXMuY29uZmlncmF0aW9uLmhhc0V4dGVuZERvY3VtZW50KSAmJiBfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmlzTG9hZEZpbmlzaGVkKHRoaXMuaW5zdGFuY2VJZCkpIHtcbiAgICAgICAgICAgICAgICAvL+WmguaenOaYr+aZrumAmuaWh+aho++8jOWImemZkOWItlNob3dQYWdl6aG15pWw6IyD5Zu0ICwg5oiW6ICF5piv5Yqo5oCBUFBU5ZKMSDXor77ku7bkuJTlt7LmiZPlvIDvvIjliqDovb3lrozmr5XvvInliJnpmZDliLZTaG93UGFnZemhteaVsOiMg+WbtFxuICAgICAgICAgICAgICAgIHZhciBmaWxlZGF0YSA9IGRhdGEuZmlsZWRhdGE7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGVkYXRhLmN1cnJwYWdlID4gZmlsZWRhdGEucGFnZW51bSkge1xuICAgICAgICAgICAgICAgICAgICBmaWxlZGF0YS5jdXJycGFnZSA9IGZpbGVkYXRhLnBhZ2VudW07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmaWxlZGF0YS5jdXJycGFnZSA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZWRhdGEuY3VycnBhZ2UgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5pc0R5bmFtaWNQUFQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZWRhdGEucHB0c2xpZGUgPSBmaWxlZGF0YS5jdXJycGFnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVWaWV3U2hvd0FuZEhpZGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdTdGF0ZVVwZGF0ZSgpOyAvLyDmm7TmlrDmlofku7ZmaWxlaWRcbiAgICAgICAgICAgIGlmIChkYXRhLmlzR2VuZXJhbEZpbGUpIHtcbiAgICAgICAgICAgICAgICAvL+aZrumAmuaWh+aho1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2UgPT09ICdyb29tLXB1Ym1zZycgJiYgIW9wZW4gJiYgTnVtYmVyKGRhdGEuZmlsZWRhdGEuY3VycnBhZ2UpID09PSBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmdldFdoaXRlYm9hcmRGaWxlZGF0YSh0aGlzLmluc3RhbmNlSWQpLmN1cnJwYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fc2F2ZUZpbGVkYXRhQW5kTG9hZEN1cnJwYWdlV2hpdGVib2FyZERhdGEoZGF0YS5maWxlZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VuZXJhbERvY3VtZW50RmlsZVNob3dQYWdlKG9wZW4pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLmlzRHluYW1pY1BQVCkge1xuICAgICAgICAgICAgICAgIC8qaWYoc291cmNlPT09J3Jvb20tcHVibXNnJyAmJiAhb3BlblxyXG4gICAgICAgICAgICAgICAgICAgICYmICBOdW1iZXIoZGF0YS5maWxlZGF0YS5jdXJycGFnZSkgPT09IFdoaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllckluc3RhbmNlLmdldFdoaXRlYm9hcmRGaWxlZGF0YSh0aGlzLmluc3RhbmNlSWQpLmN1cnJwYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgIE51bWJlcihkYXRhLmZpbGVkYXRhLnBwdHNsaWRlKSA9PT0gV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVySW5zdGFuY2UuZ2V0V2hpdGVib2FyZEZpbGVkYXRhKHRoaXMuaW5zdGFuY2VJZCkucHB0c2xpZGVcclxuICAgICAgICAgICAgICAgICAgICAmJiAgTnVtYmVyKGRhdGEuZmlsZWRhdGEucHB0c3RlcCkgPT09IFdoaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllckluc3RhbmNlLmdldFdoaXRlYm9hcmRGaWxlZGF0YSh0aGlzLmluc3RhbmNlSWQpLnBwdHN0ZXAgKXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICAgICAgfSovXG4gICAgICAgICAgICAgICAgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5zZXRXaGl0ZWJvYXJkV2F0ZXJtYXJrSW1hZ2UodGhpcy5pbnN0YW5jZUlkLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9keW5hbWljUFBURmlsZVNob3dQYWdlKG9wZW4sIHNpZ25hbGxpbmdEYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5pc0g1RG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlID09PSAncm9vbS1wdWJtc2cnICYmICFvcGVuICYmIE51bWJlcihkYXRhLmZpbGVkYXRhLmN1cnJwYWdlKSA9PT0gX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5nZXRXaGl0ZWJvYXJkRmlsZWRhdGEodGhpcy5pbnN0YW5jZUlkKS5jdXJycGFnZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuc2V0V2hpdGVib2FyZFdhdGVybWFya0ltYWdlKHRoaXMuaW5zdGFuY2VJZCwgXCJcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2F2ZUZpbGVkYXRhQW5kTG9hZEN1cnJwYWdlV2hpdGVib2FyZERhdGEoZGF0YS5maWxlZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5faDVEb2N1bWVudEZpbGVTaG93UGFnZShvcGVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2dlbmVyYWxEb2N1bWVudEZpbGVTaG93UGFnZScsXG5cblxuICAgICAgICAvKuaZrumAmuaWh+aho+eahFNob3dQYWdlKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZW5lcmFsRG9jdW1lbnRGaWxlU2hvd1BhZ2Uob3Blbikge1xuICAgICAgICAgICAgdGhpcy5nZW5lcmFsRG9jdW1lbnRGaWxlRm9yY2VSZWxvYWROdW1iZXIgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlncmF0aW9uLmxvYWREeW5hbWljUHB0VmlldyAmJiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCB0aGlzLmNvbmZpZ3JhdGlvbi5oYXNFeHRlbmREb2N1bWVudCkge1xuICAgICAgICAgICAgICAgIF9EeW5hbWljUHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuc2V0RHluYW1pY1BwdElmcmFtZVNyYyh0aGlzLmluc3RhbmNlSWQsICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ3JhdGlvbi5sb2FkSDVEb2N1bWVudFZpZXcgJiYgdGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgdGhpcy5jb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICBfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnNldEg1RG9jdW1lbnRJZnJhbWVTcmModGhpcy5pbnN0YW5jZUlkLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnJlc2V0RGVkYXVsdFdoaXRlYm9hcmRNYWduaWZpY2F0aW9uKHRoaXMuaW5zdGFuY2VJZCk7IC8v6YeN572u55m95p2/55qE57yp5pS+5q+UXG5cbiAgICAgICAgICAgIHZhciBfV2hpdGVib2FyZEludGVybWVkaWE3ID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5nZXRXaGl0ZWJvYXJkRmlsZWRhdGEodGhpcy5pbnN0YW5jZUlkKSxcbiAgICAgICAgICAgICAgICBjb3NwZGZwYXRoID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhNy5jb3NwZGZwYXRoLFxuICAgICAgICAgICAgICAgIHN3ZnBhdGggPSBfV2hpdGVib2FyZEludGVybWVkaWE3LnN3ZnBhdGgsXG4gICAgICAgICAgICAgICAgY3VycnBhZ2UgPSBfV2hpdGVib2FyZEludGVybWVkaWE3LmN1cnJwYWdlLFxuICAgICAgICAgICAgICAgIHBhZ2VudW0gPSBfV2hpdGVib2FyZEludGVybWVkaWE3LnBhZ2VudW0sXG4gICAgICAgICAgICAgICAgZmlsZXR5cGUgPSBfV2hpdGVib2FyZEludGVybWVkaWE3LmZpbGV0eXBlLFxuICAgICAgICAgICAgICAgIGlzQ29udGVudERvY3VtZW50ID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhNy5pc0NvbnRlbnREb2N1bWVudDtcblxuICAgICAgICAgICAgaWYgKGNvc3BkZnBhdGgpIHtcbiAgICAgICAgICAgICAgICBzd2ZwYXRoID0gY29zcGRmcGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzLmRpc2FibGVDbGlja1ZpZXdFbGVtZW50LCAnbG9hZGluZycpO1xuICAgICAgICAgICAgaWYgKGZpbGV0eXBlID09PSAnd2hpdGVib2FyZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjYWxlID0gdGhpcy5jb25maWdyYXRpb24uZGVmYXVsdFdoaXRlYm9hcmRTY2FsZTtcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3U3RhdGVVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnVwZGF0ZVdoaXRlYm9hcmRXYXRlcm1hcmtJbWFnZVNjYWxlKHRoaXMuaW5zdGFuY2VJZCwgdGhpcy5jb25maWdyYXRpb24uZGVmYXVsdFdoaXRlYm9hcmRTY2FsZSk7XG4gICAgICAgICAgICAgICAgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5zZXRXaGl0ZWJvYXJkV2F0ZXJtYXJrSW1hZ2UodGhpcy5pbnN0YW5jZUlkLCBcIlwiLCB7IHJlc2V0RGVkYXVsdFdoaXRlYm9hcmRNYWduaWZpY2F0aW9uOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHNyYyA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBpZiAoTnVtYmVyKGlzQ29udGVudERvY3VtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3dmcGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3JjID0gc3dmcGF0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHN3ZnBhdGgubGFzdEluZGV4T2YoXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW1nVHlwZSA9IHN3ZnBhdGguc3Vic3RyaW5nKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVVcmwgPSBzd2ZwYXRoLnJlcGxhY2UoaW1nVHlwZSwgXCItXCIgKyBjdXJycGFnZSArIGltZ1R5cGUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VydmljZVVybCA9IF9HbG9iYWwyLmRlZmF1bHQubm93VXNlRG9jQWRkcmVzcztcbiAgICAgICAgICAgICAgICAgICAgc3JjID0gc2VydmljZVVybCArIGZpbGVVcmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuc2V0V2hpdGVib2FyZFdhdGVybWFya0ltYWdlKHRoaXMuaW5zdGFuY2VJZCwgc3JjLCB7IHJlc2V0RGVkYXVsdFdoaXRlYm9hcmRNYWduaWZpY2F0aW9uOiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIU51bWJlcihpc0NvbnRlbnREb2N1bWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0SW50ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZEludCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlTWF4UGFnZU51bSA9IGN1cnJwYWdlOyAvL+W9k+WJjeaJk+W8gOaWh+aho+eahOe8k+WtmOeahOacgOWkp+mhteaVsO+8jOe8uuecgeS4ujFcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVNaW5QYWdlTnVtID0gY3VycnBhZ2U7IC8v5b2T5YmN5omT5byA5paH5qGj55qE57yT5a2Y55qE5pyA5bCP6aG15pWw77yM57y655yB5Li6MVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxlUHJlTG9hZEN1cnJQYWdlID0gY3VycnBhZ2U7IC8v5b2T5YmN5omT5byA5paH5qGj55qE57yT5a2Y55qE5b2T5YmN6aG177yM57y655yB5Li6MVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FjaGVNYXhQYWdlTnVtICsgdGhpcy5maWxlUHJlTG9hZFN0ZXAgPD0gcGFnZW51bSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVNYXhQYWdlTnVtICs9IHRoaXMuZmlsZVByZUxvYWRTdGVwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNhY2hlTWF4UGFnZU51bSA8IHBhZ2VudW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlTWF4UGFnZU51bSArPSBwYWdlbnVtIC0gdGhpcy5jYWNoZU1heFBhZ2VOdW07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhY2hlTWluUGFnZU51bSAtIHRoaXMuZmlsZVByZUxvYWRTdGVwID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlTWluUGFnZU51bSAtPSB0aGlzLmZpbGVQcmVMb2FkU3RlcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZU1pblBhZ2VOdW0gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kSW50ID0gdGhpcy5jYWNoZU1heFBhZ2VOdW07XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydEludCA9IHRoaXMuY2FjaGVNaW5QYWdlTnVtO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZmlsZVByZUxvYWRDdXJyUGFnZSA8IGN1cnJwYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRJbnQgPSB0aGlzLmNhY2hlTWF4UGFnZU51bSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJwYWdlID4gdGhpcy5jYWNoZU1heFBhZ2VOdW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZU1heFBhZ2VOdW0gPSBjdXJycGFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FjaGVNYXhQYWdlTnVtICsgdGhpcy5maWxlUHJlTG9hZFN0ZXAgPD0gcGFnZW51bSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlTWF4UGFnZU51bSArPSB0aGlzLmZpbGVQcmVMb2FkU3RlcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY2FjaGVNYXhQYWdlTnVtIDwgcGFnZW51bSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlTWF4UGFnZU51bSArPSBwYWdlbnVtIC0gdGhpcy5jYWNoZU1heFBhZ2VOdW07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEludCA9IHRoaXMuY2FjaGVNYXhQYWdlTnVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZpbGVQcmVMb2FkQ3VyclBhZ2UgPiBjdXJycGFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEludCA9IHRoaXMuY2FjaGVNaW5QYWdlTnVtIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycnBhZ2UgPCB0aGlzLmNhY2hlTWluUGFnZU51bSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlTWluUGFnZU51bSA9IGN1cnJwYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWNoZU1pblBhZ2VOdW0gLSB0aGlzLmZpbGVQcmVMb2FkU3RlcCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVNaW5QYWdlTnVtIC09IHRoaXMuZmlsZVByZUxvYWRTdGVwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVNaW5QYWdlTnVtID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRJbnQgPSB0aGlzLmNhY2hlTWluUGFnZU51bTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsZVByZUxvYWRDdXJyUGFnZSA9IGN1cnJwYWdlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0SW50OyBpIDw9IGVuZEludDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmma7pgJrmlofmoaPpooTliqDovb3ku6PnoIFcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpICE9PSBjdXJycGFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaW5kZXggPSBzd2ZwYXRoLmxhc3RJbmRleE9mKFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2ltZ1R5cGUgPSBzd2ZwYXRoLnN1YnN0cmluZyhfaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZmlsZVVybCA9IHN3ZnBhdGgucmVwbGFjZShfaW1nVHlwZSwgXCItXCIgKyBpICsgX2ltZ1R5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfc2VydmljZVVybCA9IF9HbG9iYWwyLmRlZmF1bHQubm93VXNlRG9jQWRkcmVzcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3NyYzIgPSBfc2VydmljZVVybCArIF9maWxlVXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQucHJlbG9hZFdoaXRlYm9hcmRJbWcoX3NyYzIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfZHluYW1pY1BQVEZpbGVTaG93UGFnZScsXG5cblxuICAgICAgICAvKuWKqOaAgXBwdOeahFNob3dQYWdlKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9keW5hbWljUFBURmlsZVNob3dQYWdlKG9wZW4sIHNpZ25hbGxpbmdEYXRhKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWdyYXRpb24ubG9hZER5bmFtaWNQcHRWaWV3ICYmIHRoaXMuaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnIHx8IHRoaXMuY29uZmlncmF0aW9uLmhhc0V4dGVuZERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlncmF0aW9uLmxvYWRINURvY3VtZW50VmlldyAmJiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCB0aGlzLmNvbmZpZ3JhdGlvbi5oYXNFeHRlbmREb2N1bWVudCkge1xuICAgICAgICAgICAgICAgICAgICBfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnNldEg1RG9jdW1lbnRJZnJhbWVTcmModGhpcy5pbnN0YW5jZUlkLCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQudXBkYXRlV2hpdGVib2FyZFdhdGVybWFya0ltYWdlU2NhbGUodGhpcy5pbnN0YW5jZUlkLCB0aGlzLmNvbmZpZ3JhdGlvbi5kZWZhdWx0V2hpdGVib2FyZFNjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2F2ZUZpbGVkYXRhQW5kTG9hZEN1cnJwYWdlV2hpdGVib2FyZERhdGEoc2lnbmFsbGluZ0RhdGEuZGF0YS5maWxlZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzLmRpc2FibGVDbGlja1ZpZXdFbGVtZW50LCAnbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcmNlUmVsb2FkTnVtYmVyRnJvbVBwdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JjZVJlbG9hZFRpbWVzdGFtcEZyb21QcHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRDdXJyZW50RHluYW1pY1BwdCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfc2lnbmFsbGluZ0RhdGEkZGF0YSQgPSBzaWduYWxsaW5nRGF0YS5kYXRhLmZpbGVkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycnBhZ2UgPSBfc2lnbmFsbGluZ0RhdGEkZGF0YSQuY3VycnBhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcHRzdGVwID0gX3NpZ25hbGxpbmdEYXRhJGRhdGEkLnBwdHN0ZXA7XG5cbiAgICAgICAgICAgICAgICAgICAgX0R5bmFtaWNQcHRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5qdW1wVG9BbmltYXRpb24odGhpcy5pbnN0YW5jZUlkLCBjdXJycGFnZSwgcHB0c3RlcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfaDVEb2N1bWVudEZpbGVTaG93UGFnZScsXG5cblxuICAgICAgICAvKmg15paH5qGj55qEU2hvd1BhZ2UqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2g1RG9jdW1lbnRGaWxlU2hvd1BhZ2Uob3Blbikge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlncmF0aW9uLmxvYWRINURvY3VtZW50VmlldyAmJiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCB0aGlzLmNvbmZpZ3JhdGlvbi5oYXNFeHRlbmREb2N1bWVudCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ3JhdGlvbi5sb2FkRHluYW1pY1BwdFZpZXcgJiYgdGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgdGhpcy5jb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgX0R5bmFtaWNQcHRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5zZXREeW5hbWljUHB0SWZyYW1lU3JjKHRoaXMuaW5zdGFuY2VJZCwgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZmlsZWRhdGEgPSBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmdldFdoaXRlYm9hcmRGaWxlZGF0YSh0aGlzLmluc3RhbmNlSWQpO1xuICAgICAgICAgICAgICAgIHZhciBzd2ZwYXRoID0gZmlsZWRhdGEuc3dmcGF0aCxcbiAgICAgICAgICAgICAgICAgICAgY3VycnBhZ2UgPSBmaWxlZGF0YS5jdXJycGFnZTtcblxuICAgICAgICAgICAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQudXBkYXRlV2hpdGVib2FyZFdhdGVybWFya0ltYWdlU2NhbGUodGhpcy5pbnN0YW5jZUlkLCB0aGlzLmNvbmZpZ3JhdGlvbi5kZWZhdWx0V2hpdGVib2FyZFNjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmFkZENsYXNzKHRoaXMuZWxlbWVudHMuZGlzYWJsZUNsaWNrVmlld0VsZW1lbnQsICdsb2FkaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRDdXJyZW50SDVEb2N1bWVudCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9INURvY3VtZW50UHB0SW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuanVtcFRvUGFnZSh0aGlzLmluc3RhbmNlSWQsIGN1cnJwYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19zYXZlRmlsZWRhdGFBbmRMb2FkQ3VycnBhZ2VXaGl0ZWJvYXJkRGF0YScsXG5cblxuICAgICAgICAvKuS/neWtmOeZveadv+aVsOaNruS4lOWKoOi9veW9k+WJjemhteeahOeZveadv+aVsOaNriovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2F2ZUZpbGVkYXRhQW5kTG9hZEN1cnJwYWdlV2hpdGVib2FyZERhdGEoKSB7XG4gICAgICAgICAgICB2YXIgdXBkYXRlRmlsZWRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICAgICAgICBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnNhdmVXaGl0ZWJvYXJkU3RhY2tUb1N0b3JhZ2UodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQudXBkYXRlV2hpdGVib2FyZEZpbGVkYXRhKHRoaXMuaW5zdGFuY2VJZCwgdXBkYXRlRmlsZWRhdGEpO1xuICAgICAgICAgICAgX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5sb2FkQ3VycnBhZ2VXaGl0ZWJvYXJkKHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKuabtOaWsOeZveadv+eahOaYvuekuuWSjOmakOiXjyovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ191cGRhdGVWaWV3U2hvd0FuZEhpZGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZVZpZXdTaG93QW5kSGlkZSgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5maWxlVHlwZU1hcmspIHtcbiAgICAgICAgICAgICAgICBjYXNlICdnZW5lcmFsRG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuc2hvdyh0aGlzLmVsZW1lbnRzLndoaXRlYm9hcmRWaWV3RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5oaWRlKFt0aGlzLmVsZW1lbnRzLmg1RG9jdW1lbnRWaWV3RWxlbWVudCwgdGhpcy5lbGVtZW50cy5keW5hbWljUHB0Vmlld0VsZW1lbnRdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaDVEb2N1bWVudCc6XG4gICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5zaG93KHRoaXMuZWxlbWVudHMuaDVEb2N1bWVudFZpZXdFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmhpZGUodGhpcy5lbGVtZW50cy5keW5hbWljUHB0Vmlld0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5nZXRBY3RpdmVUb29sKHRoaXMuaW5zdGFuY2VJZCkgIT09ICd0b29sX21vdXNlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LnNob3codGhpcy5lbGVtZW50cy53aGl0ZWJvYXJkVmlld0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX0RvbVV0aWxzMi5kZWZhdWx0LmhpZGUodGhpcy5lbGVtZW50cy53aGl0ZWJvYXJkVmlld0VsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2R5bmFtaWNQUFQnOlxuICAgICAgICAgICAgICAgICAgICBfRG9tVXRpbHMyLmRlZmF1bHQuc2hvdyh0aGlzLmVsZW1lbnRzLmR5bmFtaWNQcHRWaWV3RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5oaWRlKHRoaXMuZWxlbWVudHMuaDVEb2N1bWVudFZpZXdFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuZ2V0QWN0aXZlVG9vbCh0aGlzLmluc3RhbmNlSWQpICE9PSAndG9vbF9tb3VzZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5zaG93KHRoaXMuZWxlbWVudHMud2hpdGVib2FyZFZpZXdFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5oaWRlKHRoaXMuZWxlbWVudHMud2hpdGVib2FyZFZpZXdFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRzLmRvY3VtZW50Vmlld0VsZW1lbnQsIFsndGFsa2Nsb3VkLWZpbGV0eXBlLWdlbmVyYWxEb2N1bWVudCcsICd0YWxrY2xvdWQtZmlsZXR5cGUtaDVEb2N1bWVudCcsICd0YWxrY2xvdWQtZmlsZXR5cGUtZHluYW1pY1BQVCddKTtcbiAgICAgICAgICAgIF9Eb21VdGlsczIuZGVmYXVsdC5hZGRDbGFzcyh0aGlzLmVsZW1lbnRzLmRvY3VtZW50Vmlld0VsZW1lbnQsICd0YWxrY2xvdWQtZmlsZXR5cGUtJyArIHRoaXMuZmlsZVR5cGVNYXJrKTtcbiAgICAgICAgICAgIHRoaXMucmVzaXplV2hpdGVib2FyZEhhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3VwZGF0ZWR5bmFtaWNQcHRWb2x1bWUnLFxuXG5cbiAgICAgICAgLyrliqjmgIFQUFTpn7Pph4/nmoTmm7TmlrAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZWR5bmFtaWNQcHRWb2x1bWUodm9sdW1lKSB7XG4gICAgICAgICAgICBpZiAodm9sdW1lIDwgMCkge1xuICAgICAgICAgICAgICAgIHZvbHVtZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZvbHVtZSA+IDEwMCkge1xuICAgICAgICAgICAgICAgIHZvbHVtZSA9IDEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZHluYW1pY1BwdFZvbHVtZSA9IHZvbHVtZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZ3JhdGlvbi5sb2FkRHluYW1pY1BwdFZpZXcgJiYgdGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgdGhpcy5jb25maWdyYXRpb24uaGFzRXh0ZW5kRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICBfRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnBvc3RNZXNzYWdlKHRoaXMuaW5zdGFuY2VJZCwge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiUHB0Vm9sdW1lQ29udHJvbFwiLFxuICAgICAgICAgICAgICAgICAgICB2b2x1bWVWYWx1ZTogdGhpcy5keW5hbWljUHB0Vm9sdW1lIC8gMTAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl92aWV3U3RhdGVVcGRhdGUoKTsgLy8g5Yqo5oCBcHB05paH5qGj6Z+z6aKR6Z+z6YeP55qE5pu05pawXG4gICAgICAgIH1cblxuICAgICAgICAvKuinhuWbvueKtuaAgeabtOaWsCovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ192aWV3U3RhdGVVcGRhdGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3ZpZXdTdGF0ZVVwZGF0ZSgpIHtcbiAgICAgICAgICAgIGlmICghX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5oYXNXaGl0ZWJvYXJkQnlJZCh0aGlzLmluc3RhbmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlID0ge307XG5cbiAgICAgICAgICAgIHZhciBfV2hpdGVib2FyZEludGVybWVkaWE4ID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5nZXRXaGl0ZWJvYXJkRmlsZWRhdGEodGhpcy5pbnN0YW5jZUlkKSxcbiAgICAgICAgICAgICAgICBjdXJycGFnZSA9IF9XaGl0ZWJvYXJkSW50ZXJtZWRpYTguY3VycnBhZ2UsXG4gICAgICAgICAgICAgICAgcGFnZW51bSA9IF9XaGl0ZWJvYXJkSW50ZXJtZWRpYTgucGFnZW51bSxcbiAgICAgICAgICAgICAgICBwcHRzbGlkZSA9IF9XaGl0ZWJvYXJkSW50ZXJtZWRpYTgucHB0c2xpZGUsXG4gICAgICAgICAgICAgICAgcHB0c3RlcCA9IF9XaGl0ZWJvYXJkSW50ZXJtZWRpYTgucHB0c3RlcCxcbiAgICAgICAgICAgICAgICBzdGVwdG90YWwgPSBfV2hpdGVib2FyZEludGVybWVkaWE4LnN0ZXB0b3RhbCxcbiAgICAgICAgICAgICAgICBmaWxlaWQgPSBfV2hpdGVib2FyZEludGVybWVkaWE4LmZpbGVpZDtcblxuICAgICAgICAgICAgdmFyIHJlZ2lzdGVyV2hpdGVib2FyZFRvb2xzTGlzdCA9IF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuZ2V0UmVnaXN0ZXJXaGl0ZWJvYXJkVG9vbHNMaXN0KHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICB2YXIgcGFnZVN0YXRlID0ge1xuICAgICAgICAgICAgICAgIG5leHRQYWdlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBfR2xvYmFsMi5kZWZhdWx0LmlzUGxheVZpZGVvaW5nICYmIHRoaXMuaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnIHx8ICEodGhpcy5jb25maWdyYXRpb24uY2FuUGFnZSAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5pc0Nvbm5lY3RlZFJvb20gJiYgY3VycnBhZ2UgPCBwYWdlbnVtKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcHJldlBhZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IF9HbG9iYWwyLmRlZmF1bHQuaXNQbGF5VmlkZW9pbmcgJiYgdGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgfHwgISh0aGlzLmNvbmZpZ3JhdGlvbi5jYW5QYWdlICYmIHRoaXMuY29uZmlncmF0aW9uLmlzQ29ubmVjdGVkUm9vbSAmJiBjdXJycGFnZSA+IDEpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBza2lwUGFnZToge1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogX0dsb2JhbDIuZGVmYXVsdC5pc1BsYXlWaWRlb2luZyAmJiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCAhKHRoaXMuY29uZmlncmF0aW9uLmNhblBhZ2UgJiYgdGhpcy5jb25maWdyYXRpb24uaXNDb25uZWN0ZWRSb29tKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWRkUGFnZToge1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogX0dsb2JhbDIuZGVmYXVsdC5pc1BsYXlWaWRlb2luZyAmJiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCB0aGlzLmZpbGVUeXBlTWFyayAhPT0gJ2dlbmVyYWxEb2N1bWVudCcgfHwgISh0aGlzLmNvbmZpZ3JhdGlvbi5jYW5QYWdlICYmIHRoaXMuY29uZmlncmF0aW9uLmFkZFBhZ2UgJiYgdGhpcy5jb25maWdyYXRpb24uaXNDb25uZWN0ZWRSb29tKSA/IHRydWUgOiAhKGN1cnJwYWdlID49IHBhZ2VudW0gJiYgTnVtYmVyKGZpbGVpZCkgPT09IDApXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBuZXh0U3RlcDoge1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogX0dsb2JhbDIuZGVmYXVsdC5pc1BsYXlWaWRlb2luZyAmJiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCB0aGlzLmZpbGVUeXBlTWFyayAhPT0gJ2R5bmFtaWNQUFQnIHx8ICEodGhpcy5jb25maWdyYXRpb24uY2FuUGFnZSAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5pc0Nvbm5lY3RlZFJvb20pID8gdHJ1ZSA6IHBwdHNsaWRlID49IHBhZ2VudW0gJiYgcHB0c3RlcCA+PSBzdGVwdG90YWwgLSAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwcmV2U3RlcDoge1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogX0dsb2JhbDIuZGVmYXVsdC5pc1BsYXlWaWRlb2luZyAmJiB0aGlzLmluc3RhbmNlSWQgPT09ICdkZWZhdWx0JyB8fCB0aGlzLmZpbGVUeXBlTWFyayAhPT0gJ2R5bmFtaWNQUFQnIHx8ICEodGhpcy5jb25maWdyYXRpb24uY2FuUGFnZSAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5pc0Nvbm5lY3RlZFJvb20pID8gdHJ1ZSA6IHBwdHNsaWRlIDw9IDEgJiYgcHB0c3RlcCA8PSAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTogY3VycnBhZ2UgPCAxID8gMSA6IGN1cnJwYWdlLCAvL+W9k+WJjemhtVxuICAgICAgICAgICAgICAgIHRvdGFsUGFnZTogcGFnZW51bSA8IDEgPyAxIDogcGFnZW51bSAvL+aAu+mhteaVsFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBPYmplY3QuZW50cmllcyhyZWdpc3RlcldoaXRlYm9hcmRUb29sc0xpc3QpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMyA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjQgPSBfc2xpY2VkVG9BcnJheShfcmVmMywgMik7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9yZWY0WzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmNFsxXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoL3Rvb2xfL2cudGVzdChrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLnRvb2xba2V5XSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yNSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNSA9IE9iamVjdC5lbnRyaWVzKHZhbHVlKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNTsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSA9IChfc3RlcDUgPSBfaXRlcmF0b3I1Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmOSA9IF9zdGVwNS52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTAgPSBfc2xpY2VkVG9BcnJheShfcmVmOSwgMik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJLZXkgPSBfcmVmMTBbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlubmVyVmFsdWUgPSBfcmVmMTBbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUudG9vbFtrZXldID0gdGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLnRvb2xba2V5XSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXJWYWx1ZSAhPT0gdGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLnRvb2xba2V5XVtpbm5lcktleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFdoaXRlYm9hcmRWaWV3U3RhdGUudG9vbCA9IHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLnRvb2wgfHwge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLnRvb2xba2V5XSA9IHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLnRvb2xba2V5XSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFdoaXRlYm9hcmRWaWV3U3RhdGUudG9vbFtrZXldW2lubmVyS2V5XSA9IGlubmVyVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjUgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgJiYgX2l0ZXJhdG9yNS5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNS5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLnRvb2wgPSB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS50b29sIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS50b29sW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoL2FjdGlvbl8vZy50ZXN0KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUuYWN0aW9uW2tleV0gIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I2ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjYgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjYgPSBPYmplY3QuZW50cmllcyh2YWx1ZSlbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDY7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgPSAoX3N0ZXA2ID0gX2l0ZXJhdG9yNi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjExID0gX3N0ZXA2LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYxMiA9IF9zbGljZWRUb0FycmF5KF9yZWYxMSwgMik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2lubmVyS2V5ID0gX3JlZjEyWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaW5uZXJWYWx1ZSA9IF9yZWYxMlsxXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpdGVib2FyZFZpZXdTdGF0ZS5hY3Rpb25ba2V5XSA9IHRoaXMud2hpdGVib2FyZFZpZXdTdGF0ZS5hY3Rpb25ba2V5XSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lubmVyVmFsdWUgIT09IHRoaXMud2hpdGVib2FyZFZpZXdTdGF0ZS5hY3Rpb25ba2V5XVtfaW5uZXJLZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLmFjdGlvbiA9IHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLmFjdGlvbiB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFdoaXRlYm9hcmRWaWV3U3RhdGUuYWN0aW9uW2tleV0gPSB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS5hY3Rpb25ba2V5XSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFdoaXRlYm9hcmRWaWV3U3RhdGUuYWN0aW9uW2tleV1bX2lubmVyS2V5XSA9IF9pbm5lclZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjYgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I2ID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb242ICYmIF9pdGVyYXRvcjYucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjYucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS5hY3Rpb24gPSB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS5hY3Rpb24gfHwge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLmFjdGlvbltrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC96b29tXy9nLnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFZpZXdTdGF0ZS56b29tW2tleV0gIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I3ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjcgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjcgPSBPYmplY3QuZW50cmllcyh2YWx1ZSlbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDc7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgPSAoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNyA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjEzID0gX3N0ZXA3LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYxNCA9IF9zbGljZWRUb0FycmF5KF9yZWYxMywgMik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2lubmVyS2V5MiA9IF9yZWYxNFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2lubmVyVmFsdWUyID0gX3JlZjE0WzFdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLnpvb21ba2V5XSA9IHRoaXMud2hpdGVib2FyZFZpZXdTdGF0ZS56b29tW2tleV0gfHwge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pbm5lclZhbHVlMiAhPT0gdGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLnpvb21ba2V5XVtfaW5uZXJLZXkyXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS56b29tID0gdGVtcFdoaXRlYm9hcmRWaWV3U3RhdGUuem9vbSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFdoaXRlYm9hcmRWaWV3U3RhdGUuem9vbVtrZXldID0gdGVtcFdoaXRlYm9hcmRWaWV3U3RhdGUuem9vbVtrZXldIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS56b29tW2tleV1bX2lubmVyS2V5Ml0gPSBfaW5uZXJWYWx1ZTI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjcgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgJiYgX2l0ZXJhdG9yNy5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNy5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLnpvb20gPSB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS56b29tIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS56b29tW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjMgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMyA9IE9iamVjdC5lbnRyaWVzKHBhZ2VTdGF0ZSlbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWY1ID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBfcmVmNiA9IF9zbGljZWRUb0FycmF5KF9yZWY1LCAyKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgX2tleSA9IF9yZWY2WzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3ZhbHVlID0gX3JlZjZbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLnBhZ2VbX2tleV0gPSB0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUucGFnZVtfa2V5XSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YgX3ZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihfdmFsdWUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I4ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I4ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjggPSBPYmplY3QuZW50cmllcyhfdmFsdWUpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA4OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb244ID0gKF9zdGVwOCA9IF9pdGVyYXRvcjgubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjggPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTUgPSBfc3RlcDgudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYxNiA9IF9zbGljZWRUb0FycmF5KF9yZWYxNSwgMik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9pbm5lcktleTMgPSBfcmVmMTZbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaW5uZXJWYWx1ZTMgPSBfcmVmMTZbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud2hpdGVib2FyZFZpZXdTdGF0ZS5wYWdlW19rZXldW19pbm5lcktleTNdICE9PSBfaW5uZXJWYWx1ZTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLnBhZ2UgPSB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS5wYWdlIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFdoaXRlYm9hcmRWaWV3U3RhdGUucGFnZVtfa2V5XSA9IHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLnBhZ2VbX2tleV0gfHwge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS5wYWdlW19rZXldW19pbm5lcktleTNdID0gX2lubmVyVmFsdWUzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I4ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjggPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjggJiYgX2l0ZXJhdG9yOC5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjgucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLnBhZ2VbX2tleV0gIT09IF92YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLnBhZ2UgPSB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS5wYWdlIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLnBhZ2VbX2tleV0gPSBfdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMyA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsZVR5cGVNYXJrICE9PSB0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUuZG9jdW1lbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgdGVtcFdoaXRlYm9hcmRWaWV3U3RhdGUuZG9jdW1lbnRUeXBlID0gdGhpcy5maWxlVHlwZU1hcms7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5maWxlaWQgIT0gdGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLmZpbGVpZCkge1xuICAgICAgICAgICAgICAgIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLmZpbGVpZCA9IHRoaXMuZmlsZWlkOyAvL+aJk+W8gOeahOaWh+aho+eahOaWh+S7tmlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5keW5hbWljUHB0Vm9sdW1lICE9PSB0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUuZHluYW1pY1BwdFZvbHVtZSkge1xuICAgICAgICAgICAgICAgIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLmR5bmFtaWNQcHRWb2x1bWUgPSB0aGlzLmR5bmFtaWNQcHRWb2x1bWU7IC8v5Yqo5oCBcHB055qE6Z+z6YePXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5mdWxsU2NyZWVuICE9PSB0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUuZnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLmZ1bGxTY3JlZW4gPSB0aGlzLmZ1bGxTY3JlZW47IC8v5piv5ZCm5YWo5bGPXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5yZW1hcmsgIT09IHRoaXMud2hpdGVib2FyZFZpZXdTdGF0ZS5yZW1hcmspIHtcbiAgICAgICAgICAgICAgICB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS5yZW1hcmsgPSB0aGlzLnJlbWFyazsgLy/mmK/lkKblvIDlkK/mlofmoaPlpIfms6hcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNjYWxlICE9PSB0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUuc2NhbGUpIHtcbiAgICAgICAgICAgICAgICB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS5zY2FsZSA9IHRoaXMuc2NhbGU7IC8v5paH5qGj5q+U5L6LXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZG9jdW1lbnRSZW1hcmtJbmZvSnNvbiA9IF9HbG9iYWwyLmRlZmF1bHQuYWxsRG9jdW1lbnRSZW1hcmtJbmZvTWFwLmdldCgnZG9jdW1lbnRSZW1hcmtfJyArIHRoaXMuZmlsZWlkKTtcbiAgICAgICAgICAgIHRoaXMucmVtYXJrVGV4dCA9IHRoaXMuZmlsZWlkICE9IDAgJiYgZG9jdW1lbnRSZW1hcmtJbmZvSnNvbiAmJiBkb2N1bWVudFJlbWFya0luZm9Kc29uW3RoaXMuZmlsZWlkICsgJ18nICsgcGFnZVN0YXRlLmN1cnJlbnRQYWdlXSA/IGRvY3VtZW50UmVtYXJrSW5mb0pzb25bZmlsZWlkICsgJ18nICsgcGFnZVN0YXRlLmN1cnJlbnRQYWdlXSA6ICcnO1xuICAgICAgICAgICAgaWYgKHRoaXMucmVtYXJrVGV4dCAhPT0gdGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLnJlbWFya1RleHQpIHtcbiAgICAgICAgICAgICAgICB0ZW1wV2hpdGVib2FyZFZpZXdTdGF0ZS5yZW1hcmtUZXh0ID0gdGhpcy5yZW1hcmtUZXh0OyAvL+W9k+WJjemhteaWh+aho+Wkh+azqOaWh+acrOWGheWuuVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHdoaXRlYm9hcmRUb29sc0luZm8gPSBfV2hpdGVib2FyZEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LmdldFdoaXRlYm9hcmRUb29sc0luZm8odGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIGlmICh3aGl0ZWJvYXJkVG9vbHNJbmZvICYmICh0eXBlb2Ygd2hpdGVib2FyZFRvb2xzSW5mbyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yod2hpdGVib2FyZFRvb2xzSW5mbykpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I0ID0gT2JqZWN0LmVudHJpZXMod2hpdGVib2FyZFRvb2xzSW5mbylbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDQ7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSAoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmNyA9IF9zdGVwNC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWY4ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjcsIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2tleTIgPSBfcmVmOFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdmFsdWUyID0gX3JlZjhbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUub3RoZXJbX2tleTJdICE9PSB1bmRlZmluZWQgJiYgdGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLm90aGVyW19rZXkyXSAhPT0gX3ZhbHVlMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlLm90aGVyID0gdGVtcFdoaXRlYm9hcmRWaWV3U3RhdGUub3RoZXIgfHwge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFdoaXRlYm9hcmRWaWV3U3RhdGUub3RoZXJbX2tleTJdID0gX3ZhbHVlMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjQgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgJiYgX2l0ZXJhdG9yNC5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I0LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVtcFdoaXRlYm9hcmRWaWV3U3RhdGUudG9vbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVZpZXdTaG93QW5kSGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVlcEFzc2lnbih0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUsIHRlbXBXaGl0ZWJvYXJkVmlld1N0YXRlKTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLnRvb2wpLmxlbmd0aCAmJiBPYmplY3Qua2V5cyh0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUuYWN0aW9uKS5sZW5ndGggJiYgT2JqZWN0LmtleXModGhpcy53aGl0ZWJvYXJkVmlld1N0YXRlLnpvb20pLmxlbmd0aCAmJiBPYmplY3Qua2V5cyh0aGlzLndoaXRlYm9hcmRWaWV3U3RhdGUucGFnZSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjbWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3U3RhdGU6IHRoaXMud2hpdGVib2FyZFZpZXdTdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZpZXdTdGF0ZTogdGVtcFdoaXRlYm9hcmRWaWV3U3RhdGVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kQWN0aW9uQ29tbWFuZCgndmlld1N0YXRlVXBkYXRlJywgY21kKTsgLy/op4blm77nirbmgIHmm7TmlrBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKuWPkemAgVNob3dQYWdl5L+h5LukKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX3NlbmRTaWduYWxsaW5nX1Nob3dQYWdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kU2lnbmFsbGluZ19TaG93UGFnZSh1cGRhdGVQdWJtc2dEYXRhLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnIHx8IHRoaXMuY29uZmlncmF0aW9uLmhhc0V4dGVuZERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpbGVkYXRhID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5nZXRXaGl0ZWJvYXJkRmlsZWRhdGEodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICB2YXIgcHVibXNnRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5pbnN0YW5jZUlkID09PSAnZGVmYXVsdCcgPyAnU2hvd1BhZ2UnIDogJ0V4dGVuZFNob3dQYWdlJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuaW5zdGFuY2VJZCA9PT0gJ2RlZmF1bHQnID8gJ0RvY3VtZW50RmlsZVBhZ2VfU2hvd1BhZ2UnIDogJ0RvY3VtZW50RmlsZVBhZ2VfRXh0ZW5kU2hvd1BhZ2VfJyArIHRoaXMuaW5zdGFuY2VJZCxcbiAgICAgICAgICAgICAgICAgICAgdG9JRDogJ19fYWxsJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlSW5zdGFuY2VJZDogdGhpcy5pbnN0YW5jZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNHZW5lcmFsRmlsZTogdGhpcy5maWxlVHlwZU1hcmsgPT09ICdnZW5lcmFsRG9jdW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNNZWRpYTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0R5bmFtaWNQUFQ6IHRoaXMuZmlsZVR5cGVNYXJrID09PSAnZHluYW1pY1BQVCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0g1RG9jdW1lbnQ6IHRoaXMuZmlsZVR5cGVNYXJrID09PSAnaDVEb2N1bWVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFUeXBlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVkYXRhOiBmaWxlZGF0YVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzYXZlOiB0cnVlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAodXBkYXRlUHVibXNnRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVlcEFzc2lnbihwdWJtc2dEYXRhLCB1cGRhdGVQdWJtc2dEYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlncmF0aW9uLnN5bmNocm9uaXphdGlvbiAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5pc0Nvbm5lY3RlZFJvb20pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdWJNc2cocHVibXNnRGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socHVibXNnRGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2xvYWRDdXJyZW50RHluYW1pY1BwdCcsXG5cblxuICAgICAgICAvKuWKoOi9veWKqOaAgVBQVCovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfbG9hZEN1cnJlbnREeW5hbWljUHB0KG90aGVyUGFyYW1ldGVycykge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5maWxlVHlwZU1hcmsgIT09ICdkeW5hbWljUFBUJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBmaWxlZGF0YSA9IF9XaGl0ZWJvYXJkSW50ZXJtZWRpYXRlTGF5ZXIyLmRlZmF1bHQuZ2V0V2hpdGVib2FyZEZpbGVkYXRhKHRoaXMuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICB2YXIgZmlsZWlkID0gZmlsZWRhdGEuZmlsZWlkLFxuICAgICAgICAgICAgICAgIHN3ZnBhdGggPSBmaWxlZGF0YS5zd2ZwYXRoLFxuICAgICAgICAgICAgICAgIGlzQ29udGVudERvY3VtZW50ID0gZmlsZWRhdGEuaXNDb250ZW50RG9jdW1lbnQ7XG5cbiAgICAgICAgICAgIHZhciBzcmMgPSAhTnVtYmVyKGlzQ29udGVudERvY3VtZW50KSA/IF9HbG9iYWwyLmRlZmF1bHQubm93VXNlRG9jQWRkcmVzcyArIHN3ZnBhdGggKyAnL25ld3BwdC5odG1sJyA6IHN3ZnBhdGg7XG4gICAgICAgICAgICB2YXIgcGFyYW1ldGVycyA9IHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uczogX0NvbnN0YW50Mi5kZWZhdWx0LmR5bmFtaWNQcHRWZXJzaW9ucyxcbiAgICAgICAgICAgICAgICBmaWxlaWQ6IGZpbGVpZCxcbiAgICAgICAgICAgICAgICBwbGF5YmFjazogdGhpcy5jb25maWdyYXRpb24uaXNQbGF5YmFjayxcbiAgICAgICAgICAgICAgICBjbGFzc2JlZ2luOiB0cnVlLFxuICAgICAgICAgICAgICAgIC8vIGNsYXNzYmVnaW46KCB0aGlzLmNvbmZpZ3JhdGlvbi5zeW5jaHJvbml6YXRpb24gJiYgdGhpcy5jb25maWdyYXRpb24uaXNDb25uZWN0ZWRSb29tICkgLFxuICAgICAgICAgICAgICAgIHB1Ymxpc2hEeW5hbWljUHB0TWVkaWFQZXJtaXNzaW9uX3ZpZGVvOiB0aGlzLmNvbmZpZ3JhdGlvbi5zeW5jaHJvbml6YXRpb24gJiYgdGhpcy5jb25maWdyYXRpb24uaXNDb25uZWN0ZWRSb29tLFxuICAgICAgICAgICAgICAgIHJlbW90ZU5ld3BwdFVwZGF0ZVRpbWU6IF9Db25zdGFudDIuZGVmYXVsdC5yZW1vdGVEeW5hbWljUHB0VXBkYXRlVGltZSxcbiAgICAgICAgICAgICAgICByb2xlOiB0aGlzLmNvbmZpZ3JhdGlvbi5teVJvbGUsXG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdEFjdGlvbkNsaWNrOiB0aGlzLmNvbmZpZ3JhdGlvbi5hY3Rpb25DbGljayAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5pc0Nvbm5lY3RlZFJvb20sXG4gICAgICAgICAgICAgICAgbmV3cHB0UGFnaW5nUGFnZTogdGhpcy5jb25maWdyYXRpb24uY2FuUGFnZSAmJiB0aGlzLmNvbmZpZ3JhdGlvbi5pc0Nvbm5lY3RlZFJvb20sXG4gICAgICAgICAgICAgICAgZHluYW1pY1BwdERlYnVnOiBfQ29uc3RhbnQyLmRlZmF1bHQuZHluYW1pY1BwdERlYnVnTG9nLFxuICAgICAgICAgICAgICAgIFBwdFZvbHVtZVZhbHVlOiB0aGlzLmR5bmFtaWNQcHRWb2x1bWUgLyAxMDAsXG4gICAgICAgICAgICAgICAgZGV2aWNlVHlwZTogdGhpcy5jb25maWdyYXRpb24uZGV2aWNlVHlwZSA9PT0gJ3Bob25lJyA/IDAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgaXNCYWNrRXZlbnQ6IHRoaXMuY29uZmlncmF0aW9uLmlzQmFja0V2ZW50LFxuICAgICAgICAgICAgICAgIGlzQ2xpZW50UGxheUF1ZGlvOiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHRoaXMuZm9yY2VSZWxvYWRUaW1lc3RhbXBGcm9tUHB0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmZvcmNlUmVsb2FkVGltZXN0YW1wID0gdGhpcy5mb3JjZVJlbG9hZFRpbWVzdGFtcEZyb21QcHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5mb3JjZVJlbG9hZE51bWJlckZyb21QcHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuZm9yY2VSZWxvYWROdW1iZXIgPSB0aGlzLmZvcmNlUmVsb2FkTnVtYmVyRnJvbVBwdDtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZvcmNlUmVsb2FkTnVtYmVyID0gdGhpcy5mb3JjZVJlbG9hZE51bWJlckZyb21QcHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3RoZXJQYXJhbWV0ZXJzICYmIF9VdGlsczIuZGVmYXVsdC5pc0pzb24ob3RoZXJQYXJhbWV0ZXJzKSkge1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yOSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I5ID0gT2JqZWN0LmVudHJpZXMob3RoZXJQYXJhbWV0ZXJzKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOTsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOSA9IChfc3RlcDkgPSBfaXRlcmF0b3I5Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb245ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYxNyA9IF9zdGVwOS52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYxOCA9IF9zbGljZWRUb0FycmF5KF9yZWYxNywgMik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfcmVmMThbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmMThbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yOSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yOSA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uOSAmJiBfaXRlcmF0b3I5LnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjkucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5wbGF5YmFjayA9IHRoaXMuY29uZmlncmF0aW9uLmlzUGxheWJhY2s7XG4gICAgICAgICAgICBfRHluYW1pY1BwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnNldER5bmFtaWNQcHRJZnJhbWVTcmModGhpcy5pbnN0YW5jZUlkLCBzcmMsIHBhcmFtZXRlcnMsIGZpbGVkYXRhLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2xvYWRDdXJyZW50SDVEb2N1bWVudCcsXG5cblxuICAgICAgICAvKuWKoOi9veWKqOaAgUg15paH5qGjKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9sb2FkQ3VycmVudEg1RG9jdW1lbnQob3RoZXJQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmZpbGVUeXBlTWFyayAhPT0gJ2g1RG9jdW1lbnQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZpbGVkYXRhID0gX1doaXRlYm9hcmRJbnRlcm1lZGlhdGVMYXllcjIuZGVmYXVsdC5nZXRXaGl0ZWJvYXJkRmlsZWRhdGEodGhpcy5pbnN0YW5jZUlkKTtcbiAgICAgICAgICAgIHZhciBzd2ZwYXRoID0gZmlsZWRhdGEuc3dmcGF0aCxcbiAgICAgICAgICAgICAgICBpc0NvbnRlbnREb2N1bWVudCA9IGZpbGVkYXRhLmlzQ29udGVudERvY3VtZW50O1xuXG4gICAgICAgICAgICB2YXIgc3JjID0gdm9pZCAwO1xuICAgICAgICAgICAgTC5Mb2dnZXIuaW5mbygnRG9jdW1lbnQgc3dmcGF0aO+8micsIHN3ZnBhdGgsICdpc0NvbnRlbnREb2N1bWVudDonLCBpc0NvbnRlbnREb2N1bWVudCk7XG4gICAgICAgICAgICBpZiAoTnVtYmVyKGlzQ29udGVudERvY3VtZW50KSkge1xuICAgICAgICAgICAgICAgIGlmIChzd2ZwYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNyYyA9IHN3ZnBhdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzcmMgPSBfR2xvYmFsMi5kZWZhdWx0Lm5vd1VzZURvY0FkZHJlc3MgKyBzd2ZwYXRoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcGFyYW1ldGVycyA9IHtcbiAgICAgICAgICAgICAgICByb2xlOiB0aGlzLmNvbmZpZ3JhdGlvbi5teVJvbGVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAob3RoZXJQYXJhbWV0ZXJzICYmIF9VdGlsczIuZGVmYXVsdC5pc0pzb24ob3RoZXJQYXJhbWV0ZXJzKSkge1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTAgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjEwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMTAgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IxMCA9IE9iamVjdC5lbnRyaWVzKG90aGVyUGFyYW1ldGVycylbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDEwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xMCA9IChfc3RlcDEwID0gX2l0ZXJhdG9yMTAubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEwID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYxOSA9IF9zdGVwMTAudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMjAgPSBfc2xpY2VkVG9BcnJheShfcmVmMTksIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gX3JlZjIwWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gX3JlZjIwWzFdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjEwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IxMCA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMTAgJiYgX2l0ZXJhdG9yMTAucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMTAucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfSDVEb2N1bWVudFBwdEludGVybWVkaWF0ZUxheWVyMi5kZWZhdWx0LnNldEg1RG9jdW1lbnRJZnJhbWVTcmModGhpcy5pbnN0YW5jZUlkLCBzcmMsIHBhcmFtZXRlcnMsIGZpbGVkYXRhLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBXaGl0ZWJvYXJkVmlldztcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gV2hpdGVib2FyZFZpZXc7Il19
